
tempartureMonitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013f9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b54  08014130  08014130  00024130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014c84  08014c84  00030224  2**0
                  CONTENTS
  4 .ARM          00000008  08014c84  08014c84  00024c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014c8c  08014c8c  00030224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08014c8c  08014c8c  00024c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08014c98  08014c98  00024c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  08014ca4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003010  20000228  08014ec8  00030228  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003238  08014ec8  00033238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003345a  00000000  00000000  00030254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000075f4  00000000  00000000  000636ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026f0  00000000  00000000  0006aca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002418  00000000  00000000  0006d398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030d88  00000000  00000000  0006f7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032e78  00000000  00000000  000a0538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109de8  00000000  00000000  000d33b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001dd198  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b954  00000000  00000000  001dd1e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014114 	.word	0x08014114

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	08014114 	.word	0x08014114

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <_ZN6SDcardC1Ev>:
 *      Author: ADMIN
 */

#include <SDcard.h>

SDcard::SDcard() {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	HAL_Delay(1000);
 8000ed4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ed8:	f002 fdb8 	bl	8003a4c <HAL_Delay>
	_fres = f_mount(&_fatFs, "", 1); //1=mount now
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	490d      	ldr	r1, [pc, #52]	; (8000f18 <_ZN6SDcardC1Ev+0x4c>)
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f00b f9a6 	bl	800c234 <f_mount>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	461a      	mov	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f883 2234 	strb.w	r2, [r3, #564]	; 0x234
	if (_fres != FR_OK) {
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f893 3234 	ldrb.w	r3, [r3, #564]	; 0x234
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d007      	beq.n	8000f0c <_ZN6SDcardC1Ev+0x40>
		printf("f_mount error (%i)\r\n", _fres);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f893 3234 	ldrb.w	r3, [r3, #564]	; 0x234
 8000f02:	4619      	mov	r1, r3
 8000f04:	4805      	ldr	r0, [pc, #20]	; (8000f1c <_ZN6SDcardC1Ev+0x50>)
 8000f06:	f010 f9d1 	bl	80112ac <iprintf>
		return;
 8000f0a:	bf00      	nop
	}
}
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	08014130 	.word	0x08014130
 8000f1c:	08014134 	.word	0x08014134

08000f20 <_ZN6ButtonC1EP12GPIO_TypeDeft>:
#include "cmsis_os.h"

extern Buzzer buzzer;
extern osSemaphoreId_t stopBuzzerHandle;

Button::Button(GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin)
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	80fb      	strh	r3, [r7, #6]
{
	_GPIOx = GPIOx;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	68ba      	ldr	r2, [r7, #8]
 8000f32:	60da      	str	r2, [r3, #12]
	_GPIO_Pin = GPIO_Pin;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	88fa      	ldrh	r2, [r7, #6]
 8000f38:	821a      	strh	r2, [r3, #16]
	_state = BUTTON_STATE_NONE;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
}
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4618      	mov	r0, r3
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <_ZN6Button9interruptEv>:

void Button::interrupt()
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(_GPIOx, _GPIO_Pin) == 0){
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68da      	ldr	r2, [r3, #12]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	8a1b      	ldrh	r3, [r3, #16]
 8000f60:	4619      	mov	r1, r3
 8000f62:	4610      	mov	r0, r2
 8000f64:	f003 fc72 	bl	800484c <HAL_GPIO_ReadPin>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	bf0c      	ite	eq
 8000f6e:	2301      	moveq	r3, #1
 8000f70:	2300      	movne	r3, #0
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d005      	beq.n	8000f84 <_ZN6Button9interruptEv+0x34>
		_timeTickOn = HAL_GetTick();
 8000f78:	f002 fd5c 	bl	8003a34 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	605a      	str	r2, [r3, #4]
		else{
			_state = BUTTON_STATE_PRESS;
		}
		osSemaphoreRelease(stopBuzzerHandle);
	}
}
 8000f82:	e028      	b.n	8000fd6 <_ZN6Button9interruptEv+0x86>
	else if(HAL_GPIO_ReadPin(_GPIOx, _GPIO_Pin) == 1){
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68da      	ldr	r2, [r3, #12]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	8a1b      	ldrh	r3, [r3, #16]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4610      	mov	r0, r2
 8000f90:	f003 fc5c 	bl	800484c <HAL_GPIO_ReadPin>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	bf0c      	ite	eq
 8000f9a:	2301      	moveq	r3, #1
 8000f9c:	2300      	movne	r3, #0
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d018      	beq.n	8000fd6 <_ZN6Button9interruptEv+0x86>
		_timeTickOff = HAL_GetTick();
 8000fa4:	f002 fd46 	bl	8003a34 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	609a      	str	r2, [r3, #8]
		if((_timeTickOff - _timeTickOn) > 500){
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fbc:	d903      	bls.n	8000fc6 <_ZN6Button9interruptEv+0x76>
			_state = BUTTON_LONG_PRESS;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	701a      	strb	r2, [r3, #0]
 8000fc4:	e002      	b.n	8000fcc <_ZN6Button9interruptEv+0x7c>
			_state = BUTTON_STATE_PRESS;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	701a      	strb	r2, [r3, #0]
		osSemaphoreRelease(stopBuzzerHandle);
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <_ZN6Button9interruptEv+0x90>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f00c fa35 	bl	800d440 <osSemaphoreRelease>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000d10 	.word	0x20000d10

08000fe4 <StartButtonTak>:

extern "C" void StartButtonTak()
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StartbuttonTak */
  /* Infinite loop */
  while(1)
  {
	osSemaphoreAcquire(stopBuzzerHandle,osWaitForever);
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <StartButtonTak+0x20>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f00c f9d3 	bl	800d39c <osSemaphoreAcquire>
	buzzer.off();
 8000ff6:	4804      	ldr	r0, [pc, #16]	; (8001008 <StartButtonTak+0x24>)
 8000ff8:	f000 f81e 	bl	8001038 <_ZN6Buzzer3offEv>
    osDelay(1);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f00c f8fb 	bl	800d1f8 <osDelay>
	osSemaphoreAcquire(stopBuzzerHandle,osWaitForever);
 8001002:	e7f1      	b.n	8000fe8 <StartButtonTak+0x4>
 8001004:	20000d10 	.word	0x20000d10
 8001008:	20000304 	.word	0x20000304

0800100c <_ZN6Buzzer2onEv>:
 *      Author: student
 */

#include <Buzzer.h>

void Buzzer::on(){
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	_state = MUSIC_ON;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(_timer);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	4618      	mov	r0, r3
 8001020:	f006 fa94 	bl	800754c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(_timer, TIM_CHANNEL_1);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f006 fb84 	bl	8007738 <HAL_TIM_PWM_Start_IT>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <_ZN6Buzzer3offEv>:

void Buzzer::off(){
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	_state = MUSIC_OFF;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2201      	movs	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(_timer);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	4618      	mov	r0, r3
 800104c:	f006 faee 	bl	800762c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop_IT(_timer, TIM_CHANNEL_1);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f006 fcc2 	bl	80079e0 <HAL_TIM_PWM_Stop_IT>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <_ZN10CliCommandC1EPKc>:
private:
	//enum ma{MAX_NAME_LEN=20};
	char _name[MAX_NAME_LEN];
public:
	CliCommand(){}
	CliCommand(const char* name){
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	4a07      	ldr	r2, [pc, #28]	; (800108c <_ZN10CliCommandC1EPKc+0x28>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	601a      	str	r2, [r3, #0]
		strcpy(_name, name);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3304      	adds	r3, #4
 8001078:	6839      	ldr	r1, [r7, #0]
 800107a:	4618      	mov	r0, r3
 800107c:	f010 fa89 	bl	8011592 <strcpy>
	}
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	08014654 	.word	0x08014654

08001090 <_ZN10CliCommandD1Ev>:
	virtual void doCommand(const char* param) = 0;
	virtual ~CliCommand(){}
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	4a04      	ldr	r2, [pc, #16]	; (80010ac <_ZN10CliCommandD1Ev+0x1c>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	08014654 	.word	0x08014654

080010b0 <_ZN10CliCommandD0Ev>:
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff ffe9 	bl	8001090 <_ZN10CliCommandD1Ev>
 80010be:	2118      	movs	r1, #24
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f00f fb1b 	bl	80106fc <_ZdlPvj>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <_ZN8LedOnCmdC1EPKcP3Led>:
extern File warningFile;

class LedOnCmd : public CliCommand {
	Led *_led;
public:
	LedOnCmd (const char * name, Led * led) : CliCommand(name), _led(led) {}
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	68b9      	ldr	r1, [r7, #8]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ffbf 	bl	8001064 <_ZN10CliCommandC1EPKc>
 80010e6:	4a05      	ldr	r2, [pc, #20]	; (80010fc <_ZN8LedOnCmdC1EPKcP3Led+0x2c>)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	619a      	str	r2, [r3, #24]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	08014640 	.word	0x08014640

08001100 <_ZN8LedOnCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
		_led->on();
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	4618      	mov	r0, r3
 8001110:	f001 fa0f 	bl	8002532 <_ZN3Led2onEv>
	}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <_ZN9LedOffCmdC1EPKcP3Led>:
};

class LedOffCmd : public CliCommand {
	Led *_led;
public:
	LedOffCmd (const char * name, Led * led) : CliCommand(name), _led(led) {}
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	68b9      	ldr	r1, [r7, #8]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff99 	bl	8001064 <_ZN10CliCommandC1EPKc>
 8001132:	4a05      	ldr	r2, [pc, #20]	; (8001148 <_ZN9LedOffCmdC1EPKcP3Led+0x2c>)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	619a      	str	r2, [r3, #24]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	0801462c 	.word	0x0801462c

0800114c <_ZN9LedOffCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
		_led->off();
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	4618      	mov	r0, r3
 800115c:	f001 f9fc 	bl	8002558 <_ZN3Led3offEv>
	}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <_ZN11LedBlinkCmdC1EPKcP3Led>:
};

class LedBlinkCmd : public CliCommand {
	Led *_led;
public:
	LedBlinkCmd (const char * name, Led * led) : CliCommand(name), _led(led) {}
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	68b9      	ldr	r1, [r7, #8]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff73 	bl	8001064 <_ZN10CliCommandC1EPKc>
 800117e:	4a05      	ldr	r2, [pc, #20]	; (8001194 <_ZN11LedBlinkCmdC1EPKcP3Led+0x2c>)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	619a      	str	r2, [r3, #24]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4618      	mov	r0, r3
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	08014618 	.word	0x08014618

08001198 <_ZN11LedBlinkCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
		_led->blink();
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f001 f9e9 	bl	800257e <_ZN3Led5blinkEv>
	}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <_ZN11BuzzerOnCmdC1EPKcP6Buzzer>:
};

class BuzzerOnCmd : public CliCommand {
	Buzzer *_buzzer;
public:
	BuzzerOnCmd (const char * name, Buzzer* buzzer) : CliCommand(name), _buzzer(buzzer) {}
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	68b9      	ldr	r1, [r7, #8]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff4d 	bl	8001064 <_ZN10CliCommandC1EPKc>
 80011ca:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <_ZN11BuzzerOnCmdC1EPKcP6Buzzer+0x2c>)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	619a      	str	r2, [r3, #24]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	08014604 	.word	0x08014604

080011e4 <_ZN11BuzzerOnCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
		_buzzer->on();
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff0a 	bl	800100c <_ZN6Buzzer2onEv>
	}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <_ZN12BuzzerOffCmdC1EPKcP6Buzzer>:
};

class BuzzerOffCmd : public CliCommand {
	Buzzer *_buzzer;
public:
	BuzzerOffCmd (const char * name, Buzzer* buzzer) : CliCommand(name), _buzzer(buzzer) {}
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	68b9      	ldr	r1, [r7, #8]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff27 	bl	8001064 <_ZN10CliCommandC1EPKc>
 8001216:	4a05      	ldr	r2, [pc, #20]	; (800122c <_ZN12BuzzerOffCmdC1EPKcP6Buzzer+0x2c>)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	619a      	str	r2, [r3, #24]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4618      	mov	r0, r3
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	080145f0 	.word	0x080145f0

08001230 <_ZN12BuzzerOffCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
		_buzzer->off();
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fefa 	bl	8001038 <_ZN6Buzzer3offEv>
	}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <_ZN14getDataTimeCmdC1EPKcP3Rtc>:
};

class getDataTimeCmd : public CliCommand {
	Rtc *_rtc;
public:
	getDataTimeCmd (const char * name, Rtc* rtc) : CliCommand(name), _rtc(rtc) {}
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	68b9      	ldr	r1, [r7, #8]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff01 	bl	8001064 <_ZN10CliCommandC1EPKc>
 8001262:	4a05      	ldr	r2, [pc, #20]	; (8001278 <_ZN14getDataTimeCmdC1EPKcP3Rtc+0x2c>)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	619a      	str	r2, [r3, #24]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	4618      	mov	r0, r3
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	080145dc 	.word	0x080145dc

0800127c <_ZN14getDataTimeCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 800127c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800127e:	b087      	sub	sp, #28
 8001280:	af04      	add	r7, sp, #16
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
		_rtc->getTime(&dateTime);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	4910      	ldr	r1, [pc, #64]	; (80012cc <_ZN14getDataTimeCmd9doCommandEPKc+0x50>)
 800128c:	4618      	mov	r0, r3
 800128e:	f001 fccf 	bl	8002c30 <_ZN3Rtc7getTimeEP8DateTime>
		printf("%02d:%02d:%02d-%d-%02d/%02d/%02d\r\n",
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <_ZN14getDataTimeCmd9doCommandEPKc+0x50>)
 8001294:	689c      	ldr	r4, [r3, #8]
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <_ZN14getDataTimeCmd9doCommandEPKc+0x50>)
 8001298:	685d      	ldr	r5, [r3, #4]
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <_ZN14getDataTimeCmd9doCommandEPKc+0x50>)
 800129c:	681e      	ldr	r6, [r3, #0]
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <_ZN14getDataTimeCmd9doCommandEPKc+0x50>)
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <_ZN14getDataTimeCmd9doCommandEPKc+0x50>)
 80012a4:	6912      	ldr	r2, [r2, #16]
 80012a6:	4909      	ldr	r1, [pc, #36]	; (80012cc <_ZN14getDataTimeCmd9doCommandEPKc+0x50>)
 80012a8:	6949      	ldr	r1, [r1, #20]
 80012aa:	4808      	ldr	r0, [pc, #32]	; (80012cc <_ZN14getDataTimeCmd9doCommandEPKc+0x50>)
 80012ac:	6980      	ldr	r0, [r0, #24]
 80012ae:	9003      	str	r0, [sp, #12]
 80012b0:	9102      	str	r1, [sp, #8]
 80012b2:	9201      	str	r2, [sp, #4]
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	4633      	mov	r3, r6
 80012b8:	462a      	mov	r2, r5
 80012ba:	4621      	mov	r1, r4
 80012bc:	4804      	ldr	r0, [pc, #16]	; (80012d0 <_ZN14getDataTimeCmd9doCommandEPKc+0x54>)
 80012be:	f00f fff5 	bl	80112ac <iprintf>
						dateTime.hours, dateTime.min, dateTime.sec,
						dateTime.weekDay,
						dateTime.day, dateTime.month, dateTime.year);
	}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000374 	.word	0x20000374
 80012d0:	0801414c 	.word	0x0801414c

080012d4 <_ZN14setDataTimeCmdC1EPKcP3Rtc>:
};

class setDataTimeCmd : public CliCommand {
	Rtc *_rtc;
public:
	setDataTimeCmd (const char * name, Rtc* rtc) : CliCommand(name), _rtc(rtc) {}
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	68b9      	ldr	r1, [r7, #8]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff febd 	bl	8001064 <_ZN10CliCommandC1EPKc>
 80012ea:	4a05      	ldr	r2, [pc, #20]	; (8001300 <_ZN14setDataTimeCmdC1EPKcP3Rtc+0x2c>)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	619a      	str	r2, [r3, #24]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4618      	mov	r0, r3
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	080145c8 	.word	0x080145c8

08001304 <_ZN14setDataTimeCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
		const char s[2] = ":";
 800130e:	233a      	movs	r3, #58	; 0x3a
 8001310:	813b      	strh	r3, [r7, #8]
		char* date= (char*) param;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	60fb      	str	r3, [r7, #12]
		//day:month:year:hours:min:sec
		//"01:01:22:12:12:12"
		dateTime.day = atoi(strtok(date, s));
 8001316:	f107 0308 	add.w	r3, r7, #8
 800131a:	4619      	mov	r1, r3
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	f010 f941 	bl	80115a4 <strtok>
 8001322:	4603      	mov	r3, r0
 8001324:	4618      	mov	r0, r3
 8001326:	f00f fa22 	bl	801076e <atoi>
 800132a:	4603      	mov	r3, r0
 800132c:	4a26      	ldr	r2, [pc, #152]	; (80013c8 <_ZN14setDataTimeCmd9doCommandEPKc+0xc4>)
 800132e:	6113      	str	r3, [r2, #16]
		dateTime.month = atoi(strtok(NULL, s));
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	4619      	mov	r1, r3
 8001336:	2000      	movs	r0, #0
 8001338:	f010 f934 	bl	80115a4 <strtok>
 800133c:	4603      	mov	r3, r0
 800133e:	4618      	mov	r0, r3
 8001340:	f00f fa15 	bl	801076e <atoi>
 8001344:	4603      	mov	r3, r0
 8001346:	4a20      	ldr	r2, [pc, #128]	; (80013c8 <_ZN14setDataTimeCmd9doCommandEPKc+0xc4>)
 8001348:	6153      	str	r3, [r2, #20]
		dateTime.year = atoi(strtok(NULL, s));
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	4619      	mov	r1, r3
 8001350:	2000      	movs	r0, #0
 8001352:	f010 f927 	bl	80115a4 <strtok>
 8001356:	4603      	mov	r3, r0
 8001358:	4618      	mov	r0, r3
 800135a:	f00f fa08 	bl	801076e <atoi>
 800135e:	4603      	mov	r3, r0
 8001360:	4a19      	ldr	r2, [pc, #100]	; (80013c8 <_ZN14setDataTimeCmd9doCommandEPKc+0xc4>)
 8001362:	6193      	str	r3, [r2, #24]
		dateTime.hours = atoi(strtok(NULL, s));
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	4619      	mov	r1, r3
 800136a:	2000      	movs	r0, #0
 800136c:	f010 f91a 	bl	80115a4 <strtok>
 8001370:	4603      	mov	r3, r0
 8001372:	4618      	mov	r0, r3
 8001374:	f00f f9fb 	bl	801076e <atoi>
 8001378:	4603      	mov	r3, r0
 800137a:	4a13      	ldr	r2, [pc, #76]	; (80013c8 <_ZN14setDataTimeCmd9doCommandEPKc+0xc4>)
 800137c:	6093      	str	r3, [r2, #8]
		dateTime.min = atoi(strtok(NULL, s));
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	4619      	mov	r1, r3
 8001384:	2000      	movs	r0, #0
 8001386:	f010 f90d 	bl	80115a4 <strtok>
 800138a:	4603      	mov	r3, r0
 800138c:	4618      	mov	r0, r3
 800138e:	f00f f9ee 	bl	801076e <atoi>
 8001392:	4603      	mov	r3, r0
 8001394:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <_ZN14setDataTimeCmd9doCommandEPKc+0xc4>)
 8001396:	6053      	str	r3, [r2, #4]
		dateTime.sec = atoi(strtok(NULL, s));
 8001398:	f107 0308 	add.w	r3, r7, #8
 800139c:	4619      	mov	r1, r3
 800139e:	2000      	movs	r0, #0
 80013a0:	f010 f900 	bl	80115a4 <strtok>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f00f f9e1 	bl	801076e <atoi>
 80013ac:	4603      	mov	r3, r0
 80013ae:	4a06      	ldr	r2, [pc, #24]	; (80013c8 <_ZN14setDataTimeCmd9doCommandEPKc+0xc4>)
 80013b0:	6013      	str	r3, [r2, #0]
		_rtc->setTime(&dateTime);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	4904      	ldr	r1, [pc, #16]	; (80013c8 <_ZN14setDataTimeCmd9doCommandEPKc+0xc4>)
 80013b8:	4618      	mov	r0, r3
 80013ba:	f001 fc95 	bl	8002ce8 <_ZN3Rtc7setTimeEP8DateTime>
	}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000374 	.word	0x20000374

080013cc <_ZN18setCriticalTempCmdC1EPKcP5Flash>:

class setCriticalTempCmd : public CliCommand {
	Flash* _flash;

public:
	setCriticalTempCmd (const char * name, Flash* flash) : CliCommand(name), _flash(flash) {}
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	68b9      	ldr	r1, [r7, #8]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fe41 	bl	8001064 <_ZN10CliCommandC1EPKc>
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <_ZN18setCriticalTempCmdC1EPKcP5Flash+0x2c>)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	619a      	str	r2, [r3, #24]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4618      	mov	r0, r3
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	080145b4 	.word	0x080145b4

080013fc <_ZN18setCriticalTempCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
		uint16_t val;
		val = atoi(param);
 8001406:	6838      	ldr	r0, [r7, #0]
 8001408:	f00f f9b1 	bl	801076e <atoi>
 800140c:	4603      	mov	r3, r0
 800140e:	81fb      	strh	r3, [r7, #14]
		if(Temprature.warningTemp > val){
 8001410:	4b0a      	ldr	r3, [pc, #40]	; (800143c <_ZN18setCriticalTempCmd9doCommandEPKc+0x40>)
 8001412:	885b      	ldrh	r3, [r3, #2]
 8001414:	89fa      	ldrh	r2, [r7, #14]
 8001416:	429a      	cmp	r2, r3
 8001418:	d203      	bcs.n	8001422 <_ZN18setCriticalTempCmd9doCommandEPKc+0x26>
			printf("A critical temperature cannot be more then warning temperature\r\n");
 800141a:	4809      	ldr	r0, [pc, #36]	; (8001440 <_ZN18setCriticalTempCmd9doCommandEPKc+0x44>)
 800141c:	f00f ffcc 	bl	80113b8 <puts>
			return;
 8001420:	e008      	b.n	8001434 <_ZN18setCriticalTempCmd9doCommandEPKc+0x38>
		}
		Temprature.criticalTemp = val;
 8001422:	4a06      	ldr	r2, [pc, #24]	; (800143c <_ZN18setCriticalTempCmd9doCommandEPKc+0x40>)
 8001424:	89fb      	ldrh	r3, [r7, #14]
 8001426:	8013      	strh	r3, [r2, #0]
		_flash->writh(&Temprature);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	4903      	ldr	r1, [pc, #12]	; (800143c <_ZN18setCriticalTempCmd9doCommandEPKc+0x40>)
 800142e:	4618      	mov	r0, r3
 8001430:	f000 fff6 	bl	8002420 <_ZN5Flash5writhEPv>
	}
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000000 	.word	0x20000000
 8001440:	08014170 	.word	0x08014170

08001444 <_ZN17setWarningTempCmdC1EPKcP5Flash>:

class setWarningTempCmd : public CliCommand {
	Flash* _flash;

public:
	setWarningTempCmd (const char * name, Flash* flash) : CliCommand(name), _flash(flash) {}
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	68b9      	ldr	r1, [r7, #8]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fe05 	bl	8001064 <_ZN10CliCommandC1EPKc>
 800145a:	4a05      	ldr	r2, [pc, #20]	; (8001470 <_ZN17setWarningTempCmdC1EPKcP5Flash+0x2c>)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	619a      	str	r2, [r3, #24]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	080145a0 	.word	0x080145a0

08001474 <_ZN17setWarningTempCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
		uint16_t val;
		val = atoi(param);
 800147e:	6838      	ldr	r0, [r7, #0]
 8001480:	f00f f975 	bl	801076e <atoi>
 8001484:	4603      	mov	r3, r0
 8001486:	81fb      	strh	r3, [r7, #14]
		if(Temprature.criticalTemp < val){
 8001488:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <_ZN17setWarningTempCmd9doCommandEPKc+0x40>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	89fa      	ldrh	r2, [r7, #14]
 800148e:	429a      	cmp	r2, r3
 8001490:	d903      	bls.n	800149a <_ZN17setWarningTempCmd9doCommandEPKc+0x26>
			printf("A warning temperature cannot be less then warning temperature\r\n");
 8001492:	4809      	ldr	r0, [pc, #36]	; (80014b8 <_ZN17setWarningTempCmd9doCommandEPKc+0x44>)
 8001494:	f00f ff90 	bl	80113b8 <puts>
			return;
 8001498:	e008      	b.n	80014ac <_ZN17setWarningTempCmd9doCommandEPKc+0x38>
		}
		Temprature.warningTemp = val;
 800149a:	4a06      	ldr	r2, [pc, #24]	; (80014b4 <_ZN17setWarningTempCmd9doCommandEPKc+0x40>)
 800149c:	89fb      	ldrh	r3, [r7, #14]
 800149e:	8053      	strh	r3, [r2, #2]
		_flash->writh(&Temprature);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	4903      	ldr	r1, [pc, #12]	; (80014b4 <_ZN17setWarningTempCmd9doCommandEPKc+0x40>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 ffba 	bl	8002420 <_ZN5Flash5writhEPv>
	}
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000000 	.word	0x20000000
 80014b8:	080141b0 	.word	0x080141b0

080014bc <_ZN18getCriticalTempCmdC1EPKcP5Flash>:

class getCriticalTempCmd : public CliCommand {
	Flash* _flash;

public:
	getCriticalTempCmd (const char * name, Flash* flash) : CliCommand(name), _flash(flash) {}
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	68b9      	ldr	r1, [r7, #8]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fdc9 	bl	8001064 <_ZN10CliCommandC1EPKc>
 80014d2:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <_ZN18getCriticalTempCmdC1EPKcP5Flash+0x2c>)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	619a      	str	r2, [r3, #24]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4618      	mov	r0, r3
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	0801458c 	.word	0x0801458c

080014ec <_ZN18getCriticalTempCmd9doCommandEPKc>:
	void doCommand(const char* param) override
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
	{
		_flash->read();
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 ffc2 	bl	8002484 <_ZN5Flash4readEv>
		printf("Critical temperature = %d\r\nWarning temperature = %d\r\n" ,Temprature.criticalTemp , Temprature.warningTemp);
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <_ZN18getCriticalTempCmd9doCommandEPKc+0x30>)
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	4b05      	ldr	r3, [pc, #20]	; (800151c <_ZN18getCriticalTempCmd9doCommandEPKc+0x30>)
 8001508:	885b      	ldrh	r3, [r3, #2]
 800150a:	461a      	mov	r2, r3
 800150c:	4804      	ldr	r0, [pc, #16]	; (8001520 <_ZN18getCriticalTempCmd9doCommandEPKc+0x34>)
 800150e:	f00f fecd 	bl	80112ac <iprintf>
	}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000000 	.word	0x20000000
 8001520:	080141f0 	.word	0x080141f0

08001524 <_ZN12clearFileCmdC1EPKcP4File>:

class clearFileCmd : public CliCommand {
	File* _file;

public:
	clearFileCmd (const char * name, File* file) : CliCommand(name), _file(file) {}
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	68b9      	ldr	r1, [r7, #8]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fd95 	bl	8001064 <_ZN10CliCommandC1EPKc>
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <_ZN12clearFileCmdC1EPKcP4File+0x2c>)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	619a      	str	r2, [r3, #24]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	4618      	mov	r0, r3
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	08014578 	.word	0x08014578

08001554 <_ZN12clearFileCmd9doCommandEPKc>:
	void doCommand(const char* param) override
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
	{
		_file->clear();
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	4618      	mov	r0, r3
 8001564:	f000 ff18 	bl	8002398 <_ZN4File5clearEv>
	}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <_ZN12printFileCmdC1EPKcP4File>:

class printFileCmd : public CliCommand {
	File* _file;

public:
	printFileCmd (const char * name, File* file) : CliCommand(name), _file(file) {}
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	68b9      	ldr	r1, [r7, #8]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fd6f 	bl	8001064 <_ZN10CliCommandC1EPKc>
 8001586:	4a05      	ldr	r2, [pc, #20]	; (800159c <_ZN12printFileCmdC1EPKcP4File+0x2c>)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	619a      	str	r2, [r3, #24]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	08014564 	.word	0x08014564

080015a0 <_ZN12printFileCmd9doCommandEPKc>:
	void doCommand(const char* param) override
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
	{
		_file->read();
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 fe2e 	bl	8002210 <_ZN4File4readEv>
	}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <_ZN7helpCmdC1EPKc>:
};

class helpCmd : public CliCommand {

public:
	helpCmd (const char * name) : CliCommand(name) {}
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6839      	ldr	r1, [r7, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fd4a 	bl	8001064 <_ZN10CliCommandC1EPKc>
 80015d0:	4a03      	ldr	r2, [pc, #12]	; (80015e0 <_ZN7helpCmdC1EPKc+0x24>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	08014550 	.word	0x08014550

080015e4 <_ZN7helpCmd9doCommandEPKc>:
	void doCommand(const char* param) override
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
	{
		printf("1. help\r\n"
 80015ee:	4803      	ldr	r0, [pc, #12]	; (80015fc <_ZN7helpCmd9doCommandEPKc+0x18>)
 80015f0:	f00f fee2 	bl	80113b8 <puts>
				"4.setCritical param\r\n"
				"5.setWarning param\r\n"
		        "6.clearLog\r\n"
				"7.printLog\r\n"
				"8.printLog\r\n");
	}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	08014228 	.word	0x08014228

08001600 <_Z7CliInitv>:
};



void CliInit()
{
 8001600:	b598      	push	{r3, r4, r7, lr}
 8001602:	af00      	add	r7, sp, #0
	//////////////////ledB//////////////////////////////
	CliContainer.add (new LedOnCmd("ledOn", &ledB));
 8001604:	201c      	movs	r0, #28
 8001606:	f00f f87b 	bl	8010700 <_Znwj>
 800160a:	4603      	mov	r3, r0
 800160c:	461c      	mov	r4, r3
 800160e:	4a59      	ldr	r2, [pc, #356]	; (8001774 <_Z7CliInitv+0x174>)
 8001610:	4959      	ldr	r1, [pc, #356]	; (8001778 <_Z7CliInitv+0x178>)
 8001612:	4620      	mov	r0, r4
 8001614:	f7ff fd5c 	bl	80010d0 <_ZN8LedOnCmdC1EPKcP3Led>
 8001618:	4621      	mov	r1, r4
 800161a:	4858      	ldr	r0, [pc, #352]	; (800177c <_Z7CliInitv+0x17c>)
 800161c:	f000 facb 	bl	8001bb6 <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new LedOffCmd("ledOff", &ledB));
 8001620:	201c      	movs	r0, #28
 8001622:	f00f f86d 	bl	8010700 <_Znwj>
 8001626:	4603      	mov	r3, r0
 8001628:	461c      	mov	r4, r3
 800162a:	4a52      	ldr	r2, [pc, #328]	; (8001774 <_Z7CliInitv+0x174>)
 800162c:	4954      	ldr	r1, [pc, #336]	; (8001780 <_Z7CliInitv+0x180>)
 800162e:	4620      	mov	r0, r4
 8001630:	f7ff fd74 	bl	800111c <_ZN9LedOffCmdC1EPKcP3Led>
 8001634:	4621      	mov	r1, r4
 8001636:	4851      	ldr	r0, [pc, #324]	; (800177c <_Z7CliInitv+0x17c>)
 8001638:	f000 fabd 	bl	8001bb6 <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new LedBlinkCmd("ledBlink", &ledB));
 800163c:	201c      	movs	r0, #28
 800163e:	f00f f85f 	bl	8010700 <_Znwj>
 8001642:	4603      	mov	r3, r0
 8001644:	461c      	mov	r4, r3
 8001646:	4a4b      	ldr	r2, [pc, #300]	; (8001774 <_Z7CliInitv+0x174>)
 8001648:	494e      	ldr	r1, [pc, #312]	; (8001784 <_Z7CliInitv+0x184>)
 800164a:	4620      	mov	r0, r4
 800164c:	f7ff fd8c 	bl	8001168 <_ZN11LedBlinkCmdC1EPKcP3Led>
 8001650:	4621      	mov	r1, r4
 8001652:	484a      	ldr	r0, [pc, #296]	; (800177c <_Z7CliInitv+0x17c>)
 8001654:	f000 faaf 	bl	8001bb6 <_ZN12CliContainer3addEP10CliCommand>
	////////////////////buzzer///////////////////////////
	CliContainer.add (new BuzzerOnCmd("BOn", &buzzer));
 8001658:	201c      	movs	r0, #28
 800165a:	f00f f851 	bl	8010700 <_Znwj>
 800165e:	4603      	mov	r3, r0
 8001660:	461c      	mov	r4, r3
 8001662:	4a49      	ldr	r2, [pc, #292]	; (8001788 <_Z7CliInitv+0x188>)
 8001664:	4949      	ldr	r1, [pc, #292]	; (800178c <_Z7CliInitv+0x18c>)
 8001666:	4620      	mov	r0, r4
 8001668:	f7ff fda4 	bl	80011b4 <_ZN11BuzzerOnCmdC1EPKcP6Buzzer>
 800166c:	4621      	mov	r1, r4
 800166e:	4843      	ldr	r0, [pc, #268]	; (800177c <_Z7CliInitv+0x17c>)
 8001670:	f000 faa1 	bl	8001bb6 <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new BuzzerOffCmd("BOff", &buzzer));
 8001674:	201c      	movs	r0, #28
 8001676:	f00f f843 	bl	8010700 <_Znwj>
 800167a:	4603      	mov	r3, r0
 800167c:	461c      	mov	r4, r3
 800167e:	4a42      	ldr	r2, [pc, #264]	; (8001788 <_Z7CliInitv+0x188>)
 8001680:	4943      	ldr	r1, [pc, #268]	; (8001790 <_Z7CliInitv+0x190>)
 8001682:	4620      	mov	r0, r4
 8001684:	f7ff fdbc 	bl	8001200 <_ZN12BuzzerOffCmdC1EPKcP6Buzzer>
 8001688:	4621      	mov	r1, r4
 800168a:	483c      	ldr	r0, [pc, #240]	; (800177c <_Z7CliInitv+0x17c>)
 800168c:	f000 fa93 	bl	8001bb6 <_ZN12CliContainer3addEP10CliCommand>

	/////////////////////RTC//////////////////////////
	CliContainer.add (new getDataTimeCmd("getTime", &rtc));
 8001690:	201c      	movs	r0, #28
 8001692:	f00f f835 	bl	8010700 <_Znwj>
 8001696:	4603      	mov	r3, r0
 8001698:	461c      	mov	r4, r3
 800169a:	4a3e      	ldr	r2, [pc, #248]	; (8001794 <_Z7CliInitv+0x194>)
 800169c:	493e      	ldr	r1, [pc, #248]	; (8001798 <_Z7CliInitv+0x198>)
 800169e:	4620      	mov	r0, r4
 80016a0:	f7ff fdd4 	bl	800124c <_ZN14getDataTimeCmdC1EPKcP3Rtc>
 80016a4:	4621      	mov	r1, r4
 80016a6:	4835      	ldr	r0, [pc, #212]	; (800177c <_Z7CliInitv+0x17c>)
 80016a8:	f000 fa85 	bl	8001bb6 <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new setDataTimeCmd("setTime", &rtc));
 80016ac:	201c      	movs	r0, #28
 80016ae:	f00f f827 	bl	8010700 <_Znwj>
 80016b2:	4603      	mov	r3, r0
 80016b4:	461c      	mov	r4, r3
 80016b6:	4a37      	ldr	r2, [pc, #220]	; (8001794 <_Z7CliInitv+0x194>)
 80016b8:	4938      	ldr	r1, [pc, #224]	; (800179c <_Z7CliInitv+0x19c>)
 80016ba:	4620      	mov	r0, r4
 80016bc:	f7ff fe0a 	bl	80012d4 <_ZN14setDataTimeCmdC1EPKcP3Rtc>
 80016c0:	4621      	mov	r1, r4
 80016c2:	482e      	ldr	r0, [pc, #184]	; (800177c <_Z7CliInitv+0x17c>)
 80016c4:	f000 fa77 	bl	8001bb6 <_ZN12CliContainer3addEP10CliCommand>

	////////////////////flash/////////////////////////
	CliContainer.add (new setCriticalTempCmd("setCritical", &flash));
 80016c8:	201c      	movs	r0, #28
 80016ca:	f00f f819 	bl	8010700 <_Znwj>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461c      	mov	r4, r3
 80016d2:	4a33      	ldr	r2, [pc, #204]	; (80017a0 <_Z7CliInitv+0x1a0>)
 80016d4:	4933      	ldr	r1, [pc, #204]	; (80017a4 <_Z7CliInitv+0x1a4>)
 80016d6:	4620      	mov	r0, r4
 80016d8:	f7ff fe78 	bl	80013cc <_ZN18setCriticalTempCmdC1EPKcP5Flash>
 80016dc:	4621      	mov	r1, r4
 80016de:	4827      	ldr	r0, [pc, #156]	; (800177c <_Z7CliInitv+0x17c>)
 80016e0:	f000 fa69 	bl	8001bb6 <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new setWarningTempCmd("setWarning", &flash));
 80016e4:	201c      	movs	r0, #28
 80016e6:	f00f f80b 	bl	8010700 <_Znwj>
 80016ea:	4603      	mov	r3, r0
 80016ec:	461c      	mov	r4, r3
 80016ee:	4a2c      	ldr	r2, [pc, #176]	; (80017a0 <_Z7CliInitv+0x1a0>)
 80016f0:	492d      	ldr	r1, [pc, #180]	; (80017a8 <_Z7CliInitv+0x1a8>)
 80016f2:	4620      	mov	r0, r4
 80016f4:	f7ff fea6 	bl	8001444 <_ZN17setWarningTempCmdC1EPKcP5Flash>
 80016f8:	4621      	mov	r1, r4
 80016fa:	4820      	ldr	r0, [pc, #128]	; (800177c <_Z7CliInitv+0x17c>)
 80016fc:	f000 fa5b 	bl	8001bb6 <_ZN12CliContainer3addEP10CliCommand>

	CliContainer.add (new getCriticalTempCmd("getCritical", &flash));
 8001700:	201c      	movs	r0, #28
 8001702:	f00e fffd 	bl	8010700 <_Znwj>
 8001706:	4603      	mov	r3, r0
 8001708:	461c      	mov	r4, r3
 800170a:	4a25      	ldr	r2, [pc, #148]	; (80017a0 <_Z7CliInitv+0x1a0>)
 800170c:	4927      	ldr	r1, [pc, #156]	; (80017ac <_Z7CliInitv+0x1ac>)
 800170e:	4620      	mov	r0, r4
 8001710:	f7ff fed4 	bl	80014bc <_ZN18getCriticalTempCmdC1EPKcP5Flash>
 8001714:	4621      	mov	r1, r4
 8001716:	4819      	ldr	r0, [pc, #100]	; (800177c <_Z7CliInitv+0x17c>)
 8001718:	f000 fa4d 	bl	8001bb6 <_ZN12CliContainer3addEP10CliCommand>

	/////////////////file///////////////////////////////////////////
	CliContainer.add (new clearFileCmd("clearLog", &warningFile));
 800171c:	201c      	movs	r0, #28
 800171e:	f00e ffef 	bl	8010700 <_Znwj>
 8001722:	4603      	mov	r3, r0
 8001724:	461c      	mov	r4, r3
 8001726:	4a22      	ldr	r2, [pc, #136]	; (80017b0 <_Z7CliInitv+0x1b0>)
 8001728:	4922      	ldr	r1, [pc, #136]	; (80017b4 <_Z7CliInitv+0x1b4>)
 800172a:	4620      	mov	r0, r4
 800172c:	f7ff fefa 	bl	8001524 <_ZN12clearFileCmdC1EPKcP4File>
 8001730:	4621      	mov	r1, r4
 8001732:	4812      	ldr	r0, [pc, #72]	; (800177c <_Z7CliInitv+0x17c>)
 8001734:	f000 fa3f 	bl	8001bb6 <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new printFileCmd("printLog", &warningFile));
 8001738:	201c      	movs	r0, #28
 800173a:	f00e ffe1 	bl	8010700 <_Znwj>
 800173e:	4603      	mov	r3, r0
 8001740:	461c      	mov	r4, r3
 8001742:	4a1b      	ldr	r2, [pc, #108]	; (80017b0 <_Z7CliInitv+0x1b0>)
 8001744:	491c      	ldr	r1, [pc, #112]	; (80017b8 <_Z7CliInitv+0x1b8>)
 8001746:	4620      	mov	r0, r4
 8001748:	f7ff ff12 	bl	8001570 <_ZN12printFileCmdC1EPKcP4File>
 800174c:	4621      	mov	r1, r4
 800174e:	480b      	ldr	r0, [pc, #44]	; (800177c <_Z7CliInitv+0x17c>)
 8001750:	f000 fa31 	bl	8001bb6 <_ZN12CliContainer3addEP10CliCommand>

	////////////////help/////////////////////////////////////////
	CliContainer.add (new helpCmd("help"));
 8001754:	2018      	movs	r0, #24
 8001756:	f00e ffd3 	bl	8010700 <_Znwj>
 800175a:	4603      	mov	r3, r0
 800175c:	461c      	mov	r4, r3
 800175e:	4917      	ldr	r1, [pc, #92]	; (80017bc <_Z7CliInitv+0x1bc>)
 8001760:	4620      	mov	r0, r4
 8001762:	f7ff ff2b 	bl	80015bc <_ZN7helpCmdC1EPKc>
 8001766:	4621      	mov	r1, r4
 8001768:	4804      	ldr	r0, [pc, #16]	; (800177c <_Z7CliInitv+0x17c>)
 800176a:	f000 fa24 	bl	8001bb6 <_ZN12CliContainer3addEP10CliCommand>


}
 800176e:	bf00      	nop
 8001770:	bd98      	pop	{r3, r4, r7, pc}
 8001772:	bf00      	nop
 8001774:	20000320 	.word	0x20000320
 8001778:	080142b4 	.word	0x080142b4
 800177c:	20000244 	.word	0x20000244
 8001780:	080142bc 	.word	0x080142bc
 8001784:	080142c4 	.word	0x080142c4
 8001788:	20000304 	.word	0x20000304
 800178c:	080142d0 	.word	0x080142d0
 8001790:	080142d4 	.word	0x080142d4
 8001794:	2000036c 	.word	0x2000036c
 8001798:	080142dc 	.word	0x080142dc
 800179c:	080142e4 	.word	0x080142e4
 80017a0:	20000358 	.word	0x20000358
 80017a4:	080142ec 	.word	0x080142ec
 80017a8:	080142f8 	.word	0x080142f8
 80017ac:	08014304 	.word	0x08014304
 80017b0:	2000081c 	.word	0x2000081c
 80017b4:	08014310 	.word	0x08014310
 80017b8:	0801431c 	.word	0x0801431c
 80017bc:	08014328 	.word	0x08014328

080017c0 <_ZN7helpCmdD1Ev>:
class helpCmd : public CliCommand {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <_ZN7helpCmdD1Ev+0x20>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fc5d 	bl	8001090 <_ZN10CliCommandD1Ev>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	08014550 	.word	0x08014550

080017e4 <_ZN7helpCmdD0Ev>:
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ffe7 	bl	80017c0 <_ZN7helpCmdD1Ev>
 80017f2:	2118      	movs	r1, #24
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f00e ff81 	bl	80106fc <_ZdlPvj>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <_ZN12printFileCmdD1Ev>:
class printFileCmd : public CliCommand {
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	4a05      	ldr	r2, [pc, #20]	; (8001824 <_ZN12printFileCmdD1Ev+0x20>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fc3b 	bl	8001090 <_ZN10CliCommandD1Ev>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	08014564 	.word	0x08014564

08001828 <_ZN12printFileCmdD0Ev>:
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff ffe7 	bl	8001804 <_ZN12printFileCmdD1Ev>
 8001836:	211c      	movs	r1, #28
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f00e ff5f 	bl	80106fc <_ZdlPvj>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4618      	mov	r0, r3
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <_ZN12clearFileCmdD1Ev>:
class clearFileCmd : public CliCommand {
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	4a05      	ldr	r2, [pc, #20]	; (8001868 <_ZN12clearFileCmdD1Ev+0x20>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fc19 	bl	8001090 <_ZN10CliCommandD1Ev>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	08014578 	.word	0x08014578

0800186c <_ZN12clearFileCmdD0Ev>:
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ffe7 	bl	8001848 <_ZN12clearFileCmdD1Ev>
 800187a:	211c      	movs	r1, #28
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f00e ff3d 	bl	80106fc <_ZdlPvj>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <_ZN18getCriticalTempCmdD1Ev>:
class getCriticalTempCmd : public CliCommand {
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	4a05      	ldr	r2, [pc, #20]	; (80018ac <_ZN18getCriticalTempCmdD1Ev+0x20>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fbf7 	bl	8001090 <_ZN10CliCommandD1Ev>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	0801458c 	.word	0x0801458c

080018b0 <_ZN18getCriticalTempCmdD0Ev>:
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff ffe7 	bl	800188c <_ZN18getCriticalTempCmdD1Ev>
 80018be:	211c      	movs	r1, #28
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f00e ff1b 	bl	80106fc <_ZdlPvj>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <_ZN17setWarningTempCmdD1Ev>:
class setWarningTempCmd : public CliCommand {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	4a05      	ldr	r2, [pc, #20]	; (80018f0 <_ZN17setWarningTempCmdD1Ev+0x20>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fbd5 	bl	8001090 <_ZN10CliCommandD1Ev>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4618      	mov	r0, r3
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	080145a0 	.word	0x080145a0

080018f4 <_ZN17setWarningTempCmdD0Ev>:
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ffe7 	bl	80018d0 <_ZN17setWarningTempCmdD1Ev>
 8001902:	211c      	movs	r1, #28
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f00e fef9 	bl	80106fc <_ZdlPvj>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <_ZN18setCriticalTempCmdD1Ev>:
class setCriticalTempCmd : public CliCommand {
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	4a05      	ldr	r2, [pc, #20]	; (8001934 <_ZN18setCriticalTempCmdD1Ev+0x20>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fbb3 	bl	8001090 <_ZN10CliCommandD1Ev>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	080145b4 	.word	0x080145b4

08001938 <_ZN18setCriticalTempCmdD0Ev>:
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ffe7 	bl	8001914 <_ZN18setCriticalTempCmdD1Ev>
 8001946:	211c      	movs	r1, #28
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f00e fed7 	bl	80106fc <_ZdlPvj>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4618      	mov	r0, r3
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <_ZN14setDataTimeCmdD1Ev>:
class setDataTimeCmd : public CliCommand {
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	4a05      	ldr	r2, [pc, #20]	; (8001978 <_ZN14setDataTimeCmdD1Ev+0x20>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fb91 	bl	8001090 <_ZN10CliCommandD1Ev>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	080145c8 	.word	0x080145c8

0800197c <_ZN14setDataTimeCmdD0Ev>:
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ffe7 	bl	8001958 <_ZN14setDataTimeCmdD1Ev>
 800198a:	211c      	movs	r1, #28
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f00e feb5 	bl	80106fc <_ZdlPvj>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <_ZN14getDataTimeCmdD1Ev>:
class getDataTimeCmd : public CliCommand {
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	4a05      	ldr	r2, [pc, #20]	; (80019bc <_ZN14getDataTimeCmdD1Ev+0x20>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fb6f 	bl	8001090 <_ZN10CliCommandD1Ev>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	080145dc 	.word	0x080145dc

080019c0 <_ZN14getDataTimeCmdD0Ev>:
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ffe7 	bl	800199c <_ZN14getDataTimeCmdD1Ev>
 80019ce:	211c      	movs	r1, #28
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f00e fe93 	bl	80106fc <_ZdlPvj>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <_ZN12BuzzerOffCmdD1Ev>:
class BuzzerOffCmd : public CliCommand {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	4a05      	ldr	r2, [pc, #20]	; (8001a00 <_ZN12BuzzerOffCmdD1Ev+0x20>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fb4d 	bl	8001090 <_ZN10CliCommandD1Ev>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	080145f0 	.word	0x080145f0

08001a04 <_ZN12BuzzerOffCmdD0Ev>:
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ffe7 	bl	80019e0 <_ZN12BuzzerOffCmdD1Ev>
 8001a12:	211c      	movs	r1, #28
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f00e fe71 	bl	80106fc <_ZdlPvj>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <_ZN11BuzzerOnCmdD1Ev>:
class BuzzerOnCmd : public CliCommand {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <_ZN11BuzzerOnCmdD1Ev+0x20>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fb2b 	bl	8001090 <_ZN10CliCommandD1Ev>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	08014604 	.word	0x08014604

08001a48 <_ZN11BuzzerOnCmdD0Ev>:
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ffe7 	bl	8001a24 <_ZN11BuzzerOnCmdD1Ev>
 8001a56:	211c      	movs	r1, #28
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f00e fe4f 	bl	80106fc <_ZdlPvj>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <_ZN11LedBlinkCmdD1Ev>:
class LedBlinkCmd : public CliCommand {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	4a05      	ldr	r2, [pc, #20]	; (8001a88 <_ZN11LedBlinkCmdD1Ev+0x20>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fb09 	bl	8001090 <_ZN10CliCommandD1Ev>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	08014618 	.word	0x08014618

08001a8c <_ZN11LedBlinkCmdD0Ev>:
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff ffe7 	bl	8001a68 <_ZN11LedBlinkCmdD1Ev>
 8001a9a:	211c      	movs	r1, #28
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f00e fe2d 	bl	80106fc <_ZdlPvj>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <_ZN9LedOffCmdD1Ev>:
class LedOffCmd : public CliCommand {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	4a05      	ldr	r2, [pc, #20]	; (8001acc <_ZN9LedOffCmdD1Ev+0x20>)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fae7 	bl	8001090 <_ZN10CliCommandD1Ev>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	0801462c 	.word	0x0801462c

08001ad0 <_ZN9LedOffCmdD0Ev>:
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff ffe7 	bl	8001aac <_ZN9LedOffCmdD1Ev>
 8001ade:	211c      	movs	r1, #28
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f00e fe0b 	bl	80106fc <_ZdlPvj>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_ZN8LedOnCmdD1Ev>:
class LedOnCmd : public CliCommand {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	4a05      	ldr	r2, [pc, #20]	; (8001b10 <_ZN8LedOnCmdD1Ev+0x20>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fac5 	bl	8001090 <_ZN10CliCommandD1Ev>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	08014640 	.word	0x08014640

08001b14 <_ZN8LedOnCmdD0Ev>:
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ffe7 	bl	8001af0 <_ZN8LedOnCmdD1Ev>
 8001b22:	211c      	movs	r1, #28
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f00e fde9 	bl	80106fc <_ZdlPvj>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <_ZNK10CliCommand7getNameEv>:
	const char* getName ()const {
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
		return _name;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3304      	adds	r3, #4
	}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <_ZN12CliContainerC1Ev>:

#include "CliContainer.h"

CliContainer CliContainer;

CliContainer::CliContainer()
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
{
	_counter = 0;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	651a      	str	r2, [r3, #80]	; 0x50
	memset(_CliCommand, 0, sizeof(CliCommand*) * MAX_CLI);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2250      	movs	r2, #80	; 0x50
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4618      	mov	r0, r3
 8001b62:	f00e fe51 	bl	8010808 <memset>
}
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <_ZN12CliContainerD1Ev>:

CliContainer::~CliContainer()
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
{
	for (int i = 0; i < MAX_CLI; i++) {
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2b13      	cmp	r3, #19
 8001b80:	dc14      	bgt.n	8001bac <_ZN12CliContainerD1Ev+0x3c>
		if (_CliCommand[i] != NULL) {
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00a      	beq.n	8001ba4 <_ZN12CliContainerD1Ev+0x34>
			delete _CliCommand[i];
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d004      	beq.n	8001ba4 <_ZN12CliContainerD1Ev+0x34>
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	3208      	adds	r2, #8
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	4790      	blx	r2
	for (int i = 0; i < MAX_CLI; i++) {
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	e7e7      	b.n	8001b7c <_ZN12CliContainerD1Ev+0xc>
		}
	}
}
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <_ZN12CliContainer3addEP10CliCommand>:

void CliContainer::add(CliCommand* pCliCommand)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	6039      	str	r1, [r7, #0]
	if (_counter < MAX_CLI) {
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bc4:	2b13      	cmp	r3, #19
 8001bc6:	dc0a      	bgt.n	8001bde <_ZN12CliContainer3addEP10CliCommand+0x28>
		_CliCommand[_counter] = pCliCommand;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6839      	ldr	r1, [r7, #0]
 8001bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		_counter++;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	651a      	str	r2, [r3, #80]	; 0x50
	}
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <_ZN12CliContainer4CallEPcS0_>:
{
	return _counter;
}

int CliContainer::Call (char* cmdname, char* param )
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b086      	sub	sp, #24
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < _counter; i++){
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	da25      	bge.n	8001c50 <_ZN12CliContainer4CallEPcS0_+0x66>
		if(strcmp(cmdname, _CliCommand[i]->getName())==0){
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff91 	bl	8001b34 <_ZNK10CliCommand7getNameEv>
 8001c12:	4603      	mov	r3, r0
 8001c14:	4619      	mov	r1, r3
 8001c16:	68b8      	ldr	r0, [r7, #8]
 8001c18:	f7fe fada 	bl	80001d0 <strcmp>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	bf0c      	ite	eq
 8001c22:	2301      	moveq	r3, #1
 8001c24:	2300      	movne	r3, #0
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00d      	beq.n	8001c48 <_ZN12CliContainer4CallEPcS0_+0x5e>
			_CliCommand[i]->doCommand(param);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	4798      	blx	r3
			return 1;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e004      	b.n	8001c52 <_ZN12CliContainer4CallEPcS0_+0x68>
	for (int i = 0; i < _counter; i++){
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	e7d4      	b.n	8001bfa <_ZN12CliContainer4CallEPcS0_+0x10>
		}
	}
	return 0;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <_Z41__static_initialization_and_destruction_0ii>:
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d107      	bne.n	8001c7c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d102      	bne.n	8001c7c <_Z41__static_initialization_and_destruction_0ii+0x20>
CliContainer CliContainer;
 8001c76:	4809      	ldr	r0, [pc, #36]	; (8001c9c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001c78:	f7ff ff68 	bl	8001b4c <_ZN12CliContainerC1Ev>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d107      	bne.n	8001c92 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d102      	bne.n	8001c92 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001c8c:	4803      	ldr	r0, [pc, #12]	; (8001c9c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001c8e:	f7ff ff6f 	bl	8001b70 <_ZN12CliContainerD1Ev>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000244 	.word	0x20000244

08001ca0 <_GLOBAL__sub_I_CliContainer>:
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ca8:	2001      	movs	r0, #1
 8001caa:	f7ff ffd7 	bl	8001c5c <_Z41__static_initialization_and_destruction_0ii>
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <_GLOBAL__sub_D_CliContainer>:
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f7ff ffcf 	bl	8001c5c <_Z41__static_initialization_and_destruction_0ii>
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <_Z22Communication_commTaskv>:
static uint8_t cmdbuffer[MAX_BUFFER_LENGTH];
static int cmdcount = 0;
static int cmdprint = 0;

int Communication_commTask()
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 8001cc6:	1db9      	adds	r1, r7, #6
 8001cc8:	230a      	movs	r3, #10
 8001cca:	2201      	movs	r2, #1
 8001ccc:	4839      	ldr	r0, [pc, #228]	; (8001db4 <_Z22Communication_commTaskv+0xf4>)
 8001cce:	f006 feef 	bl	8008ab0 <HAL_UART_Receive>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK)
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d025      	beq.n	8001d28 <_Z22Communication_commTaskv+0x68>
	{
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 8001cdc:	4b35      	ldr	r3, [pc, #212]	; (8001db4 <_Z22Communication_commTaskv+0xf4>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	bf14      	ite	ne
 8001cea:	2301      	movne	r3, #1
 8001cec:	2300      	moveq	r3, #0
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <_Z22Communication_commTaskv+0x3c>
		{
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 8001cf4:	4b2f      	ldr	r3, [pc, #188]	; (8001db4 <_Z22Communication_commTaskv+0xf4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2208      	movs	r2, #8
 8001cfa:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (cmdprint < cmdcount)
 8001cfc:	4b2e      	ldr	r3, [pc, #184]	; (8001db8 <_Z22Communication_commTaskv+0xf8>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4b2e      	ldr	r3, [pc, #184]	; (8001dbc <_Z22Communication_commTaskv+0xfc>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	da0d      	bge.n	8001d24 <_Z22Communication_commTaskv+0x64>
		{
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8001d08:	4b2b      	ldr	r3, [pc, #172]	; (8001db8 <_Z22Communication_commTaskv+0xf8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	1c5a      	adds	r2, r3, #1
 8001d0e:	492a      	ldr	r1, [pc, #168]	; (8001db8 <_Z22Communication_commTaskv+0xf8>)
 8001d10:	600a      	str	r2, [r1, #0]
 8001d12:	4a2b      	ldr	r2, [pc, #172]	; (8001dc0 <_Z22Communication_commTaskv+0x100>)
 8001d14:	1899      	adds	r1, r3, r2
 8001d16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	4825      	ldr	r0, [pc, #148]	; (8001db4 <_Z22Communication_commTaskv+0xf4>)
 8001d1e:	f006 fe33 	bl	8008988 <HAL_UART_Transmit>
		while (cmdprint < cmdcount)
 8001d22:	e7eb      	b.n	8001cfc <_Z22Communication_commTaskv+0x3c>
		}

		return 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	e040      	b.n	8001daa <_Z22Communication_commTaskv+0xea>
	}

	if (ch != '\r' && ch != '\n')
 8001d28:	79bb      	ldrb	r3, [r7, #6]
 8001d2a:	2b0d      	cmp	r3, #13
 8001d2c:	d016      	beq.n	8001d5c <_Z22Communication_commTaskv+0x9c>
 8001d2e:	79bb      	ldrb	r3, [r7, #6]
 8001d30:	2b0a      	cmp	r3, #10
 8001d32:	d013      	beq.n	8001d5c <_Z22Communication_commTaskv+0x9c>
	{
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);

		if (cmdcount >= MAX_BUFFER_LENGTH)
 8001d34:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <_Z22Communication_commTaskv+0xfc>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b63      	cmp	r3, #99	; 0x63
 8001d3a:	dd05      	ble.n	8001d48 <_Z22Communication_commTaskv+0x88>
		{
			cmdcount = 0;
 8001d3c:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <_Z22Communication_commTaskv+0xfc>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 8001d42:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <_Z22Communication_commTaskv+0xf8>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 8001d48:	4b1c      	ldr	r3, [pc, #112]	; (8001dbc <_Z22Communication_commTaskv+0xfc>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	491b      	ldr	r1, [pc, #108]	; (8001dbc <_Z22Communication_commTaskv+0xfc>)
 8001d50:	600a      	str	r2, [r1, #0]
 8001d52:	79b9      	ldrb	r1, [r7, #6]
 8001d54:	4a1a      	ldr	r2, [pc, #104]	; (8001dc0 <_Z22Communication_commTaskv+0x100>)
 8001d56:	54d1      	strb	r1, [r2, r3]
		return 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e026      	b.n	8001daa <_Z22Communication_commTaskv+0xea>
	}

	// here we have a time to print the command
	while (cmdprint < cmdcount)
 8001d5c:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <_Z22Communication_commTaskv+0xf8>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <_Z22Communication_commTaskv+0xfc>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	da0d      	bge.n	8001d84 <_Z22Communication_commTaskv+0xc4>
	{
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8001d68:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <_Z22Communication_commTaskv+0xf8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	4912      	ldr	r1, [pc, #72]	; (8001db8 <_Z22Communication_commTaskv+0xf8>)
 8001d70:	600a      	str	r2, [r1, #0]
 8001d72:	4a13      	ldr	r2, [pc, #76]	; (8001dc0 <_Z22Communication_commTaskv+0x100>)
 8001d74:	1899      	adds	r1, r3, r2
 8001d76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	480d      	ldr	r0, [pc, #52]	; (8001db4 <_Z22Communication_commTaskv+0xf4>)
 8001d7e:	f006 fe03 	bl	8008988 <HAL_UART_Transmit>
	while (cmdprint < cmdcount)
 8001d82:	e7eb      	b.n	8001d5c <_Z22Communication_commTaskv+0x9c>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8001d84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d88:	2202      	movs	r2, #2
 8001d8a:	490e      	ldr	r1, [pc, #56]	; (8001dc4 <_Z22Communication_commTaskv+0x104>)
 8001d8c:	4809      	ldr	r0, [pc, #36]	; (8001db4 <_Z22Communication_commTaskv+0xf4>)
 8001d8e:	f006 fdfb 	bl	8008988 <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 8001d92:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <_Z22Communication_commTaskv+0xfc>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <_Z22Communication_commTaskv+0x100>)
 8001d98:	2100      	movs	r1, #0
 8001d9a:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 8001d9c:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <_Z22Communication_commTaskv+0xfc>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 8001da2:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <_Z22Communication_commTaskv+0xf8>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
	return 1;
 8001da8:	2301      	movs	r3, #1
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000c70 	.word	0x20000c70
 8001db8:	20000300 	.word	0x20000300
 8001dbc:	200002fc 	.word	0x200002fc
 8001dc0:	20000298 	.word	0x20000298
 8001dc4:	08014330 	.word	0x08014330

08001dc8 <_Z27Communication_handleCommandv>:


void Communication_handleCommand()
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08c      	sub	sp, #48	; 0x30
 8001dcc:	af00      	add	r7, sp, #0
	char cmd[20];
	char param [20];

    int params = sscanf((const char*)cmdbuffer,"%s %s", cmd, param );
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	f107 0218 	add.w	r2, r7, #24
 8001dd4:	490f      	ldr	r1, [pc, #60]	; (8001e14 <_Z27Communication_handleCommandv+0x4c>)
 8001dd6:	4810      	ldr	r0, [pc, #64]	; (8001e18 <_Z27Communication_handleCommandv+0x50>)
 8001dd8:	f00f fb6a 	bl	80114b0 <siscanf>
 8001ddc:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (params == 0){
 8001dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d012      	beq.n	8001e0a <_Z27Communication_handleCommandv+0x42>
	   return;
    }

    if(CliContainer.Call(cmd, param) == 0){
 8001de4:	1d3a      	adds	r2, r7, #4
 8001de6:	f107 0318 	add.w	r3, r7, #24
 8001dea:	4619      	mov	r1, r3
 8001dec:	480b      	ldr	r0, [pc, #44]	; (8001e1c <_Z27Communication_handleCommandv+0x54>)
 8001dee:	f7ff fefc 	bl	8001bea <_ZN12CliContainer4CallEPcS0_>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	bf0c      	ite	eq
 8001df8:	2301      	moveq	r3, #1
 8001dfa:	2300      	movne	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d004      	beq.n	8001e0c <_Z27Communication_handleCommandv+0x44>
    printf("Invalid command\r\n");
 8001e02:	4807      	ldr	r0, [pc, #28]	; (8001e20 <_Z27Communication_handleCommandv+0x58>)
 8001e04:	f00f fad8 	bl	80113b8 <puts>
 8001e08:	e000      	b.n	8001e0c <_Z27Communication_handleCommandv+0x44>
	   return;
 8001e0a:	bf00      	nop
    }
}
 8001e0c:	3730      	adds	r7, #48	; 0x30
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	08014334 	.word	0x08014334
 8001e18:	20000298 	.word	0x20000298
 8001e1c:	20000244 	.word	0x20000244
 8001e20:	0801433c 	.word	0x0801433c

08001e24 <StartComTask>:

extern "C" void StartComTask()
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Entry_comTask */
  /* Infinite loop */
  CliInit();
 8001e28:	f7ff fbea 	bl	8001600 <_Z7CliInitv>
  while(1)
  {
	  if (Communication_commTask()){
 8001e2c:	f7ff ff48 	bl	8001cc0 <_Z22Communication_commTaskv>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	bf14      	ite	ne
 8001e36:	2301      	movne	r3, #1
 8001e38:	2300      	moveq	r3, #0
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <StartComTask+0x20>
		  Communication_handleCommand();
 8001e40:	f7ff ffc2 	bl	8001dc8 <_Z27Communication_handleCommandv>
	  }
    osDelay(1);
 8001e44:	2001      	movs	r0, #1
 8001e46:	f00b f9d7 	bl	800d1f8 <osDelay>
	  if (Communication_commTask()){
 8001e4a:	e7ef      	b.n	8001e2c <StartComTask+0x8>

08001e4c <_ZN3Dht14waitWhileEqualEii>:
extern TIM_HandleTypeDef htim16;

extern Dht dht;

int Dht::waitWhileEqual(int value, int expectedTime)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
	// set a timeout 20% bigger than the expected time
	uint32_t timeout = expectedTime + (expectedTime) / 5;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a19      	ldr	r2, [pc, #100]	; (8001ec0 <_ZN3Dht14waitWhileEqualEii+0x74>)
 8001e5c:	fb82 1203 	smull	r1, r2, r2, r3
 8001e60:	1052      	asrs	r2, r2, #1
 8001e62:	17db      	asrs	r3, r3, #31
 8001e64:	1ad2      	subs	r2, r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	617b      	str	r3, [r7, #20]

	__HAL_TIM_SET_COUNTER(_timer, 0);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2200      	movs	r2, #0
 8001e74:	625a      	str	r2, [r3, #36]	; 0x24
	while (HAL_GPIO_ReadPin(_gpioPort, _gpioPin) == value) {
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	889b      	ldrh	r3, [r3, #4]
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4610      	mov	r0, r2
 8001e82:	f002 fce3 	bl	800484c <HAL_GPIO_ReadPin>
 8001e86:	4603      	mov	r3, r0
 8001e88:	461a      	mov	r2, r3
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	bf0c      	ite	eq
 8001e90:	2301      	moveq	r3, #1
 8001e92:	2300      	movne	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00d      	beq.n	8001eb6 <_ZN3Dht14waitWhileEqualEii+0x6a>
		if (__HAL_TIM_GET_COUNTER(_timer) > timeout) {
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	bf34      	ite	cc
 8001ea8:	2301      	movcc	r3, #1
 8001eaa:	2300      	movcs	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0e1      	beq.n	8001e76 <_ZN3Dht14waitWhileEqualEii+0x2a>
			// too much time in the state
			return false;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e000      	b.n	8001eb8 <_ZN3Dht14waitWhileEqualEii+0x6c>
		}
	}

	return true;
 8001eb6:	2301      	movs	r3, #1
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	66666667 	.word	0x66666667

08001ec4 <_ZN3Dht13setGpioOutputEv>:

void Dht::setGpioOutput()
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpioStruct = {0};
 8001ecc:	f107 030c 	add.w	r3, r7, #12
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]

	gpioStruct.Pin = _gpioPin;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	889b      	ldrh	r3, [r3, #4]
 8001ee0:	60fb      	str	r3, [r7, #12]
	gpioStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	613b      	str	r3, [r7, #16]
	gpioStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
	gpioStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(_gpioPort, &gpioStruct);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f107 020c 	add.w	r2, r7, #12
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f002 fafd 	bl	80044f8 <HAL_GPIO_Init>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001efe:	2017      	movs	r0, #23
 8001f00:	f001 fef1 	bl	8003ce6 <HAL_NVIC_DisableIRQ>
}
 8001f04:	bf00      	nop
 8001f06:	3720      	adds	r7, #32
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <_ZN3Dht12setGpioInputEv>:

void Dht::setGpioInput()
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpioStruct = {0};
 8001f14:	f107 030c 	add.w	r3, r7, #12
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]

	gpioStruct.Pin = _gpioPin;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	889b      	ldrh	r3, [r3, #4]
 8001f28:	60fb      	str	r3, [r7, #12]
	gpioStruct.Mode = GPIO_MODE_INPUT;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
	gpioStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
	gpioStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(_gpioPort, &gpioStruct);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f107 020c 	add.w	r2, r7, #12
 8001f3e:	4611      	mov	r1, r2
 8001f40:	4618      	mov	r0, r3
 8001f42:	f002 fad9 	bl	80044f8 <HAL_GPIO_Init>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001f46:	2017      	movs	r0, #23
 8001f48:	f001 fecd 	bl	8003ce6 <HAL_NVIC_DisableIRQ>
}
 8001f4c:	bf00      	nop
 8001f4e:	3720      	adds	r7, #32
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <_ZN3Dht4readEv>:

int Dht::read()
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
	setGpioOutput();
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff ffb1 	bl	8001ec4 <_ZN3Dht13setGpioOutputEv>

	HAL_TIM_Base_Start(_timer);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f005 fa60 	bl	800742c <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(_timer, 0);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2200      	movs	r2, #0
 8001f74:	625a      	str	r2, [r3, #36]	; 0x24

	// switch the sensor on by putting the line in '0'
	HAL_GPIO_WritePin(_gpioPort,_gpioPin, GPIO_PIN_RESET);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6818      	ldr	r0, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	889b      	ldrh	r3, [r3, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	4619      	mov	r1, r3
 8001f82:	f002 fc7b 	bl	800487c <HAL_GPIO_WritePin>
	while (__HAL_TIM_GET_COUNTER(_timer) < 19000);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	f644 2237 	movw	r2, #18999	; 0x4a37
 8001f92:	4293      	cmp	r3, r2
 8001f94:	bf94      	ite	ls
 8001f96:	2301      	movls	r3, #1
 8001f98:	2300      	movhi	r3, #0
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d000      	beq.n	8001fa2 <_ZN3Dht4readEv+0x4e>
 8001fa0:	e7f1      	b.n	8001f86 <_ZN3Dht4readEv+0x32>

	HAL_GPIO_WritePin(_gpioPort,_gpioPin, GPIO_PIN_SET);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	889b      	ldrh	r3, [r3, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	4619      	mov	r1, r3
 8001fae:	f002 fc65 	bl	800487c <HAL_GPIO_WritePin>

	// start listening
	setGpioInput();
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ffaa 	bl	8001f0c <_ZN3Dht12setGpioInputEv>

	// wait for response 20-40us
	if (!waitWhileEqual( 1, 40)) {
 8001fb8:	2228      	movs	r2, #40	; 0x28
 8001fba:	2101      	movs	r1, #1
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff ff45 	bl	8001e4c <_ZN3Dht14waitWhileEqualEii>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bf0c      	ite	eq
 8001fc8:	2301      	moveq	r3, #1
 8001fca:	2300      	movne	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <_ZN3Dht4readEv+0x82>
		return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e021      	b.n	800201a <_ZN3Dht4readEv+0xc6>
	}

	// DHT should keep in low for 80us
	if (!waitWhileEqual(0, 80)) {
 8001fd6:	2250      	movs	r2, #80	; 0x50
 8001fd8:	2100      	movs	r1, #0
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ff36 	bl	8001e4c <_ZN3Dht14waitWhileEqualEii>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	bf0c      	ite	eq
 8001fe6:	2301      	moveq	r3, #1
 8001fe8:	2300      	movne	r3, #0
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <_ZN3Dht4readEv+0xa0>
		return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e012      	b.n	800201a <_ZN3Dht4readEv+0xc6>
	}

	// DHT should keep in high for 80us
	if (!waitWhileEqual(1, 80)) {
 8001ff4:	2250      	movs	r2, #80	; 0x50
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff ff27 	bl	8001e4c <_ZN3Dht14waitWhileEqualEii>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	bf0c      	ite	eq
 8002004:	2301      	moveq	r3, #1
 8002006:	2300      	movne	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <_ZN3Dht4readEv+0xbe>
		return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e003      	b.n	800201a <_ZN3Dht4readEv+0xc6>
	}
	reciveData();
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f806 	bl	8002024 <_ZN3Dht10reciveDataEv>
	return 1;
 8002018:	2301      	movs	r3, #1

}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <_ZN3Dht10reciveDataEv>:

int Dht::reciveData()
{
 8002024:	b5b0      	push	{r4, r5, r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
	// DHT start send data bits

	uint8_t data[5] = { 0 };
 800202c:	2300      	movs	r3, #0
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	2300      	movs	r3, #0
 8002032:	733b      	strb	r3, [r7, #12]
	for (int i = 0; i < 5; i++) {
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	2b04      	cmp	r3, #4
 800203c:	dc50      	bgt.n	80020e0 <_ZN3Dht10reciveDataEv+0xbc>
		for (int j = 0; j < 8; j++) {
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	2b07      	cmp	r3, #7
 8002046:	dc47      	bgt.n	80020d8 <_ZN3Dht10reciveDataEv+0xb4>

			// DHT keeps in low for 50us before each bit
			if (!waitWhileEqual( 0, 60)) {
 8002048:	223c      	movs	r2, #60	; 0x3c
 800204a:	2100      	movs	r1, #0
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff fefd 	bl	8001e4c <_ZN3Dht14waitWhileEqualEii>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	bf0c      	ite	eq
 8002058:	2301      	moveq	r3, #1
 800205a:	2300      	movne	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <_ZN3Dht10reciveDataEv+0x42>
				return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e095      	b.n	8002192 <_ZN3Dht10reciveDataEv+0x16e>
			}

			// DHT sends bit keeping line in high maximum 70us
			if (!waitWhileEqual( 1, 70)) {
 8002066:	2246      	movs	r2, #70	; 0x46
 8002068:	2101      	movs	r1, #1
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff feee 	bl	8001e4c <_ZN3Dht14waitWhileEqualEii>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	bf0c      	ite	eq
 8002076:	2301      	moveq	r3, #1
 8002078:	2300      	movne	r3, #0
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <_ZN3Dht10reciveDataEv+0x60>
				return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e086      	b.n	8002192 <_ZN3Dht10reciveDataEv+0x16e>
			}

			data[i] <<= 1;
 8002084:	f107 0208 	add.w	r2, r7, #8
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	4413      	add	r3, r2
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	b2d9      	uxtb	r1, r3
 8002092:	f107 0208 	add.w	r2, r7, #8
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	4413      	add	r3, r2
 800209a:	460a      	mov	r2, r1
 800209c:	701a      	strb	r2, [r3, #0]

			// 26-28us for '0' and 70us for '1', so 50us is a good split time
			if (__HAL_TIM_GET_COUNTER(_timer) > 50) {
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	2b32      	cmp	r3, #50	; 0x32
 80020a8:	bf8c      	ite	hi
 80020aa:	2301      	movhi	r3, #1
 80020ac:	2300      	movls	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00d      	beq.n	80020d0 <_ZN3Dht10reciveDataEv+0xac>
				data[i] |= 1;
 80020b4:	f107 0208 	add.w	r2, r7, #8
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	4413      	add	r3, r2
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	b2d9      	uxtb	r1, r3
 80020c4:	f107 0208 	add.w	r2, r7, #8
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	4413      	add	r3, r2
 80020cc:	460a      	mov	r2, r1
 80020ce:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++) {
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	3301      	adds	r3, #1
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	e7b4      	b.n	8002042 <_ZN3Dht10reciveDataEv+0x1e>
	for (int i = 0; i < 5; i++) {
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	3301      	adds	r3, #1
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	e7ab      	b.n	8002038 <_ZN3Dht10reciveDataEv+0x14>
			}
		}
	}

	uint8_t checksum = data[0] + data[1] + data[2] + data[3];
 80020e0:	7a3a      	ldrb	r2, [r7, #8]
 80020e2:	7a7b      	ldrb	r3, [r7, #9]
 80020e4:	4413      	add	r3, r2
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	7abb      	ldrb	r3, [r7, #10]
 80020ea:	4413      	add	r3, r2
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	7afb      	ldrb	r3, [r7, #11]
 80020f0:	4413      	add	r3, r2
 80020f2:	73fb      	strb	r3, [r7, #15]
	if (checksum != data[4]) {
 80020f4:	7b3b      	ldrb	r3, [r7, #12]
 80020f6:	7bfa      	ldrb	r2, [r7, #15]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d001      	beq.n	8002100 <_ZN3Dht10reciveDataEv+0xdc>
		return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e048      	b.n	8002192 <_ZN3Dht10reciveDataEv+0x16e>
	}

	_humidity = (double)data[0] + ((double)data[1]) / 10;
 8002100:	7a3b      	ldrb	r3, [r7, #8]
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fa0e 	bl	8000524 <__aeabi_ui2d>
 8002108:	4604      	mov	r4, r0
 800210a:	460d      	mov	r5, r1
 800210c:	7a7b      	ldrb	r3, [r7, #9]
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fa08 	bl	8000524 <__aeabi_ui2d>
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	4b20      	ldr	r3, [pc, #128]	; (800219c <_ZN3Dht10reciveDataEv+0x178>)
 800211a:	f7fe fba7 	bl	800086c <__aeabi_ddiv>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	4620      	mov	r0, r4
 8002124:	4629      	mov	r1, r5
 8002126:	f7fe f8c1 	bl	80002ac <__adddf3>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	e9c1 2308 	strd	r2, r3, [r1, #32]
	_temperature = (double)data[2] + ((double)data[3]) / 10;
 8002134:	7abb      	ldrb	r3, [r7, #10]
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe f9f4 	bl	8000524 <__aeabi_ui2d>
 800213c:	4604      	mov	r4, r0
 800213e:	460d      	mov	r5, r1
 8002140:	7afb      	ldrb	r3, [r7, #11]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe f9ee 	bl	8000524 <__aeabi_ui2d>
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	4b13      	ldr	r3, [pc, #76]	; (800219c <_ZN3Dht10reciveDataEv+0x178>)
 800214e:	f7fe fb8d 	bl	800086c <__aeabi_ddiv>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	4620      	mov	r0, r4
 8002158:	4629      	mov	r1, r5
 800215a:	f7fe f8a7 	bl	80002ac <__adddf3>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	e9c1 2306 	strd	r2, r3, [r1, #24]

	//printf("Humidity: %d.%d, temp: %d.%d\r\n", (int)data[0], (int)data[1], (int)data[2], (int)data[3]);

	// wait while DHT return to high
	if (!waitWhileEqual( 0, 100)) {
 8002168:	2264      	movs	r2, #100	; 0x64
 800216a:	2100      	movs	r1, #0
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff fe6d 	bl	8001e4c <_ZN3Dht14waitWhileEqualEii>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	bf0c      	ite	eq
 8002178:	2301      	moveq	r3, #1
 800217a:	2300      	movne	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <_ZN3Dht10reciveDataEv+0x162>
		return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e005      	b.n	8002192 <_ZN3Dht10reciveDataEv+0x16e>
	}

	HAL_TIM_Base_Stop(_timer);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	4618      	mov	r0, r3
 800218c:	f005 f9b6 	bl	80074fc <HAL_TIM_Base_Stop>

	return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bdb0      	pop	{r4, r5, r7, pc}
 800219a:	bf00      	nop
 800219c:	40240000 	.word	0x40240000

080021a0 <_ZN3Dht14getTemperatureEv>:
{
	return _humidity;
}

double Dht::getTemperature()
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
	return _temperature;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80021ae:	ec43 2b17 	vmov	d7, r2, r3
}
 80021b2:	eeb0 0a47 	vmov.f32	s0, s14
 80021b6:	eef0 0a67 	vmov.f32	s1, s15
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <StartDhtTask>:


/* USER CODE END Header_StartDhtTask */
extern "C" void StartDhtTask()
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StartDhtTask */
  TickType_t ticks = xTaskGetTickCount();
 80021ca:	f00c fdfd 	bl	800edc8 <xTaskGetTickCount>
 80021ce:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  while(1)
  {
	//read dht all 1 minute
	ticks+=1000;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80021d6:	607b      	str	r3, [r7, #4]
	dht.read();
 80021d8:	4803      	ldr	r0, [pc, #12]	; (80021e8 <StartDhtTask+0x24>)
 80021da:	f7ff febb 	bl	8001f54 <_ZN3Dht4readEv>
	osDelayUntil(ticks);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f00b f825 	bl	800d22e <osDelayUntil>
	ticks+=1000;
 80021e4:	e7f4      	b.n	80021d0 <StartDhtTask+0xc>
 80021e6:	bf00      	nop
 80021e8:	20000330 	.word	0x20000330

080021ec <_ZN4FileC1EPKc>:
 *      Author: student
 */

#include <File.h>

File::File(const char* nameFile) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
	strcpy(_nameFile, nameFile);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f203 2331 	addw	r3, r3, #561	; 0x231
 80021fc:	6839      	ldr	r1, [r7, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f00f f9c7 	bl	8011592 <strcpy>
}
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <_ZN4File4readEv>:

void File::read(){
 8002210:	b580      	push	{r7, lr}
 8002212:	b0c4      	sub	sp, #272	; 0x110
 8002214:	af00      	add	r7, sp, #0
 8002216:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800221a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800221e:	6018      	str	r0, [r3, #0]
	_fres = f_open(&_fil, _nameFile, FA_READ);
 8002220:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002224:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800222e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f203 2331 	addw	r3, r3, #561	; 0x231
 8002238:	2201      	movs	r2, #1
 800223a:	4619      	mov	r1, r3
 800223c:	f00a f85e 	bl	800c2fc <f_open>
 8002240:	4603      	mov	r3, r0
 8002242:	461a      	mov	r2, r3
 8002244:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002248:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
	if (_fres != FR_OK) {
 8002252:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002256:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00b      	beq.n	800227c <_ZN4File4readEv+0x6c>
		printf("f_open error (%i)\r\n", _fres);
 8002264:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002268:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8002272:	4619      	mov	r1, r3
 8002274:	4822      	ldr	r0, [pc, #136]	; (8002300 <_ZN4File4readEv+0xf0>)
 8002276:	f00f f819 	bl	80112ac <iprintf>
 800227a:	e03d      	b.n	80022f8 <_ZN4File4readEv+0xe8>
	//Read 250 bytes from "file" on the SD card
	 BYTE readBuf[256];

	//We can either use f_read OR f_gets to get data out of files
	//f_gets is a wrapper on f_read that does some string formatting for us
	TCHAR* rres = f_gets((TCHAR*)readBuf, 256, &_fil);
 800227c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002280:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	f107 030c 	add.w	r3, r7, #12
 800228a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800228e:	4618      	mov	r0, r3
 8002290:	f00a fdc3 	bl	800ce1a <f_gets>
 8002294:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	if(rres == 0){
 8002298:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10a      	bne.n	80022b6 <_ZN4File4readEv+0xa6>
		printf("f_gets error (%i)\r\n", _fres);
 80022a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 80022ae:	4619      	mov	r1, r3
 80022b0:	4814      	ldr	r0, [pc, #80]	; (8002304 <_ZN4File4readEv+0xf4>)
 80022b2:	f00e fffb 	bl	80112ac <iprintf>
	}
	while(rres != 0) {
 80022b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d014      	beq.n	80022e8 <_ZN4File4readEv+0xd8>
		rres = f_gets((TCHAR*)readBuf, 256, &_fil);
 80022be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	f107 030c 	add.w	r3, r7, #12
 80022cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022d0:	4618      	mov	r0, r3
 80022d2:	f00a fda2 	bl	800ce1a <f_gets>
 80022d6:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
		printf("%s\r\n", readBuf);
 80022da:	f107 030c 	add.w	r3, r7, #12
 80022de:	4619      	mov	r1, r3
 80022e0:	4809      	ldr	r0, [pc, #36]	; (8002308 <_ZN4File4readEv+0xf8>)
 80022e2:	f00e ffe3 	bl	80112ac <iprintf>
	while(rres != 0) {
 80022e6:	e7e6      	b.n	80022b6 <_ZN4File4readEv+0xa6>
	}

	//Be a tidy kiwi - don't forget to close your file!
	f_close(&_fil);
 80022e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f00a fd62 	bl	800cdbc <f_close>


}
 80022f8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	08014350 	.word	0x08014350
 8002304:	08014364 	.word	0x08014364
 8002308:	08014378 	.word	0x08014378

0800230c <_ZN4File5writeEPKc>:

void File::write(const char* writeBuf){
 800230c:	b590      	push	{r4, r7, lr}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
	//write a file "write.txt"
	_fres = f_open(&_fil, _nameFile, FA_WRITE | FA_OPEN_APPEND | FA_OPEN_EXISTING);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f203 2331 	addw	r3, r3, #561	; 0x231
 800231e:	2232      	movs	r2, #50	; 0x32
 8002320:	4619      	mov	r1, r3
 8002322:	f009 ffeb 	bl	800c2fc <f_open>
 8002326:	4603      	mov	r3, r0
 8002328:	461a      	mov	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
	if(_fres == FR_OK) {
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8002336:	2b00      	cmp	r3, #0
 8002338:	d006      	beq.n	8002348 <_ZN4File5writeEPKc+0x3c>
    	//printf("I was able to open 'write.txt' for writing\r\n");
	} else {
		printf("f_open error (%i)\r\n", _fres);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8002340:	4619      	mov	r1, r3
 8002342:	4813      	ldr	r0, [pc, #76]	; (8002390 <_ZN4File5writeEPKc+0x84>)
 8002344:	f00e ffb2 	bl	80112ac <iprintf>
    }

	UINT bytesWrote;
	_fres = f_write(&_fil, writeBuf, strlen(writeBuf), &bytesWrote);
 8002348:	687c      	ldr	r4, [r7, #4]
 800234a:	6838      	ldr	r0, [r7, #0]
 800234c:	f7fd ff4a 	bl	80001e4 <strlen>
 8002350:	4602      	mov	r2, r0
 8002352:	f107 030c 	add.w	r3, r7, #12
 8002356:	6839      	ldr	r1, [r7, #0]
 8002358:	4620      	mov	r0, r4
 800235a:	f00a fb02 	bl	800c962 <f_write>
 800235e:	4603      	mov	r3, r0
 8002360:	461a      	mov	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
	if(_fres == FR_OK) {
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 800236e:	2b00      	cmp	r3, #0
 8002370:	d006      	beq.n	8002380 <_ZN4File5writeEPKc+0x74>
		//printf("Wrote %i bytes to '%s'!\r\n", bytesWrote, _nameFile);
	} else {
		printf("f_write error (%i)\r\n", _fres);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8002378:	4619      	mov	r1, r3
 800237a:	4806      	ldr	r0, [pc, #24]	; (8002394 <_ZN4File5writeEPKc+0x88>)
 800237c:	f00e ff96 	bl	80112ac <iprintf>
	}

	 //Be a tidy kiwi - don't forget to close your file!
	f_close(&_fil);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4618      	mov	r0, r3
 8002384:	f00a fd1a 	bl	800cdbc <f_close>
}
 8002388:	bf00      	nop
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	bd90      	pop	{r4, r7, pc}
 8002390:	08014350 	.word	0x08014350
 8002394:	08014380 	.word	0x08014380

08002398 <_ZN4File5clearEv>:

void File::clear(){
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

	//write a file "write.txt"
	_fres = f_open(&_fil, _nameFile, FA_CREATE_ALWAYS);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f203 2331 	addw	r3, r3, #561	; 0x231
 80023a8:	2208      	movs	r2, #8
 80023aa:	4619      	mov	r1, r3
 80023ac:	f009 ffa6 	bl	800c2fc <f_open>
 80023b0:	4603      	mov	r3, r0
 80023b2:	461a      	mov	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
	if(_fres == FR_OK) {
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d006      	beq.n	80023d2 <_ZN4File5clearEv+0x3a>
     //printf("I was able to open 'write.txt' for writing\r\n");
	} else {
		printf("f_open error (%i)\r\n", _fres);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 80023ca:	4619      	mov	r1, r3
 80023cc:	4805      	ldr	r0, [pc, #20]	; (80023e4 <_ZN4File5clearEv+0x4c>)
 80023ce:	f00e ff6d 	bl	80112ac <iprintf>
    }
	 //Be a tidy kiwi - don't forget to close your file!
	f_close(&_fil);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f00a fcf1 	bl	800cdbc <f_close>
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	08014350 	.word	0x08014350

080023e8 <_ZN5Flash5eraseEv>:

#include "Flash.h"
extern thresholdTemp Temprature;

void Flash::erase()
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
	uint32_t pageError;
	FLASH_EraseInitTypeDef basicFlash;

	basicFlash.TypeErase = FLASH_TYPEERASE_PAGES;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
	basicFlash.Banks = _bank;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	613b      	str	r3, [r7, #16]
	basicFlash.Page = _page;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	617b      	str	r3, [r7, #20]
	basicFlash.NbPages = 1;
 8002400:	2301      	movs	r3, #1
 8002402:	61bb      	str	r3, [r7, #24]

	HAL_FLASH_Unlock();
 8002404:	f001 fe60 	bl	80040c8 <HAL_FLASH_Unlock>

	HAL_FLASHEx_Erase(&basicFlash, &pageError);
 8002408:	f107 021c 	add.w	r2, r7, #28
 800240c:	f107 030c 	add.w	r3, r7, #12
 8002410:	4611      	mov	r1, r2
 8002412:	4618      	mov	r0, r3
 8002414:	f001 ff2c 	bl	8004270 <HAL_FLASHEx_Erase>
}
 8002418:	bf00      	nop
 800241a:	3720      	adds	r7, #32
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <_ZN5Flash5writhEPv>:

void Flash::writh(void* data)
{
 8002420:	b5b0      	push	{r4, r5, r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 800242a:	f001 fe4d 	bl	80040c8 <HAL_FLASH_Unlock>
	erase();
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff ffda 	bl	80023e8 <_ZN5Flash5eraseEv>
	uint64_t* Data = (uint64_t *)(data);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	60fb      	str	r3, [r7, #12]
	for(uint64_t i = 0; i < 18 ; i ++){
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002444:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002448:	2a12      	cmp	r2, #18
 800244a:	f173 0300 	sbcs.w	r3, r3, #0
 800244e:	d215      	bcs.n	800247c <_ZN5Flash5writhEPv+0x5c>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)_flashAdd+(i*8), *(Data+i));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	18d1      	adds	r1, r2, r3
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	4413      	add	r3, r2
 8002462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002466:	2000      	movs	r0, #0
 8002468:	f001 fcd6 	bl	8003e18 <HAL_FLASH_Program>
	for(uint64_t i = 0; i < 18 ; i ++){
 800246c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002470:	1c54      	adds	r4, r2, #1
 8002472:	f143 0500 	adc.w	r5, r3, #0
 8002476:	e9c7 4504 	strd	r4, r5, [r7, #16]
 800247a:	e7e3      	b.n	8002444 <_ZN5Flash5writhEPv+0x24>
	}
}
 800247c:	bf00      	nop
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bdb0      	pop	{r4, r5, r7, pc}

08002484 <_ZN5Flash4readEv>:

void Flash::read()
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 800248c:	f001 fe1c 	bl	80040c8 <HAL_FLASH_Unlock>
	thresholdTemp * data = (thresholdTemp *)(_flashAdd);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	60fb      	str	r3, [r7, #12]
	if(data->magicNum!= 0x5A5A){
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	889b      	ldrh	r3, [r3, #4]
 800249a:	f645 225a 	movw	r2, #23130	; 0x5a5a
 800249e:	4293      	cmp	r3, r2
 80024a0:	d106      	bne.n	80024b0 <_ZN5Flash4readEv+0x2c>
		return;
	}
	Temprature = *data;
 80024a2:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <_ZN5Flash4readEv+0x34>)
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	6811      	ldr	r1, [r2, #0]
 80024a8:	6019      	str	r1, [r3, #0]
 80024aa:	8892      	ldrh	r2, [r2, #4]
 80024ac:	809a      	strh	r2, [r3, #4]
 80024ae:	e000      	b.n	80024b2 <_ZN5Flash4readEv+0x2e>
		return;
 80024b0:	bf00      	nop
}
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000000 	.word	0x20000000

080024bc <_ZN3Led8getGPIOxEv>:

    void on();
    void off();
    void blink();

    GPIO_TypeDef* getGPIOx(){
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
    	return _GPIOx;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
   }
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <_ZN3Led11getGPIO_PinEv>:

    uint16_t getGPIO_Pin(){
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
        return _GPIO_Pin;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	891b      	ldrh	r3, [r3, #8]
   }
 80024e0:	4618      	mov	r0, r3
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <_ZN3Led8getStateEv>:

    LedState getState(){
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
    	return _state;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	781b      	ldrb	r3, [r3, #0]
   }
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <_ZN3LedC1EP12GPIO_TypeDeft>:
#include <stdio.h>
#include "cmsis_os.h"

extern Led ledB;

Led::Led(GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin)
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	4613      	mov	r3, r2
 8002510:	80fb      	strh	r3, [r7, #6]
{
	_GPIOx = GPIOx;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	605a      	str	r2, [r3, #4]
	_GPIO_Pin = GPIO_Pin;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	88fa      	ldrh	r2, [r7, #6]
 800251c:	811a      	strh	r2, [r3, #8]
	_state = STATE_OFF;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	701a      	strb	r2, [r3, #0]
}
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4618      	mov	r0, r3
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <_ZN3Led2onEv>:

void Led::on()
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
	_state = STATE_ON,
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_GPIOx, _GPIO_Pin, GPIO_PIN_SET);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6858      	ldr	r0, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	891b      	ldrh	r3, [r3, #8]
 8002548:	2201      	movs	r2, #1
 800254a:	4619      	mov	r1, r3
 800254c:	f002 f996 	bl	800487c <HAL_GPIO_WritePin>
}
 8002550:	bf00      	nop
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <_ZN3Led3offEv>:

void Led::off()
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
	_state = STATE_OFF,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_GPIOx, _GPIO_Pin, GPIO_PIN_RESET);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6858      	ldr	r0, [r3, #4]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	891b      	ldrh	r3, [r3, #8]
 800256e:	2200      	movs	r2, #0
 8002570:	4619      	mov	r1, r3
 8002572:	f002 f983 	bl	800487c <HAL_GPIO_WritePin>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <_ZN3Led5blinkEv>:
void Led::blink()
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
	_state = STATE_BLINKING;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2202      	movs	r2, #2
 800258a:	701a      	strb	r2, [r3, #0]
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <StartBlinkTask>:


extern "C" void StartBlinkTask()
{
 8002598:	b598      	push	{r3, r4, r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN startBlinkTask */

  /* Infinite loop */
  while(1)
  {
	if(ledB.getState() == STATE_BLINKING){
 800259c:	480f      	ldr	r0, [pc, #60]	; (80025dc <StartBlinkTask+0x44>)
 800259e:	f7ff ffa5 	bl	80024ec <_ZN3Led8getStateEv>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	bf0c      	ite	eq
 80025a8:	2301      	moveq	r3, #1
 80025aa:	2300      	movne	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00f      	beq.n	80025d2 <StartBlinkTask+0x3a>
	HAL_GPIO_TogglePin(ledB.getGPIOx(), ledB.getGPIO_Pin());
 80025b2:	480a      	ldr	r0, [pc, #40]	; (80025dc <StartBlinkTask+0x44>)
 80025b4:	f7ff ff82 	bl	80024bc <_ZN3Led8getGPIOxEv>
 80025b8:	4604      	mov	r4, r0
 80025ba:	4808      	ldr	r0, [pc, #32]	; (80025dc <StartBlinkTask+0x44>)
 80025bc:	f7ff ff8a 	bl	80024d4 <_ZN3Led11getGPIO_PinEv>
 80025c0:	4603      	mov	r3, r0
 80025c2:	4619      	mov	r1, r3
 80025c4:	4620      	mov	r0, r4
 80025c6:	f002 f971 	bl	80048ac <HAL_GPIO_TogglePin>
	osDelay(600);
 80025ca:	f44f 7016 	mov.w	r0, #600	; 0x258
 80025ce:	f00a fe13 	bl	800d1f8 <osDelay>
	}
	osDelay(1);
 80025d2:	2001      	movs	r0, #1
 80025d4:	f00a fe10 	bl	800d1f8 <osDelay>
	if(ledB.getState() == STATE_BLINKING){
 80025d8:	e7e0      	b.n	800259c <StartBlinkTask+0x4>
 80025da:	bf00      	nop
 80025dc:	20000320 	.word	0x20000320

080025e0 <_ZN3LedD1Ev>:
    ~Led(){};
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <_ZN6BuzzerC1EP17TIM_HandleTypeDef>:
private:
	StateBuzzer _state;
	TIM_HandleTypeDef * _timer;

public:
	Buzzer(TIM_HandleTypeDef * timer){
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	6039      	str	r1, [r7, #0]
	_timer = timer;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	605a      	str	r2, [r3, #4]
	}
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4618      	mov	r0, r3
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <_ZN6BuzzerD1Ev>:
	~Buzzer(){};
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <_ZN6ButtonD1Ev>:
	uint16_t _GPIO_Pin;
public:


	Button(GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin);
    ~Button(){};
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4618      	mov	r0, r3
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <_ZN3DhtC1EP12GPIO_TypeDeftP17TIM_HandleTypeDef>:

	int waitWhileEqual(int value, int expectedTime);
	void setGpioOutput();
	void setGpioInput();
public:
	Dht( GPIO_TypeDef* gpioPort, uint16_t gpioPin, TIM_HandleTypeDef * timer){
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	603b      	str	r3, [r7, #0]
 800264c:	4613      	mov	r3, r2
 800264e:	80fb      	strh	r3, [r7, #6]
		_gpioPort = gpioPort;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	601a      	str	r2, [r3, #0]
		_gpioPin = gpioPin;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	88fa      	ldrh	r2, [r7, #6]
 800265a:	809a      	strh	r2, [r3, #4]
		_timer = timer;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	609a      	str	r2, [r3, #8]
		_temperature = 0.0;
 8002662:	68f9      	ldr	r1, [r7, #12]
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	e9c1 2306 	strd	r2, r3, [r1, #24]
		_humidity = 0.0;
 8002670:	68f9      	ldr	r1, [r7, #12]
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	}
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4618      	mov	r0, r3
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <_ZN3DhtD1Ev>:
	~Dht(){};
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <_ZN5FlashC1Em>:
	uint32_t _flashAdd;
	uint32_t _page;
	uint32_t _bank;
public:

	Flash(uint32_t address){
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	6039      	str	r1, [r7, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026ba:	605a      	str	r2, [r3, #4]
		_flashAdd = address;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	609a      	str	r2, [r3, #8]
		_page = ((_flashAdd-_flashStartAddess)/_pageSize);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	1ad2      	subs	r2, r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	60da      	str	r2, [r3, #12]
		_bank = _page < 256 ?  FLASH_BANK_1 : FLASH_BANK_2;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	2bff      	cmp	r3, #255	; 0xff
 80026de:	d801      	bhi.n	80026e4 <_ZN5FlashC1Em+0x42>
 80026e0:	2201      	movs	r2, #1
 80026e2:	e000      	b.n	80026e6 <_ZN5FlashC1Em+0x44>
 80026e4:	2202      	movs	r2, #2
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	611a      	str	r2, [r3, #16]
	}
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4618      	mov	r0, r3
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <_ZN5FlashD1Ev>:
	~Flash(){};
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4618      	mov	r0, r3
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <_ZN3RtcC1EP19__I2C_HandleTypeDefm>:

	int bcdToInt(uint8_t bcd);
	uint8_t intToBcd(int value, int minVal, int maxVal);

public:
	Rtc(I2C_HandleTypeDef * hi2c, uint32_t devAddr){
 800270e:	b480      	push	{r7}
 8002710:	b085      	sub	sp, #20
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
		_hi2c = hi2c;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	601a      	str	r2, [r3, #0]
		_devAddr = devAddr;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	b2da      	uxtb	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	711a      	strb	r2, [r3, #4]
	};
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4618      	mov	r0, r3
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <_ZN3RtcD1Ev>:
	~Rtc(){};
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <_ZN4FileD1Ev>:
	char _nameFile [20];
	DWORD _free_clusters, _free_sectors, _total_sectors;

public:
	File(const char* nameFile);
	~File(){};
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <_ZN6SDcardD1Ev>:
private:
	FATFS _fatFs; 	//Fatfs handle
	FRESULT _fres; //Result after operations
public:
	SDcard();
	~SDcard(){};
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <_write>:
File warningFile("warning.txt");
static char logBuffer[100];

//////////////////////////////////////////////////////////////
extern "C" int _write(int fd, char* ptr, int len)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	b29a      	uxth	r2, r3
 8002788:	f04f 33ff 	mov.w	r3, #4294967295
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	4804      	ldr	r0, [pc, #16]	; (80027a0 <_write+0x28>)
 8002790:	f006 f8fa 	bl	8008988 <HAL_UART_Transmit>
	return len;
 8002794:	687b      	ldr	r3, [r7, #4]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000c70 	.word	0x20000c70

080027a4 <HAL_GPIO_EXTI_Callback>:
//////////////////////////////////////////////////////////////


extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	80fb      	strh	r3, [r7, #6]
	button.interrupt();
 80027ae:	4803      	ldr	r0, [pc, #12]	; (80027bc <HAL_GPIO_EXTI_Callback+0x18>)
 80027b0:	f7fe fbce 	bl	8000f50 <_ZN6Button9interruptEv>
}
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	2000030c 	.word	0x2000030c

080027c0 <_Z7sendLogv>:
/////////////////////////////////////////////////////////////


void sendLog(){
 80027c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027c2:	b08d      	sub	sp, #52	; 0x34
 80027c4:	af08      	add	r7, sp, #32
	rtc.getTime(&dateTime);
 80027c6:	491a      	ldr	r1, [pc, #104]	; (8002830 <_Z7sendLogv+0x70>)
 80027c8:	481a      	ldr	r0, [pc, #104]	; (8002834 <_Z7sendLogv+0x74>)
 80027ca:	f000 fa31 	bl	8002c30 <_ZN3Rtc7getTimeEP8DateTime>
	sprintf(logBuffer,"date time : %02d:%02d:%02d-%d-%02d/%02d/%02d temperature: %f \r\n",
 80027ce:	4b18      	ldr	r3, [pc, #96]	; (8002830 <_Z7sendLogv+0x70>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	4b16      	ldr	r3, [pc, #88]	; (8002830 <_Z7sendLogv+0x70>)
 80027d6:	6859      	ldr	r1, [r3, #4]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	4b15      	ldr	r3, [pc, #84]	; (8002830 <_Z7sendLogv+0x70>)
 80027dc:	681c      	ldr	r4, [r3, #0]
 80027de:	4b14      	ldr	r3, [pc, #80]	; (8002830 <_Z7sendLogv+0x70>)
 80027e0:	68dd      	ldr	r5, [r3, #12]
 80027e2:	4b13      	ldr	r3, [pc, #76]	; (8002830 <_Z7sendLogv+0x70>)
 80027e4:	691e      	ldr	r6, [r3, #16]
 80027e6:	4b12      	ldr	r3, [pc, #72]	; (8002830 <_Z7sendLogv+0x70>)
 80027e8:	6958      	ldr	r0, [r3, #20]
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	4b10      	ldr	r3, [pc, #64]	; (8002830 <_Z7sendLogv+0x70>)
 80027ee:	699a      	ldr	r2, [r3, #24]
 80027f0:	603a      	str	r2, [r7, #0]
 80027f2:	4811      	ldr	r0, [pc, #68]	; (8002838 <_Z7sendLogv+0x78>)
 80027f4:	f7ff fcd4 	bl	80021a0 <_ZN3Dht14getTemperatureEv>
 80027f8:	eeb0 7a40 	vmov.f32	s14, s0
 80027fc:	eef0 7a60 	vmov.f32	s15, s1
 8002800:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	9204      	str	r2, [sp, #16]
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	9003      	str	r0, [sp, #12]
 800280c:	9602      	str	r6, [sp, #8]
 800280e:	9501      	str	r5, [sp, #4]
 8002810:	9400      	str	r4, [sp, #0]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4909      	ldr	r1, [pc, #36]	; (800283c <_Z7sendLogv+0x7c>)
 8002818:	4809      	ldr	r0, [pc, #36]	; (8002840 <_Z7sendLogv+0x80>)
 800281a:	f00e fe29 	bl	8011470 <siprintf>
				dateTime.hours, dateTime.min, dateTime.sec, dateTime.weekDay,
				dateTime.day, dateTime.month, dateTime.year,
				dht.getTemperature() );
	logFile.write(logBuffer);
 800281e:	4908      	ldr	r1, [pc, #32]	; (8002840 <_Z7sendLogv+0x80>)
 8002820:	4808      	ldr	r0, [pc, #32]	; (8002844 <_Z7sendLogv+0x84>)
 8002822:	f7ff fd73 	bl	800230c <_ZN4File5writeEPKc>
}
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800282e:	bf00      	nop
 8002830:	20000374 	.word	0x20000374
 8002834:	2000036c 	.word	0x2000036c
 8002838:	20000330 	.word	0x20000330
 800283c:	08014398 	.word	0x08014398
 8002840:	20000a70 	.word	0x20000a70
 8002844:	200005c8 	.word	0x200005c8

08002848 <_Z11sendWarningPKc>:


void sendWarning(const char* message){
 8002848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800284a:	b091      	sub	sp, #68	; 0x44
 800284c:	af0a      	add	r7, sp, #40	; 0x28
 800284e:	6178      	str	r0, [r7, #20]
	rtc.getTime(&dateTime);
 8002850:	491a      	ldr	r1, [pc, #104]	; (80028bc <_Z11sendWarningPKc+0x74>)
 8002852:	481b      	ldr	r0, [pc, #108]	; (80028c0 <_Z11sendWarningPKc+0x78>)
 8002854:	f000 f9ec 	bl	8002c30 <_ZN3Rtc7getTimeEP8DateTime>
	sprintf(logBuffer,"date time : %02d:%02d:%02d-%d-%02d/%02d/%02d temperature: %f - %s \r\n",
 8002858:	4b18      	ldr	r3, [pc, #96]	; (80028bc <_Z11sendWarningPKc+0x74>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	4b17      	ldr	r3, [pc, #92]	; (80028bc <_Z11sendWarningPKc+0x74>)
 8002860:	6859      	ldr	r1, [r3, #4]
 8002862:	60f9      	str	r1, [r7, #12]
 8002864:	4b15      	ldr	r3, [pc, #84]	; (80028bc <_Z11sendWarningPKc+0x74>)
 8002866:	681c      	ldr	r4, [r3, #0]
 8002868:	4b14      	ldr	r3, [pc, #80]	; (80028bc <_Z11sendWarningPKc+0x74>)
 800286a:	68dd      	ldr	r5, [r3, #12]
 800286c:	4b13      	ldr	r3, [pc, #76]	; (80028bc <_Z11sendWarningPKc+0x74>)
 800286e:	691e      	ldr	r6, [r3, #16]
 8002870:	4b12      	ldr	r3, [pc, #72]	; (80028bc <_Z11sendWarningPKc+0x74>)
 8002872:	6958      	ldr	r0, [r3, #20]
 8002874:	60b8      	str	r0, [r7, #8]
 8002876:	4b11      	ldr	r3, [pc, #68]	; (80028bc <_Z11sendWarningPKc+0x74>)
 8002878:	699a      	ldr	r2, [r3, #24]
 800287a:	607a      	str	r2, [r7, #4]
 800287c:	4811      	ldr	r0, [pc, #68]	; (80028c4 <_Z11sendWarningPKc+0x7c>)
 800287e:	f7ff fc8f 	bl	80021a0 <_ZN3Dht14getTemperatureEv>
 8002882:	eeb0 7a40 	vmov.f32	s14, s0
 8002886:	eef0 7a60 	vmov.f32	s15, s1
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	9308      	str	r3, [sp, #32]
 800288e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	9204      	str	r2, [sp, #16]
 8002896:	68b8      	ldr	r0, [r7, #8]
 8002898:	9003      	str	r0, [sp, #12]
 800289a:	9602      	str	r6, [sp, #8]
 800289c:	9501      	str	r5, [sp, #4]
 800289e:	9400      	str	r4, [sp, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	4908      	ldr	r1, [pc, #32]	; (80028c8 <_Z11sendWarningPKc+0x80>)
 80028a6:	4809      	ldr	r0, [pc, #36]	; (80028cc <_Z11sendWarningPKc+0x84>)
 80028a8:	f00e fde2 	bl	8011470 <siprintf>
					dateTime.hours, dateTime.min, dateTime.sec, dateTime.weekDay,
					dateTime.day, dateTime.month, dateTime.year,
					dht.getTemperature() , message );
	warningFile.write(logBuffer);
 80028ac:	4907      	ldr	r1, [pc, #28]	; (80028cc <_Z11sendWarningPKc+0x84>)
 80028ae:	4808      	ldr	r0, [pc, #32]	; (80028d0 <_Z11sendWarningPKc+0x88>)
 80028b0:	f7ff fd2c 	bl	800230c <_ZN4File5writeEPKc>
}
 80028b4:	bf00      	nop
 80028b6:	371c      	adds	r7, #28
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028bc:	20000374 	.word	0x20000374
 80028c0:	2000036c 	.word	0x2000036c
 80028c4:	20000330 	.word	0x20000330
 80028c8:	080143d8 	.word	0x080143d8
 80028cc:	20000a70 	.word	0x20000a70
 80028d0:	2000081c 	.word	0x2000081c

080028d4 <StartSendLogTask>:

//////////////////////////////////////////////////////////////////////////
extern "C" void StartSendLogTask(void *argument)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartsendLogTask */
  /* Infinite loop */
  TickType_t ticks = xTaskGetTickCount();
 80028dc:	f00c fa74 	bl	800edc8 <xTaskGetTickCount>
 80028e0:	60f8      	str	r0, [r7, #12]
  while(1)
  {
	//send log all 1 seconds.
	ticks+=60000;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 80028e8:	3360      	adds	r3, #96	; 0x60
 80028ea:	60fb      	str	r3, [r7, #12]
	sendLog();
 80028ec:	f7ff ff68 	bl	80027c0 <_Z7sendLogv>
	osDelayUntil(ticks);
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f00a fc9c 	bl	800d22e <osDelayUntil>
	ticks+=60000;
 80028f6:	e7f4      	b.n	80028e2 <StartSendLogTask+0xe>

080028f8 <StartManagerTask>:
  }
  /* USER CODE END StartsendLogTask */
}

extern "C" void StartManagerTask(void *argument)
{
 80028f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManagerTask */
	flash.read();
 8002900:	4856      	ldr	r0, [pc, #344]	; (8002a5c <StartManagerTask+0x164>)
 8002902:	f7ff fdbf 	bl	8002484 <_ZN5Flash4readEv>
	stateTemp stateOfTemp = NORMAL_TEMPRATURE;
 8002906:	2302      	movs	r3, #2
 8002908:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	while(1)
	{

	//////////NORMAL TEMPERATURE///////////////////////
	if(dht.getTemperature() < Temprature.warningTemp){
 800290a:	4855      	ldr	r0, [pc, #340]	; (8002a60 <StartManagerTask+0x168>)
 800290c:	f7ff fc48 	bl	80021a0 <_ZN3Dht14getTemperatureEv>
 8002910:	ec55 4b10 	vmov	r4, r5, d0
 8002914:	4b53      	ldr	r3, [pc, #332]	; (8002a64 <StartManagerTask+0x16c>)
 8002916:	885b      	ldrh	r3, [r3, #2]
 8002918:	4618      	mov	r0, r3
 800291a:	f7fd fe13 	bl	8000544 <__aeabi_i2d>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	2101      	movs	r1, #1
 8002924:	460e      	mov	r6, r1
 8002926:	4620      	mov	r0, r4
 8002928:	4629      	mov	r1, r5
 800292a:	f7fe f8e7 	bl	8000afc <__aeabi_dcmplt>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <StartManagerTask+0x40>
 8002934:	2300      	movs	r3, #0
 8002936:	461e      	mov	r6, r3
 8002938:	b2f3      	uxtb	r3, r6
 800293a:	2b00      	cmp	r3, #0
 800293c:	d02d      	beq.n	800299a <StartManagerTask+0xa2>
			if(stateOfTemp==CRITICAL_TEMPRATURE){
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d108      	bne.n	8002956 <StartManagerTask+0x5e>
						ledB.off();
 8002944:	4848      	ldr	r0, [pc, #288]	; (8002a68 <StartManagerTask+0x170>)
 8002946:	f7ff fe07 	bl	8002558 <_ZN3Led3offEv>
						buzzer.off();
 800294a:	4848      	ldr	r0, [pc, #288]	; (8002a6c <StartManagerTask+0x174>)
 800294c:	f7fe fb74 	bl	8001038 <_ZN6Buzzer3offEv>
						stateOfTemp = NORMAL_TEMPRATURE;
 8002950:	2302      	movs	r3, #2
 8002952:	73fb      	strb	r3, [r7, #15]
 8002954:	e07d      	b.n	8002a52 <StartManagerTask+0x15a>
			}
			else if(stateOfTemp==WARNING_TEMPRATURE &&
 8002956:	7bfb      	ldrb	r3, [r7, #15]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d115      	bne.n	8002988 <StartManagerTask+0x90>
						dht.getTemperature() < (Temprature.warningTemp-3)){
 800295c:	4840      	ldr	r0, [pc, #256]	; (8002a60 <StartManagerTask+0x168>)
 800295e:	f7ff fc1f 	bl	80021a0 <_ZN3Dht14getTemperatureEv>
 8002962:	ec55 4b10 	vmov	r4, r5, d0
 8002966:	4b3f      	ldr	r3, [pc, #252]	; (8002a64 <StartManagerTask+0x16c>)
 8002968:	885b      	ldrh	r3, [r3, #2]
 800296a:	3b03      	subs	r3, #3
 800296c:	4618      	mov	r0, r3
 800296e:	f7fd fde9 	bl	8000544 <__aeabi_i2d>
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
			else if(stateOfTemp==WARNING_TEMPRATURE &&
 8002976:	4620      	mov	r0, r4
 8002978:	4629      	mov	r1, r5
 800297a:	f7fe f8bf 	bl	8000afc <__aeabi_dcmplt>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <StartManagerTask+0x90>
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <StartManagerTask+0x92>
 8002988:	2300      	movs	r3, #0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d061      	beq.n	8002a52 <StartManagerTask+0x15a>
						ledB.off();
 800298e:	4836      	ldr	r0, [pc, #216]	; (8002a68 <StartManagerTask+0x170>)
 8002990:	f7ff fde2 	bl	8002558 <_ZN3Led3offEv>
						stateOfTemp = NORMAL_TEMPRATURE;
 8002994:	2302      	movs	r3, #2
 8002996:	73fb      	strb	r3, [r7, #15]
 8002998:	e05b      	b.n	8002a52 <StartManagerTask+0x15a>
			}
	}
	///////////CRITICAL TEMPERATURE/////////////////////
	else if(dht.getTemperature() > Temprature.criticalTemp){
 800299a:	4831      	ldr	r0, [pc, #196]	; (8002a60 <StartManagerTask+0x168>)
 800299c:	f7ff fc00 	bl	80021a0 <_ZN3Dht14getTemperatureEv>
 80029a0:	ec55 4b10 	vmov	r4, r5, d0
 80029a4:	4b2f      	ldr	r3, [pc, #188]	; (8002a64 <StartManagerTask+0x16c>)
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fd fdcb 	bl	8000544 <__aeabi_i2d>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	2101      	movs	r1, #1
 80029b4:	460e      	mov	r6, r1
 80029b6:	4620      	mov	r0, r4
 80029b8:	4629      	mov	r1, r5
 80029ba:	f7fe f8bd 	bl	8000b38 <__aeabi_dcmpgt>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <StartManagerTask+0xd0>
 80029c4:	2300      	movs	r3, #0
 80029c6:	461e      	mov	r6, r3
 80029c8:	b2f3      	uxtb	r3, r6
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00e      	beq.n	80029ec <StartManagerTask+0xf4>
		if(stateOfTemp!=CRITICAL_TEMPRATURE){
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d03e      	beq.n	8002a52 <StartManagerTask+0x15a>
		ledB.blink();
 80029d4:	4824      	ldr	r0, [pc, #144]	; (8002a68 <StartManagerTask+0x170>)
 80029d6:	f7ff fdd2 	bl	800257e <_ZN3Led5blinkEv>
		buzzer.on();
 80029da:	4824      	ldr	r0, [pc, #144]	; (8002a6c <StartManagerTask+0x174>)
 80029dc:	f7fe fb16 	bl	800100c <_ZN6Buzzer2onEv>
		stateOfTemp = CRITICAL_TEMPRATURE;
 80029e0:	2300      	movs	r3, #0
 80029e2:	73fb      	strb	r3, [r7, #15]
		sendWarning("WARNING! THE TEMPERTURE IS CRITICAL!");
 80029e4:	4822      	ldr	r0, [pc, #136]	; (8002a70 <StartManagerTask+0x178>)
 80029e6:	f7ff ff2f 	bl	8002848 <_Z11sendWarningPKc>
 80029ea:	e032      	b.n	8002a52 <StartManagerTask+0x15a>
		}
	}
	//////////WARNING TEMPERATURE///////////////////////
	else{
		if(stateOfTemp==NORMAL_TEMPRATURE){
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d108      	bne.n	8002a04 <StartManagerTask+0x10c>
			ledB.on();
 80029f2:	481d      	ldr	r0, [pc, #116]	; (8002a68 <StartManagerTask+0x170>)
 80029f4:	f7ff fd9d 	bl	8002532 <_ZN3Led2onEv>
			stateOfTemp = WARNING_TEMPRATURE;
 80029f8:	2301      	movs	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
			sendWarning("WARNING! THE TEMPERTURE IS ABOVE NORMAL!");
 80029fc:	481d      	ldr	r0, [pc, #116]	; (8002a74 <StartManagerTask+0x17c>)
 80029fe:	f7ff ff23 	bl	8002848 <_Z11sendWarningPKc>
 8002a02:	e026      	b.n	8002a52 <StartManagerTask+0x15a>
		}
		else if(stateOfTemp==CRITICAL_TEMPRATURE &&
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d115      	bne.n	8002a36 <StartManagerTask+0x13e>
			dht.getTemperature() < (Temprature.criticalTemp-3)){
 8002a0a:	4815      	ldr	r0, [pc, #84]	; (8002a60 <StartManagerTask+0x168>)
 8002a0c:	f7ff fbc8 	bl	80021a0 <_ZN3Dht14getTemperatureEv>
 8002a10:	ec55 4b10 	vmov	r4, r5, d0
 8002a14:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <StartManagerTask+0x16c>)
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	3b03      	subs	r3, #3
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fd fd92 	bl	8000544 <__aeabi_i2d>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
		else if(stateOfTemp==CRITICAL_TEMPRATURE &&
 8002a24:	4620      	mov	r0, r4
 8002a26:	4629      	mov	r1, r5
 8002a28:	f7fe f868 	bl	8000afc <__aeabi_dcmplt>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <StartManagerTask+0x13e>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <StartManagerTask+0x140>
 8002a36:	2300      	movs	r3, #0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00a      	beq.n	8002a52 <StartManagerTask+0x15a>
			buzzer.off();
 8002a3c:	480b      	ldr	r0, [pc, #44]	; (8002a6c <StartManagerTask+0x174>)
 8002a3e:	f7fe fafb 	bl	8001038 <_ZN6Buzzer3offEv>
			ledB.on();
 8002a42:	4809      	ldr	r0, [pc, #36]	; (8002a68 <StartManagerTask+0x170>)
 8002a44:	f7ff fd75 	bl	8002532 <_ZN3Led2onEv>
			stateOfTemp = WARNING_TEMPRATURE;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	73fb      	strb	r3, [r7, #15]
			sendWarning("WARNING! THE TEMPERTURE IS ABOVE NORMAL!");
 8002a4c:	4809      	ldr	r0, [pc, #36]	; (8002a74 <StartManagerTask+0x17c>)
 8002a4e:	f7ff fefb 	bl	8002848 <_Z11sendWarningPKc>
		}
	}

	osDelay(1);
 8002a52:	2001      	movs	r0, #1
 8002a54:	f00a fbd0 	bl	800d1f8 <osDelay>
	if(dht.getTemperature() < Temprature.warningTemp){
 8002a58:	e757      	b.n	800290a <StartManagerTask+0x12>
 8002a5a:	bf00      	nop
 8002a5c:	20000358 	.word	0x20000358
 8002a60:	20000330 	.word	0x20000330
 8002a64:	20000000 	.word	0x20000000
 8002a68:	20000320 	.word	0x20000320
 8002a6c:	20000304 	.word	0x20000304
 8002a70:	08014420 	.word	0x08014420
 8002a74:	08014448 	.word	0x08014448

08002a78 <_Z41__static_initialization_and_destruction_0ii>:
  }
  /* USER CODE END StartManagerTask */
}
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d12f      	bne.n	8002ae8 <_Z41__static_initialization_and_destruction_0ii+0x70>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d12a      	bne.n	8002ae8 <_Z41__static_initialization_and_destruction_0ii+0x70>
Buzzer buzzer(&htim3);
 8002a92:	4929      	ldr	r1, [pc, #164]	; (8002b38 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8002a94:	4829      	ldr	r0, [pc, #164]	; (8002b3c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8002a96:	f7ff fdae 	bl	80025f6 <_ZN6BuzzerC1EP17TIM_HandleTypeDef>
Button button(B2_GPIO_Port ,  B2_Pin);
 8002a9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a9e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002aa2:	4827      	ldr	r0, [pc, #156]	; (8002b40 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8002aa4:	f7fe fa3c 	bl	8000f20 <_ZN6ButtonC1EP12GPIO_TypeDeft>
Led ledB(LD2_GPIO_Port , LD2_Pin );
 8002aa8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002aac:	4925      	ldr	r1, [pc, #148]	; (8002b44 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8002aae:	4826      	ldr	r0, [pc, #152]	; (8002b48 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8002ab0:	f7ff fd28 	bl	8002504 <_ZN3LedC1EP12GPIO_TypeDeft>
Dht dht(DHT11_GPIO_Port , DHT11_Pin, &htim16);
 8002ab4:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	4922      	ldr	r1, [pc, #136]	; (8002b44 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8002aba:	4825      	ldr	r0, [pc, #148]	; (8002b50 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8002abc:	f7ff fdc0 	bl	8002640 <_ZN3DhtC1EP12GPIO_TypeDeftP17TIM_HandleTypeDef>
Flash flash(0x08080000);
 8002ac0:	4924      	ldr	r1, [pc, #144]	; (8002b54 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8002ac2:	4825      	ldr	r0, [pc, #148]	; (8002b58 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8002ac4:	f7ff fded 	bl	80026a2 <_ZN5FlashC1Em>
Rtc rtc(&hi2c1, 0xD0);
 8002ac8:	22d0      	movs	r2, #208	; 0xd0
 8002aca:	4924      	ldr	r1, [pc, #144]	; (8002b5c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8002acc:	4824      	ldr	r0, [pc, #144]	; (8002b60 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8002ace:	f7ff fe1e 	bl	800270e <_ZN3RtcC1EP19__I2C_HandleTypeDefm>
SDcard SDCard;
 8002ad2:	4824      	ldr	r0, [pc, #144]	; (8002b64 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8002ad4:	f7fe f9fa 	bl	8000ecc <_ZN6SDcardC1Ev>
File logFile("log.txt");
 8002ad8:	4923      	ldr	r1, [pc, #140]	; (8002b68 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8002ada:	4824      	ldr	r0, [pc, #144]	; (8002b6c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8002adc:	f7ff fb86 	bl	80021ec <_ZN4FileC1EPKc>
File warningFile("warning.txt");
 8002ae0:	4923      	ldr	r1, [pc, #140]	; (8002b70 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8002ae2:	4824      	ldr	r0, [pc, #144]	; (8002b74 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8002ae4:	f7ff fb82 	bl	80021ec <_ZN4FileC1EPKc>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d11f      	bne.n	8002b2e <_Z41__static_initialization_and_destruction_0ii+0xb6>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d11a      	bne.n	8002b2e <_Z41__static_initialization_and_destruction_0ii+0xb6>
 8002af8:	481e      	ldr	r0, [pc, #120]	; (8002b74 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8002afa:	f7ff fe27 	bl	800274c <_ZN4FileD1Ev>
File logFile("log.txt");
 8002afe:	481b      	ldr	r0, [pc, #108]	; (8002b6c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8002b00:	f7ff fe24 	bl	800274c <_ZN4FileD1Ev>
SDcard SDCard;
 8002b04:	4817      	ldr	r0, [pc, #92]	; (8002b64 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8002b06:	f7ff fe2c 	bl	8002762 <_ZN6SDcardD1Ev>
Rtc rtc(&hi2c1, 0xD0);
 8002b0a:	4815      	ldr	r0, [pc, #84]	; (8002b60 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8002b0c:	f7ff fe13 	bl	8002736 <_ZN3RtcD1Ev>
Flash flash(0x08080000);
 8002b10:	4811      	ldr	r0, [pc, #68]	; (8002b58 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8002b12:	f7ff fdf1 	bl	80026f8 <_ZN5FlashD1Ev>
Dht dht(DHT11_GPIO_Port , DHT11_Pin, &htim16);
 8002b16:	480e      	ldr	r0, [pc, #56]	; (8002b50 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8002b18:	f7ff fdb8 	bl	800268c <_ZN3DhtD1Ev>
Led ledB(LD2_GPIO_Port , LD2_Pin );
 8002b1c:	480a      	ldr	r0, [pc, #40]	; (8002b48 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8002b1e:	f7ff fd5f 	bl	80025e0 <_ZN3LedD1Ev>
Button button(B2_GPIO_Port ,  B2_Pin);
 8002b22:	4807      	ldr	r0, [pc, #28]	; (8002b40 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8002b24:	f7ff fd81 	bl	800262a <_ZN6ButtonD1Ev>
Buzzer buzzer(&htim3);
 8002b28:	4804      	ldr	r0, [pc, #16]	; (8002b3c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8002b2a:	f7ff fd73 	bl	8002614 <_ZN6BuzzerD1Ev>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000b8c 	.word	0x20000b8c
 8002b3c:	20000304 	.word	0x20000304
 8002b40:	2000030c 	.word	0x2000030c
 8002b44:	48000400 	.word	0x48000400
 8002b48:	20000320 	.word	0x20000320
 8002b4c:	20000c24 	.word	0x20000c24
 8002b50:	20000330 	.word	0x20000330
 8002b54:	08080000 	.word	0x08080000
 8002b58:	20000358 	.word	0x20000358
 8002b5c:	20000ad4 	.word	0x20000ad4
 8002b60:	2000036c 	.word	0x2000036c
 8002b64:	20000390 	.word	0x20000390
 8002b68:	08014474 	.word	0x08014474
 8002b6c:	200005c8 	.word	0x200005c8
 8002b70:	0801447c 	.word	0x0801447c
 8002b74:	2000081c 	.word	0x2000081c

08002b78 <_GLOBAL__sub_I_buzzer>:
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002b80:	2001      	movs	r0, #1
 8002b82:	f7ff ff79 	bl	8002a78 <_Z41__static_initialization_and_destruction_0ii>
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <_GLOBAL__sub_D_buzzer>:
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002b90:	2000      	movs	r0, #0
 8002b92:	f7ff ff71 	bl	8002a78 <_Z41__static_initialization_and_destruction_0ii>
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <_ZN3Rtc8bcdToIntEh>:

#define RTC_START_STOP      (1 << 7)
#define RTC_DATE_TIME_SIZE  7

int Rtc::bcdToInt(uint8_t bcd)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	70fb      	strb	r3, [r7, #3]
	return (bcd >> 4) * 10 + (bcd & 0x0F);
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	091b      	lsrs	r3, r3, #4
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	461a      	mov	r2, r3
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	78fb      	ldrb	r3, [r7, #3]
 8002bb8:	f003 030f 	and.w	r3, r3, #15
 8002bbc:	4413      	add	r3, r2
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
	...

08002bcc <_ZN3Rtc8intToBcdEiii>:

uint8_t Rtc::intToBcd(int value, int minVal, int maxVal)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
 8002bd8:	603b      	str	r3, [r7, #0]
	if (value < minVal || value > maxVal) {
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	db03      	blt.n	8002bea <_ZN3Rtc8intToBcdEiii+0x1e>
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	dd01      	ble.n	8002bee <_ZN3Rtc8intToBcdEiii+0x22>
		return 0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	e018      	b.n	8002c20 <_ZN3Rtc8intToBcdEiii+0x54>
	}

	return ((value / 10) << 4) | (value % 10);
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	4a0e      	ldr	r2, [pc, #56]	; (8002c2c <_ZN3Rtc8intToBcdEiii+0x60>)
 8002bf2:	fb82 1203 	smull	r1, r2, r2, r3
 8002bf6:	1092      	asrs	r2, r2, #2
 8002bf8:	17db      	asrs	r3, r3, #31
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	b258      	sxtb	r0, r3
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <_ZN3Rtc8intToBcdEiii+0x60>)
 8002c04:	fb83 1302 	smull	r1, r3, r3, r2
 8002c08:	1099      	asrs	r1, r3, #2
 8002c0a:	17d3      	asrs	r3, r2, #31
 8002c0c:	1ac9      	subs	r1, r1, r3
 8002c0e:	460b      	mov	r3, r1
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	1ad1      	subs	r1, r2, r3
 8002c18:	b24b      	sxtb	r3, r1
 8002c1a:	4303      	orrs	r3, r0
 8002c1c:	b25b      	sxtb	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	66666667 	.word	0x66666667

08002c30 <_ZN3Rtc7getTimeEP8DateTime>:


void Rtc::getTime(DateTime* dateTime)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af04      	add	r7, sp, #16
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
	uint8_t buffer[RTC_DATE_TIME_SIZE];
	_status = HAL_I2C_Mem_Read(_hi2c, _devAddr, 0, 1, buffer, RTC_DATE_TIME_SIZE, 0xFF);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6818      	ldr	r0, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	791b      	ldrb	r3, [r3, #4]
 8002c42:	b299      	uxth	r1, r3
 8002c44:	23ff      	movs	r3, #255	; 0xff
 8002c46:	9302      	str	r3, [sp, #8]
 8002c48:	2307      	movs	r3, #7
 8002c4a:	9301      	str	r3, [sp, #4]
 8002c4c:	f107 0308 	add.w	r3, r7, #8
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	2301      	movs	r3, #1
 8002c54:	2200      	movs	r2, #0
 8002c56:	f001 ffff 	bl	8004c58 <HAL_I2C_Mem_Read>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	715a      	strb	r2, [r3, #5]

	if (_status != HAL_OK){
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	795b      	ldrb	r3, [r3, #5]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d13a      	bne.n	8002ce0 <_ZN3Rtc7getTimeEP8DateTime+0xb0>
		return;
	}
		// remove stop bit if set
	buffer[0] &= ~RTC_START_STOP;
 8002c6a:	7a3b      	ldrb	r3, [r7, #8]
 8002c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	723b      	strb	r3, [r7, #8]
	dateTime->sec = bcdToInt(buffer[0]);
 8002c74:	7a3b      	ldrb	r3, [r7, #8]
 8002c76:	4619      	mov	r1, r3
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7ff ff8d 	bl	8002b98 <_ZN3Rtc8bcdToIntEh>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	601a      	str	r2, [r3, #0]
	dateTime->min = bcdToInt(buffer[1]);
 8002c84:	7a7b      	ldrb	r3, [r7, #9]
 8002c86:	4619      	mov	r1, r3
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7ff ff85 	bl	8002b98 <_ZN3Rtc8bcdToIntEh>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	605a      	str	r2, [r3, #4]
	dateTime->hours = bcdToInt(buffer[2]);
 8002c94:	7abb      	ldrb	r3, [r7, #10]
 8002c96:	4619      	mov	r1, r3
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff ff7d 	bl	8002b98 <_ZN3Rtc8bcdToIntEh>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	609a      	str	r2, [r3, #8]
	dateTime->weekDay = buffer[3] & 0x07;
 8002ca4:	7afb      	ldrb	r3, [r7, #11]
 8002ca6:	f003 0207 	and.w	r2, r3, #7
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	60da      	str	r2, [r3, #12]
	dateTime->day = bcdToInt(buffer[4]);
 8002cae:	7b3b      	ldrb	r3, [r7, #12]
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff ff70 	bl	8002b98 <_ZN3Rtc8bcdToIntEh>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	611a      	str	r2, [r3, #16]
	dateTime->month = bcdToInt(buffer[5]);
 8002cbe:	7b7b      	ldrb	r3, [r7, #13]
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7ff ff68 	bl	8002b98 <_ZN3Rtc8bcdToIntEh>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	615a      	str	r2, [r3, #20]
	dateTime->year = bcdToInt(buffer[6]);
 8002cce:	7bbb      	ldrb	r3, [r7, #14]
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff ff60 	bl	8002b98 <_ZN3Rtc8bcdToIntEh>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	619a      	str	r2, [r3, #24]
 8002cde:	e000      	b.n	8002ce2 <_ZN3Rtc7getTimeEP8DateTime+0xb2>
		return;
 8002ce0:	bf00      	nop

}
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <_ZN3Rtc7setTimeEP8DateTime>:



void Rtc::setTime(DateTime* dateTime)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af04      	add	r7, sp, #16
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
	uint8_t buffer[RTC_DATE_TIME_SIZE];

	buffer[0] = intToBcd(dateTime->sec, 0, 59);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6819      	ldr	r1, [r3, #0]
 8002cf6:	233b      	movs	r3, #59	; 0x3b
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff ff66 	bl	8002bcc <_ZN3Rtc8intToBcdEiii>
 8002d00:	4603      	mov	r3, r0
 8002d02:	723b      	strb	r3, [r7, #8]
	buffer[1] = intToBcd(dateTime->min, 0, 59);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	6859      	ldr	r1, [r3, #4]
 8002d08:	233b      	movs	r3, #59	; 0x3b
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff ff5d 	bl	8002bcc <_ZN3Rtc8intToBcdEiii>
 8002d12:	4603      	mov	r3, r0
 8002d14:	727b      	strb	r3, [r7, #9]
	buffer[2] = intToBcd(dateTime->hours, 0, 59);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	6899      	ldr	r1, [r3, #8]
 8002d1a:	233b      	movs	r3, #59	; 0x3b
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff ff54 	bl	8002bcc <_ZN3Rtc8intToBcdEiii>
 8002d24:	4603      	mov	r3, r0
 8002d26:	72bb      	strb	r3, [r7, #10]
	buffer[3] = dateTime->weekDay < 1 || dateTime->weekDay > 7 ? 0 : dateTime->weekDay;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	dd07      	ble.n	8002d40 <_ZN3Rtc7setTimeEP8DateTime+0x58>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	2b07      	cmp	r3, #7
 8002d36:	dc03      	bgt.n	8002d40 <_ZN3Rtc7setTimeEP8DateTime+0x58>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	e000      	b.n	8002d42 <_ZN3Rtc7setTimeEP8DateTime+0x5a>
 8002d40:	2300      	movs	r3, #0
 8002d42:	72fb      	strb	r3, [r7, #11]
	buffer[4] = intToBcd(dateTime->day, 1, 31);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	6919      	ldr	r1, [r3, #16]
 8002d48:	231f      	movs	r3, #31
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7ff ff3d 	bl	8002bcc <_ZN3Rtc8intToBcdEiii>
 8002d52:	4603      	mov	r3, r0
 8002d54:	733b      	strb	r3, [r7, #12]
	buffer[5] = intToBcd(dateTime->month, 1, 12);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	6959      	ldr	r1, [r3, #20]
 8002d5a:	230c      	movs	r3, #12
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff ff34 	bl	8002bcc <_ZN3Rtc8intToBcdEiii>
 8002d64:	4603      	mov	r3, r0
 8002d66:	737b      	strb	r3, [r7, #13]
	buffer[6] = intToBcd(dateTime->year, 1, 99);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	6999      	ldr	r1, [r3, #24]
 8002d6c:	2363      	movs	r3, #99	; 0x63
 8002d6e:	2201      	movs	r2, #1
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff ff2b 	bl	8002bcc <_ZN3Rtc8intToBcdEiii>
 8002d76:	4603      	mov	r3, r0
 8002d78:	73bb      	strb	r3, [r7, #14]

	_status = HAL_I2C_Mem_Write(_hi2c, _devAddr, 0, 1, buffer, RTC_DATE_TIME_SIZE, 0xFF);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6818      	ldr	r0, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	791b      	ldrb	r3, [r3, #4]
 8002d82:	b299      	uxth	r1, r3
 8002d84:	23ff      	movs	r3, #255	; 0xff
 8002d86:	9302      	str	r3, [sp, #8]
 8002d88:	2307      	movs	r3, #7
 8002d8a:	9301      	str	r3, [sp, #4]
 8002d8c:	f107 0308 	add.w	r3, r7, #8
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	2301      	movs	r3, #1
 8002d94:	2200      	movs	r2, #0
 8002d96:	f001 fe4b 	bl	8004a30 <HAL_I2C_Mem_Write>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	715a      	strb	r2, [r3, #5]
	if (_status != HAL_OK){
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	795b      	ldrb	r3, [r3, #5]
 8002da6:	2b00      	cmp	r3, #0
		return;
	}
}
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002db4:	f000 fdce 	bl	8003954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002db8:	f000 f884 	bl	8002ec4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002dbc:	f000 fa3a 	bl	8003234 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002dc0:	f000 fa08 	bl	80031d4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002dc4:	f000 f8d0 	bl	8002f68 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002dc8:	f000 f94c 	bl	8003064 <MX_TIM3_Init>
  MX_TIM6_Init();
 8002dcc:	f000 f9a4 	bl	8003118 <MX_TIM6_Init>
  MX_TIM16_Init();
 8002dd0:	f000 f9da 	bl	8003188 <MX_TIM16_Init>
  MX_SPI1_Init();
 8002dd4:	f000 f908 	bl	8002fe8 <MX_SPI1_Init>
  MX_FATFS_Init();
 8002dd8:	f006 ff52 	bl	8009c80 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002ddc:	f00a f930 	bl	800d040 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of stopBuzzer */
  stopBuzzerHandle = osSemaphoreNew(1, 1, &stopBuzzer_attributes);
 8002de0:	4a21      	ldr	r2, [pc, #132]	; (8002e68 <main+0xb8>)
 8002de2:	2101      	movs	r1, #1
 8002de4:	2001      	movs	r0, #1
 8002de6:	f00a fa4f 	bl	800d288 <osSemaphoreNew>
 8002dea:	4603      	mov	r3, r0
 8002dec:	4a1f      	ldr	r2, [pc, #124]	; (8002e6c <main+0xbc>)
 8002dee:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002df0:	4a1f      	ldr	r2, [pc, #124]	; (8002e70 <main+0xc0>)
 8002df2:	2100      	movs	r1, #0
 8002df4:	481f      	ldr	r0, [pc, #124]	; (8002e74 <main+0xc4>)
 8002df6:	f00a f96d 	bl	800d0d4 <osThreadNew>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	4a1e      	ldr	r2, [pc, #120]	; (8002e78 <main+0xc8>)
 8002dfe:	6013      	str	r3, [r2, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(StartBlinkTask, NULL, &blinkTask_attributes);
 8002e00:	4a1e      	ldr	r2, [pc, #120]	; (8002e7c <main+0xcc>)
 8002e02:	2100      	movs	r1, #0
 8002e04:	481e      	ldr	r0, [pc, #120]	; (8002e80 <main+0xd0>)
 8002e06:	f00a f965 	bl	800d0d4 <osThreadNew>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4a1d      	ldr	r2, [pc, #116]	; (8002e84 <main+0xd4>)
 8002e0e:	6013      	str	r3, [r2, #0]

  /* creation of comTask */
  comTaskHandle = osThreadNew(StartComTask, NULL, &comTask_attributes);
 8002e10:	4a1d      	ldr	r2, [pc, #116]	; (8002e88 <main+0xd8>)
 8002e12:	2100      	movs	r1, #0
 8002e14:	481d      	ldr	r0, [pc, #116]	; (8002e8c <main+0xdc>)
 8002e16:	f00a f95d 	bl	800d0d4 <osThreadNew>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4a1c      	ldr	r2, [pc, #112]	; (8002e90 <main+0xe0>)
 8002e1e:	6013      	str	r3, [r2, #0]

  /* creation of buttonTak */
  buttonTakHandle = osThreadNew(StartButtonTak, NULL, &buttonTak_attributes);
 8002e20:	4a1c      	ldr	r2, [pc, #112]	; (8002e94 <main+0xe4>)
 8002e22:	2100      	movs	r1, #0
 8002e24:	481c      	ldr	r0, [pc, #112]	; (8002e98 <main+0xe8>)
 8002e26:	f00a f955 	bl	800d0d4 <osThreadNew>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	4a1b      	ldr	r2, [pc, #108]	; (8002e9c <main+0xec>)
 8002e2e:	6013      	str	r3, [r2, #0]

  /* creation of DhtTask */
  DhtTaskHandle = osThreadNew(StartDhtTask, NULL, &DhtTask_attributes);
 8002e30:	4a1b      	ldr	r2, [pc, #108]	; (8002ea0 <main+0xf0>)
 8002e32:	2100      	movs	r1, #0
 8002e34:	481b      	ldr	r0, [pc, #108]	; (8002ea4 <main+0xf4>)
 8002e36:	f00a f94d 	bl	800d0d4 <osThreadNew>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	4a1a      	ldr	r2, [pc, #104]	; (8002ea8 <main+0xf8>)
 8002e3e:	6013      	str	r3, [r2, #0]

  /* creation of ManagerTask */
  ManagerTaskHandle = osThreadNew(StartManagerTask, NULL, &ManagerTask_attributes);
 8002e40:	4a1a      	ldr	r2, [pc, #104]	; (8002eac <main+0xfc>)
 8002e42:	2100      	movs	r1, #0
 8002e44:	481a      	ldr	r0, [pc, #104]	; (8002eb0 <main+0x100>)
 8002e46:	f00a f945 	bl	800d0d4 <osThreadNew>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	4a19      	ldr	r2, [pc, #100]	; (8002eb4 <main+0x104>)
 8002e4e:	6013      	str	r3, [r2, #0]

  /* creation of sendLogTask */
  sendLogTaskHandle = osThreadNew(StartSendLogTask, NULL, &sendLogTask_attributes);
 8002e50:	4a19      	ldr	r2, [pc, #100]	; (8002eb8 <main+0x108>)
 8002e52:	2100      	movs	r1, #0
 8002e54:	4819      	ldr	r0, [pc, #100]	; (8002ebc <main+0x10c>)
 8002e56:	f00a f93d 	bl	800d0d4 <osThreadNew>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	4a18      	ldr	r2, [pc, #96]	; (8002ec0 <main+0x110>)
 8002e5e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002e60:	f00a f912 	bl	800d088 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002e64:	e7fe      	b.n	8002e64 <main+0xb4>
 8002e66:	bf00      	nop
 8002e68:	0801475c 	.word	0x0801475c
 8002e6c:	20000d10 	.word	0x20000d10
 8002e70:	08014660 	.word	0x08014660
 8002e74:	0800334d 	.word	0x0800334d
 8002e78:	20000cf4 	.word	0x20000cf4
 8002e7c:	08014684 	.word	0x08014684
 8002e80:	08002599 	.word	0x08002599
 8002e84:	20000cf8 	.word	0x20000cf8
 8002e88:	080146a8 	.word	0x080146a8
 8002e8c:	08001e25 	.word	0x08001e25
 8002e90:	20000cfc 	.word	0x20000cfc
 8002e94:	080146cc 	.word	0x080146cc
 8002e98:	08000fe5 	.word	0x08000fe5
 8002e9c:	20000d00 	.word	0x20000d00
 8002ea0:	080146f0 	.word	0x080146f0
 8002ea4:	080021c5 	.word	0x080021c5
 8002ea8:	20000d04 	.word	0x20000d04
 8002eac:	08014714 	.word	0x08014714
 8002eb0:	080028f9 	.word	0x080028f9
 8002eb4:	20000d08 	.word	0x20000d08
 8002eb8:	08014738 	.word	0x08014738
 8002ebc:	080028d5 	.word	0x080028d5
 8002ec0:	20000d0c 	.word	0x20000d0c

08002ec4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b096      	sub	sp, #88	; 0x58
 8002ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002eca:	f107 0314 	add.w	r3, r7, #20
 8002ece:	2244      	movs	r2, #68	; 0x44
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f00d fc98 	bl	8010808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ed8:	463b      	mov	r3, r7
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	605a      	str	r2, [r3, #4]
 8002ee0:	609a      	str	r2, [r3, #8]
 8002ee2:	60da      	str	r2, [r3, #12]
 8002ee4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002ee6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002eea:	f002 fb1b 	bl	8005524 <HAL_PWREx_ControlVoltageScaling>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002ef4:	f000 fa32 	bl	800335c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002efc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f00:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f02:	2310      	movs	r3, #16
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f06:	2302      	movs	r3, #2
 8002f08:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002f12:	230a      	movs	r3, #10
 8002f14:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002f16:	2307      	movs	r3, #7
 8002f18:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f22:	f107 0314 	add.w	r3, r7, #20
 8002f26:	4618      	mov	r0, r3
 8002f28:	f002 fb52 	bl	80055d0 <HAL_RCC_OscConfig>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002f32:	f000 fa13 	bl	800335c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f36:	230f      	movs	r3, #15
 8002f38:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002f4a:	463b      	mov	r3, r7
 8002f4c:	2104      	movs	r1, #4
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f002 ff1a 	bl	8005d88 <HAL_RCC_ClockConfig>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002f5a:	f000 f9ff 	bl	800335c <Error_Handler>
  }
}
 8002f5e:	bf00      	nop
 8002f60:	3758      	adds	r7, #88	; 0x58
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <MX_I2C1_Init+0x74>)
 8002f6e:	4a1c      	ldr	r2, [pc, #112]	; (8002fe0 <MX_I2C1_Init+0x78>)
 8002f70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8002f72:	4b1a      	ldr	r3, [pc, #104]	; (8002fdc <MX_I2C1_Init+0x74>)
 8002f74:	4a1b      	ldr	r2, [pc, #108]	; (8002fe4 <MX_I2C1_Init+0x7c>)
 8002f76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002f78:	4b18      	ldr	r3, [pc, #96]	; (8002fdc <MX_I2C1_Init+0x74>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f7e:	4b17      	ldr	r3, [pc, #92]	; (8002fdc <MX_I2C1_Init+0x74>)
 8002f80:	2201      	movs	r2, #1
 8002f82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f84:	4b15      	ldr	r3, [pc, #84]	; (8002fdc <MX_I2C1_Init+0x74>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002f8a:	4b14      	ldr	r3, [pc, #80]	; (8002fdc <MX_I2C1_Init+0x74>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f90:	4b12      	ldr	r3, [pc, #72]	; (8002fdc <MX_I2C1_Init+0x74>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f96:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <MX_I2C1_Init+0x74>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <MX_I2C1_Init+0x74>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fa2:	480e      	ldr	r0, [pc, #56]	; (8002fdc <MX_I2C1_Init+0x74>)
 8002fa4:	f001 fcb4 	bl	8004910 <HAL_I2C_Init>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002fae:	f000 f9d5 	bl	800335c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	4809      	ldr	r0, [pc, #36]	; (8002fdc <MX_I2C1_Init+0x74>)
 8002fb6:	f002 fa0f 	bl	80053d8 <HAL_I2CEx_ConfigAnalogFilter>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002fc0:	f000 f9cc 	bl	800335c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	4805      	ldr	r0, [pc, #20]	; (8002fdc <MX_I2C1_Init+0x74>)
 8002fc8:	f002 fa51 	bl	800546e <HAL_I2CEx_ConfigDigitalFilter>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002fd2:	f000 f9c3 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000ad4 	.word	0x20000ad4
 8002fe0:	40005400 	.word	0x40005400
 8002fe4:	10909cec 	.word	0x10909cec

08002fe8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002fec:	4b1b      	ldr	r3, [pc, #108]	; (800305c <MX_SPI1_Init+0x74>)
 8002fee:	4a1c      	ldr	r2, [pc, #112]	; (8003060 <MX_SPI1_Init+0x78>)
 8002ff0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ff2:	4b1a      	ldr	r3, [pc, #104]	; (800305c <MX_SPI1_Init+0x74>)
 8002ff4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ff8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ffa:	4b18      	ldr	r3, [pc, #96]	; (800305c <MX_SPI1_Init+0x74>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003000:	4b16      	ldr	r3, [pc, #88]	; (800305c <MX_SPI1_Init+0x74>)
 8003002:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003006:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003008:	4b14      	ldr	r3, [pc, #80]	; (800305c <MX_SPI1_Init+0x74>)
 800300a:	2200      	movs	r2, #0
 800300c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800300e:	4b13      	ldr	r3, [pc, #76]	; (800305c <MX_SPI1_Init+0x74>)
 8003010:	2200      	movs	r2, #0
 8003012:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003014:	4b11      	ldr	r3, [pc, #68]	; (800305c <MX_SPI1_Init+0x74>)
 8003016:	f44f 7200 	mov.w	r2, #512	; 0x200
 800301a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800301c:	4b0f      	ldr	r3, [pc, #60]	; (800305c <MX_SPI1_Init+0x74>)
 800301e:	2230      	movs	r2, #48	; 0x30
 8003020:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003022:	4b0e      	ldr	r3, [pc, #56]	; (800305c <MX_SPI1_Init+0x74>)
 8003024:	2200      	movs	r2, #0
 8003026:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <MX_SPI1_Init+0x74>)
 800302a:	2200      	movs	r2, #0
 800302c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800302e:	4b0b      	ldr	r3, [pc, #44]	; (800305c <MX_SPI1_Init+0x74>)
 8003030:	2200      	movs	r2, #0
 8003032:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003034:	4b09      	ldr	r3, [pc, #36]	; (800305c <MX_SPI1_Init+0x74>)
 8003036:	2207      	movs	r2, #7
 8003038:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800303a:	4b08      	ldr	r3, [pc, #32]	; (800305c <MX_SPI1_Init+0x74>)
 800303c:	2200      	movs	r2, #0
 800303e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003040:	4b06      	ldr	r3, [pc, #24]	; (800305c <MX_SPI1_Init+0x74>)
 8003042:	2208      	movs	r2, #8
 8003044:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003046:	4805      	ldr	r0, [pc, #20]	; (800305c <MX_SPI1_Init+0x74>)
 8003048:	f003 fd7e 	bl	8006b48 <HAL_SPI_Init>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003052:	f000 f983 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	20000b28 	.word	0x20000b28
 8003060:	40013000 	.word	0x40013000

08003064 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08a      	sub	sp, #40	; 0x28
 8003068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800306a:	f107 031c 	add.w	r3, r7, #28
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	605a      	str	r2, [r3, #4]
 8003074:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003076:	463b      	mov	r3, r7
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	60da      	str	r2, [r3, #12]
 8003082:	611a      	str	r2, [r3, #16]
 8003084:	615a      	str	r2, [r3, #20]
 8003086:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003088:	4b21      	ldr	r3, [pc, #132]	; (8003110 <MX_TIM3_Init+0xac>)
 800308a:	4a22      	ldr	r2, [pc, #136]	; (8003114 <MX_TIM3_Init+0xb0>)
 800308c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 800308e:	4b20      	ldr	r3, [pc, #128]	; (8003110 <MX_TIM3_Init+0xac>)
 8003090:	f240 321f 	movw	r2, #799	; 0x31f
 8003094:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003096:	4b1e      	ldr	r3, [pc, #120]	; (8003110 <MX_TIM3_Init+0xac>)
 8003098:	2200      	movs	r2, #0
 800309a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800309c:	4b1c      	ldr	r3, [pc, #112]	; (8003110 <MX_TIM3_Init+0xac>)
 800309e:	2264      	movs	r2, #100	; 0x64
 80030a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030a2:	4b1b      	ldr	r3, [pc, #108]	; (8003110 <MX_TIM3_Init+0xac>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030a8:	4b19      	ldr	r3, [pc, #100]	; (8003110 <MX_TIM3_Init+0xac>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80030ae:	4818      	ldr	r0, [pc, #96]	; (8003110 <MX_TIM3_Init+0xac>)
 80030b0:	f004 faeb 	bl	800768a <HAL_TIM_PWM_Init>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80030ba:	f000 f94f 	bl	800335c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030be:	2300      	movs	r3, #0
 80030c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030c2:	2300      	movs	r3, #0
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030c6:	f107 031c 	add.w	r3, r7, #28
 80030ca:	4619      	mov	r1, r3
 80030cc:	4810      	ldr	r0, [pc, #64]	; (8003110 <MX_TIM3_Init+0xac>)
 80030ce:	f005 fb67 	bl	80087a0 <HAL_TIMEx_MasterConfigSynchronization>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80030d8:	f000 f940 	bl	800335c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030dc:	2360      	movs	r3, #96	; 0x60
 80030de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 80030e0:	2332      	movs	r3, #50	; 0x32
 80030e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030e8:	2300      	movs	r3, #0
 80030ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030ec:	463b      	mov	r3, r7
 80030ee:	2200      	movs	r2, #0
 80030f0:	4619      	mov	r1, r3
 80030f2:	4807      	ldr	r0, [pc, #28]	; (8003110 <MX_TIM3_Init+0xac>)
 80030f4:	f004 fe78 	bl	8007de8 <HAL_TIM_PWM_ConfigChannel>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80030fe:	f000 f92d 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003102:	4803      	ldr	r0, [pc, #12]	; (8003110 <MX_TIM3_Init+0xac>)
 8003104:	f000 fa5a 	bl	80035bc <HAL_TIM_MspPostInit>

}
 8003108:	bf00      	nop
 800310a:	3728      	adds	r7, #40	; 0x28
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20000b8c 	.word	0x20000b8c
 8003114:	40000400 	.word	0x40000400

08003118 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800311e:	1d3b      	adds	r3, r7, #4
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	605a      	str	r2, [r3, #4]
 8003126:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003128:	4b15      	ldr	r3, [pc, #84]	; (8003180 <MX_TIM6_Init+0x68>)
 800312a:	4a16      	ldr	r2, [pc, #88]	; (8003184 <MX_TIM6_Init+0x6c>)
 800312c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 800312e:	4b14      	ldr	r3, [pc, #80]	; (8003180 <MX_TIM6_Init+0x68>)
 8003130:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8003134:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003136:	4b12      	ldr	r3, [pc, #72]	; (8003180 <MX_TIM6_Init+0x68>)
 8003138:	2200      	movs	r2, #0
 800313a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800313c:	4b10      	ldr	r3, [pc, #64]	; (8003180 <MX_TIM6_Init+0x68>)
 800313e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003142:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003144:	4b0e      	ldr	r3, [pc, #56]	; (8003180 <MX_TIM6_Init+0x68>)
 8003146:	2200      	movs	r2, #0
 8003148:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800314a:	480d      	ldr	r0, [pc, #52]	; (8003180 <MX_TIM6_Init+0x68>)
 800314c:	f004 f916 	bl	800737c <HAL_TIM_Base_Init>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003156:	f000 f901 	bl	800335c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800315a:	2300      	movs	r3, #0
 800315c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800315e:	2300      	movs	r3, #0
 8003160:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003162:	1d3b      	adds	r3, r7, #4
 8003164:	4619      	mov	r1, r3
 8003166:	4806      	ldr	r0, [pc, #24]	; (8003180 <MX_TIM6_Init+0x68>)
 8003168:	f005 fb1a 	bl	80087a0 <HAL_TIMEx_MasterConfigSynchronization>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8003172:	f000 f8f3 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20000bd8 	.word	0x20000bd8
 8003184:	40001000 	.word	0x40001000

08003188 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800318c:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <MX_TIM16_Init+0x44>)
 800318e:	4a10      	ldr	r2, [pc, #64]	; (80031d0 <MX_TIM16_Init+0x48>)
 8003190:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 80;
 8003192:	4b0e      	ldr	r3, [pc, #56]	; (80031cc <MX_TIM16_Init+0x44>)
 8003194:	2250      	movs	r2, #80	; 0x50
 8003196:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003198:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <MX_TIM16_Init+0x44>)
 800319a:	2200      	movs	r2, #0
 800319c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800319e:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <MX_TIM16_Init+0x44>)
 80031a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031a4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031a6:	4b09      	ldr	r3, [pc, #36]	; (80031cc <MX_TIM16_Init+0x44>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80031ac:	4b07      	ldr	r3, [pc, #28]	; (80031cc <MX_TIM16_Init+0x44>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031b2:	4b06      	ldr	r3, [pc, #24]	; (80031cc <MX_TIM16_Init+0x44>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80031b8:	4804      	ldr	r0, [pc, #16]	; (80031cc <MX_TIM16_Init+0x44>)
 80031ba:	f004 f8df 	bl	800737c <HAL_TIM_Base_Init>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80031c4:	f000 f8ca 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80031c8:	bf00      	nop
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	20000c24 	.word	0x20000c24
 80031d0:	40014400 	.word	0x40014400

080031d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031d8:	4b14      	ldr	r3, [pc, #80]	; (800322c <MX_USART2_UART_Init+0x58>)
 80031da:	4a15      	ldr	r2, [pc, #84]	; (8003230 <MX_USART2_UART_Init+0x5c>)
 80031dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80031de:	4b13      	ldr	r3, [pc, #76]	; (800322c <MX_USART2_UART_Init+0x58>)
 80031e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031e6:	4b11      	ldr	r3, [pc, #68]	; (800322c <MX_USART2_UART_Init+0x58>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031ec:	4b0f      	ldr	r3, [pc, #60]	; (800322c <MX_USART2_UART_Init+0x58>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031f2:	4b0e      	ldr	r3, [pc, #56]	; (800322c <MX_USART2_UART_Init+0x58>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031f8:	4b0c      	ldr	r3, [pc, #48]	; (800322c <MX_USART2_UART_Init+0x58>)
 80031fa:	220c      	movs	r2, #12
 80031fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031fe:	4b0b      	ldr	r3, [pc, #44]	; (800322c <MX_USART2_UART_Init+0x58>)
 8003200:	2200      	movs	r2, #0
 8003202:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003204:	4b09      	ldr	r3, [pc, #36]	; (800322c <MX_USART2_UART_Init+0x58>)
 8003206:	2200      	movs	r2, #0
 8003208:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800320a:	4b08      	ldr	r3, [pc, #32]	; (800322c <MX_USART2_UART_Init+0x58>)
 800320c:	2200      	movs	r2, #0
 800320e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003210:	4b06      	ldr	r3, [pc, #24]	; (800322c <MX_USART2_UART_Init+0x58>)
 8003212:	2200      	movs	r2, #0
 8003214:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003216:	4805      	ldr	r0, [pc, #20]	; (800322c <MX_USART2_UART_Init+0x58>)
 8003218:	f005 fb68 	bl	80088ec <HAL_UART_Init>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003222:	f000 f89b 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003226:	bf00      	nop
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20000c70 	.word	0x20000c70
 8003230:	40004400 	.word	0x40004400

08003234 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08a      	sub	sp, #40	; 0x28
 8003238:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800323a:	f107 0314 	add.w	r3, r7, #20
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	605a      	str	r2, [r3, #4]
 8003244:	609a      	str	r2, [r3, #8]
 8003246:	60da      	str	r2, [r3, #12]
 8003248:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800324a:	4b3d      	ldr	r3, [pc, #244]	; (8003340 <MX_GPIO_Init+0x10c>)
 800324c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800324e:	4a3c      	ldr	r2, [pc, #240]	; (8003340 <MX_GPIO_Init+0x10c>)
 8003250:	f043 0304 	orr.w	r3, r3, #4
 8003254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003256:	4b3a      	ldr	r3, [pc, #232]	; (8003340 <MX_GPIO_Init+0x10c>)
 8003258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003262:	4b37      	ldr	r3, [pc, #220]	; (8003340 <MX_GPIO_Init+0x10c>)
 8003264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003266:	4a36      	ldr	r2, [pc, #216]	; (8003340 <MX_GPIO_Init+0x10c>)
 8003268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800326c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800326e:	4b34      	ldr	r3, [pc, #208]	; (8003340 <MX_GPIO_Init+0x10c>)
 8003270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800327a:	4b31      	ldr	r3, [pc, #196]	; (8003340 <MX_GPIO_Init+0x10c>)
 800327c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327e:	4a30      	ldr	r2, [pc, #192]	; (8003340 <MX_GPIO_Init+0x10c>)
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003286:	4b2e      	ldr	r3, [pc, #184]	; (8003340 <MX_GPIO_Init+0x10c>)
 8003288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	60bb      	str	r3, [r7, #8]
 8003290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003292:	4b2b      	ldr	r3, [pc, #172]	; (8003340 <MX_GPIO_Init+0x10c>)
 8003294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003296:	4a2a      	ldr	r2, [pc, #168]	; (8003340 <MX_GPIO_Init+0x10c>)
 8003298:	f043 0302 	orr.w	r3, r3, #2
 800329c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800329e:	4b28      	ldr	r3, [pc, #160]	; (8003340 <MX_GPIO_Init+0x10c>)
 80032a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	607b      	str	r3, [r7, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 80032aa:	2200      	movs	r2, #0
 80032ac:	f246 0140 	movw	r1, #24640	; 0x6040
 80032b0:	4824      	ldr	r0, [pc, #144]	; (8003344 <MX_GPIO_Init+0x110>)
 80032b2:	f001 fae3 	bl	800487c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80032b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80032bc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80032c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80032c6:	f107 0314 	add.w	r3, r7, #20
 80032ca:	4619      	mov	r1, r3
 80032cc:	481e      	ldr	r0, [pc, #120]	; (8003348 <MX_GPIO_Init+0x114>)
 80032ce:	f001 f913 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|SD_CS_Pin;
 80032d2:	f246 0340 	movw	r3, #24640	; 0x6040
 80032d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032d8:	2301      	movs	r3, #1
 80032da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032dc:	2300      	movs	r3, #0
 80032de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e0:	2300      	movs	r3, #0
 80032e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032e4:	f107 0314 	add.w	r3, r7, #20
 80032e8:	4619      	mov	r1, r3
 80032ea:	4816      	ldr	r0, [pc, #88]	; (8003344 <MX_GPIO_Init+0x110>)
 80032ec:	f001 f904 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 80032f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80032f6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80032fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8003300:	f107 0314 	add.w	r3, r7, #20
 8003304:	4619      	mov	r1, r3
 8003306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800330a:	f001 f8f5 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800330e:	2320      	movs	r3, #32
 8003310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003312:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003316:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003318:	2300      	movs	r3, #0
 800331a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800331c:	f107 0314 	add.w	r3, r7, #20
 8003320:	4619      	mov	r1, r3
 8003322:	4808      	ldr	r0, [pc, #32]	; (8003344 <MX_GPIO_Init+0x110>)
 8003324:	f001 f8e8 	bl	80044f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003328:	2200      	movs	r2, #0
 800332a:	2105      	movs	r1, #5
 800332c:	2028      	movs	r0, #40	; 0x28
 800332e:	f000 fcb0 	bl	8003c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003332:	2028      	movs	r0, #40	; 0x28
 8003334:	f000 fcc9 	bl	8003cca <HAL_NVIC_EnableIRQ>

}
 8003338:	bf00      	nop
 800333a:	3728      	adds	r7, #40	; 0x28
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40021000 	.word	0x40021000
 8003344:	48000400 	.word	0x48000400
 8003348:	48000800 	.word	0x48000800

0800334c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003354:	2001      	movs	r0, #1
 8003356:	f009 ff4f 	bl	800d1f8 <osDelay>
 800335a:	e7fb      	b.n	8003354 <StartDefaultTask+0x8>

0800335c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003360:	b672      	cpsid	i
}
 8003362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003364:	e7fe      	b.n	8003364 <Error_Handler+0x8>
	...

08003368 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800336e:	4b15      	ldr	r3, [pc, #84]	; (80033c4 <HAL_MspInit+0x5c>)
 8003370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003372:	4a14      	ldr	r2, [pc, #80]	; (80033c4 <HAL_MspInit+0x5c>)
 8003374:	f043 0301 	orr.w	r3, r3, #1
 8003378:	6613      	str	r3, [r2, #96]	; 0x60
 800337a:	4b12      	ldr	r3, [pc, #72]	; (80033c4 <HAL_MspInit+0x5c>)
 800337c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	607b      	str	r3, [r7, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003386:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <HAL_MspInit+0x5c>)
 8003388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338a:	4a0e      	ldr	r2, [pc, #56]	; (80033c4 <HAL_MspInit+0x5c>)
 800338c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003390:	6593      	str	r3, [r2, #88]	; 0x58
 8003392:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <HAL_MspInit+0x5c>)
 8003394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800339e:	2200      	movs	r2, #0
 80033a0:	210f      	movs	r1, #15
 80033a2:	f06f 0001 	mvn.w	r0, #1
 80033a6:	f000 fc74 	bl	8003c92 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 80033aa:	2200      	movs	r2, #0
 80033ac:	2105      	movs	r1, #5
 80033ae:	2004      	movs	r0, #4
 80033b0:	f000 fc6f 	bl	8003c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80033b4:	2004      	movs	r0, #4
 80033b6:	f000 fc88 	bl	8003cca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033ba:	bf00      	nop
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40021000 	.word	0x40021000

080033c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b0ac      	sub	sp, #176	; 0xb0
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	605a      	str	r2, [r3, #4]
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	60da      	str	r2, [r3, #12]
 80033de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033e0:	f107 0314 	add.w	r3, r7, #20
 80033e4:	2288      	movs	r2, #136	; 0x88
 80033e6:	2100      	movs	r1, #0
 80033e8:	4618      	mov	r0, r3
 80033ea:	f00d fa0d 	bl	8010808 <memset>
  if(hi2c->Instance==I2C1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a21      	ldr	r2, [pc, #132]	; (8003478 <HAL_I2C_MspInit+0xb0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d13b      	bne.n	8003470 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80033f8:	2340      	movs	r3, #64	; 0x40
 80033fa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80033fc:	2300      	movs	r3, #0
 80033fe:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003400:	f107 0314 	add.w	r3, r7, #20
 8003404:	4618      	mov	r0, r3
 8003406:	f002 fee3 	bl	80061d0 <HAL_RCCEx_PeriphCLKConfig>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003410:	f7ff ffa4 	bl	800335c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003414:	4b19      	ldr	r3, [pc, #100]	; (800347c <HAL_I2C_MspInit+0xb4>)
 8003416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003418:	4a18      	ldr	r2, [pc, #96]	; (800347c <HAL_I2C_MspInit+0xb4>)
 800341a:	f043 0302 	orr.w	r3, r3, #2
 800341e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003420:	4b16      	ldr	r3, [pc, #88]	; (800347c <HAL_I2C_MspInit+0xb4>)
 8003422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800342c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003430:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003434:	2312      	movs	r3, #18
 8003436:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343a:	2300      	movs	r3, #0
 800343c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003440:	2303      	movs	r3, #3
 8003442:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003446:	2304      	movs	r3, #4
 8003448:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800344c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003450:	4619      	mov	r1, r3
 8003452:	480b      	ldr	r0, [pc, #44]	; (8003480 <HAL_I2C_MspInit+0xb8>)
 8003454:	f001 f850 	bl	80044f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003458:	4b08      	ldr	r3, [pc, #32]	; (800347c <HAL_I2C_MspInit+0xb4>)
 800345a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345c:	4a07      	ldr	r2, [pc, #28]	; (800347c <HAL_I2C_MspInit+0xb4>)
 800345e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003462:	6593      	str	r3, [r2, #88]	; 0x58
 8003464:	4b05      	ldr	r3, [pc, #20]	; (800347c <HAL_I2C_MspInit+0xb4>)
 8003466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003470:	bf00      	nop
 8003472:	37b0      	adds	r7, #176	; 0xb0
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40005400 	.word	0x40005400
 800347c:	40021000 	.word	0x40021000
 8003480:	48000400 	.word	0x48000400

08003484 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08a      	sub	sp, #40	; 0x28
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800348c:	f107 0314 	add.w	r3, r7, #20
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	605a      	str	r2, [r3, #4]
 8003496:	609a      	str	r2, [r3, #8]
 8003498:	60da      	str	r2, [r3, #12]
 800349a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a17      	ldr	r2, [pc, #92]	; (8003500 <HAL_SPI_MspInit+0x7c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d128      	bne.n	80034f8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034a6:	4b17      	ldr	r3, [pc, #92]	; (8003504 <HAL_SPI_MspInit+0x80>)
 80034a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034aa:	4a16      	ldr	r2, [pc, #88]	; (8003504 <HAL_SPI_MspInit+0x80>)
 80034ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034b0:	6613      	str	r3, [r2, #96]	; 0x60
 80034b2:	4b14      	ldr	r3, [pc, #80]	; (8003504 <HAL_SPI_MspInit+0x80>)
 80034b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034be:	4b11      	ldr	r3, [pc, #68]	; (8003504 <HAL_SPI_MspInit+0x80>)
 80034c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c2:	4a10      	ldr	r2, [pc, #64]	; (8003504 <HAL_SPI_MspInit+0x80>)
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034ca:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <HAL_SPI_MspInit+0x80>)
 80034cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80034d6:	23e0      	movs	r3, #224	; 0xe0
 80034d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034da:	2302      	movs	r3, #2
 80034dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034de:	2300      	movs	r3, #0
 80034e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e2:	2303      	movs	r3, #3
 80034e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034e6:	2305      	movs	r3, #5
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ea:	f107 0314 	add.w	r3, r7, #20
 80034ee:	4619      	mov	r1, r3
 80034f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034f4:	f001 f800 	bl	80044f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80034f8:	bf00      	nop
 80034fa:	3728      	adds	r7, #40	; 0x28
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40013000 	.word	0x40013000
 8003504:	40021000 	.word	0x40021000

08003508 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a0a      	ldr	r2, [pc, #40]	; (8003540 <HAL_TIM_PWM_MspInit+0x38>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d10b      	bne.n	8003532 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800351a:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <HAL_TIM_PWM_MspInit+0x3c>)
 800351c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351e:	4a09      	ldr	r2, [pc, #36]	; (8003544 <HAL_TIM_PWM_MspInit+0x3c>)
 8003520:	f043 0302 	orr.w	r3, r3, #2
 8003524:	6593      	str	r3, [r2, #88]	; 0x58
 8003526:	4b07      	ldr	r3, [pc, #28]	; (8003544 <HAL_TIM_PWM_MspInit+0x3c>)
 8003528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003532:	bf00      	nop
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40000400 	.word	0x40000400
 8003544:	40021000 	.word	0x40021000

08003548 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a16      	ldr	r2, [pc, #88]	; (80035b0 <HAL_TIM_Base_MspInit+0x68>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d114      	bne.n	8003584 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800355a:	4b16      	ldr	r3, [pc, #88]	; (80035b4 <HAL_TIM_Base_MspInit+0x6c>)
 800355c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355e:	4a15      	ldr	r2, [pc, #84]	; (80035b4 <HAL_TIM_Base_MspInit+0x6c>)
 8003560:	f043 0310 	orr.w	r3, r3, #16
 8003564:	6593      	str	r3, [r2, #88]	; 0x58
 8003566:	4b13      	ldr	r3, [pc, #76]	; (80035b4 <HAL_TIM_Base_MspInit+0x6c>)
 8003568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356a:	f003 0310 	and.w	r3, r3, #16
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003572:	2200      	movs	r2, #0
 8003574:	2105      	movs	r1, #5
 8003576:	2036      	movs	r0, #54	; 0x36
 8003578:	f000 fb8b 	bl	8003c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800357c:	2036      	movs	r0, #54	; 0x36
 800357e:	f000 fba4 	bl	8003cca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003582:	e010      	b.n	80035a6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM16)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a0b      	ldr	r2, [pc, #44]	; (80035b8 <HAL_TIM_Base_MspInit+0x70>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d10b      	bne.n	80035a6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800358e:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <HAL_TIM_Base_MspInit+0x6c>)
 8003590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003592:	4a08      	ldr	r2, [pc, #32]	; (80035b4 <HAL_TIM_Base_MspInit+0x6c>)
 8003594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003598:	6613      	str	r3, [r2, #96]	; 0x60
 800359a:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <HAL_TIM_Base_MspInit+0x6c>)
 800359c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800359e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a2:	60bb      	str	r3, [r7, #8]
 80035a4:	68bb      	ldr	r3, [r7, #8]
}
 80035a6:	bf00      	nop
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40001000 	.word	0x40001000
 80035b4:	40021000 	.word	0x40021000
 80035b8:	40014400 	.word	0x40014400

080035bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b088      	sub	sp, #32
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c4:	f107 030c 	add.w	r3, r7, #12
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	605a      	str	r2, [r3, #4]
 80035ce:	609a      	str	r2, [r3, #8]
 80035d0:	60da      	str	r2, [r3, #12]
 80035d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a11      	ldr	r2, [pc, #68]	; (8003620 <HAL_TIM_MspPostInit+0x64>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d11b      	bne.n	8003616 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035de:	4b11      	ldr	r3, [pc, #68]	; (8003624 <HAL_TIM_MspPostInit+0x68>)
 80035e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e2:	4a10      	ldr	r2, [pc, #64]	; (8003624 <HAL_TIM_MspPostInit+0x68>)
 80035e4:	f043 0302 	orr.w	r3, r3, #2
 80035e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035ea:	4b0e      	ldr	r3, [pc, #56]	; (8003624 <HAL_TIM_MspPostInit+0x68>)
 80035ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	60bb      	str	r3, [r7, #8]
 80035f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80035f6:	2310      	movs	r3, #16
 80035f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fa:	2302      	movs	r3, #2
 80035fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003602:	2300      	movs	r3, #0
 8003604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003606:	2302      	movs	r3, #2
 8003608:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800360a:	f107 030c 	add.w	r3, r7, #12
 800360e:	4619      	mov	r1, r3
 8003610:	4805      	ldr	r0, [pc, #20]	; (8003628 <HAL_TIM_MspPostInit+0x6c>)
 8003612:	f000 ff71 	bl	80044f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003616:	bf00      	nop
 8003618:	3720      	adds	r7, #32
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40000400 	.word	0x40000400
 8003624:	40021000 	.word	0x40021000
 8003628:	48000400 	.word	0x48000400

0800362c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b0ac      	sub	sp, #176	; 0xb0
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003634:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	60da      	str	r2, [r3, #12]
 8003642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003644:	f107 0314 	add.w	r3, r7, #20
 8003648:	2288      	movs	r2, #136	; 0x88
 800364a:	2100      	movs	r1, #0
 800364c:	4618      	mov	r0, r3
 800364e:	f00d f8db 	bl	8010808 <memset>
  if(huart->Instance==USART2)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a25      	ldr	r2, [pc, #148]	; (80036ec <HAL_UART_MspInit+0xc0>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d143      	bne.n	80036e4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800365c:	2302      	movs	r3, #2
 800365e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003660:	2300      	movs	r3, #0
 8003662:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003664:	f107 0314 	add.w	r3, r7, #20
 8003668:	4618      	mov	r0, r3
 800366a:	f002 fdb1 	bl	80061d0 <HAL_RCCEx_PeriphCLKConfig>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003674:	f7ff fe72 	bl	800335c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003678:	4b1d      	ldr	r3, [pc, #116]	; (80036f0 <HAL_UART_MspInit+0xc4>)
 800367a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367c:	4a1c      	ldr	r2, [pc, #112]	; (80036f0 <HAL_UART_MspInit+0xc4>)
 800367e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003682:	6593      	str	r3, [r2, #88]	; 0x58
 8003684:	4b1a      	ldr	r3, [pc, #104]	; (80036f0 <HAL_UART_MspInit+0xc4>)
 8003686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368c:	613b      	str	r3, [r7, #16]
 800368e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003690:	4b17      	ldr	r3, [pc, #92]	; (80036f0 <HAL_UART_MspInit+0xc4>)
 8003692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003694:	4a16      	ldr	r2, [pc, #88]	; (80036f0 <HAL_UART_MspInit+0xc4>)
 8003696:	f043 0301 	orr.w	r3, r3, #1
 800369a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800369c:	4b14      	ldr	r3, [pc, #80]	; (80036f0 <HAL_UART_MspInit+0xc4>)
 800369e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80036a8:	230c      	movs	r3, #12
 80036aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ae:	2302      	movs	r3, #2
 80036b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b4:	2300      	movs	r3, #0
 80036b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ba:	2303      	movs	r3, #3
 80036bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036c0:	2307      	movs	r3, #7
 80036c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80036ca:	4619      	mov	r1, r3
 80036cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036d0:	f000 ff12 	bl	80044f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80036d4:	2200      	movs	r2, #0
 80036d6:	2105      	movs	r1, #5
 80036d8:	2026      	movs	r0, #38	; 0x26
 80036da:	f000 fada 	bl	8003c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036de:	2026      	movs	r0, #38	; 0x26
 80036e0:	f000 faf3 	bl	8003cca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80036e4:	bf00      	nop
 80036e6:	37b0      	adds	r7, #176	; 0xb0
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40004400 	.word	0x40004400
 80036f0:	40021000 	.word	0x40021000

080036f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036f8:	e7fe      	b.n	80036f8 <NMI_Handler+0x4>

080036fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036fa:	b480      	push	{r7}
 80036fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036fe:	e7fe      	b.n	80036fe <HardFault_Handler+0x4>

08003700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003704:	e7fe      	b.n	8003704 <MemManage_Handler+0x4>

08003706 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003706:	b480      	push	{r7}
 8003708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800370a:	e7fe      	b.n	800370a <BusFault_Handler+0x4>

0800370c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003710:	e7fe      	b.n	8003710 <UsageFault_Handler+0x4>

08003712 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003712:	b480      	push	{r7}
 8003714:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003716:	bf00      	nop
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003724:	f000 f972 	bl	8003a0c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003728:	f00b fe84 	bl	800f434 <xTaskGetSchedulerState>
 800372c:	4603      	mov	r3, r0
 800372e:	2b01      	cmp	r3, #1
 8003730:	d001      	beq.n	8003736 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003732:	f00c fd69 	bl	8010208 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003736:	bf00      	nop
 8003738:	bd80      	pop	{r7, pc}

0800373a <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800373e:	f000 fbd7 	bl	8003ef0 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8003742:	bf00      	nop
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800374c:	4802      	ldr	r0, [pc, #8]	; (8003758 <USART2_IRQHandler+0x10>)
 800374e:	f005 fa81 	bl	8008c54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003752:	bf00      	nop
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	20000c70 	.word	0x20000c70

0800375c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8003760:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003764:	f001 f8bc 	bl	80048e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003768:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800376c:	f001 f8b8 	bl	80048e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003770:	bf00      	nop
 8003772:	bd80      	pop	{r7, pc}

08003774 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003778:	4802      	ldr	r0, [pc, #8]	; (8003784 <TIM6_DAC_IRQHandler+0x10>)
 800377a:	f004 fa15 	bl	8007ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800377e:	bf00      	nop
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20000bd8 	.word	0x20000bd8

08003788 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
	return 1;
 800378c:	2301      	movs	r3, #1
}
 800378e:	4618      	mov	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <_kill>:

int _kill(int pid, int sig)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037a2:	f00c ffe9 	bl	8010778 <__errno>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2216      	movs	r2, #22
 80037aa:	601a      	str	r2, [r3, #0]
	return -1;
 80037ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <_exit>:

void _exit (int status)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80037c0:	f04f 31ff 	mov.w	r1, #4294967295
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7ff ffe7 	bl	8003798 <_kill>
	while (1) {}		/* Make sure we hang here */
 80037ca:	e7fe      	b.n	80037ca <_exit+0x12>

080037cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037d8:	2300      	movs	r3, #0
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	e00a      	b.n	80037f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80037de:	f3af 8000 	nop.w
 80037e2:	4601      	mov	r1, r0
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	1c5a      	adds	r2, r3, #1
 80037e8:	60ba      	str	r2, [r7, #8]
 80037ea:	b2ca      	uxtb	r2, r1
 80037ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	3301      	adds	r3, #1
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	dbf0      	blt.n	80037de <_read+0x12>
	}

return len;
 80037fc:	687b      	ldr	r3, [r7, #4]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
	return -1;
 800380e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003812:	4618      	mov	r0, r3
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800382e:	605a      	str	r2, [r3, #4]
	return 0;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <_isatty>:

int _isatty(int file)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
	return 1;
 8003846:	2301      	movs	r3, #1
}
 8003848:	4618      	mov	r0, r3
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
	return 0;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
	...

08003870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003878:	4a14      	ldr	r2, [pc, #80]	; (80038cc <_sbrk+0x5c>)
 800387a:	4b15      	ldr	r3, [pc, #84]	; (80038d0 <_sbrk+0x60>)
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003884:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <_sbrk+0x64>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d102      	bne.n	8003892 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800388c:	4b11      	ldr	r3, [pc, #68]	; (80038d4 <_sbrk+0x64>)
 800388e:	4a12      	ldr	r2, [pc, #72]	; (80038d8 <_sbrk+0x68>)
 8003890:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003892:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <_sbrk+0x64>)
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4413      	add	r3, r2
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	429a      	cmp	r2, r3
 800389e:	d207      	bcs.n	80038b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038a0:	f00c ff6a 	bl	8010778 <__errno>
 80038a4:	4603      	mov	r3, r0
 80038a6:	220c      	movs	r2, #12
 80038a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038aa:	f04f 33ff 	mov.w	r3, #4294967295
 80038ae:	e009      	b.n	80038c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038b0:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <_sbrk+0x64>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038b6:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <_sbrk+0x64>)
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4413      	add	r3, r2
 80038be:	4a05      	ldr	r2, [pc, #20]	; (80038d4 <_sbrk+0x64>)
 80038c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038c2:	68fb      	ldr	r3, [r7, #12]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	20018000 	.word	0x20018000
 80038d0:	00000400 	.word	0x00000400
 80038d4:	20000d14 	.word	0x20000d14
 80038d8:	20003238 	.word	0x20003238

080038dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80038e0:	4b06      	ldr	r3, [pc, #24]	; (80038fc <SystemInit+0x20>)
 80038e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e6:	4a05      	ldr	r2, [pc, #20]	; (80038fc <SystemInit+0x20>)
 80038e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80038f0:	bf00      	nop
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	e000ed00 	.word	0xe000ed00

08003900 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003900:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003938 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003904:	f7ff ffea 	bl	80038dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003908:	480c      	ldr	r0, [pc, #48]	; (800393c <LoopForever+0x6>)
  ldr r1, =_edata
 800390a:	490d      	ldr	r1, [pc, #52]	; (8003940 <LoopForever+0xa>)
  ldr r2, =_sidata
 800390c:	4a0d      	ldr	r2, [pc, #52]	; (8003944 <LoopForever+0xe>)
  movs r3, #0
 800390e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003910:	e002      	b.n	8003918 <LoopCopyDataInit>

08003912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003916:	3304      	adds	r3, #4

08003918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800391a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800391c:	d3f9      	bcc.n	8003912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800391e:	4a0a      	ldr	r2, [pc, #40]	; (8003948 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003920:	4c0a      	ldr	r4, [pc, #40]	; (800394c <LoopForever+0x16>)
  movs r3, #0
 8003922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003924:	e001      	b.n	800392a <LoopFillZerobss>

08003926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003928:	3204      	adds	r2, #4

0800392a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800392a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800392c:	d3fb      	bcc.n	8003926 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800392e:	f00c ff29 	bl	8010784 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003932:	f7ff fa3d 	bl	8002db0 <main>

08003936 <LoopForever>:

LoopForever:
    b LoopForever
 8003936:	e7fe      	b.n	8003936 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003938:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800393c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003940:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8003944:	08014ca4 	.word	0x08014ca4
  ldr r2, =_sbss
 8003948:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 800394c:	20003238 	.word	0x20003238

08003950 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003950:	e7fe      	b.n	8003950 <ADC1_2_IRQHandler>
	...

08003954 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800395e:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <HAL_Init+0x3c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a0b      	ldr	r2, [pc, #44]	; (8003990 <HAL_Init+0x3c>)
 8003964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003968:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800396a:	2003      	movs	r0, #3
 800396c:	f000 f986 	bl	8003c7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003970:	200f      	movs	r0, #15
 8003972:	f000 f80f 	bl	8003994 <HAL_InitTick>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	71fb      	strb	r3, [r7, #7]
 8003980:	e001      	b.n	8003986 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003982:	f7ff fcf1 	bl	8003368 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003986:	79fb      	ldrb	r3, [r7, #7]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40022000 	.word	0x40022000

08003994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80039a0:	4b17      	ldr	r3, [pc, #92]	; (8003a00 <HAL_InitTick+0x6c>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d023      	beq.n	80039f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80039a8:	4b16      	ldr	r3, [pc, #88]	; (8003a04 <HAL_InitTick+0x70>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	4b14      	ldr	r3, [pc, #80]	; (8003a00 <HAL_InitTick+0x6c>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	4619      	mov	r1, r3
 80039b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80039ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 f99f 	bl	8003d02 <HAL_SYSTICK_Config>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10f      	bne.n	80039ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b0f      	cmp	r3, #15
 80039ce:	d809      	bhi.n	80039e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039d0:	2200      	movs	r2, #0
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	f04f 30ff 	mov.w	r0, #4294967295
 80039d8:	f000 f95b 	bl	8003c92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80039dc:	4a0a      	ldr	r2, [pc, #40]	; (8003a08 <HAL_InitTick+0x74>)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	e007      	b.n	80039f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	73fb      	strb	r3, [r7, #15]
 80039e8:	e004      	b.n	80039f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	73fb      	strb	r3, [r7, #15]
 80039ee:	e001      	b.n	80039f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20000010 	.word	0x20000010
 8003a04:	20000008 	.word	0x20000008
 8003a08:	2000000c 	.word	0x2000000c

08003a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a10:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <HAL_IncTick+0x20>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	461a      	mov	r2, r3
 8003a16:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <HAL_IncTick+0x24>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	4a04      	ldr	r2, [pc, #16]	; (8003a30 <HAL_IncTick+0x24>)
 8003a1e:	6013      	str	r3, [r2, #0]
}
 8003a20:	bf00      	nop
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	20000010 	.word	0x20000010
 8003a30:	20000d18 	.word	0x20000d18

08003a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  return uwTick;
 8003a38:	4b03      	ldr	r3, [pc, #12]	; (8003a48 <HAL_GetTick+0x14>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	20000d18 	.word	0x20000d18

08003a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a54:	f7ff ffee 	bl	8003a34 <HAL_GetTick>
 8003a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a64:	d005      	beq.n	8003a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003a66:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <HAL_Delay+0x44>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4413      	add	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a72:	bf00      	nop
 8003a74:	f7ff ffde 	bl	8003a34 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d8f7      	bhi.n	8003a74 <HAL_Delay+0x28>
  {
  }
}
 8003a84:	bf00      	nop
 8003a86:	bf00      	nop
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000010 	.word	0x20000010

08003a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aa4:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ac6:	4a04      	ldr	r2, [pc, #16]	; (8003ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	60d3      	str	r3, [r2, #12]
}
 8003acc:	bf00      	nop
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	e000ed00 	.word	0xe000ed00

08003adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ae0:	4b04      	ldr	r3, [pc, #16]	; (8003af4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	0a1b      	lsrs	r3, r3, #8
 8003ae6:	f003 0307 	and.w	r3, r3, #7
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	e000ed00 	.word	0xe000ed00

08003af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	db0b      	blt.n	8003b22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	f003 021f 	and.w	r2, r3, #31
 8003b10:	4907      	ldr	r1, [pc, #28]	; (8003b30 <__NVIC_EnableIRQ+0x38>)
 8003b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b16:	095b      	lsrs	r3, r3, #5
 8003b18:	2001      	movs	r0, #1
 8003b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	e000e100 	.word	0xe000e100

08003b34 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	db12      	blt.n	8003b6c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	f003 021f 	and.w	r2, r3, #31
 8003b4c:	490a      	ldr	r1, [pc, #40]	; (8003b78 <__NVIC_DisableIRQ+0x44>)
 8003b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	2001      	movs	r0, #1
 8003b56:	fa00 f202 	lsl.w	r2, r0, r2
 8003b5a:	3320      	adds	r3, #32
 8003b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003b60:	f3bf 8f4f 	dsb	sy
}
 8003b64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b66:	f3bf 8f6f 	isb	sy
}
 8003b6a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	e000e100 	.word	0xe000e100

08003b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	4603      	mov	r3, r0
 8003b84:	6039      	str	r1, [r7, #0]
 8003b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	db0a      	blt.n	8003ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	490c      	ldr	r1, [pc, #48]	; (8003bc8 <__NVIC_SetPriority+0x4c>)
 8003b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9a:	0112      	lsls	r2, r2, #4
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ba4:	e00a      	b.n	8003bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	4908      	ldr	r1, [pc, #32]	; (8003bcc <__NVIC_SetPriority+0x50>)
 8003bac:	79fb      	ldrb	r3, [r7, #7]
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	3b04      	subs	r3, #4
 8003bb4:	0112      	lsls	r2, r2, #4
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	440b      	add	r3, r1
 8003bba:	761a      	strb	r2, [r3, #24]
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	e000e100 	.word	0xe000e100
 8003bcc:	e000ed00 	.word	0xe000ed00

08003bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b089      	sub	sp, #36	; 0x24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	f1c3 0307 	rsb	r3, r3, #7
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	bf28      	it	cs
 8003bee:	2304      	movcs	r3, #4
 8003bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	2b06      	cmp	r3, #6
 8003bf8:	d902      	bls.n	8003c00 <NVIC_EncodePriority+0x30>
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	3b03      	subs	r3, #3
 8003bfe:	e000      	b.n	8003c02 <NVIC_EncodePriority+0x32>
 8003c00:	2300      	movs	r3, #0
 8003c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c04:	f04f 32ff 	mov.w	r2, #4294967295
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	43da      	mvns	r2, r3
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	401a      	ands	r2, r3
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c18:	f04f 31ff 	mov.w	r1, #4294967295
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c22:	43d9      	mvns	r1, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c28:	4313      	orrs	r3, r2
         );
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3724      	adds	r7, #36	; 0x24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c48:	d301      	bcc.n	8003c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e00f      	b.n	8003c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c4e:	4a0a      	ldr	r2, [pc, #40]	; (8003c78 <SysTick_Config+0x40>)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c56:	210f      	movs	r1, #15
 8003c58:	f04f 30ff 	mov.w	r0, #4294967295
 8003c5c:	f7ff ff8e 	bl	8003b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c60:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <SysTick_Config+0x40>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c66:	4b04      	ldr	r3, [pc, #16]	; (8003c78 <SysTick_Config+0x40>)
 8003c68:	2207      	movs	r2, #7
 8003c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	e000e010 	.word	0xe000e010

08003c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7ff ff05 	bl	8003a94 <__NVIC_SetPriorityGrouping>
}
 8003c8a:	bf00      	nop
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b086      	sub	sp, #24
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	4603      	mov	r3, r0
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	607a      	str	r2, [r7, #4]
 8003c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ca4:	f7ff ff1a 	bl	8003adc <__NVIC_GetPriorityGrouping>
 8003ca8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	68b9      	ldr	r1, [r7, #8]
 8003cae:	6978      	ldr	r0, [r7, #20]
 8003cb0:	f7ff ff8e 	bl	8003bd0 <NVIC_EncodePriority>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cba:	4611      	mov	r1, r2
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff ff5d 	bl	8003b7c <__NVIC_SetPriority>
}
 8003cc2:	bf00      	nop
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b082      	sub	sp, #8
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff ff0d 	bl	8003af8 <__NVIC_EnableIRQ>
}
 8003cde:	bf00      	nop
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b082      	sub	sp, #8
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	4603      	mov	r3, r0
 8003cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff ff1d 	bl	8003b34 <__NVIC_DisableIRQ>
}
 8003cfa:	bf00      	nop
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7ff ff94 	bl	8003c38 <SysTick_Config>
 8003d10:	4603      	mov	r3, r0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b085      	sub	sp, #20
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d008      	beq.n	8003d44 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2204      	movs	r2, #4
 8003d36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e022      	b.n	8003d8a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 020e 	bic.w	r2, r2, #14
 8003d52:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0201 	bic.w	r2, r2, #1
 8003d62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d68:	f003 021c 	and.w	r2, r3, #28
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	2101      	movs	r1, #1
 8003d72:	fa01 f202 	lsl.w	r2, r1, r2
 8003d76:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b084      	sub	sp, #16
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d005      	beq.n	8003dba <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2204      	movs	r2, #4
 8003db2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	73fb      	strb	r3, [r7, #15]
 8003db8:	e029      	b.n	8003e0e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 020e 	bic.w	r2, r2, #14
 8003dc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0201 	bic.w	r2, r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dde:	f003 021c 	and.w	r2, r3, #28
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	2101      	movs	r1, #1
 8003de8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dec:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	4798      	blx	r3
    }
  }
  return status;
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8003e26:	2300      	movs	r3, #0
 8003e28:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003e2a:	4b2f      	ldr	r3, [pc, #188]	; (8003ee8 <HAL_FLASH_Program+0xd0>)
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d101      	bne.n	8003e36 <HAL_FLASH_Program+0x1e>
 8003e32:	2302      	movs	r3, #2
 8003e34:	e053      	b.n	8003ede <HAL_FLASH_Program+0xc6>
 8003e36:	4b2c      	ldr	r3, [pc, #176]	; (8003ee8 <HAL_FLASH_Program+0xd0>)
 8003e38:	2201      	movs	r2, #1
 8003e3a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e40:	f000 f964 	bl	800410c <FLASH_WaitForLastOperation>
 8003e44:	4603      	mov	r3, r0
 8003e46:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d143      	bne.n	8003ed6 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003e4e:	4b26      	ldr	r3, [pc, #152]	; (8003ee8 <HAL_FLASH_Program+0xd0>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003e54:	4b25      	ldr	r3, [pc, #148]	; (8003eec <HAL_FLASH_Program+0xd4>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d009      	beq.n	8003e74 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003e60:	4b22      	ldr	r3, [pc, #136]	; (8003eec <HAL_FLASH_Program+0xd4>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a21      	ldr	r2, [pc, #132]	; (8003eec <HAL_FLASH_Program+0xd4>)
 8003e66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e6a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003e6c:	4b1e      	ldr	r3, [pc, #120]	; (8003ee8 <HAL_FLASH_Program+0xd0>)
 8003e6e:	2202      	movs	r2, #2
 8003e70:	771a      	strb	r2, [r3, #28]
 8003e72:	e002      	b.n	8003e7a <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003e74:	4b1c      	ldr	r3, [pc, #112]	; (8003ee8 <HAL_FLASH_Program+0xd0>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d107      	bne.n	8003e90 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8003e80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e84:	68b8      	ldr	r0, [r7, #8]
 8003e86:	f000 f997 	bl	80041b8 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	e010      	b.n	8003eb2 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d002      	beq.n	8003e9c <HAL_FLASH_Program+0x84>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d10a      	bne.n	8003eb2 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	68b8      	ldr	r0, [r7, #8]
 8003ea2:	f000 f9af 	bl	8004204 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d102      	bne.n	8003eb2 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8003eac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003eb0:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003eb2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003eb6:	f000 f929 	bl	800410c <FLASH_WaitForLastOperation>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d006      	beq.n	8003ed2 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8003ec4:	4b09      	ldr	r3, [pc, #36]	; (8003eec <HAL_FLASH_Program+0xd4>)
 8003ec6:	695a      	ldr	r2, [r3, #20]
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	43db      	mvns	r3, r3
 8003ecc:	4907      	ldr	r1, [pc, #28]	; (8003eec <HAL_FLASH_Program+0xd4>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003ed2:	f000 fac7 	bl	8004464 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003ed6:	4b04      	ldr	r3, [pc, #16]	; (8003ee8 <HAL_FLASH_Program+0xd0>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	701a      	strb	r2, [r3, #0]

  return status;
 8003edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20000014 	.word	0x20000014
 8003eec:	40022000 	.word	0x40022000

08003ef0 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
  uint32_t tmp_page;
  uint32_t error;
  FLASH_ProcedureTypeDef procedure;

  /* If the operation is completed, disable the PG, PNB, MER1, MER2 and PER Bit */
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_MER1 | FLASH_CR_PER | FLASH_CR_PNB));
 8003ef6:	4b68      	ldr	r3, [pc, #416]	; (8004098 <HAL_FLASH_IRQHandler+0x1a8>)
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	4a67      	ldr	r2, [pc, #412]	; (8004098 <HAL_FLASH_IRQHandler+0x1a8>)
 8003efc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003f00:	f023 0307 	bic.w	r3, r3, #7
 8003f04:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  CLEAR_BIT(FLASH->CR, FLASH_CR_MER2);
 8003f06:	4b64      	ldr	r3, [pc, #400]	; (8004098 <HAL_FLASH_IRQHandler+0x1a8>)
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	4a63      	ldr	r2, [pc, #396]	; (8004098 <HAL_FLASH_IRQHandler+0x1a8>)
 8003f0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f10:	6153      	str	r3, [r2, #20]
#endif

  /* Disable the FSTPG Bit only if it is the last row programmed */
  if(pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAM_LAST)
 8003f12:	4b62      	ldr	r3, [pc, #392]	; (800409c <HAL_FLASH_IRQHandler+0x1ac>)
 8003f14:	7a1b      	ldrb	r3, [r3, #8]
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d105      	bne.n	8003f28 <HAL_FLASH_IRQHandler+0x38>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003f1c:	4b5e      	ldr	r3, [pc, #376]	; (8004098 <HAL_FLASH_IRQHandler+0x1a8>)
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	4a5d      	ldr	r2, [pc, #372]	; (8004098 <HAL_FLASH_IRQHandler+0x1a8>)
 8003f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f26:	6153      	str	r3, [r2, #20]
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003f28:	4b5b      	ldr	r3, [pc, #364]	; (8004098 <HAL_FLASH_IRQHandler+0x1a8>)
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8003f30:	4013      	ands	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]

  if (error !=0U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d045      	beq.n	8003fc6 <HAL_FLASH_IRQHandler+0xd6>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003f3a:	4b58      	ldr	r3, [pc, #352]	; (800409c <HAL_FLASH_IRQHandler+0x1ac>)
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	4a56      	ldr	r2, [pc, #344]	; (800409c <HAL_FLASH_IRQHandler+0x1ac>)
 8003f44:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d007      	beq.n	8003f60 <HAL_FLASH_IRQHandler+0x70>
 8003f50:	4b51      	ldr	r3, [pc, #324]	; (8004098 <HAL_FLASH_IRQHandler+0x1a8>)
 8003f52:	699a      	ldr	r2, [r3, #24]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003f5a:	494f      	ldr	r1, [pc, #316]	; (8004098 <HAL_FLASH_IRQHandler+0x1a8>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	618b      	str	r3, [r1, #24]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d004      	beq.n	8003f74 <HAL_FLASH_IRQHandler+0x84>
 8003f6a:	4a4b      	ldr	r2, [pc, #300]	; (8004098 <HAL_FLASH_IRQHandler+0x1a8>)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003f72:	6113      	str	r3, [r2, #16]

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches() ;
 8003f74:	f000 fa76 	bl	8004464 <FLASH_FlushCaches>

    /* FLASH error interrupt user callback */
    procedure = pFlash.ProcedureOnGoing;
 8003f78:	4b48      	ldr	r3, [pc, #288]	; (800409c <HAL_FLASH_IRQHandler+0x1ac>)
 8003f7a:	7a1b      	ldrb	r3, [r3, #8]
 8003f7c:	72fb      	strb	r3, [r7, #11]
    if(procedure == FLASH_PROC_PAGE_ERASE)
 8003f7e:	7afb      	ldrb	r3, [r7, #11]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d105      	bne.n	8003f90 <HAL_FLASH_IRQHandler+0xa0>
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Page);
 8003f84:	4b45      	ldr	r3, [pc, #276]	; (800409c <HAL_FLASH_IRQHandler+0x1ac>)
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 f893 	bl	80040b4 <HAL_FLASH_OperationErrorCallback>
 8003f8e:	e017      	b.n	8003fc0 <HAL_FLASH_IRQHandler+0xd0>
    }
    else if(procedure == FLASH_PROC_MASS_ERASE)
 8003f90:	7afb      	ldrb	r3, [r7, #11]
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d105      	bne.n	8003fa2 <HAL_FLASH_IRQHandler+0xb2>
    {
        HAL_FLASH_OperationErrorCallback(pFlash.Bank);
 8003f96:	4b41      	ldr	r3, [pc, #260]	; (800409c <HAL_FLASH_IRQHandler+0x1ac>)
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 f88a 	bl	80040b4 <HAL_FLASH_OperationErrorCallback>
 8003fa0:	e00e      	b.n	8003fc0 <HAL_FLASH_IRQHandler+0xd0>
    }
    else if((procedure == FLASH_PROC_PROGRAM) ||
 8003fa2:	7afb      	ldrb	r3, [r7, #11]
 8003fa4:	2b03      	cmp	r3, #3
 8003fa6:	d002      	beq.n	8003fae <HAL_FLASH_IRQHandler+0xbe>
 8003fa8:	7afb      	ldrb	r3, [r7, #11]
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d105      	bne.n	8003fba <HAL_FLASH_IRQHandler+0xca>
            (procedure == FLASH_PROC_PROGRAM_LAST))
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Address);
 8003fae:	4b3b      	ldr	r3, [pc, #236]	; (800409c <HAL_FLASH_IRQHandler+0x1ac>)
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 f87e 	bl	80040b4 <HAL_FLASH_OperationErrorCallback>
 8003fb8:	e002      	b.n	8003fc0 <HAL_FLASH_IRQHandler+0xd0>
    }
    else
    {
       HAL_FLASH_OperationErrorCallback(0U);
 8003fba:	2000      	movs	r0, #0
 8003fbc:	f000 f87a 	bl	80040b4 <HAL_FLASH_OperationErrorCallback>
    }

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003fc0:	4b36      	ldr	r3, [pc, #216]	; (800409c <HAL_FLASH_IRQHandler+0x1ac>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	721a      	strb	r2, [r3, #8]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != 0U)
 8003fc6:	4b34      	ldr	r3, [pc, #208]	; (8004098 <HAL_FLASH_IRQHandler+0x1a8>)
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d04f      	beq.n	8004072 <HAL_FLASH_IRQHandler+0x182>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003fd2:	4b31      	ldr	r3, [pc, #196]	; (8004098 <HAL_FLASH_IRQHandler+0x1a8>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	611a      	str	r2, [r3, #16]

    if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGE_ERASE)
 8003fd8:	4b30      	ldr	r3, [pc, #192]	; (800409c <HAL_FLASH_IRQHandler+0x1ac>)
 8003fda:	7a1b      	ldrb	r3, [r3, #8]
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d12b      	bne.n	800403a <HAL_FLASH_IRQHandler+0x14a>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8003fe2:	4b2e      	ldr	r3, [pc, #184]	; (800409c <HAL_FLASH_IRQHandler+0x1ac>)
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	4a2c      	ldr	r2, [pc, #176]	; (800409c <HAL_FLASH_IRQHandler+0x1ac>)
 8003fea:	6193      	str	r3, [r2, #24]

      /* Check if there are still pages to erase*/
      if(pFlash.NbPagesToErase != 0U)
 8003fec:	4b2b      	ldr	r3, [pc, #172]	; (800409c <HAL_FLASH_IRQHandler+0x1ac>)
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d013      	beq.n	800401c <HAL_FLASH_IRQHandler+0x12c>
      {
        /* Indicate user which page has been erased*/
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8003ff4:	4b29      	ldr	r3, [pc, #164]	; (800409c <HAL_FLASH_IRQHandler+0x1ac>)
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 f851 	bl	80040a0 <HAL_FLASH_EndOfOperationCallback>

        /* Increment page number */
        pFlash.Page++;
 8003ffe:	4b27      	ldr	r3, [pc, #156]	; (800409c <HAL_FLASH_IRQHandler+0x1ac>)
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	3301      	adds	r3, #1
 8004004:	4a25      	ldr	r2, [pc, #148]	; (800409c <HAL_FLASH_IRQHandler+0x1ac>)
 8004006:	6153      	str	r3, [r2, #20]
        tmp_page = pFlash.Page;
 8004008:	4b24      	ldr	r3, [pc, #144]	; (800409c <HAL_FLASH_IRQHandler+0x1ac>)
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	607b      	str	r3, [r7, #4]
        FLASH_PageErase(tmp_page, pFlash.Bank);
 800400e:	4b23      	ldr	r3, [pc, #140]	; (800409c <HAL_FLASH_IRQHandler+0x1ac>)
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	4619      	mov	r1, r3
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f9ef 	bl	80043f8 <FLASH_PageErase>
 800401a:	e02a      	b.n	8004072 <HAL_FLASH_IRQHandler+0x182>
      }
      else
      {
        /* No more pages to Erase */
        /* Reset Address and stop Erase pages procedure */
        pFlash.Page = 0xFFFFFFFFU;
 800401c:	4b1f      	ldr	r3, [pc, #124]	; (800409c <HAL_FLASH_IRQHandler+0x1ac>)
 800401e:	f04f 32ff 	mov.w	r2, #4294967295
 8004022:	615a      	str	r2, [r3, #20]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004024:	4b1d      	ldr	r3, [pc, #116]	; (800409c <HAL_FLASH_IRQHandler+0x1ac>)
 8004026:	2200      	movs	r2, #0
 8004028:	721a      	strb	r2, [r3, #8]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800402a:	f000 fa1b 	bl	8004464 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 800402e:	4b1b      	ldr	r3, [pc, #108]	; (800409c <HAL_FLASH_IRQHandler+0x1ac>)
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	4618      	mov	r0, r3
 8004034:	f000 f834 	bl	80040a0 <HAL_FLASH_EndOfOperationCallback>
 8004038:	e01b      	b.n	8004072 <HAL_FLASH_IRQHandler+0x182>
      }
    }
    else
    {
      /* Flush the caches to be sure of the data consistency */
      FLASH_FlushCaches() ;
 800403a:	f000 fa13 	bl	8004464 <FLASH_FlushCaches>

      procedure = pFlash.ProcedureOnGoing;
 800403e:	4b17      	ldr	r3, [pc, #92]	; (800409c <HAL_FLASH_IRQHandler+0x1ac>)
 8004040:	7a1b      	ldrb	r3, [r3, #8]
 8004042:	72fb      	strb	r3, [r7, #11]
      if(procedure == FLASH_PROC_MASS_ERASE)
 8004044:	7afb      	ldrb	r3, [r7, #11]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d105      	bne.n	8004056 <HAL_FLASH_IRQHandler+0x166>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 800404a:	4b14      	ldr	r3, [pc, #80]	; (800409c <HAL_FLASH_IRQHandler+0x1ac>)
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	4618      	mov	r0, r3
 8004050:	f000 f826 	bl	80040a0 <HAL_FLASH_EndOfOperationCallback>
 8004054:	e00a      	b.n	800406c <HAL_FLASH_IRQHandler+0x17c>
      }
      else if((procedure == FLASH_PROC_PROGRAM) ||
 8004056:	7afb      	ldrb	r3, [r7, #11]
 8004058:	2b03      	cmp	r3, #3
 800405a:	d002      	beq.n	8004062 <HAL_FLASH_IRQHandler+0x172>
 800405c:	7afb      	ldrb	r3, [r7, #11]
 800405e:	2b04      	cmp	r3, #4
 8004060:	d104      	bne.n	800406c <HAL_FLASH_IRQHandler+0x17c>
              (procedure == FLASH_PROC_PROGRAM_LAST))
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8004062:	4b0e      	ldr	r3, [pc, #56]	; (800409c <HAL_FLASH_IRQHandler+0x1ac>)
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	4618      	mov	r0, r3
 8004068:	f000 f81a 	bl	80040a0 <HAL_FLASH_EndOfOperationCallback>
      {
        /* Nothing to do */
      }

      /*Clear the procedure ongoing*/
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800406c:	4b0b      	ldr	r3, [pc, #44]	; (800409c <HAL_FLASH_IRQHandler+0x1ac>)
 800406e:	2200      	movs	r2, #0
 8004070:	721a      	strb	r2, [r3, #8]
    }
  }

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8004072:	4b0a      	ldr	r3, [pc, #40]	; (800409c <HAL_FLASH_IRQHandler+0x1ac>)
 8004074:	7a1b      	ldrb	r3, [r3, #8]
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d108      	bne.n	800408e <HAL_FLASH_IRQHandler+0x19e>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 800407c:	4b06      	ldr	r3, [pc, #24]	; (8004098 <HAL_FLASH_IRQHandler+0x1a8>)
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	4a05      	ldr	r2, [pc, #20]	; (8004098 <HAL_FLASH_IRQHandler+0x1a8>)
 8004082:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004086:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8004088:	4b04      	ldr	r3, [pc, #16]	; (800409c <HAL_FLASH_IRQHandler+0x1ac>)
 800408a:	2200      	movs	r2, #0
 800408c:	701a      	strb	r2, [r3, #0]
  }
}
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	40022000 	.word	0x40022000
 800409c:	20000014 	.word	0x20000014

080040a0 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80040ce:	2300      	movs	r3, #0
 80040d0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80040d2:	4b0b      	ldr	r3, [pc, #44]	; (8004100 <HAL_FLASH_Unlock+0x38>)
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	da0b      	bge.n	80040f2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80040da:	4b09      	ldr	r3, [pc, #36]	; (8004100 <HAL_FLASH_Unlock+0x38>)
 80040dc:	4a09      	ldr	r2, [pc, #36]	; (8004104 <HAL_FLASH_Unlock+0x3c>)
 80040de:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80040e0:	4b07      	ldr	r3, [pc, #28]	; (8004100 <HAL_FLASH_Unlock+0x38>)
 80040e2:	4a09      	ldr	r2, [pc, #36]	; (8004108 <HAL_FLASH_Unlock+0x40>)
 80040e4:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80040e6:	4b06      	ldr	r3, [pc, #24]	; (8004100 <HAL_FLASH_Unlock+0x38>)
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	da01      	bge.n	80040f2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80040f2:	79fb      	ldrb	r3, [r7, #7]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	40022000 	.word	0x40022000
 8004104:	45670123 	.word	0x45670123
 8004108:	cdef89ab 	.word	0xcdef89ab

0800410c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8004114:	f7ff fc8e 	bl	8003a34 <HAL_GetTick>
 8004118:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800411a:	e00d      	b.n	8004138 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004122:	d009      	beq.n	8004138 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8004124:	f7ff fc86 	bl	8003a34 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	429a      	cmp	r2, r3
 8004132:	d801      	bhi.n	8004138 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e037      	b.n	80041a8 <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004138:	4b1d      	ldr	r3, [pc, #116]	; (80041b0 <FLASH_WaitForLastOperation+0xa4>)
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1eb      	bne.n	800411c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8004144:	4b1a      	ldr	r3, [pc, #104]	; (80041b0 <FLASH_WaitForLastOperation+0xa4>)
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800414c:	4013      	ands	r3, r2
 800414e:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d01e      	beq.n	8004194 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8004156:	4b17      	ldr	r3, [pc, #92]	; (80041b4 <FLASH_WaitForLastOperation+0xa8>)
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	4313      	orrs	r3, r2
 800415e:	4a15      	ldr	r2, [pc, #84]	; (80041b4 <FLASH_WaitForLastOperation+0xa8>)
 8004160:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d007      	beq.n	800417c <FLASH_WaitForLastOperation+0x70>
 800416c:	4b10      	ldr	r3, [pc, #64]	; (80041b0 <FLASH_WaitForLastOperation+0xa4>)
 800416e:	699a      	ldr	r2, [r3, #24]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004176:	490e      	ldr	r1, [pc, #56]	; (80041b0 <FLASH_WaitForLastOperation+0xa4>)
 8004178:	4313      	orrs	r3, r2
 800417a:	618b      	str	r3, [r1, #24]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d004      	beq.n	8004190 <FLASH_WaitForLastOperation+0x84>
 8004186:	4a0a      	ldr	r2, [pc, #40]	; (80041b0 <FLASH_WaitForLastOperation+0xa4>)
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800418e:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e009      	b.n	80041a8 <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004194:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <FLASH_WaitForLastOperation+0xa4>)
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	f003 0301 	and.w	r3, r3, #1
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80041a0:	4b03      	ldr	r3, [pc, #12]	; (80041b0 <FLASH_WaitForLastOperation+0xa4>)
 80041a2:	2201      	movs	r2, #1
 80041a4:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40022000 	.word	0x40022000
 80041b4:	20000014 	.word	0x20000014

080041b8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80041c4:	4b0e      	ldr	r3, [pc, #56]	; (8004200 <FLASH_Program_DoubleWord+0x48>)
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	4a0d      	ldr	r2, [pc, #52]	; (8004200 <FLASH_Program_DoubleWord+0x48>)
 80041ca:	f043 0301 	orr.w	r3, r3, #1
 80041ce:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80041d6:	f3bf 8f6f 	isb	sy
}
 80041da:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80041dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	000a      	movs	r2, r1
 80041ea:	2300      	movs	r3, #0
 80041ec:	68f9      	ldr	r1, [r7, #12]
 80041ee:	3104      	adds	r1, #4
 80041f0:	4613      	mov	r3, r2
 80041f2:	600b      	str	r3, [r1, #0]
}
 80041f4:	bf00      	nop
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	40022000 	.word	0x40022000

08004204 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8004204:	b480      	push	{r7}
 8004206:	b089      	sub	sp, #36	; 0x24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800420e:	2340      	movs	r3, #64	; 0x40
 8004210:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800421a:	4b14      	ldr	r3, [pc, #80]	; (800426c <FLASH_Program_Fast+0x68>)
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	4a13      	ldr	r2, [pc, #76]	; (800426c <FLASH_Program_Fast+0x68>)
 8004220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004224:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004226:	f3ef 8310 	mrs	r3, PRIMASK
 800422a:	60fb      	str	r3, [r7, #12]
  return(result);
 800422c:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800422e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004230:	b672      	cpsid	i
}
 8004232:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	3304      	adds	r3, #4
 8004240:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	3304      	adds	r3, #4
 8004246:	617b      	str	r3, [r7, #20]
    row_index--;
 8004248:	7ffb      	ldrb	r3, [r7, #31]
 800424a:	3b01      	subs	r3, #1
 800424c:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800424e:	7ffb      	ldrb	r3, [r7, #31]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1ef      	bne.n	8004234 <FLASH_Program_Fast+0x30>
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f383 8810 	msr	PRIMASK, r3
}
 800425e:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8004260:	bf00      	nop
 8004262:	3724      	adds	r7, #36	; 0x24
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	40022000 	.word	0x40022000

08004270 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800427a:	4b49      	ldr	r3, [pc, #292]	; (80043a0 <HAL_FLASHEx_Erase+0x130>)
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d101      	bne.n	8004286 <HAL_FLASHEx_Erase+0x16>
 8004282:	2302      	movs	r3, #2
 8004284:	e087      	b.n	8004396 <HAL_FLASHEx_Erase+0x126>
 8004286:	4b46      	ldr	r3, [pc, #280]	; (80043a0 <HAL_FLASHEx_Erase+0x130>)
 8004288:	2201      	movs	r2, #1
 800428a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800428c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004290:	f7ff ff3c 	bl	800410c <FLASH_WaitForLastOperation>
 8004294:	4603      	mov	r3, r0
 8004296:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004298:	7bfb      	ldrb	r3, [r7, #15]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d177      	bne.n	800438e <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800429e:	4b40      	ldr	r3, [pc, #256]	; (80043a0 <HAL_FLASHEx_Erase+0x130>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80042a4:	4b3f      	ldr	r3, [pc, #252]	; (80043a4 <HAL_FLASHEx_Erase+0x134>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d013      	beq.n	80042d8 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80042b0:	4b3c      	ldr	r3, [pc, #240]	; (80043a4 <HAL_FLASHEx_Erase+0x134>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d009      	beq.n	80042d0 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80042bc:	4b39      	ldr	r3, [pc, #228]	; (80043a4 <HAL_FLASHEx_Erase+0x134>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a38      	ldr	r2, [pc, #224]	; (80043a4 <HAL_FLASHEx_Erase+0x134>)
 80042c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042c6:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80042c8:	4b35      	ldr	r3, [pc, #212]	; (80043a0 <HAL_FLASHEx_Erase+0x130>)
 80042ca:	2203      	movs	r2, #3
 80042cc:	771a      	strb	r2, [r3, #28]
 80042ce:	e016      	b.n	80042fe <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80042d0:	4b33      	ldr	r3, [pc, #204]	; (80043a0 <HAL_FLASHEx_Erase+0x130>)
 80042d2:	2201      	movs	r2, #1
 80042d4:	771a      	strb	r2, [r3, #28]
 80042d6:	e012      	b.n	80042fe <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80042d8:	4b32      	ldr	r3, [pc, #200]	; (80043a4 <HAL_FLASHEx_Erase+0x134>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d009      	beq.n	80042f8 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80042e4:	4b2f      	ldr	r3, [pc, #188]	; (80043a4 <HAL_FLASHEx_Erase+0x134>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a2e      	ldr	r2, [pc, #184]	; (80043a4 <HAL_FLASHEx_Erase+0x134>)
 80042ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042ee:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80042f0:	4b2b      	ldr	r3, [pc, #172]	; (80043a0 <HAL_FLASHEx_Erase+0x130>)
 80042f2:	2202      	movs	r2, #2
 80042f4:	771a      	strb	r2, [r3, #28]
 80042f6:	e002      	b.n	80042fe <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80042f8:	4b29      	ldr	r3, [pc, #164]	; (80043a0 <HAL_FLASHEx_Erase+0x130>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d113      	bne.n	800432e <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	4618      	mov	r0, r3
 800430c:	f000 f84c 	bl	80043a8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004310:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004314:	f7ff fefa 	bl	800410c <FLASH_WaitForLastOperation>
 8004318:	4603      	mov	r3, r0
 800431a:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800431c:	4b21      	ldr	r3, [pc, #132]	; (80043a4 <HAL_FLASHEx_Erase+0x134>)
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	4a20      	ldr	r2, [pc, #128]	; (80043a4 <HAL_FLASHEx_Erase+0x134>)
 8004322:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004326:	f023 0304 	bic.w	r3, r3, #4
 800432a:	6153      	str	r3, [r2, #20]
 800432c:	e02d      	b.n	800438a <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	f04f 32ff 	mov.w	r2, #4294967295
 8004334:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	60bb      	str	r3, [r7, #8]
 800433c:	e01d      	b.n	800437a <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	4619      	mov	r1, r3
 8004344:	68b8      	ldr	r0, [r7, #8]
 8004346:	f000 f857 	bl	80043f8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800434a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800434e:	f7ff fedd 	bl	800410c <FLASH_WaitForLastOperation>
 8004352:	4603      	mov	r3, r0
 8004354:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004356:	4b13      	ldr	r3, [pc, #76]	; (80043a4 <HAL_FLASHEx_Erase+0x134>)
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	4a12      	ldr	r2, [pc, #72]	; (80043a4 <HAL_FLASHEx_Erase+0x134>)
 800435c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004360:	f023 0302 	bic.w	r3, r3, #2
 8004364:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	601a      	str	r2, [r3, #0]
          break;
 8004372:	e00a      	b.n	800438a <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	3301      	adds	r3, #1
 8004378:	60bb      	str	r3, [r7, #8]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	4413      	add	r3, r2
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	429a      	cmp	r2, r3
 8004388:	d3d9      	bcc.n	800433e <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800438a:	f000 f86b 	bl	8004464 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800438e:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <HAL_FLASHEx_Erase+0x130>)
 8004390:	2200      	movs	r2, #0
 8004392:	701a      	strb	r2, [r3, #0]

  return status;
 8004394:	7bfb      	ldrb	r3, [r7, #15]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000014 	.word	0x20000014
 80043a4:	40022000 	.word	0x40022000

080043a8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d005      	beq.n	80043c6 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80043ba:	4b0e      	ldr	r3, [pc, #56]	; (80043f4 <FLASH_MassErase+0x4c>)
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	4a0d      	ldr	r2, [pc, #52]	; (80043f4 <FLASH_MassErase+0x4c>)
 80043c0:	f043 0304 	orr.w	r3, r3, #4
 80043c4:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d005      	beq.n	80043dc <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80043d0:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <FLASH_MassErase+0x4c>)
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	4a07      	ldr	r2, [pc, #28]	; (80043f4 <FLASH_MassErase+0x4c>)
 80043d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043da:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80043dc:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <FLASH_MassErase+0x4c>)
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	4a04      	ldr	r2, [pc, #16]	; (80043f4 <FLASH_MassErase+0x4c>)
 80043e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e6:	6153      	str	r3, [r2, #20]
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	40022000 	.word	0x40022000

080043f8 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d006      	beq.n	800441a <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800440c:	4b14      	ldr	r3, [pc, #80]	; (8004460 <FLASH_PageErase+0x68>)
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	4a13      	ldr	r2, [pc, #76]	; (8004460 <FLASH_PageErase+0x68>)
 8004412:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004416:	6153      	str	r3, [r2, #20]
 8004418:	e005      	b.n	8004426 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800441a:	4b11      	ldr	r3, [pc, #68]	; (8004460 <FLASH_PageErase+0x68>)
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	4a10      	ldr	r2, [pc, #64]	; (8004460 <FLASH_PageErase+0x68>)
 8004420:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004424:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8004426:	4b0e      	ldr	r3, [pc, #56]	; (8004460 <FLASH_PageErase+0x68>)
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8004436:	490a      	ldr	r1, [pc, #40]	; (8004460 <FLASH_PageErase+0x68>)
 8004438:	4313      	orrs	r3, r2
 800443a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800443c:	4b08      	ldr	r3, [pc, #32]	; (8004460 <FLASH_PageErase+0x68>)
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	4a07      	ldr	r2, [pc, #28]	; (8004460 <FLASH_PageErase+0x68>)
 8004442:	f043 0302 	orr.w	r3, r3, #2
 8004446:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004448:	4b05      	ldr	r3, [pc, #20]	; (8004460 <FLASH_PageErase+0x68>)
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	4a04      	ldr	r2, [pc, #16]	; (8004460 <FLASH_PageErase+0x68>)
 800444e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004452:	6153      	str	r3, [r2, #20]
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	40022000 	.word	0x40022000

08004464 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800446a:	4b21      	ldr	r3, [pc, #132]	; (80044f0 <FLASH_FlushCaches+0x8c>)
 800446c:	7f1b      	ldrb	r3, [r3, #28]
 800446e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8004470:	79fb      	ldrb	r3, [r7, #7]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d002      	beq.n	800447c <FLASH_FlushCaches+0x18>
 8004476:	79fb      	ldrb	r3, [r7, #7]
 8004478:	2b03      	cmp	r3, #3
 800447a:	d117      	bne.n	80044ac <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800447c:	4b1d      	ldr	r3, [pc, #116]	; (80044f4 <FLASH_FlushCaches+0x90>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a1c      	ldr	r2, [pc, #112]	; (80044f4 <FLASH_FlushCaches+0x90>)
 8004482:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004486:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004488:	4b1a      	ldr	r3, [pc, #104]	; (80044f4 <FLASH_FlushCaches+0x90>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a19      	ldr	r2, [pc, #100]	; (80044f4 <FLASH_FlushCaches+0x90>)
 800448e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	4b17      	ldr	r3, [pc, #92]	; (80044f4 <FLASH_FlushCaches+0x90>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a16      	ldr	r2, [pc, #88]	; (80044f4 <FLASH_FlushCaches+0x90>)
 800449a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800449e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80044a0:	4b14      	ldr	r3, [pc, #80]	; (80044f4 <FLASH_FlushCaches+0x90>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a13      	ldr	r2, [pc, #76]	; (80044f4 <FLASH_FlushCaches+0x90>)
 80044a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044aa:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d002      	beq.n	80044b8 <FLASH_FlushCaches+0x54>
 80044b2:	79fb      	ldrb	r3, [r7, #7]
 80044b4:	2b03      	cmp	r3, #3
 80044b6:	d111      	bne.n	80044dc <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80044b8:	4b0e      	ldr	r3, [pc, #56]	; (80044f4 <FLASH_FlushCaches+0x90>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a0d      	ldr	r2, [pc, #52]	; (80044f4 <FLASH_FlushCaches+0x90>)
 80044be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044c2:	6013      	str	r3, [r2, #0]
 80044c4:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <FLASH_FlushCaches+0x90>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a0a      	ldr	r2, [pc, #40]	; (80044f4 <FLASH_FlushCaches+0x90>)
 80044ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044ce:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80044d0:	4b08      	ldr	r3, [pc, #32]	; (80044f4 <FLASH_FlushCaches+0x90>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a07      	ldr	r2, [pc, #28]	; (80044f4 <FLASH_FlushCaches+0x90>)
 80044d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044da:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80044dc:	4b04      	ldr	r3, [pc, #16]	; (80044f0 <FLASH_FlushCaches+0x8c>)
 80044de:	2200      	movs	r2, #0
 80044e0:	771a      	strb	r2, [r3, #28]
}
 80044e2:	bf00      	nop
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	20000014 	.word	0x20000014
 80044f4:	40022000 	.word	0x40022000

080044f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004502:	2300      	movs	r3, #0
 8004504:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004506:	e17f      	b.n	8004808 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	2101      	movs	r1, #1
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	fa01 f303 	lsl.w	r3, r1, r3
 8004514:	4013      	ands	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 8171 	beq.w	8004802 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f003 0303 	and.w	r3, r3, #3
 8004528:	2b01      	cmp	r3, #1
 800452a:	d005      	beq.n	8004538 <HAL_GPIO_Init+0x40>
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f003 0303 	and.w	r3, r3, #3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d130      	bne.n	800459a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	2203      	movs	r2, #3
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	43db      	mvns	r3, r3
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4013      	ands	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800456e:	2201      	movs	r2, #1
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	fa02 f303 	lsl.w	r3, r2, r3
 8004576:	43db      	mvns	r3, r3
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	4013      	ands	r3, r2
 800457c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	091b      	lsrs	r3, r3, #4
 8004584:	f003 0201 	and.w	r2, r3, #1
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	fa02 f303 	lsl.w	r3, r2, r3
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4313      	orrs	r3, r2
 8004592:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	d118      	bne.n	80045d8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80045ac:	2201      	movs	r2, #1
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	43db      	mvns	r3, r3
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4013      	ands	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	08db      	lsrs	r3, r3, #3
 80045c2:	f003 0201 	and.w	r2, r3, #1
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f003 0303 	and.w	r3, r3, #3
 80045e0:	2b03      	cmp	r3, #3
 80045e2:	d017      	beq.n	8004614 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	2203      	movs	r2, #3
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	43db      	mvns	r3, r3
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4013      	ands	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4313      	orrs	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f003 0303 	and.w	r3, r3, #3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d123      	bne.n	8004668 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	08da      	lsrs	r2, r3, #3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3208      	adds	r2, #8
 8004628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800462c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	220f      	movs	r2, #15
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	43db      	mvns	r3, r3
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4013      	ands	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	691a      	ldr	r2, [r3, #16]
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	fa02 f303 	lsl.w	r3, r2, r3
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	4313      	orrs	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	08da      	lsrs	r2, r3, #3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	3208      	adds	r2, #8
 8004662:	6939      	ldr	r1, [r7, #16]
 8004664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	2203      	movs	r2, #3
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	43db      	mvns	r3, r3
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4013      	ands	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f003 0203 	and.w	r2, r3, #3
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	fa02 f303 	lsl.w	r3, r2, r3
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 80ac 	beq.w	8004802 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046aa:	4b5f      	ldr	r3, [pc, #380]	; (8004828 <HAL_GPIO_Init+0x330>)
 80046ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ae:	4a5e      	ldr	r2, [pc, #376]	; (8004828 <HAL_GPIO_Init+0x330>)
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	6613      	str	r3, [r2, #96]	; 0x60
 80046b6:	4b5c      	ldr	r3, [pc, #368]	; (8004828 <HAL_GPIO_Init+0x330>)
 80046b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	60bb      	str	r3, [r7, #8]
 80046c0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80046c2:	4a5a      	ldr	r2, [pc, #360]	; (800482c <HAL_GPIO_Init+0x334>)
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	089b      	lsrs	r3, r3, #2
 80046c8:	3302      	adds	r3, #2
 80046ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	220f      	movs	r2, #15
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	43db      	mvns	r3, r3
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	4013      	ands	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046ec:	d025      	beq.n	800473a <HAL_GPIO_Init+0x242>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a4f      	ldr	r2, [pc, #316]	; (8004830 <HAL_GPIO_Init+0x338>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d01f      	beq.n	8004736 <HAL_GPIO_Init+0x23e>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a4e      	ldr	r2, [pc, #312]	; (8004834 <HAL_GPIO_Init+0x33c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d019      	beq.n	8004732 <HAL_GPIO_Init+0x23a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a4d      	ldr	r2, [pc, #308]	; (8004838 <HAL_GPIO_Init+0x340>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d013      	beq.n	800472e <HAL_GPIO_Init+0x236>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a4c      	ldr	r2, [pc, #304]	; (800483c <HAL_GPIO_Init+0x344>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00d      	beq.n	800472a <HAL_GPIO_Init+0x232>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a4b      	ldr	r2, [pc, #300]	; (8004840 <HAL_GPIO_Init+0x348>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d007      	beq.n	8004726 <HAL_GPIO_Init+0x22e>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a4a      	ldr	r2, [pc, #296]	; (8004844 <HAL_GPIO_Init+0x34c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d101      	bne.n	8004722 <HAL_GPIO_Init+0x22a>
 800471e:	2306      	movs	r3, #6
 8004720:	e00c      	b.n	800473c <HAL_GPIO_Init+0x244>
 8004722:	2307      	movs	r3, #7
 8004724:	e00a      	b.n	800473c <HAL_GPIO_Init+0x244>
 8004726:	2305      	movs	r3, #5
 8004728:	e008      	b.n	800473c <HAL_GPIO_Init+0x244>
 800472a:	2304      	movs	r3, #4
 800472c:	e006      	b.n	800473c <HAL_GPIO_Init+0x244>
 800472e:	2303      	movs	r3, #3
 8004730:	e004      	b.n	800473c <HAL_GPIO_Init+0x244>
 8004732:	2302      	movs	r3, #2
 8004734:	e002      	b.n	800473c <HAL_GPIO_Init+0x244>
 8004736:	2301      	movs	r3, #1
 8004738:	e000      	b.n	800473c <HAL_GPIO_Init+0x244>
 800473a:	2300      	movs	r3, #0
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	f002 0203 	and.w	r2, r2, #3
 8004742:	0092      	lsls	r2, r2, #2
 8004744:	4093      	lsls	r3, r2
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	4313      	orrs	r3, r2
 800474a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800474c:	4937      	ldr	r1, [pc, #220]	; (800482c <HAL_GPIO_Init+0x334>)
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	089b      	lsrs	r3, r3, #2
 8004752:	3302      	adds	r3, #2
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800475a:	4b3b      	ldr	r3, [pc, #236]	; (8004848 <HAL_GPIO_Init+0x350>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	43db      	mvns	r3, r3
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4013      	ands	r3, r2
 8004768:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800477e:	4a32      	ldr	r2, [pc, #200]	; (8004848 <HAL_GPIO_Init+0x350>)
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004784:	4b30      	ldr	r3, [pc, #192]	; (8004848 <HAL_GPIO_Init+0x350>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	43db      	mvns	r3, r3
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4013      	ands	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d003      	beq.n	80047a8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047a8:	4a27      	ldr	r2, [pc, #156]	; (8004848 <HAL_GPIO_Init+0x350>)
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80047ae:	4b26      	ldr	r3, [pc, #152]	; (8004848 <HAL_GPIO_Init+0x350>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	43db      	mvns	r3, r3
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	4013      	ands	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047d2:	4a1d      	ldr	r2, [pc, #116]	; (8004848 <HAL_GPIO_Init+0x350>)
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80047d8:	4b1b      	ldr	r3, [pc, #108]	; (8004848 <HAL_GPIO_Init+0x350>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	43db      	mvns	r3, r3
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4013      	ands	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047fc:	4a12      	ldr	r2, [pc, #72]	; (8004848 <HAL_GPIO_Init+0x350>)
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	3301      	adds	r3, #1
 8004806:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	fa22 f303 	lsr.w	r3, r2, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	f47f ae78 	bne.w	8004508 <HAL_GPIO_Init+0x10>
  }
}
 8004818:	bf00      	nop
 800481a:	bf00      	nop
 800481c:	371c      	adds	r7, #28
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	40021000 	.word	0x40021000
 800482c:	40010000 	.word	0x40010000
 8004830:	48000400 	.word	0x48000400
 8004834:	48000800 	.word	0x48000800
 8004838:	48000c00 	.word	0x48000c00
 800483c:	48001000 	.word	0x48001000
 8004840:	48001400 	.word	0x48001400
 8004844:	48001800 	.word	0x48001800
 8004848:	40010400 	.word	0x40010400

0800484c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691a      	ldr	r2, [r3, #16]
 800485c:	887b      	ldrh	r3, [r7, #2]
 800485e:	4013      	ands	r3, r2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d002      	beq.n	800486a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004864:	2301      	movs	r3, #1
 8004866:	73fb      	strb	r3, [r7, #15]
 8004868:	e001      	b.n	800486e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800486a:	2300      	movs	r3, #0
 800486c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800486e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004870:	4618      	mov	r0, r3
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	807b      	strh	r3, [r7, #2]
 8004888:	4613      	mov	r3, r2
 800488a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800488c:	787b      	ldrb	r3, [r7, #1]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004892:	887a      	ldrh	r2, [r7, #2]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004898:	e002      	b.n	80048a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800489a:	887a      	ldrh	r2, [r7, #2]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	460b      	mov	r3, r1
 80048b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048be:	887a      	ldrh	r2, [r7, #2]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4013      	ands	r3, r2
 80048c4:	041a      	lsls	r2, r3, #16
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	43d9      	mvns	r1, r3
 80048ca:	887b      	ldrh	r3, [r7, #2]
 80048cc:	400b      	ands	r3, r1
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	619a      	str	r2, [r3, #24]
}
 80048d4:	bf00      	nop
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	4603      	mov	r3, r0
 80048e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80048ea:	4b08      	ldr	r3, [pc, #32]	; (800490c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048ec:	695a      	ldr	r2, [r3, #20]
 80048ee:	88fb      	ldrh	r3, [r7, #6]
 80048f0:	4013      	ands	r3, r2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d006      	beq.n	8004904 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048f6:	4a05      	ldr	r2, [pc, #20]	; (800490c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048f8:	88fb      	ldrh	r3, [r7, #6]
 80048fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048fc:	88fb      	ldrh	r3, [r7, #6]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fd ff50 	bl	80027a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004904:	bf00      	nop
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40010400 	.word	0x40010400

08004910 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e081      	b.n	8004a26 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d106      	bne.n	800493c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7fe fd46 	bl	80033c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2224      	movs	r2, #36	; 0x24
 8004940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0201 	bic.w	r2, r2, #1
 8004952:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004960:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004970:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d107      	bne.n	800498a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004986:	609a      	str	r2, [r3, #8]
 8004988:	e006      	b.n	8004998 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004996:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	2b02      	cmp	r3, #2
 800499e:	d104      	bne.n	80049aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6812      	ldr	r2, [r2, #0]
 80049b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80049b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68da      	ldr	r2, [r3, #12]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691a      	ldr	r2, [r3, #16]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	69d9      	ldr	r1, [r3, #28]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a1a      	ldr	r2, [r3, #32]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0201 	orr.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2220      	movs	r2, #32
 8004a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
	...

08004a30 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af02      	add	r7, sp, #8
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	4608      	mov	r0, r1
 8004a3a:	4611      	mov	r1, r2
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	4603      	mov	r3, r0
 8004a40:	817b      	strh	r3, [r7, #10]
 8004a42:	460b      	mov	r3, r1
 8004a44:	813b      	strh	r3, [r7, #8]
 8004a46:	4613      	mov	r3, r2
 8004a48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b20      	cmp	r3, #32
 8004a54:	f040 80f9 	bne.w	8004c4a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a58:	6a3b      	ldr	r3, [r7, #32]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d002      	beq.n	8004a64 <HAL_I2C_Mem_Write+0x34>
 8004a5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d105      	bne.n	8004a70 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a6a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e0ed      	b.n	8004c4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d101      	bne.n	8004a7e <HAL_I2C_Mem_Write+0x4e>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	e0e6      	b.n	8004c4c <HAL_I2C_Mem_Write+0x21c>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a86:	f7fe ffd5 	bl	8003a34 <HAL_GetTick>
 8004a8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	2319      	movs	r3, #25
 8004a92:	2201      	movs	r2, #1
 8004a94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 fac3 	bl	8005024 <I2C_WaitOnFlagUntilTimeout>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e0d1      	b.n	8004c4c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2221      	movs	r2, #33	; 0x21
 8004aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2240      	movs	r2, #64	; 0x40
 8004ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6a3a      	ldr	r2, [r7, #32]
 8004ac2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ac8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ad0:	88f8      	ldrh	r0, [r7, #6]
 8004ad2:	893a      	ldrh	r2, [r7, #8]
 8004ad4:	8979      	ldrh	r1, [r7, #10]
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	9301      	str	r3, [sp, #4]
 8004ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	4603      	mov	r3, r0
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 f9d3 	bl	8004e8c <I2C_RequestMemoryWrite>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d005      	beq.n	8004af8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e0a9      	b.n	8004c4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2bff      	cmp	r3, #255	; 0xff
 8004b00:	d90e      	bls.n	8004b20 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	22ff      	movs	r2, #255	; 0xff
 8004b06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	8979      	ldrh	r1, [r7, #10]
 8004b10:	2300      	movs	r3, #0
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 fc2b 	bl	8005374 <I2C_TransferConfig>
 8004b1e:	e00f      	b.n	8004b40 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	8979      	ldrh	r1, [r7, #10]
 8004b32:	2300      	movs	r3, #0
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 fc1a 	bl	8005374 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 faad 	bl	80050a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e07b      	b.n	8004c4c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	781a      	ldrb	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	3b01      	subs	r3, #1
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d034      	beq.n	8004bf8 <HAL_I2C_Mem_Write+0x1c8>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d130      	bne.n	8004bf8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	2180      	movs	r1, #128	; 0x80
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 fa3f 	bl	8005024 <I2C_WaitOnFlagUntilTimeout>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e04d      	b.n	8004c4c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	2bff      	cmp	r3, #255	; 0xff
 8004bb8:	d90e      	bls.n	8004bd8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	22ff      	movs	r2, #255	; 0xff
 8004bbe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	8979      	ldrh	r1, [r7, #10]
 8004bc8:	2300      	movs	r3, #0
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 fbcf 	bl	8005374 <I2C_TransferConfig>
 8004bd6:	e00f      	b.n	8004bf8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	8979      	ldrh	r1, [r7, #10]
 8004bea:	2300      	movs	r3, #0
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 fbbe 	bl	8005374 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d19e      	bne.n	8004b40 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 fa8c 	bl	8005124 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e01a      	b.n	8004c4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6859      	ldr	r1, [r3, #4]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	4b0a      	ldr	r3, [pc, #40]	; (8004c54 <HAL_I2C_Mem_Write+0x224>)
 8004c2a:	400b      	ands	r3, r1
 8004c2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	e000      	b.n	8004c4c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004c4a:	2302      	movs	r3, #2
  }
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	fe00e800 	.word	0xfe00e800

08004c58 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af02      	add	r7, sp, #8
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	4608      	mov	r0, r1
 8004c62:	4611      	mov	r1, r2
 8004c64:	461a      	mov	r2, r3
 8004c66:	4603      	mov	r3, r0
 8004c68:	817b      	strh	r3, [r7, #10]
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	813b      	strh	r3, [r7, #8]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b20      	cmp	r3, #32
 8004c7c:	f040 80fd 	bne.w	8004e7a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <HAL_I2C_Mem_Read+0x34>
 8004c86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d105      	bne.n	8004c98 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c92:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e0f1      	b.n	8004e7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <HAL_I2C_Mem_Read+0x4e>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	e0ea      	b.n	8004e7c <HAL_I2C_Mem_Read+0x224>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004cae:	f7fe fec1 	bl	8003a34 <HAL_GetTick>
 8004cb2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	2319      	movs	r3, #25
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 f9af 	bl	8005024 <I2C_WaitOnFlagUntilTimeout>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e0d5      	b.n	8004e7c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2222      	movs	r2, #34	; 0x22
 8004cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2240      	movs	r2, #64	; 0x40
 8004cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6a3a      	ldr	r2, [r7, #32]
 8004cea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cf8:	88f8      	ldrh	r0, [r7, #6]
 8004cfa:	893a      	ldrh	r2, [r7, #8]
 8004cfc:	8979      	ldrh	r1, [r7, #10]
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	9301      	str	r3, [sp, #4]
 8004d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	4603      	mov	r3, r0
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 f913 	bl	8004f34 <I2C_RequestMemoryRead>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d005      	beq.n	8004d20 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e0ad      	b.n	8004e7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	2bff      	cmp	r3, #255	; 0xff
 8004d28:	d90e      	bls.n	8004d48 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	22ff      	movs	r2, #255	; 0xff
 8004d2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	8979      	ldrh	r1, [r7, #10]
 8004d38:	4b52      	ldr	r3, [pc, #328]	; (8004e84 <HAL_I2C_Mem_Read+0x22c>)
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 fb17 	bl	8005374 <I2C_TransferConfig>
 8004d46:	e00f      	b.n	8004d68 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	8979      	ldrh	r1, [r7, #10]
 8004d5a:	4b4a      	ldr	r3, [pc, #296]	; (8004e84 <HAL_I2C_Mem_Read+0x22c>)
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 fb06 	bl	8005374 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6e:	2200      	movs	r2, #0
 8004d70:	2104      	movs	r1, #4
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 f956 	bl	8005024 <I2C_WaitOnFlagUntilTimeout>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e07c      	b.n	8004e7c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	b2d2      	uxtb	r2, r2
 8004d8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	1c5a      	adds	r2, r3, #1
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d034      	beq.n	8004e28 <HAL_I2C_Mem_Read+0x1d0>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d130      	bne.n	8004e28 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dcc:	2200      	movs	r2, #0
 8004dce:	2180      	movs	r1, #128	; 0x80
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 f927 	bl	8005024 <I2C_WaitOnFlagUntilTimeout>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e04d      	b.n	8004e7c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2bff      	cmp	r3, #255	; 0xff
 8004de8:	d90e      	bls.n	8004e08 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	22ff      	movs	r2, #255	; 0xff
 8004dee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	8979      	ldrh	r1, [r7, #10]
 8004df8:	2300      	movs	r3, #0
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 fab7 	bl	8005374 <I2C_TransferConfig>
 8004e06:	e00f      	b.n	8004e28 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	8979      	ldrh	r1, [r7, #10]
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 faa6 	bl	8005374 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d19a      	bne.n	8004d68 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 f974 	bl	8005124 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e01a      	b.n	8004e7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6859      	ldr	r1, [r3, #4]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	4b0b      	ldr	r3, [pc, #44]	; (8004e88 <HAL_I2C_Mem_Read+0x230>)
 8004e5a:	400b      	ands	r3, r1
 8004e5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2220      	movs	r2, #32
 8004e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e76:	2300      	movs	r3, #0
 8004e78:	e000      	b.n	8004e7c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004e7a:	2302      	movs	r3, #2
  }
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3718      	adds	r7, #24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	80002400 	.word	0x80002400
 8004e88:	fe00e800 	.word	0xfe00e800

08004e8c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af02      	add	r7, sp, #8
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	4608      	mov	r0, r1
 8004e96:	4611      	mov	r1, r2
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	817b      	strh	r3, [r7, #10]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	813b      	strh	r3, [r7, #8]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004ea6:	88fb      	ldrh	r3, [r7, #6]
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	8979      	ldrh	r1, [r7, #10]
 8004eac:	4b20      	ldr	r3, [pc, #128]	; (8004f30 <I2C_RequestMemoryWrite+0xa4>)
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f000 fa5d 	bl	8005374 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eba:	69fa      	ldr	r2, [r7, #28]
 8004ebc:	69b9      	ldr	r1, [r7, #24]
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 f8f0 	bl	80050a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e02c      	b.n	8004f28 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ece:	88fb      	ldrh	r3, [r7, #6]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d105      	bne.n	8004ee0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ed4:	893b      	ldrh	r3, [r7, #8]
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	629a      	str	r2, [r3, #40]	; 0x28
 8004ede:	e015      	b.n	8004f0c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ee0:	893b      	ldrh	r3, [r7, #8]
 8004ee2:	0a1b      	lsrs	r3, r3, #8
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eee:	69fa      	ldr	r2, [r7, #28]
 8004ef0:	69b9      	ldr	r1, [r7, #24]
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 f8d6 	bl	80050a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e012      	b.n	8004f28 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f02:	893b      	ldrh	r3, [r7, #8]
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	2200      	movs	r2, #0
 8004f14:	2180      	movs	r1, #128	; 0x80
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 f884 	bl	8005024 <I2C_WaitOnFlagUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	80002000 	.word	0x80002000

08004f34 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af02      	add	r7, sp, #8
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	4608      	mov	r0, r1
 8004f3e:	4611      	mov	r1, r2
 8004f40:	461a      	mov	r2, r3
 8004f42:	4603      	mov	r3, r0
 8004f44:	817b      	strh	r3, [r7, #10]
 8004f46:	460b      	mov	r3, r1
 8004f48:	813b      	strh	r3, [r7, #8]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004f4e:	88fb      	ldrh	r3, [r7, #6]
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	8979      	ldrh	r1, [r7, #10]
 8004f54:	4b20      	ldr	r3, [pc, #128]	; (8004fd8 <I2C_RequestMemoryRead+0xa4>)
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	2300      	movs	r3, #0
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 fa0a 	bl	8005374 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f60:	69fa      	ldr	r2, [r7, #28]
 8004f62:	69b9      	ldr	r1, [r7, #24]
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 f89d 	bl	80050a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e02c      	b.n	8004fce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f74:	88fb      	ldrh	r3, [r7, #6]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d105      	bne.n	8004f86 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f7a:	893b      	ldrh	r3, [r7, #8]
 8004f7c:	b2da      	uxtb	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	629a      	str	r2, [r3, #40]	; 0x28
 8004f84:	e015      	b.n	8004fb2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f86:	893b      	ldrh	r3, [r7, #8]
 8004f88:	0a1b      	lsrs	r3, r3, #8
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f94:	69fa      	ldr	r2, [r7, #28]
 8004f96:	69b9      	ldr	r1, [r7, #24]
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 f883 	bl	80050a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e012      	b.n	8004fce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fa8:	893b      	ldrh	r3, [r7, #8]
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	2140      	movs	r1, #64	; 0x40
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 f831 	bl	8005024 <I2C_WaitOnFlagUntilTimeout>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e000      	b.n	8004fce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	80002000 	.word	0x80002000

08004fdc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d103      	bne.n	8004ffa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b01      	cmp	r3, #1
 8005006:	d007      	beq.n	8005018 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699a      	ldr	r2, [r3, #24]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 0201 	orr.w	r2, r2, #1
 8005016:	619a      	str	r2, [r3, #24]
  }
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	603b      	str	r3, [r7, #0]
 8005030:	4613      	mov	r3, r2
 8005032:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005034:	e022      	b.n	800507c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503c:	d01e      	beq.n	800507c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800503e:	f7fe fcf9 	bl	8003a34 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	429a      	cmp	r2, r3
 800504c:	d302      	bcc.n	8005054 <I2C_WaitOnFlagUntilTimeout+0x30>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d113      	bne.n	800507c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005058:	f043 0220 	orr.w	r2, r3, #32
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2220      	movs	r2, #32
 8005064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e00f      	b.n	800509c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	699a      	ldr	r2, [r3, #24]
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	4013      	ands	r3, r2
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	429a      	cmp	r2, r3
 800508a:	bf0c      	ite	eq
 800508c:	2301      	moveq	r3, #1
 800508e:	2300      	movne	r3, #0
 8005090:	b2db      	uxtb	r3, r3
 8005092:	461a      	mov	r2, r3
 8005094:	79fb      	ldrb	r3, [r7, #7]
 8005096:	429a      	cmp	r2, r3
 8005098:	d0cd      	beq.n	8005036 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80050b0:	e02c      	b.n	800510c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	68b9      	ldr	r1, [r7, #8]
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f000 f870 	bl	800519c <I2C_IsErrorOccurred>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e02a      	b.n	800511c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050cc:	d01e      	beq.n	800510c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ce:	f7fe fcb1 	bl	8003a34 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d302      	bcc.n	80050e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d113      	bne.n	800510c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e8:	f043 0220 	orr.w	r2, r3, #32
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2220      	movs	r2, #32
 80050f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e007      	b.n	800511c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b02      	cmp	r3, #2
 8005118:	d1cb      	bne.n	80050b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005130:	e028      	b.n	8005184 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	68b9      	ldr	r1, [r7, #8]
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f000 f830 	bl	800519c <I2C_IsErrorOccurred>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e026      	b.n	8005194 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005146:	f7fe fc75 	bl	8003a34 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	429a      	cmp	r2, r3
 8005154:	d302      	bcc.n	800515c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d113      	bne.n	8005184 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005160:	f043 0220 	orr.w	r2, r3, #32
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2220      	movs	r2, #32
 800516c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e007      	b.n	8005194 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	f003 0320 	and.w	r3, r3, #32
 800518e:	2b20      	cmp	r3, #32
 8005190:	d1cf      	bne.n	8005132 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b08a      	sub	sp, #40	; 0x28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051a8:	2300      	movs	r3, #0
 80051aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80051b6:	2300      	movs	r3, #0
 80051b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	f003 0310 	and.w	r3, r3, #16
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d075      	beq.n	80052b4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2210      	movs	r2, #16
 80051ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051d0:	e056      	b.n	8005280 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d8:	d052      	beq.n	8005280 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80051da:	f7fe fc2b 	bl	8003a34 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d302      	bcc.n	80051f0 <I2C_IsErrorOccurred+0x54>
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d147      	bne.n	8005280 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005202:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800520e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005212:	d12e      	bne.n	8005272 <I2C_IsErrorOccurred+0xd6>
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800521a:	d02a      	beq.n	8005272 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800521c:	7cfb      	ldrb	r3, [r7, #19]
 800521e:	2b20      	cmp	r3, #32
 8005220:	d027      	beq.n	8005272 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005230:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005232:	f7fe fbff 	bl	8003a34 <HAL_GetTick>
 8005236:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005238:	e01b      	b.n	8005272 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800523a:	f7fe fbfb 	bl	8003a34 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b19      	cmp	r3, #25
 8005246:	d914      	bls.n	8005272 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524c:	f043 0220 	orr.w	r2, r3, #32
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2220      	movs	r2, #32
 8005258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	f003 0320 	and.w	r3, r3, #32
 800527c:	2b20      	cmp	r3, #32
 800527e:	d1dc      	bne.n	800523a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	f003 0320 	and.w	r3, r3, #32
 800528a:	2b20      	cmp	r3, #32
 800528c:	d003      	beq.n	8005296 <I2C_IsErrorOccurred+0xfa>
 800528e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005292:	2b00      	cmp	r3, #0
 8005294:	d09d      	beq.n	80051d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005296:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800529a:	2b00      	cmp	r3, #0
 800529c:	d103      	bne.n	80052a6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2220      	movs	r2, #32
 80052a4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	f043 0304 	orr.w	r3, r3, #4
 80052ac:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00b      	beq.n	80052de <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80052c6:	6a3b      	ldr	r3, [r7, #32]
 80052c8:	f043 0301 	orr.w	r3, r3, #1
 80052cc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00b      	beq.n	8005300 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	f043 0308 	orr.w	r3, r3, #8
 80052ee:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00b      	beq.n	8005322 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	f043 0302 	orr.w	r3, r3, #2
 8005310:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800531a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005322:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005326:	2b00      	cmp	r3, #0
 8005328:	d01c      	beq.n	8005364 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f7ff fe56 	bl	8004fdc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6859      	ldr	r1, [r3, #4]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	4b0d      	ldr	r3, [pc, #52]	; (8005370 <I2C_IsErrorOccurred+0x1d4>)
 800533c:	400b      	ands	r3, r1
 800533e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	431a      	orrs	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2220      	movs	r2, #32
 8005350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005368:	4618      	mov	r0, r3
 800536a:	3728      	adds	r7, #40	; 0x28
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	fe00e800 	.word	0xfe00e800

08005374 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	607b      	str	r3, [r7, #4]
 800537e:	460b      	mov	r3, r1
 8005380:	817b      	strh	r3, [r7, #10]
 8005382:	4613      	mov	r3, r2
 8005384:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005386:	897b      	ldrh	r3, [r7, #10]
 8005388:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800538c:	7a7b      	ldrb	r3, [r7, #9]
 800538e:	041b      	lsls	r3, r3, #16
 8005390:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005394:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	4313      	orrs	r3, r2
 800539e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	0d5b      	lsrs	r3, r3, #21
 80053ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80053b2:	4b08      	ldr	r3, [pc, #32]	; (80053d4 <I2C_TransferConfig+0x60>)
 80053b4:	430b      	orrs	r3, r1
 80053b6:	43db      	mvns	r3, r3
 80053b8:	ea02 0103 	and.w	r1, r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80053c6:	bf00      	nop
 80053c8:	371c      	adds	r7, #28
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	03ff63ff 	.word	0x03ff63ff

080053d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b20      	cmp	r3, #32
 80053ec:	d138      	bne.n	8005460 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d101      	bne.n	80053fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80053f8:	2302      	movs	r3, #2
 80053fa:	e032      	b.n	8005462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2224      	movs	r2, #36	; 0x24
 8005408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0201 	bic.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800542a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6819      	ldr	r1, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0201 	orr.w	r2, r2, #1
 800544a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800545c:	2300      	movs	r3, #0
 800545e:	e000      	b.n	8005462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005460:	2302      	movs	r3, #2
  }
}
 8005462:	4618      	mov	r0, r3
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800546e:	b480      	push	{r7}
 8005470:	b085      	sub	sp, #20
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b20      	cmp	r3, #32
 8005482:	d139      	bne.n	80054f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800548a:	2b01      	cmp	r3, #1
 800548c:	d101      	bne.n	8005492 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800548e:	2302      	movs	r3, #2
 8005490:	e033      	b.n	80054fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2224      	movs	r2, #36	; 0x24
 800549e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0201 	bic.w	r2, r2, #1
 80054b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80054c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	021b      	lsls	r3, r3, #8
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0201 	orr.w	r2, r2, #1
 80054e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054f4:	2300      	movs	r3, #0
 80054f6:	e000      	b.n	80054fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80054f8:	2302      	movs	r3, #2
  }
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
	...

08005508 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005508:	b480      	push	{r7}
 800550a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800550c:	4b04      	ldr	r3, [pc, #16]	; (8005520 <HAL_PWREx_GetVoltageRange+0x18>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005514:	4618      	mov	r0, r3
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	40007000 	.word	0x40007000

08005524 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005532:	d130      	bne.n	8005596 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005534:	4b23      	ldr	r3, [pc, #140]	; (80055c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800553c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005540:	d038      	beq.n	80055b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005542:	4b20      	ldr	r3, [pc, #128]	; (80055c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800554a:	4a1e      	ldr	r2, [pc, #120]	; (80055c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800554c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005550:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005552:	4b1d      	ldr	r3, [pc, #116]	; (80055c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2232      	movs	r2, #50	; 0x32
 8005558:	fb02 f303 	mul.w	r3, r2, r3
 800555c:	4a1b      	ldr	r2, [pc, #108]	; (80055cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800555e:	fba2 2303 	umull	r2, r3, r2, r3
 8005562:	0c9b      	lsrs	r3, r3, #18
 8005564:	3301      	adds	r3, #1
 8005566:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005568:	e002      	b.n	8005570 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3b01      	subs	r3, #1
 800556e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005570:	4b14      	ldr	r3, [pc, #80]	; (80055c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800557c:	d102      	bne.n	8005584 <HAL_PWREx_ControlVoltageScaling+0x60>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1f2      	bne.n	800556a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005584:	4b0f      	ldr	r3, [pc, #60]	; (80055c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800558c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005590:	d110      	bne.n	80055b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e00f      	b.n	80055b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005596:	4b0b      	ldr	r3, [pc, #44]	; (80055c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800559e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a2:	d007      	beq.n	80055b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80055a4:	4b07      	ldr	r3, [pc, #28]	; (80055c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80055ac:	4a05      	ldr	r2, [pc, #20]	; (80055c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80055ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	40007000 	.word	0x40007000
 80055c8:	20000008 	.word	0x20000008
 80055cc:	431bde83 	.word	0x431bde83

080055d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b088      	sub	sp, #32
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e3ca      	b.n	8005d78 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055e2:	4b97      	ldr	r3, [pc, #604]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 030c 	and.w	r3, r3, #12
 80055ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055ec:	4b94      	ldr	r3, [pc, #592]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f003 0303 	and.w	r3, r3, #3
 80055f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0310 	and.w	r3, r3, #16
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 80e4 	beq.w	80057cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d007      	beq.n	800561a <HAL_RCC_OscConfig+0x4a>
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	2b0c      	cmp	r3, #12
 800560e:	f040 808b 	bne.w	8005728 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2b01      	cmp	r3, #1
 8005616:	f040 8087 	bne.w	8005728 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800561a:	4b89      	ldr	r3, [pc, #548]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d005      	beq.n	8005632 <HAL_RCC_OscConfig+0x62>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e3a2      	b.n	8005d78 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1a      	ldr	r2, [r3, #32]
 8005636:	4b82      	ldr	r3, [pc, #520]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0308 	and.w	r3, r3, #8
 800563e:	2b00      	cmp	r3, #0
 8005640:	d004      	beq.n	800564c <HAL_RCC_OscConfig+0x7c>
 8005642:	4b7f      	ldr	r3, [pc, #508]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800564a:	e005      	b.n	8005658 <HAL_RCC_OscConfig+0x88>
 800564c:	4b7c      	ldr	r3, [pc, #496]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 800564e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005652:	091b      	lsrs	r3, r3, #4
 8005654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005658:	4293      	cmp	r3, r2
 800565a:	d223      	bcs.n	80056a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	4618      	mov	r0, r3
 8005662:	f000 fd55 	bl	8006110 <RCC_SetFlashLatencyFromMSIRange>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d001      	beq.n	8005670 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e383      	b.n	8005d78 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005670:	4b73      	ldr	r3, [pc, #460]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a72      	ldr	r2, [pc, #456]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 8005676:	f043 0308 	orr.w	r3, r3, #8
 800567a:	6013      	str	r3, [r2, #0]
 800567c:	4b70      	ldr	r3, [pc, #448]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	496d      	ldr	r1, [pc, #436]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 800568a:	4313      	orrs	r3, r2
 800568c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800568e:	4b6c      	ldr	r3, [pc, #432]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	021b      	lsls	r3, r3, #8
 800569c:	4968      	ldr	r1, [pc, #416]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	604b      	str	r3, [r1, #4]
 80056a2:	e025      	b.n	80056f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056a4:	4b66      	ldr	r3, [pc, #408]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a65      	ldr	r2, [pc, #404]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 80056aa:	f043 0308 	orr.w	r3, r3, #8
 80056ae:	6013      	str	r3, [r2, #0]
 80056b0:	4b63      	ldr	r3, [pc, #396]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	4960      	ldr	r1, [pc, #384]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056c2:	4b5f      	ldr	r3, [pc, #380]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	021b      	lsls	r3, r3, #8
 80056d0:	495b      	ldr	r1, [pc, #364]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d109      	bne.n	80056f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fd15 	bl	8006110 <RCC_SetFlashLatencyFromMSIRange>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e343      	b.n	8005d78 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056f0:	f000 fc4a 	bl	8005f88 <HAL_RCC_GetSysClockFreq>
 80056f4:	4602      	mov	r2, r0
 80056f6:	4b52      	ldr	r3, [pc, #328]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	091b      	lsrs	r3, r3, #4
 80056fc:	f003 030f 	and.w	r3, r3, #15
 8005700:	4950      	ldr	r1, [pc, #320]	; (8005844 <HAL_RCC_OscConfig+0x274>)
 8005702:	5ccb      	ldrb	r3, [r1, r3]
 8005704:	f003 031f 	and.w	r3, r3, #31
 8005708:	fa22 f303 	lsr.w	r3, r2, r3
 800570c:	4a4e      	ldr	r2, [pc, #312]	; (8005848 <HAL_RCC_OscConfig+0x278>)
 800570e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005710:	4b4e      	ldr	r3, [pc, #312]	; (800584c <HAL_RCC_OscConfig+0x27c>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4618      	mov	r0, r3
 8005716:	f7fe f93d 	bl	8003994 <HAL_InitTick>
 800571a:	4603      	mov	r3, r0
 800571c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800571e:	7bfb      	ldrb	r3, [r7, #15]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d052      	beq.n	80057ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005724:	7bfb      	ldrb	r3, [r7, #15]
 8005726:	e327      	b.n	8005d78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d032      	beq.n	8005796 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005730:	4b43      	ldr	r3, [pc, #268]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a42      	ldr	r2, [pc, #264]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 8005736:	f043 0301 	orr.w	r3, r3, #1
 800573a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800573c:	f7fe f97a 	bl	8003a34 <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005742:	e008      	b.n	8005756 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005744:	f7fe f976 	bl	8003a34 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d901      	bls.n	8005756 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e310      	b.n	8005d78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005756:	4b3a      	ldr	r3, [pc, #232]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0f0      	beq.n	8005744 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005762:	4b37      	ldr	r3, [pc, #220]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a36      	ldr	r2, [pc, #216]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 8005768:	f043 0308 	orr.w	r3, r3, #8
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	4b34      	ldr	r3, [pc, #208]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	4931      	ldr	r1, [pc, #196]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 800577c:	4313      	orrs	r3, r2
 800577e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005780:	4b2f      	ldr	r3, [pc, #188]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	021b      	lsls	r3, r3, #8
 800578e:	492c      	ldr	r1, [pc, #176]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 8005790:	4313      	orrs	r3, r2
 8005792:	604b      	str	r3, [r1, #4]
 8005794:	e01a      	b.n	80057cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005796:	4b2a      	ldr	r3, [pc, #168]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a29      	ldr	r2, [pc, #164]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 800579c:	f023 0301 	bic.w	r3, r3, #1
 80057a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80057a2:	f7fe f947 	bl	8003a34 <HAL_GetTick>
 80057a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80057a8:	e008      	b.n	80057bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057aa:	f7fe f943 	bl	8003a34 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e2dd      	b.n	8005d78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80057bc:	4b20      	ldr	r3, [pc, #128]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1f0      	bne.n	80057aa <HAL_RCC_OscConfig+0x1da>
 80057c8:	e000      	b.n	80057cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80057ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d074      	beq.n	80058c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	2b08      	cmp	r3, #8
 80057dc:	d005      	beq.n	80057ea <HAL_RCC_OscConfig+0x21a>
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	2b0c      	cmp	r3, #12
 80057e2:	d10e      	bne.n	8005802 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2b03      	cmp	r3, #3
 80057e8:	d10b      	bne.n	8005802 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057ea:	4b15      	ldr	r3, [pc, #84]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d064      	beq.n	80058c0 <HAL_RCC_OscConfig+0x2f0>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d160      	bne.n	80058c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e2ba      	b.n	8005d78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800580a:	d106      	bne.n	800581a <HAL_RCC_OscConfig+0x24a>
 800580c:	4b0c      	ldr	r3, [pc, #48]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a0b      	ldr	r2, [pc, #44]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 8005812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005816:	6013      	str	r3, [r2, #0]
 8005818:	e026      	b.n	8005868 <HAL_RCC_OscConfig+0x298>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005822:	d115      	bne.n	8005850 <HAL_RCC_OscConfig+0x280>
 8005824:	4b06      	ldr	r3, [pc, #24]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a05      	ldr	r2, [pc, #20]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 800582a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800582e:	6013      	str	r3, [r2, #0]
 8005830:	4b03      	ldr	r3, [pc, #12]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a02      	ldr	r2, [pc, #8]	; (8005840 <HAL_RCC_OscConfig+0x270>)
 8005836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800583a:	6013      	str	r3, [r2, #0]
 800583c:	e014      	b.n	8005868 <HAL_RCC_OscConfig+0x298>
 800583e:	bf00      	nop
 8005840:	40021000 	.word	0x40021000
 8005844:	0801476c 	.word	0x0801476c
 8005848:	20000008 	.word	0x20000008
 800584c:	2000000c 	.word	0x2000000c
 8005850:	4ba0      	ldr	r3, [pc, #640]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a9f      	ldr	r2, [pc, #636]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 8005856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800585a:	6013      	str	r3, [r2, #0]
 800585c:	4b9d      	ldr	r3, [pc, #628]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a9c      	ldr	r2, [pc, #624]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 8005862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d013      	beq.n	8005898 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005870:	f7fe f8e0 	bl	8003a34 <HAL_GetTick>
 8005874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005876:	e008      	b.n	800588a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005878:	f7fe f8dc 	bl	8003a34 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b64      	cmp	r3, #100	; 0x64
 8005884:	d901      	bls.n	800588a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e276      	b.n	8005d78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800588a:	4b92      	ldr	r3, [pc, #584]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d0f0      	beq.n	8005878 <HAL_RCC_OscConfig+0x2a8>
 8005896:	e014      	b.n	80058c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005898:	f7fe f8cc 	bl	8003a34 <HAL_GetTick>
 800589c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800589e:	e008      	b.n	80058b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058a0:	f7fe f8c8 	bl	8003a34 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b64      	cmp	r3, #100	; 0x64
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e262      	b.n	8005d78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058b2:	4b88      	ldr	r3, [pc, #544]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1f0      	bne.n	80058a0 <HAL_RCC_OscConfig+0x2d0>
 80058be:	e000      	b.n	80058c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d060      	beq.n	8005990 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	2b04      	cmp	r3, #4
 80058d2:	d005      	beq.n	80058e0 <HAL_RCC_OscConfig+0x310>
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	2b0c      	cmp	r3, #12
 80058d8:	d119      	bne.n	800590e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d116      	bne.n	800590e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058e0:	4b7c      	ldr	r3, [pc, #496]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d005      	beq.n	80058f8 <HAL_RCC_OscConfig+0x328>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e23f      	b.n	8005d78 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058f8:	4b76      	ldr	r3, [pc, #472]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	061b      	lsls	r3, r3, #24
 8005906:	4973      	ldr	r1, [pc, #460]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 8005908:	4313      	orrs	r3, r2
 800590a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800590c:	e040      	b.n	8005990 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d023      	beq.n	800595e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005916:	4b6f      	ldr	r3, [pc, #444]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a6e      	ldr	r2, [pc, #440]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 800591c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005922:	f7fe f887 	bl	8003a34 <HAL_GetTick>
 8005926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005928:	e008      	b.n	800593c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800592a:	f7fe f883 	bl	8003a34 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d901      	bls.n	800593c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e21d      	b.n	8005d78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800593c:	4b65      	ldr	r3, [pc, #404]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0f0      	beq.n	800592a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005948:	4b62      	ldr	r3, [pc, #392]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	061b      	lsls	r3, r3, #24
 8005956:	495f      	ldr	r1, [pc, #380]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 8005958:	4313      	orrs	r3, r2
 800595a:	604b      	str	r3, [r1, #4]
 800595c:	e018      	b.n	8005990 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800595e:	4b5d      	ldr	r3, [pc, #372]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a5c      	ldr	r2, [pc, #368]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 8005964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800596a:	f7fe f863 	bl	8003a34 <HAL_GetTick>
 800596e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005970:	e008      	b.n	8005984 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005972:	f7fe f85f 	bl	8003a34 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d901      	bls.n	8005984 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e1f9      	b.n	8005d78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005984:	4b53      	ldr	r3, [pc, #332]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1f0      	bne.n	8005972 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0308 	and.w	r3, r3, #8
 8005998:	2b00      	cmp	r3, #0
 800599a:	d03c      	beq.n	8005a16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d01c      	beq.n	80059de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059a4:	4b4b      	ldr	r3, [pc, #300]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 80059a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059aa:	4a4a      	ldr	r2, [pc, #296]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 80059ac:	f043 0301 	orr.w	r3, r3, #1
 80059b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b4:	f7fe f83e 	bl	8003a34 <HAL_GetTick>
 80059b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059ba:	e008      	b.n	80059ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059bc:	f7fe f83a 	bl	8003a34 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e1d4      	b.n	8005d78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059ce:	4b41      	ldr	r3, [pc, #260]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 80059d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0ef      	beq.n	80059bc <HAL_RCC_OscConfig+0x3ec>
 80059dc:	e01b      	b.n	8005a16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059de:	4b3d      	ldr	r3, [pc, #244]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 80059e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059e4:	4a3b      	ldr	r2, [pc, #236]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 80059e6:	f023 0301 	bic.w	r3, r3, #1
 80059ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ee:	f7fe f821 	bl	8003a34 <HAL_GetTick>
 80059f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059f4:	e008      	b.n	8005a08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059f6:	f7fe f81d 	bl	8003a34 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d901      	bls.n	8005a08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e1b7      	b.n	8005d78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a08:	4b32      	ldr	r3, [pc, #200]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 8005a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1ef      	bne.n	80059f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0304 	and.w	r3, r3, #4
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 80a6 	beq.w	8005b70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a24:	2300      	movs	r3, #0
 8005a26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005a28:	4b2a      	ldr	r3, [pc, #168]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 8005a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10d      	bne.n	8005a50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a34:	4b27      	ldr	r3, [pc, #156]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 8005a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a38:	4a26      	ldr	r2, [pc, #152]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 8005a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a3e:	6593      	str	r3, [r2, #88]	; 0x58
 8005a40:	4b24      	ldr	r3, [pc, #144]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 8005a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a48:	60bb      	str	r3, [r7, #8]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a50:	4b21      	ldr	r3, [pc, #132]	; (8005ad8 <HAL_RCC_OscConfig+0x508>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d118      	bne.n	8005a8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a5c:	4b1e      	ldr	r3, [pc, #120]	; (8005ad8 <HAL_RCC_OscConfig+0x508>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a1d      	ldr	r2, [pc, #116]	; (8005ad8 <HAL_RCC_OscConfig+0x508>)
 8005a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a68:	f7fd ffe4 	bl	8003a34 <HAL_GetTick>
 8005a6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a6e:	e008      	b.n	8005a82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a70:	f7fd ffe0 	bl	8003a34 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e17a      	b.n	8005d78 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a82:	4b15      	ldr	r3, [pc, #84]	; (8005ad8 <HAL_RCC_OscConfig+0x508>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d0f0      	beq.n	8005a70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d108      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x4d8>
 8005a96:	4b0f      	ldr	r3, [pc, #60]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 8005a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a9c:	4a0d      	ldr	r2, [pc, #52]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 8005a9e:	f043 0301 	orr.w	r3, r3, #1
 8005aa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005aa6:	e029      	b.n	8005afc <HAL_RCC_OscConfig+0x52c>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	2b05      	cmp	r3, #5
 8005aae:	d115      	bne.n	8005adc <HAL_RCC_OscConfig+0x50c>
 8005ab0:	4b08      	ldr	r3, [pc, #32]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 8005ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab6:	4a07      	ldr	r2, [pc, #28]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 8005ab8:	f043 0304 	orr.w	r3, r3, #4
 8005abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ac0:	4b04      	ldr	r3, [pc, #16]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 8005ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ac6:	4a03      	ldr	r2, [pc, #12]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 8005ac8:	f043 0301 	orr.w	r3, r3, #1
 8005acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ad0:	e014      	b.n	8005afc <HAL_RCC_OscConfig+0x52c>
 8005ad2:	bf00      	nop
 8005ad4:	40021000 	.word	0x40021000
 8005ad8:	40007000 	.word	0x40007000
 8005adc:	4b9c      	ldr	r3, [pc, #624]	; (8005d50 <HAL_RCC_OscConfig+0x780>)
 8005ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae2:	4a9b      	ldr	r2, [pc, #620]	; (8005d50 <HAL_RCC_OscConfig+0x780>)
 8005ae4:	f023 0301 	bic.w	r3, r3, #1
 8005ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005aec:	4b98      	ldr	r3, [pc, #608]	; (8005d50 <HAL_RCC_OscConfig+0x780>)
 8005aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005af2:	4a97      	ldr	r2, [pc, #604]	; (8005d50 <HAL_RCC_OscConfig+0x780>)
 8005af4:	f023 0304 	bic.w	r3, r3, #4
 8005af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d016      	beq.n	8005b32 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b04:	f7fd ff96 	bl	8003a34 <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b0a:	e00a      	b.n	8005b22 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b0c:	f7fd ff92 	bl	8003a34 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e12a      	b.n	8005d78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b22:	4b8b      	ldr	r3, [pc, #556]	; (8005d50 <HAL_RCC_OscConfig+0x780>)
 8005b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0ed      	beq.n	8005b0c <HAL_RCC_OscConfig+0x53c>
 8005b30:	e015      	b.n	8005b5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b32:	f7fd ff7f 	bl	8003a34 <HAL_GetTick>
 8005b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b38:	e00a      	b.n	8005b50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b3a:	f7fd ff7b 	bl	8003a34 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d901      	bls.n	8005b50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e113      	b.n	8005d78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b50:	4b7f      	ldr	r3, [pc, #508]	; (8005d50 <HAL_RCC_OscConfig+0x780>)
 8005b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1ed      	bne.n	8005b3a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b5e:	7ffb      	ldrb	r3, [r7, #31]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d105      	bne.n	8005b70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b64:	4b7a      	ldr	r3, [pc, #488]	; (8005d50 <HAL_RCC_OscConfig+0x780>)
 8005b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b68:	4a79      	ldr	r2, [pc, #484]	; (8005d50 <HAL_RCC_OscConfig+0x780>)
 8005b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b6e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 80fe 	beq.w	8005d76 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	f040 80d0 	bne.w	8005d24 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005b84:	4b72      	ldr	r3, [pc, #456]	; (8005d50 <HAL_RCC_OscConfig+0x780>)
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f003 0203 	and.w	r2, r3, #3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d130      	bne.n	8005bfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d127      	bne.n	8005bfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d11f      	bne.n	8005bfa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005bc4:	2a07      	cmp	r2, #7
 8005bc6:	bf14      	ite	ne
 8005bc8:	2201      	movne	r2, #1
 8005bca:	2200      	moveq	r2, #0
 8005bcc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d113      	bne.n	8005bfa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bdc:	085b      	lsrs	r3, r3, #1
 8005bde:	3b01      	subs	r3, #1
 8005be0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d109      	bne.n	8005bfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	085b      	lsrs	r3, r3, #1
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d06e      	beq.n	8005cd8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	2b0c      	cmp	r3, #12
 8005bfe:	d069      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005c00:	4b53      	ldr	r3, [pc, #332]	; (8005d50 <HAL_RCC_OscConfig+0x780>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d105      	bne.n	8005c18 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005c0c:	4b50      	ldr	r3, [pc, #320]	; (8005d50 <HAL_RCC_OscConfig+0x780>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e0ad      	b.n	8005d78 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005c1c:	4b4c      	ldr	r3, [pc, #304]	; (8005d50 <HAL_RCC_OscConfig+0x780>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a4b      	ldr	r2, [pc, #300]	; (8005d50 <HAL_RCC_OscConfig+0x780>)
 8005c22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c26:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c28:	f7fd ff04 	bl	8003a34 <HAL_GetTick>
 8005c2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c2e:	e008      	b.n	8005c42 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c30:	f7fd ff00 	bl	8003a34 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e09a      	b.n	8005d78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c42:	4b43      	ldr	r3, [pc, #268]	; (8005d50 <HAL_RCC_OscConfig+0x780>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1f0      	bne.n	8005c30 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c4e:	4b40      	ldr	r3, [pc, #256]	; (8005d50 <HAL_RCC_OscConfig+0x780>)
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	4b40      	ldr	r3, [pc, #256]	; (8005d54 <HAL_RCC_OscConfig+0x784>)
 8005c54:	4013      	ands	r3, r2
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005c5e:	3a01      	subs	r2, #1
 8005c60:	0112      	lsls	r2, r2, #4
 8005c62:	4311      	orrs	r1, r2
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c68:	0212      	lsls	r2, r2, #8
 8005c6a:	4311      	orrs	r1, r2
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005c70:	0852      	lsrs	r2, r2, #1
 8005c72:	3a01      	subs	r2, #1
 8005c74:	0552      	lsls	r2, r2, #21
 8005c76:	4311      	orrs	r1, r2
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005c7c:	0852      	lsrs	r2, r2, #1
 8005c7e:	3a01      	subs	r2, #1
 8005c80:	0652      	lsls	r2, r2, #25
 8005c82:	4311      	orrs	r1, r2
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c88:	0912      	lsrs	r2, r2, #4
 8005c8a:	0452      	lsls	r2, r2, #17
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	4930      	ldr	r1, [pc, #192]	; (8005d50 <HAL_RCC_OscConfig+0x780>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005c94:	4b2e      	ldr	r3, [pc, #184]	; (8005d50 <HAL_RCC_OscConfig+0x780>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a2d      	ldr	r2, [pc, #180]	; (8005d50 <HAL_RCC_OscConfig+0x780>)
 8005c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ca0:	4b2b      	ldr	r3, [pc, #172]	; (8005d50 <HAL_RCC_OscConfig+0x780>)
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	4a2a      	ldr	r2, [pc, #168]	; (8005d50 <HAL_RCC_OscConfig+0x780>)
 8005ca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005caa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005cac:	f7fd fec2 	bl	8003a34 <HAL_GetTick>
 8005cb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cb2:	e008      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cb4:	f7fd febe 	bl	8003a34 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d901      	bls.n	8005cc6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e058      	b.n	8005d78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cc6:	4b22      	ldr	r3, [pc, #136]	; (8005d50 <HAL_RCC_OscConfig+0x780>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0f0      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005cd2:	e050      	b.n	8005d76 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e04f      	b.n	8005d78 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cd8:	4b1d      	ldr	r3, [pc, #116]	; (8005d50 <HAL_RCC_OscConfig+0x780>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d148      	bne.n	8005d76 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005ce4:	4b1a      	ldr	r3, [pc, #104]	; (8005d50 <HAL_RCC_OscConfig+0x780>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a19      	ldr	r2, [pc, #100]	; (8005d50 <HAL_RCC_OscConfig+0x780>)
 8005cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005cf0:	4b17      	ldr	r3, [pc, #92]	; (8005d50 <HAL_RCC_OscConfig+0x780>)
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	4a16      	ldr	r2, [pc, #88]	; (8005d50 <HAL_RCC_OscConfig+0x780>)
 8005cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cfa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005cfc:	f7fd fe9a 	bl	8003a34 <HAL_GetTick>
 8005d00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d02:	e008      	b.n	8005d16 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d04:	f7fd fe96 	bl	8003a34 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e030      	b.n	8005d78 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d16:	4b0e      	ldr	r3, [pc, #56]	; (8005d50 <HAL_RCC_OscConfig+0x780>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d0f0      	beq.n	8005d04 <HAL_RCC_OscConfig+0x734>
 8005d22:	e028      	b.n	8005d76 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	2b0c      	cmp	r3, #12
 8005d28:	d023      	beq.n	8005d72 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d2a:	4b09      	ldr	r3, [pc, #36]	; (8005d50 <HAL_RCC_OscConfig+0x780>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a08      	ldr	r2, [pc, #32]	; (8005d50 <HAL_RCC_OscConfig+0x780>)
 8005d30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d36:	f7fd fe7d 	bl	8003a34 <HAL_GetTick>
 8005d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d3c:	e00c      	b.n	8005d58 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d3e:	f7fd fe79 	bl	8003a34 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d905      	bls.n	8005d58 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e013      	b.n	8005d78 <HAL_RCC_OscConfig+0x7a8>
 8005d50:	40021000 	.word	0x40021000
 8005d54:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d58:	4b09      	ldr	r3, [pc, #36]	; (8005d80 <HAL_RCC_OscConfig+0x7b0>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1ec      	bne.n	8005d3e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005d64:	4b06      	ldr	r3, [pc, #24]	; (8005d80 <HAL_RCC_OscConfig+0x7b0>)
 8005d66:	68da      	ldr	r2, [r3, #12]
 8005d68:	4905      	ldr	r1, [pc, #20]	; (8005d80 <HAL_RCC_OscConfig+0x7b0>)
 8005d6a:	4b06      	ldr	r3, [pc, #24]	; (8005d84 <HAL_RCC_OscConfig+0x7b4>)
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	60cb      	str	r3, [r1, #12]
 8005d70:	e001      	b.n	8005d76 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e000      	b.n	8005d78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3720      	adds	r7, #32
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	40021000 	.word	0x40021000
 8005d84:	feeefffc 	.word	0xfeeefffc

08005d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e0e7      	b.n	8005f6c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d9c:	4b75      	ldr	r3, [pc, #468]	; (8005f74 <HAL_RCC_ClockConfig+0x1ec>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0307 	and.w	r3, r3, #7
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d910      	bls.n	8005dcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005daa:	4b72      	ldr	r3, [pc, #456]	; (8005f74 <HAL_RCC_ClockConfig+0x1ec>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f023 0207 	bic.w	r2, r3, #7
 8005db2:	4970      	ldr	r1, [pc, #448]	; (8005f74 <HAL_RCC_ClockConfig+0x1ec>)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dba:	4b6e      	ldr	r3, [pc, #440]	; (8005f74 <HAL_RCC_ClockConfig+0x1ec>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d001      	beq.n	8005dcc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e0cf      	b.n	8005f6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0302 	and.w	r3, r3, #2
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d010      	beq.n	8005dfa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	4b66      	ldr	r3, [pc, #408]	; (8005f78 <HAL_RCC_ClockConfig+0x1f0>)
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d908      	bls.n	8005dfa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005de8:	4b63      	ldr	r3, [pc, #396]	; (8005f78 <HAL_RCC_ClockConfig+0x1f0>)
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	4960      	ldr	r1, [pc, #384]	; (8005f78 <HAL_RCC_ClockConfig+0x1f0>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d04c      	beq.n	8005ea0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	2b03      	cmp	r3, #3
 8005e0c:	d107      	bne.n	8005e1e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e0e:	4b5a      	ldr	r3, [pc, #360]	; (8005f78 <HAL_RCC_ClockConfig+0x1f0>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d121      	bne.n	8005e5e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e0a6      	b.n	8005f6c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d107      	bne.n	8005e36 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e26:	4b54      	ldr	r3, [pc, #336]	; (8005f78 <HAL_RCC_ClockConfig+0x1f0>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d115      	bne.n	8005e5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e09a      	b.n	8005f6c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d107      	bne.n	8005e4e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e3e:	4b4e      	ldr	r3, [pc, #312]	; (8005f78 <HAL_RCC_ClockConfig+0x1f0>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0302 	and.w	r3, r3, #2
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d109      	bne.n	8005e5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e08e      	b.n	8005f6c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e4e:	4b4a      	ldr	r3, [pc, #296]	; (8005f78 <HAL_RCC_ClockConfig+0x1f0>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e086      	b.n	8005f6c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e5e:	4b46      	ldr	r3, [pc, #280]	; (8005f78 <HAL_RCC_ClockConfig+0x1f0>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f023 0203 	bic.w	r2, r3, #3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	4943      	ldr	r1, [pc, #268]	; (8005f78 <HAL_RCC_ClockConfig+0x1f0>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e70:	f7fd fde0 	bl	8003a34 <HAL_GetTick>
 8005e74:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e76:	e00a      	b.n	8005e8e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e78:	f7fd fddc 	bl	8003a34 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e06e      	b.n	8005f6c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e8e:	4b3a      	ldr	r3, [pc, #232]	; (8005f78 <HAL_RCC_ClockConfig+0x1f0>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f003 020c 	and.w	r2, r3, #12
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d1eb      	bne.n	8005e78 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d010      	beq.n	8005ece <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689a      	ldr	r2, [r3, #8]
 8005eb0:	4b31      	ldr	r3, [pc, #196]	; (8005f78 <HAL_RCC_ClockConfig+0x1f0>)
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d208      	bcs.n	8005ece <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ebc:	4b2e      	ldr	r3, [pc, #184]	; (8005f78 <HAL_RCC_ClockConfig+0x1f0>)
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	492b      	ldr	r1, [pc, #172]	; (8005f78 <HAL_RCC_ClockConfig+0x1f0>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ece:	4b29      	ldr	r3, [pc, #164]	; (8005f74 <HAL_RCC_ClockConfig+0x1ec>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	683a      	ldr	r2, [r7, #0]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d210      	bcs.n	8005efe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005edc:	4b25      	ldr	r3, [pc, #148]	; (8005f74 <HAL_RCC_ClockConfig+0x1ec>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f023 0207 	bic.w	r2, r3, #7
 8005ee4:	4923      	ldr	r1, [pc, #140]	; (8005f74 <HAL_RCC_ClockConfig+0x1ec>)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eec:	4b21      	ldr	r3, [pc, #132]	; (8005f74 <HAL_RCC_ClockConfig+0x1ec>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0307 	and.w	r3, r3, #7
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d001      	beq.n	8005efe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e036      	b.n	8005f6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d008      	beq.n	8005f1c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f0a:	4b1b      	ldr	r3, [pc, #108]	; (8005f78 <HAL_RCC_ClockConfig+0x1f0>)
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	4918      	ldr	r1, [pc, #96]	; (8005f78 <HAL_RCC_ClockConfig+0x1f0>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0308 	and.w	r3, r3, #8
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d009      	beq.n	8005f3c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f28:	4b13      	ldr	r3, [pc, #76]	; (8005f78 <HAL_RCC_ClockConfig+0x1f0>)
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	4910      	ldr	r1, [pc, #64]	; (8005f78 <HAL_RCC_ClockConfig+0x1f0>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f3c:	f000 f824 	bl	8005f88 <HAL_RCC_GetSysClockFreq>
 8005f40:	4602      	mov	r2, r0
 8005f42:	4b0d      	ldr	r3, [pc, #52]	; (8005f78 <HAL_RCC_ClockConfig+0x1f0>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	091b      	lsrs	r3, r3, #4
 8005f48:	f003 030f 	and.w	r3, r3, #15
 8005f4c:	490b      	ldr	r1, [pc, #44]	; (8005f7c <HAL_RCC_ClockConfig+0x1f4>)
 8005f4e:	5ccb      	ldrb	r3, [r1, r3]
 8005f50:	f003 031f 	and.w	r3, r3, #31
 8005f54:	fa22 f303 	lsr.w	r3, r2, r3
 8005f58:	4a09      	ldr	r2, [pc, #36]	; (8005f80 <HAL_RCC_ClockConfig+0x1f8>)
 8005f5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005f5c:	4b09      	ldr	r3, [pc, #36]	; (8005f84 <HAL_RCC_ClockConfig+0x1fc>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fd fd17 	bl	8003994 <HAL_InitTick>
 8005f66:	4603      	mov	r3, r0
 8005f68:	72fb      	strb	r3, [r7, #11]

  return status;
 8005f6a:	7afb      	ldrb	r3, [r7, #11]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	40022000 	.word	0x40022000
 8005f78:	40021000 	.word	0x40021000
 8005f7c:	0801476c 	.word	0x0801476c
 8005f80:	20000008 	.word	0x20000008
 8005f84:	2000000c 	.word	0x2000000c

08005f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b089      	sub	sp, #36	; 0x24
 8005f8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	61fb      	str	r3, [r7, #28]
 8005f92:	2300      	movs	r3, #0
 8005f94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f96:	4b3e      	ldr	r3, [pc, #248]	; (8006090 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f003 030c 	and.w	r3, r3, #12
 8005f9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fa0:	4b3b      	ldr	r3, [pc, #236]	; (8006090 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f003 0303 	and.w	r3, r3, #3
 8005fa8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d005      	beq.n	8005fbc <HAL_RCC_GetSysClockFreq+0x34>
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	2b0c      	cmp	r3, #12
 8005fb4:	d121      	bne.n	8005ffa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d11e      	bne.n	8005ffa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005fbc:	4b34      	ldr	r3, [pc, #208]	; (8006090 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0308 	and.w	r3, r3, #8
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d107      	bne.n	8005fd8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005fc8:	4b31      	ldr	r3, [pc, #196]	; (8006090 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fce:	0a1b      	lsrs	r3, r3, #8
 8005fd0:	f003 030f 	and.w	r3, r3, #15
 8005fd4:	61fb      	str	r3, [r7, #28]
 8005fd6:	e005      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005fd8:	4b2d      	ldr	r3, [pc, #180]	; (8006090 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	091b      	lsrs	r3, r3, #4
 8005fde:	f003 030f 	and.w	r3, r3, #15
 8005fe2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005fe4:	4a2b      	ldr	r2, [pc, #172]	; (8006094 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10d      	bne.n	8006010 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ff8:	e00a      	b.n	8006010 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	d102      	bne.n	8006006 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006000:	4b25      	ldr	r3, [pc, #148]	; (8006098 <HAL_RCC_GetSysClockFreq+0x110>)
 8006002:	61bb      	str	r3, [r7, #24]
 8006004:	e004      	b.n	8006010 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	2b08      	cmp	r3, #8
 800600a:	d101      	bne.n	8006010 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800600c:	4b23      	ldr	r3, [pc, #140]	; (800609c <HAL_RCC_GetSysClockFreq+0x114>)
 800600e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	2b0c      	cmp	r3, #12
 8006014:	d134      	bne.n	8006080 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006016:	4b1e      	ldr	r3, [pc, #120]	; (8006090 <HAL_RCC_GetSysClockFreq+0x108>)
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	f003 0303 	and.w	r3, r3, #3
 800601e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	2b02      	cmp	r3, #2
 8006024:	d003      	beq.n	800602e <HAL_RCC_GetSysClockFreq+0xa6>
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	2b03      	cmp	r3, #3
 800602a:	d003      	beq.n	8006034 <HAL_RCC_GetSysClockFreq+0xac>
 800602c:	e005      	b.n	800603a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800602e:	4b1a      	ldr	r3, [pc, #104]	; (8006098 <HAL_RCC_GetSysClockFreq+0x110>)
 8006030:	617b      	str	r3, [r7, #20]
      break;
 8006032:	e005      	b.n	8006040 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006034:	4b19      	ldr	r3, [pc, #100]	; (800609c <HAL_RCC_GetSysClockFreq+0x114>)
 8006036:	617b      	str	r3, [r7, #20]
      break;
 8006038:	e002      	b.n	8006040 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	617b      	str	r3, [r7, #20]
      break;
 800603e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006040:	4b13      	ldr	r3, [pc, #76]	; (8006090 <HAL_RCC_GetSysClockFreq+0x108>)
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	091b      	lsrs	r3, r3, #4
 8006046:	f003 0307 	and.w	r3, r3, #7
 800604a:	3301      	adds	r3, #1
 800604c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800604e:	4b10      	ldr	r3, [pc, #64]	; (8006090 <HAL_RCC_GetSysClockFreq+0x108>)
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	0a1b      	lsrs	r3, r3, #8
 8006054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	fb03 f202 	mul.w	r2, r3, r2
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	fbb2 f3f3 	udiv	r3, r2, r3
 8006064:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006066:	4b0a      	ldr	r3, [pc, #40]	; (8006090 <HAL_RCC_GetSysClockFreq+0x108>)
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	0e5b      	lsrs	r3, r3, #25
 800606c:	f003 0303 	and.w	r3, r3, #3
 8006070:	3301      	adds	r3, #1
 8006072:	005b      	lsls	r3, r3, #1
 8006074:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	fbb2 f3f3 	udiv	r3, r2, r3
 800607e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006080:	69bb      	ldr	r3, [r7, #24]
}
 8006082:	4618      	mov	r0, r3
 8006084:	3724      	adds	r7, #36	; 0x24
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	40021000 	.word	0x40021000
 8006094:	08014784 	.word	0x08014784
 8006098:	00f42400 	.word	0x00f42400
 800609c:	007a1200 	.word	0x007a1200

080060a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060a0:	b480      	push	{r7}
 80060a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060a4:	4b03      	ldr	r3, [pc, #12]	; (80060b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80060a6:	681b      	ldr	r3, [r3, #0]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	20000008 	.word	0x20000008

080060b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80060bc:	f7ff fff0 	bl	80060a0 <HAL_RCC_GetHCLKFreq>
 80060c0:	4602      	mov	r2, r0
 80060c2:	4b06      	ldr	r3, [pc, #24]	; (80060dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	0a1b      	lsrs	r3, r3, #8
 80060c8:	f003 0307 	and.w	r3, r3, #7
 80060cc:	4904      	ldr	r1, [pc, #16]	; (80060e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80060ce:	5ccb      	ldrb	r3, [r1, r3]
 80060d0:	f003 031f 	and.w	r3, r3, #31
 80060d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060d8:	4618      	mov	r0, r3
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	40021000 	.word	0x40021000
 80060e0:	0801477c 	.word	0x0801477c

080060e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80060e8:	f7ff ffda 	bl	80060a0 <HAL_RCC_GetHCLKFreq>
 80060ec:	4602      	mov	r2, r0
 80060ee:	4b06      	ldr	r3, [pc, #24]	; (8006108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	0adb      	lsrs	r3, r3, #11
 80060f4:	f003 0307 	and.w	r3, r3, #7
 80060f8:	4904      	ldr	r1, [pc, #16]	; (800610c <HAL_RCC_GetPCLK2Freq+0x28>)
 80060fa:	5ccb      	ldrb	r3, [r1, r3]
 80060fc:	f003 031f 	and.w	r3, r3, #31
 8006100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006104:	4618      	mov	r0, r3
 8006106:	bd80      	pop	{r7, pc}
 8006108:	40021000 	.word	0x40021000
 800610c:	0801477c 	.word	0x0801477c

08006110 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006118:	2300      	movs	r3, #0
 800611a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800611c:	4b2a      	ldr	r3, [pc, #168]	; (80061c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800611e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d003      	beq.n	8006130 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006128:	f7ff f9ee 	bl	8005508 <HAL_PWREx_GetVoltageRange>
 800612c:	6178      	str	r0, [r7, #20]
 800612e:	e014      	b.n	800615a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006130:	4b25      	ldr	r3, [pc, #148]	; (80061c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006134:	4a24      	ldr	r2, [pc, #144]	; (80061c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800613a:	6593      	str	r3, [r2, #88]	; 0x58
 800613c:	4b22      	ldr	r3, [pc, #136]	; (80061c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800613e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006144:	60fb      	str	r3, [r7, #12]
 8006146:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006148:	f7ff f9de 	bl	8005508 <HAL_PWREx_GetVoltageRange>
 800614c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800614e:	4b1e      	ldr	r3, [pc, #120]	; (80061c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006152:	4a1d      	ldr	r2, [pc, #116]	; (80061c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006158:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006160:	d10b      	bne.n	800617a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b80      	cmp	r3, #128	; 0x80
 8006166:	d919      	bls.n	800619c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2ba0      	cmp	r3, #160	; 0xa0
 800616c:	d902      	bls.n	8006174 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800616e:	2302      	movs	r3, #2
 8006170:	613b      	str	r3, [r7, #16]
 8006172:	e013      	b.n	800619c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006174:	2301      	movs	r3, #1
 8006176:	613b      	str	r3, [r7, #16]
 8006178:	e010      	b.n	800619c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b80      	cmp	r3, #128	; 0x80
 800617e:	d902      	bls.n	8006186 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006180:	2303      	movs	r3, #3
 8006182:	613b      	str	r3, [r7, #16]
 8006184:	e00a      	b.n	800619c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b80      	cmp	r3, #128	; 0x80
 800618a:	d102      	bne.n	8006192 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800618c:	2302      	movs	r3, #2
 800618e:	613b      	str	r3, [r7, #16]
 8006190:	e004      	b.n	800619c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b70      	cmp	r3, #112	; 0x70
 8006196:	d101      	bne.n	800619c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006198:	2301      	movs	r3, #1
 800619a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800619c:	4b0b      	ldr	r3, [pc, #44]	; (80061cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f023 0207 	bic.w	r2, r3, #7
 80061a4:	4909      	ldr	r1, [pc, #36]	; (80061cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80061ac:	4b07      	ldr	r3, [pc, #28]	; (80061cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0307 	and.w	r3, r3, #7
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d001      	beq.n	80061be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e000      	b.n	80061c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3718      	adds	r7, #24
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	40021000 	.word	0x40021000
 80061cc:	40022000 	.word	0x40022000

080061d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061d8:	2300      	movs	r3, #0
 80061da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061dc:	2300      	movs	r3, #0
 80061de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d041      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80061f4:	d02a      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80061f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80061fa:	d824      	bhi.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80061fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006200:	d008      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006202:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006206:	d81e      	bhi.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00a      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800620c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006210:	d010      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006212:	e018      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006214:	4b86      	ldr	r3, [pc, #536]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	4a85      	ldr	r2, [pc, #532]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800621a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800621e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006220:	e015      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	3304      	adds	r3, #4
 8006226:	2100      	movs	r1, #0
 8006228:	4618      	mov	r0, r3
 800622a:	f000 fabb 	bl	80067a4 <RCCEx_PLLSAI1_Config>
 800622e:	4603      	mov	r3, r0
 8006230:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006232:	e00c      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	3320      	adds	r3, #32
 8006238:	2100      	movs	r1, #0
 800623a:	4618      	mov	r0, r3
 800623c:	f000 fba6 	bl	800698c <RCCEx_PLLSAI2_Config>
 8006240:	4603      	mov	r3, r0
 8006242:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006244:	e003      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	74fb      	strb	r3, [r7, #19]
      break;
 800624a:	e000      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800624c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800624e:	7cfb      	ldrb	r3, [r7, #19]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10b      	bne.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006254:	4b76      	ldr	r3, [pc, #472]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800625a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006262:	4973      	ldr	r1, [pc, #460]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006264:	4313      	orrs	r3, r2
 8006266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800626a:	e001      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800626c:	7cfb      	ldrb	r3, [r7, #19]
 800626e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d041      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006280:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006284:	d02a      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006286:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800628a:	d824      	bhi.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800628c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006290:	d008      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006292:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006296:	d81e      	bhi.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00a      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800629c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062a0:	d010      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80062a2:	e018      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80062a4:	4b62      	ldr	r3, [pc, #392]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	4a61      	ldr	r2, [pc, #388]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80062b0:	e015      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	3304      	adds	r3, #4
 80062b6:	2100      	movs	r1, #0
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 fa73 	bl	80067a4 <RCCEx_PLLSAI1_Config>
 80062be:	4603      	mov	r3, r0
 80062c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80062c2:	e00c      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	3320      	adds	r3, #32
 80062c8:	2100      	movs	r1, #0
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 fb5e 	bl	800698c <RCCEx_PLLSAI2_Config>
 80062d0:	4603      	mov	r3, r0
 80062d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80062d4:	e003      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	74fb      	strb	r3, [r7, #19]
      break;
 80062da:	e000      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80062dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062de:	7cfb      	ldrb	r3, [r7, #19]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10b      	bne.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80062e4:	4b52      	ldr	r3, [pc, #328]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062f2:	494f      	ldr	r1, [pc, #316]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80062fa:	e001      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062fc:	7cfb      	ldrb	r3, [r7, #19]
 80062fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 80a0 	beq.w	800644e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800630e:	2300      	movs	r3, #0
 8006310:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006312:	4b47      	ldr	r3, [pc, #284]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800631e:	2301      	movs	r3, #1
 8006320:	e000      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006322:	2300      	movs	r3, #0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00d      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006328:	4b41      	ldr	r3, [pc, #260]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800632a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800632c:	4a40      	ldr	r2, [pc, #256]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800632e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006332:	6593      	str	r3, [r2, #88]	; 0x58
 8006334:	4b3e      	ldr	r3, [pc, #248]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800633c:	60bb      	str	r3, [r7, #8]
 800633e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006340:	2301      	movs	r3, #1
 8006342:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006344:	4b3b      	ldr	r3, [pc, #236]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a3a      	ldr	r2, [pc, #232]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800634a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800634e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006350:	f7fd fb70 	bl	8003a34 <HAL_GetTick>
 8006354:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006356:	e009      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006358:	f7fd fb6c 	bl	8003a34 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b02      	cmp	r3, #2
 8006364:	d902      	bls.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	74fb      	strb	r3, [r7, #19]
        break;
 800636a:	e005      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800636c:	4b31      	ldr	r3, [pc, #196]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006374:	2b00      	cmp	r3, #0
 8006376:	d0ef      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006378:	7cfb      	ldrb	r3, [r7, #19]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d15c      	bne.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800637e:	4b2c      	ldr	r3, [pc, #176]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006388:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d01f      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	429a      	cmp	r2, r3
 800639a:	d019      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800639c:	4b24      	ldr	r3, [pc, #144]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800639e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063a8:	4b21      	ldr	r3, [pc, #132]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ae:	4a20      	ldr	r2, [pc, #128]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063b8:	4b1d      	ldr	r3, [pc, #116]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063be:	4a1c      	ldr	r2, [pc, #112]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80063c8:	4a19      	ldr	r2, [pc, #100]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d016      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063da:	f7fd fb2b 	bl	8003a34 <HAL_GetTick>
 80063de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063e0:	e00b      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063e2:	f7fd fb27 	bl	8003a34 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d902      	bls.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	74fb      	strb	r3, [r7, #19]
            break;
 80063f8:	e006      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063fa:	4b0d      	ldr	r3, [pc, #52]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	2b00      	cmp	r3, #0
 8006406:	d0ec      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006408:	7cfb      	ldrb	r3, [r7, #19]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10c      	bne.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800640e:	4b08      	ldr	r3, [pc, #32]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006414:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800641e:	4904      	ldr	r1, [pc, #16]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006420:	4313      	orrs	r3, r2
 8006422:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006426:	e009      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006428:	7cfb      	ldrb	r3, [r7, #19]
 800642a:	74bb      	strb	r3, [r7, #18]
 800642c:	e006      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800642e:	bf00      	nop
 8006430:	40021000 	.word	0x40021000
 8006434:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006438:	7cfb      	ldrb	r3, [r7, #19]
 800643a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800643c:	7c7b      	ldrb	r3, [r7, #17]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d105      	bne.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006442:	4b9e      	ldr	r3, [pc, #632]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006446:	4a9d      	ldr	r2, [pc, #628]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800644c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800645a:	4b98      	ldr	r3, [pc, #608]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800645c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006460:	f023 0203 	bic.w	r2, r3, #3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006468:	4994      	ldr	r1, [pc, #592]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800646a:	4313      	orrs	r3, r2
 800646c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00a      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800647c:	4b8f      	ldr	r3, [pc, #572]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800647e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006482:	f023 020c 	bic.w	r2, r3, #12
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648a:	498c      	ldr	r1, [pc, #560]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800648c:	4313      	orrs	r3, r2
 800648e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0304 	and.w	r3, r3, #4
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800649e:	4b87      	ldr	r3, [pc, #540]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ac:	4983      	ldr	r1, [pc, #524]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0308 	and.w	r3, r3, #8
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00a      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80064c0:	4b7e      	ldr	r3, [pc, #504]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ce:	497b      	ldr	r1, [pc, #492]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0310 	and.w	r3, r3, #16
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80064e2:	4b76      	ldr	r3, [pc, #472]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064f0:	4972      	ldr	r1, [pc, #456]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0320 	and.w	r3, r3, #32
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00a      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006504:	4b6d      	ldr	r3, [pc, #436]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800650a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006512:	496a      	ldr	r1, [pc, #424]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006514:	4313      	orrs	r3, r2
 8006516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006526:	4b65      	ldr	r3, [pc, #404]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800652c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006534:	4961      	ldr	r1, [pc, #388]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006536:	4313      	orrs	r3, r2
 8006538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00a      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006548:	4b5c      	ldr	r3, [pc, #368]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800654a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006556:	4959      	ldr	r1, [pc, #356]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006558:	4313      	orrs	r3, r2
 800655a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800656a:	4b54      	ldr	r3, [pc, #336]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800656c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006570:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006578:	4950      	ldr	r1, [pc, #320]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800657a:	4313      	orrs	r3, r2
 800657c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00a      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800658c:	4b4b      	ldr	r3, [pc, #300]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800658e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006592:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800659a:	4948      	ldr	r1, [pc, #288]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800659c:	4313      	orrs	r3, r2
 800659e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065ae:	4b43      	ldr	r3, [pc, #268]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065bc:	493f      	ldr	r1, [pc, #252]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d028      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065d0:	4b3a      	ldr	r3, [pc, #232]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065de:	4937      	ldr	r1, [pc, #220]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065ee:	d106      	bne.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065f0:	4b32      	ldr	r3, [pc, #200]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	4a31      	ldr	r2, [pc, #196]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065fa:	60d3      	str	r3, [r2, #12]
 80065fc:	e011      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006602:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006606:	d10c      	bne.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	3304      	adds	r3, #4
 800660c:	2101      	movs	r1, #1
 800660e:	4618      	mov	r0, r3
 8006610:	f000 f8c8 	bl	80067a4 <RCCEx_PLLSAI1_Config>
 8006614:	4603      	mov	r3, r0
 8006616:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006618:	7cfb      	ldrb	r3, [r7, #19]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800661e:	7cfb      	ldrb	r3, [r7, #19]
 8006620:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d028      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800662e:	4b23      	ldr	r3, [pc, #140]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006634:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800663c:	491f      	ldr	r1, [pc, #124]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800663e:	4313      	orrs	r3, r2
 8006640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006648:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800664c:	d106      	bne.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800664e:	4b1b      	ldr	r3, [pc, #108]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	4a1a      	ldr	r2, [pc, #104]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006658:	60d3      	str	r3, [r2, #12]
 800665a:	e011      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006660:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006664:	d10c      	bne.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	3304      	adds	r3, #4
 800666a:	2101      	movs	r1, #1
 800666c:	4618      	mov	r0, r3
 800666e:	f000 f899 	bl	80067a4 <RCCEx_PLLSAI1_Config>
 8006672:	4603      	mov	r3, r0
 8006674:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006676:	7cfb      	ldrb	r3, [r7, #19]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800667c:	7cfb      	ldrb	r3, [r7, #19]
 800667e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d02b      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800668c:	4b0b      	ldr	r3, [pc, #44]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800668e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006692:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800669a:	4908      	ldr	r1, [pc, #32]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800669c:	4313      	orrs	r3, r2
 800669e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066aa:	d109      	bne.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066ac:	4b03      	ldr	r3, [pc, #12]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	4a02      	ldr	r2, [pc, #8]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066b6:	60d3      	str	r3, [r2, #12]
 80066b8:	e014      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80066ba:	bf00      	nop
 80066bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066c8:	d10c      	bne.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	3304      	adds	r3, #4
 80066ce:	2101      	movs	r1, #1
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 f867 	bl	80067a4 <RCCEx_PLLSAI1_Config>
 80066d6:	4603      	mov	r3, r0
 80066d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066da:	7cfb      	ldrb	r3, [r7, #19]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80066e0:	7cfb      	ldrb	r3, [r7, #19]
 80066e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d02f      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066f0:	4b2b      	ldr	r3, [pc, #172]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80066f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066fe:	4928      	ldr	r1, [pc, #160]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006700:	4313      	orrs	r3, r2
 8006702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800670a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800670e:	d10d      	bne.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	3304      	adds	r3, #4
 8006714:	2102      	movs	r1, #2
 8006716:	4618      	mov	r0, r3
 8006718:	f000 f844 	bl	80067a4 <RCCEx_PLLSAI1_Config>
 800671c:	4603      	mov	r3, r0
 800671e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006720:	7cfb      	ldrb	r3, [r7, #19]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d014      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006726:	7cfb      	ldrb	r3, [r7, #19]
 8006728:	74bb      	strb	r3, [r7, #18]
 800672a:	e011      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006734:	d10c      	bne.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	3320      	adds	r3, #32
 800673a:	2102      	movs	r1, #2
 800673c:	4618      	mov	r0, r3
 800673e:	f000 f925 	bl	800698c <RCCEx_PLLSAI2_Config>
 8006742:	4603      	mov	r3, r0
 8006744:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006746:	7cfb      	ldrb	r3, [r7, #19]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d001      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800674c:	7cfb      	ldrb	r3, [r7, #19]
 800674e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00a      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800675c:	4b10      	ldr	r3, [pc, #64]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800675e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006762:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800676a:	490d      	ldr	r1, [pc, #52]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800676c:	4313      	orrs	r3, r2
 800676e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00b      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800677e:	4b08      	ldr	r3, [pc, #32]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006784:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800678e:	4904      	ldr	r1, [pc, #16]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006790:	4313      	orrs	r3, r2
 8006792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006796:	7cbb      	ldrb	r3, [r7, #18]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3718      	adds	r7, #24
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	40021000 	.word	0x40021000

080067a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80067b2:	4b75      	ldr	r3, [pc, #468]	; (8006988 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	f003 0303 	and.w	r3, r3, #3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d018      	beq.n	80067f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80067be:	4b72      	ldr	r3, [pc, #456]	; (8006988 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	f003 0203 	and.w	r2, r3, #3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d10d      	bne.n	80067ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
       ||
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d009      	beq.n	80067ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80067d6:	4b6c      	ldr	r3, [pc, #432]	; (8006988 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	091b      	lsrs	r3, r3, #4
 80067dc:	f003 0307 	and.w	r3, r3, #7
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
       ||
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d047      	beq.n	800687a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	73fb      	strb	r3, [r7, #15]
 80067ee:	e044      	b.n	800687a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b03      	cmp	r3, #3
 80067f6:	d018      	beq.n	800682a <RCCEx_PLLSAI1_Config+0x86>
 80067f8:	2b03      	cmp	r3, #3
 80067fa:	d825      	bhi.n	8006848 <RCCEx_PLLSAI1_Config+0xa4>
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d002      	beq.n	8006806 <RCCEx_PLLSAI1_Config+0x62>
 8006800:	2b02      	cmp	r3, #2
 8006802:	d009      	beq.n	8006818 <RCCEx_PLLSAI1_Config+0x74>
 8006804:	e020      	b.n	8006848 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006806:	4b60      	ldr	r3, [pc, #384]	; (8006988 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d11d      	bne.n	800684e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006816:	e01a      	b.n	800684e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006818:	4b5b      	ldr	r3, [pc, #364]	; (8006988 <RCCEx_PLLSAI1_Config+0x1e4>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006820:	2b00      	cmp	r3, #0
 8006822:	d116      	bne.n	8006852 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006828:	e013      	b.n	8006852 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800682a:	4b57      	ldr	r3, [pc, #348]	; (8006988 <RCCEx_PLLSAI1_Config+0x1e4>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10f      	bne.n	8006856 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006836:	4b54      	ldr	r3, [pc, #336]	; (8006988 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d109      	bne.n	8006856 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006846:	e006      	b.n	8006856 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	73fb      	strb	r3, [r7, #15]
      break;
 800684c:	e004      	b.n	8006858 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800684e:	bf00      	nop
 8006850:	e002      	b.n	8006858 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006852:	bf00      	nop
 8006854:	e000      	b.n	8006858 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006856:	bf00      	nop
    }

    if(status == HAL_OK)
 8006858:	7bfb      	ldrb	r3, [r7, #15]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10d      	bne.n	800687a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800685e:	4b4a      	ldr	r3, [pc, #296]	; (8006988 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6819      	ldr	r1, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	3b01      	subs	r3, #1
 8006870:	011b      	lsls	r3, r3, #4
 8006872:	430b      	orrs	r3, r1
 8006874:	4944      	ldr	r1, [pc, #272]	; (8006988 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006876:	4313      	orrs	r3, r2
 8006878:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800687a:	7bfb      	ldrb	r3, [r7, #15]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d17d      	bne.n	800697c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006880:	4b41      	ldr	r3, [pc, #260]	; (8006988 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a40      	ldr	r2, [pc, #256]	; (8006988 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006886:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800688a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800688c:	f7fd f8d2 	bl	8003a34 <HAL_GetTick>
 8006890:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006892:	e009      	b.n	80068a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006894:	f7fd f8ce 	bl	8003a34 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d902      	bls.n	80068a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	73fb      	strb	r3, [r7, #15]
        break;
 80068a6:	e005      	b.n	80068b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068a8:	4b37      	ldr	r3, [pc, #220]	; (8006988 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1ef      	bne.n	8006894 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80068b4:	7bfb      	ldrb	r3, [r7, #15]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d160      	bne.n	800697c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d111      	bne.n	80068e4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068c0:	4b31      	ldr	r3, [pc, #196]	; (8006988 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80068c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	6892      	ldr	r2, [r2, #8]
 80068d0:	0211      	lsls	r1, r2, #8
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	68d2      	ldr	r2, [r2, #12]
 80068d6:	0912      	lsrs	r2, r2, #4
 80068d8:	0452      	lsls	r2, r2, #17
 80068da:	430a      	orrs	r2, r1
 80068dc:	492a      	ldr	r1, [pc, #168]	; (8006988 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068de:	4313      	orrs	r3, r2
 80068e0:	610b      	str	r3, [r1, #16]
 80068e2:	e027      	b.n	8006934 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d112      	bne.n	8006910 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068ea:	4b27      	ldr	r3, [pc, #156]	; (8006988 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80068f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	6892      	ldr	r2, [r2, #8]
 80068fa:	0211      	lsls	r1, r2, #8
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	6912      	ldr	r2, [r2, #16]
 8006900:	0852      	lsrs	r2, r2, #1
 8006902:	3a01      	subs	r2, #1
 8006904:	0552      	lsls	r2, r2, #21
 8006906:	430a      	orrs	r2, r1
 8006908:	491f      	ldr	r1, [pc, #124]	; (8006988 <RCCEx_PLLSAI1_Config+0x1e4>)
 800690a:	4313      	orrs	r3, r2
 800690c:	610b      	str	r3, [r1, #16]
 800690e:	e011      	b.n	8006934 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006910:	4b1d      	ldr	r3, [pc, #116]	; (8006988 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006918:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	6892      	ldr	r2, [r2, #8]
 8006920:	0211      	lsls	r1, r2, #8
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	6952      	ldr	r2, [r2, #20]
 8006926:	0852      	lsrs	r2, r2, #1
 8006928:	3a01      	subs	r2, #1
 800692a:	0652      	lsls	r2, r2, #25
 800692c:	430a      	orrs	r2, r1
 800692e:	4916      	ldr	r1, [pc, #88]	; (8006988 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006930:	4313      	orrs	r3, r2
 8006932:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006934:	4b14      	ldr	r3, [pc, #80]	; (8006988 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a13      	ldr	r2, [pc, #76]	; (8006988 <RCCEx_PLLSAI1_Config+0x1e4>)
 800693a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800693e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006940:	f7fd f878 	bl	8003a34 <HAL_GetTick>
 8006944:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006946:	e009      	b.n	800695c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006948:	f7fd f874 	bl	8003a34 <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	2b02      	cmp	r3, #2
 8006954:	d902      	bls.n	800695c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	73fb      	strb	r3, [r7, #15]
          break;
 800695a:	e005      	b.n	8006968 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800695c:	4b0a      	ldr	r3, [pc, #40]	; (8006988 <RCCEx_PLLSAI1_Config+0x1e4>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d0ef      	beq.n	8006948 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006968:	7bfb      	ldrb	r3, [r7, #15]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d106      	bne.n	800697c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800696e:	4b06      	ldr	r3, [pc, #24]	; (8006988 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006970:	691a      	ldr	r2, [r3, #16]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	4904      	ldr	r1, [pc, #16]	; (8006988 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006978:	4313      	orrs	r3, r2
 800697a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800697c:	7bfb      	ldrb	r3, [r7, #15]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	40021000 	.word	0x40021000

0800698c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006996:	2300      	movs	r3, #0
 8006998:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800699a:	4b6a      	ldr	r3, [pc, #424]	; (8006b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	f003 0303 	and.w	r3, r3, #3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d018      	beq.n	80069d8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80069a6:	4b67      	ldr	r3, [pc, #412]	; (8006b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	f003 0203 	and.w	r2, r3, #3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d10d      	bne.n	80069d2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
       ||
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d009      	beq.n	80069d2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80069be:	4b61      	ldr	r3, [pc, #388]	; (8006b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	091b      	lsrs	r3, r3, #4
 80069c4:	f003 0307 	and.w	r3, r3, #7
 80069c8:	1c5a      	adds	r2, r3, #1
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
       ||
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d047      	beq.n	8006a62 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	73fb      	strb	r3, [r7, #15]
 80069d6:	e044      	b.n	8006a62 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b03      	cmp	r3, #3
 80069de:	d018      	beq.n	8006a12 <RCCEx_PLLSAI2_Config+0x86>
 80069e0:	2b03      	cmp	r3, #3
 80069e2:	d825      	bhi.n	8006a30 <RCCEx_PLLSAI2_Config+0xa4>
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d002      	beq.n	80069ee <RCCEx_PLLSAI2_Config+0x62>
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d009      	beq.n	8006a00 <RCCEx_PLLSAI2_Config+0x74>
 80069ec:	e020      	b.n	8006a30 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80069ee:	4b55      	ldr	r3, [pc, #340]	; (8006b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d11d      	bne.n	8006a36 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069fe:	e01a      	b.n	8006a36 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a00:	4b50      	ldr	r3, [pc, #320]	; (8006b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d116      	bne.n	8006a3a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a10:	e013      	b.n	8006a3a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a12:	4b4c      	ldr	r3, [pc, #304]	; (8006b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10f      	bne.n	8006a3e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a1e:	4b49      	ldr	r3, [pc, #292]	; (8006b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d109      	bne.n	8006a3e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a2e:	e006      	b.n	8006a3e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	73fb      	strb	r3, [r7, #15]
      break;
 8006a34:	e004      	b.n	8006a40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006a36:	bf00      	nop
 8006a38:	e002      	b.n	8006a40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006a3a:	bf00      	nop
 8006a3c:	e000      	b.n	8006a40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006a3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10d      	bne.n	8006a62 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006a46:	4b3f      	ldr	r3, [pc, #252]	; (8006b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6819      	ldr	r1, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	3b01      	subs	r3, #1
 8006a58:	011b      	lsls	r3, r3, #4
 8006a5a:	430b      	orrs	r3, r1
 8006a5c:	4939      	ldr	r1, [pc, #228]	; (8006b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006a62:	7bfb      	ldrb	r3, [r7, #15]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d167      	bne.n	8006b38 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006a68:	4b36      	ldr	r3, [pc, #216]	; (8006b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a35      	ldr	r2, [pc, #212]	; (8006b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a74:	f7fc ffde 	bl	8003a34 <HAL_GetTick>
 8006a78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a7a:	e009      	b.n	8006a90 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006a7c:	f7fc ffda 	bl	8003a34 <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d902      	bls.n	8006a90 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	73fb      	strb	r3, [r7, #15]
        break;
 8006a8e:	e005      	b.n	8006a9c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a90:	4b2c      	ldr	r3, [pc, #176]	; (8006b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1ef      	bne.n	8006a7c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d14a      	bne.n	8006b38 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d111      	bne.n	8006acc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006aa8:	4b26      	ldr	r3, [pc, #152]	; (8006b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006aaa:	695b      	ldr	r3, [r3, #20]
 8006aac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	6892      	ldr	r2, [r2, #8]
 8006ab8:	0211      	lsls	r1, r2, #8
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	68d2      	ldr	r2, [r2, #12]
 8006abe:	0912      	lsrs	r2, r2, #4
 8006ac0:	0452      	lsls	r2, r2, #17
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	491f      	ldr	r1, [pc, #124]	; (8006b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	614b      	str	r3, [r1, #20]
 8006aca:	e011      	b.n	8006af0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006acc:	4b1d      	ldr	r3, [pc, #116]	; (8006b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006ad4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	6892      	ldr	r2, [r2, #8]
 8006adc:	0211      	lsls	r1, r2, #8
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	6912      	ldr	r2, [r2, #16]
 8006ae2:	0852      	lsrs	r2, r2, #1
 8006ae4:	3a01      	subs	r2, #1
 8006ae6:	0652      	lsls	r2, r2, #25
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	4916      	ldr	r1, [pc, #88]	; (8006b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006af0:	4b14      	ldr	r3, [pc, #80]	; (8006b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a13      	ldr	r2, [pc, #76]	; (8006b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006afa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006afc:	f7fc ff9a 	bl	8003a34 <HAL_GetTick>
 8006b00:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b02:	e009      	b.n	8006b18 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b04:	f7fc ff96 	bl	8003a34 <HAL_GetTick>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d902      	bls.n	8006b18 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	73fb      	strb	r3, [r7, #15]
          break;
 8006b16:	e005      	b.n	8006b24 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b18:	4b0a      	ldr	r3, [pc, #40]	; (8006b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d0ef      	beq.n	8006b04 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d106      	bne.n	8006b38 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006b2a:	4b06      	ldr	r3, [pc, #24]	; (8006b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b2c:	695a      	ldr	r2, [r3, #20]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	4904      	ldr	r1, [pc, #16]	; (8006b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	40021000 	.word	0x40021000

08006b48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e095      	b.n	8006c86 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d108      	bne.n	8006b74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b6a:	d009      	beq.n	8006b80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	61da      	str	r2, [r3, #28]
 8006b72:	e005      	b.n	8006b80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d106      	bne.n	8006ba0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7fc fc72 	bl	8003484 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bb6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bc0:	d902      	bls.n	8006bc8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60fb      	str	r3, [r7, #12]
 8006bc6:	e002      	b.n	8006bce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bcc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006bd6:	d007      	beq.n	8006be8 <HAL_SPI_Init+0xa0>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006be0:	d002      	beq.n	8006be8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006bf8:	431a      	orrs	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	431a      	orrs	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	695b      	ldr	r3, [r3, #20]
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c16:	431a      	orrs	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	69db      	ldr	r3, [r3, #28]
 8006c1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c20:	431a      	orrs	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c2a:	ea42 0103 	orr.w	r1, r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c32:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	0c1b      	lsrs	r3, r3, #16
 8006c44:	f003 0204 	and.w	r2, r3, #4
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4c:	f003 0310 	and.w	r3, r3, #16
 8006c50:	431a      	orrs	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c56:	f003 0308 	and.w	r3, r3, #8
 8006c5a:	431a      	orrs	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006c64:	ea42 0103 	orr.w	r1, r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b08a      	sub	sp, #40	; 0x28
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	60f8      	str	r0, [r7, #12]
 8006c96:	60b9      	str	r1, [r7, #8]
 8006c98:	607a      	str	r2, [r7, #4]
 8006c9a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d101      	bne.n	8006cb4 <HAL_SPI_TransmitReceive+0x26>
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	e1fb      	b.n	80070ac <HAL_SPI_TransmitReceive+0x41e>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cbc:	f7fc feba 	bl	8003a34 <HAL_GetTick>
 8006cc0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006cc8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006cd0:	887b      	ldrh	r3, [r7, #2]
 8006cd2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006cd4:	887b      	ldrh	r3, [r7, #2]
 8006cd6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006cd8:	7efb      	ldrb	r3, [r7, #27]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d00e      	beq.n	8006cfc <HAL_SPI_TransmitReceive+0x6e>
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ce4:	d106      	bne.n	8006cf4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d102      	bne.n	8006cf4 <HAL_SPI_TransmitReceive+0x66>
 8006cee:	7efb      	ldrb	r3, [r7, #27]
 8006cf0:	2b04      	cmp	r3, #4
 8006cf2:	d003      	beq.n	8006cfc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006cfa:	e1cd      	b.n	8007098 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d005      	beq.n	8006d0e <HAL_SPI_TransmitReceive+0x80>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d002      	beq.n	8006d0e <HAL_SPI_TransmitReceive+0x80>
 8006d08:	887b      	ldrh	r3, [r7, #2]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d103      	bne.n	8006d16 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006d14:	e1c0      	b.n	8007098 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b04      	cmp	r3, #4
 8006d20:	d003      	beq.n	8006d2a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2205      	movs	r2, #5
 8006d26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	887a      	ldrh	r2, [r7, #2]
 8006d3a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	887a      	ldrh	r2, [r7, #2]
 8006d42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	887a      	ldrh	r2, [r7, #2]
 8006d50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	887a      	ldrh	r2, [r7, #2]
 8006d56:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d6c:	d802      	bhi.n	8006d74 <HAL_SPI_TransmitReceive+0xe6>
 8006d6e:	8a3b      	ldrh	r3, [r7, #16]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d908      	bls.n	8006d86 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	685a      	ldr	r2, [r3, #4]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d82:	605a      	str	r2, [r3, #4]
 8006d84:	e007      	b.n	8006d96 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	685a      	ldr	r2, [r3, #4]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d94:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da0:	2b40      	cmp	r3, #64	; 0x40
 8006da2:	d007      	beq.n	8006db4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006db2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006dbc:	d97c      	bls.n	8006eb8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d002      	beq.n	8006dcc <HAL_SPI_TransmitReceive+0x13e>
 8006dc6:	8a7b      	ldrh	r3, [r7, #18]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d169      	bne.n	8006ea0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd0:	881a      	ldrh	r2, [r3, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ddc:	1c9a      	adds	r2, r3, #2
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	3b01      	subs	r3, #1
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006df0:	e056      	b.n	8006ea0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d11b      	bne.n	8006e38 <HAL_SPI_TransmitReceive+0x1aa>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d016      	beq.n	8006e38 <HAL_SPI_TransmitReceive+0x1aa>
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d113      	bne.n	8006e38 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e14:	881a      	ldrh	r2, [r3, #0]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e20:	1c9a      	adds	r2, r3, #2
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e34:	2300      	movs	r3, #0
 8006e36:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f003 0301 	and.w	r3, r3, #1
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d11c      	bne.n	8006e80 <HAL_SPI_TransmitReceive+0x1f2>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d016      	beq.n	8006e80 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68da      	ldr	r2, [r3, #12]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5c:	b292      	uxth	r2, r2
 8006e5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e64:	1c9a      	adds	r2, r3, #2
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	3b01      	subs	r3, #1
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006e80:	f7fc fdd8 	bl	8003a34 <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d807      	bhi.n	8006ea0 <HAL_SPI_TransmitReceive+0x212>
 8006e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e96:	d003      	beq.n	8006ea0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006e9e:	e0fb      	b.n	8007098 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1a3      	bne.n	8006df2 <HAL_SPI_TransmitReceive+0x164>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d19d      	bne.n	8006df2 <HAL_SPI_TransmitReceive+0x164>
 8006eb6:	e0df      	b.n	8007078 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d003      	beq.n	8006ec8 <HAL_SPI_TransmitReceive+0x23a>
 8006ec0:	8a7b      	ldrh	r3, [r7, #18]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	f040 80cb 	bne.w	800705e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d912      	bls.n	8006ef8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed6:	881a      	ldrh	r2, [r3, #0]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee2:	1c9a      	adds	r2, r3, #2
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	3b02      	subs	r3, #2
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ef6:	e0b2      	b.n	800705e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	330c      	adds	r3, #12
 8006f02:	7812      	ldrb	r2, [r2, #0]
 8006f04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0a:	1c5a      	adds	r2, r3, #1
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	3b01      	subs	r3, #1
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f1e:	e09e      	b.n	800705e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f003 0302 	and.w	r3, r3, #2
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d134      	bne.n	8006f98 <HAL_SPI_TransmitReceive+0x30a>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d02f      	beq.n	8006f98 <HAL_SPI_TransmitReceive+0x30a>
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d12c      	bne.n	8006f98 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d912      	bls.n	8006f6e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4c:	881a      	ldrh	r2, [r3, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f58:	1c9a      	adds	r2, r3, #2
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	3b02      	subs	r3, #2
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f6c:	e012      	b.n	8006f94 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	330c      	adds	r3, #12
 8006f78:	7812      	ldrb	r2, [r2, #0]
 8006f7a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f80:	1c5a      	adds	r2, r3, #1
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d148      	bne.n	8007038 <HAL_SPI_TransmitReceive+0x3aa>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d042      	beq.n	8007038 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d923      	bls.n	8007006 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68da      	ldr	r2, [r3, #12]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc8:	b292      	uxth	r2, r2
 8006fca:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd0:	1c9a      	adds	r2, r3, #2
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	3b02      	subs	r3, #2
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d81f      	bhi.n	8007034 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007002:	605a      	str	r2, [r3, #4]
 8007004:	e016      	b.n	8007034 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f103 020c 	add.w	r2, r3, #12
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007012:	7812      	ldrb	r2, [r2, #0]
 8007014:	b2d2      	uxtb	r2, r2
 8007016:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701c:	1c5a      	adds	r2, r3, #1
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007028:	b29b      	uxth	r3, r3
 800702a:	3b01      	subs	r3, #1
 800702c:	b29a      	uxth	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007034:	2301      	movs	r3, #1
 8007036:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007038:	f7fc fcfc 	bl	8003a34 <HAL_GetTick>
 800703c:	4602      	mov	r2, r0
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007044:	429a      	cmp	r2, r3
 8007046:	d803      	bhi.n	8007050 <HAL_SPI_TransmitReceive+0x3c2>
 8007048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704e:	d102      	bne.n	8007056 <HAL_SPI_TransmitReceive+0x3c8>
 8007050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007052:	2b00      	cmp	r3, #0
 8007054:	d103      	bne.n	800705e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800705c:	e01c      	b.n	8007098 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007062:	b29b      	uxth	r3, r3
 8007064:	2b00      	cmp	r3, #0
 8007066:	f47f af5b 	bne.w	8006f20 <HAL_SPI_TransmitReceive+0x292>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007070:	b29b      	uxth	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	f47f af54 	bne.w	8006f20 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007078:	69fa      	ldr	r2, [r7, #28]
 800707a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f000 f937 	bl	80072f0 <SPI_EndRxTxTransaction>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d006      	beq.n	8007096 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2220      	movs	r2, #32
 8007092:	661a      	str	r2, [r3, #96]	; 0x60
 8007094:	e000      	b.n	8007098 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007096:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80070a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3728      	adds	r7, #40	; 0x28
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b088      	sub	sp, #32
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	603b      	str	r3, [r7, #0]
 80070c0:	4613      	mov	r3, r2
 80070c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80070c4:	f7fc fcb6 	bl	8003a34 <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070cc:	1a9b      	subs	r3, r3, r2
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	4413      	add	r3, r2
 80070d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80070d4:	f7fc fcae 	bl	8003a34 <HAL_GetTick>
 80070d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80070da:	4b39      	ldr	r3, [pc, #228]	; (80071c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	015b      	lsls	r3, r3, #5
 80070e0:	0d1b      	lsrs	r3, r3, #20
 80070e2:	69fa      	ldr	r2, [r7, #28]
 80070e4:	fb02 f303 	mul.w	r3, r2, r3
 80070e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070ea:	e054      	b.n	8007196 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f2:	d050      	beq.n	8007196 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070f4:	f7fc fc9e 	bl	8003a34 <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	69fa      	ldr	r2, [r7, #28]
 8007100:	429a      	cmp	r2, r3
 8007102:	d902      	bls.n	800710a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d13d      	bne.n	8007186 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007118:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007122:	d111      	bne.n	8007148 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800712c:	d004      	beq.n	8007138 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007136:	d107      	bne.n	8007148 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007146:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007150:	d10f      	bne.n	8007172 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007160:	601a      	str	r2, [r3, #0]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007170:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e017      	b.n	80071b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d101      	bne.n	8007190 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800718c:	2300      	movs	r3, #0
 800718e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	3b01      	subs	r3, #1
 8007194:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	689a      	ldr	r2, [r3, #8]
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	4013      	ands	r3, r2
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	bf0c      	ite	eq
 80071a6:	2301      	moveq	r3, #1
 80071a8:	2300      	movne	r3, #0
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	461a      	mov	r2, r3
 80071ae:	79fb      	ldrb	r3, [r7, #7]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d19b      	bne.n	80070ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3720      	adds	r7, #32
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	20000008 	.word	0x20000008

080071c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b08a      	sub	sp, #40	; 0x28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
 80071d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80071d2:	2300      	movs	r3, #0
 80071d4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80071d6:	f7fc fc2d 	bl	8003a34 <HAL_GetTick>
 80071da:	4602      	mov	r2, r0
 80071dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071de:	1a9b      	subs	r3, r3, r2
 80071e0:	683a      	ldr	r2, [r7, #0]
 80071e2:	4413      	add	r3, r2
 80071e4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80071e6:	f7fc fc25 	bl	8003a34 <HAL_GetTick>
 80071ea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	330c      	adds	r3, #12
 80071f2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80071f4:	4b3d      	ldr	r3, [pc, #244]	; (80072ec <SPI_WaitFifoStateUntilTimeout+0x128>)
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	4613      	mov	r3, r2
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4413      	add	r3, r2
 80071fe:	00da      	lsls	r2, r3, #3
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	0d1b      	lsrs	r3, r3, #20
 8007204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007206:	fb02 f303 	mul.w	r3, r2, r3
 800720a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800720c:	e060      	b.n	80072d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007214:	d107      	bne.n	8007226 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d104      	bne.n	8007226 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	b2db      	uxtb	r3, r3
 8007222:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007224:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800722c:	d050      	beq.n	80072d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800722e:	f7fc fc01 	bl	8003a34 <HAL_GetTick>
 8007232:	4602      	mov	r2, r0
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800723a:	429a      	cmp	r2, r3
 800723c:	d902      	bls.n	8007244 <SPI_WaitFifoStateUntilTimeout+0x80>
 800723e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007240:	2b00      	cmp	r3, #0
 8007242:	d13d      	bne.n	80072c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	685a      	ldr	r2, [r3, #4]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007252:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800725c:	d111      	bne.n	8007282 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007266:	d004      	beq.n	8007272 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007270:	d107      	bne.n	8007282 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007280:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800728a:	d10f      	bne.n	80072ac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	e010      	b.n	80072e2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80072c6:	2300      	movs	r3, #0
 80072c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	3b01      	subs	r3, #1
 80072ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689a      	ldr	r2, [r3, #8]
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	4013      	ands	r3, r2
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d196      	bne.n	800720e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3728      	adds	r7, #40	; 0x28
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	20000008 	.word	0x20000008

080072f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af02      	add	r7, sp, #8
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	2200      	movs	r2, #0
 8007304:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f7ff ff5b 	bl	80071c4 <SPI_WaitFifoStateUntilTimeout>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d007      	beq.n	8007324 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007318:	f043 0220 	orr.w	r2, r3, #32
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e027      	b.n	8007374 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2200      	movs	r2, #0
 800732c:	2180      	movs	r1, #128	; 0x80
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f7ff fec0 	bl	80070b4 <SPI_WaitFlagStateUntilTimeout>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d007      	beq.n	800734a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800733e:	f043 0220 	orr.w	r2, r3, #32
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e014      	b.n	8007374 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	2200      	movs	r2, #0
 8007352:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f7ff ff34 	bl	80071c4 <SPI_WaitFifoStateUntilTimeout>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d007      	beq.n	8007372 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007366:	f043 0220 	orr.w	r2, r3, #32
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e000      	b.n	8007374 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d101      	bne.n	800738e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e049      	b.n	8007422 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d106      	bne.n	80073a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f7fc f8d0 	bl	8003548 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2202      	movs	r2, #2
 80073ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	3304      	adds	r3, #4
 80073b8:	4619      	mov	r1, r3
 80073ba:	4610      	mov	r0, r2
 80073bc:	f000 fe5a 	bl	8008074 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3708      	adds	r7, #8
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
	...

0800742c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b01      	cmp	r3, #1
 800743e:	d001      	beq.n	8007444 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e047      	b.n	80074d4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2202      	movs	r2, #2
 8007448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a23      	ldr	r2, [pc, #140]	; (80074e0 <HAL_TIM_Base_Start+0xb4>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d01d      	beq.n	8007492 <HAL_TIM_Base_Start+0x66>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800745e:	d018      	beq.n	8007492 <HAL_TIM_Base_Start+0x66>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a1f      	ldr	r2, [pc, #124]	; (80074e4 <HAL_TIM_Base_Start+0xb8>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d013      	beq.n	8007492 <HAL_TIM_Base_Start+0x66>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a1e      	ldr	r2, [pc, #120]	; (80074e8 <HAL_TIM_Base_Start+0xbc>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d00e      	beq.n	8007492 <HAL_TIM_Base_Start+0x66>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a1c      	ldr	r2, [pc, #112]	; (80074ec <HAL_TIM_Base_Start+0xc0>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d009      	beq.n	8007492 <HAL_TIM_Base_Start+0x66>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a1b      	ldr	r2, [pc, #108]	; (80074f0 <HAL_TIM_Base_Start+0xc4>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d004      	beq.n	8007492 <HAL_TIM_Base_Start+0x66>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a19      	ldr	r2, [pc, #100]	; (80074f4 <HAL_TIM_Base_Start+0xc8>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d115      	bne.n	80074be <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	689a      	ldr	r2, [r3, #8]
 8007498:	4b17      	ldr	r3, [pc, #92]	; (80074f8 <HAL_TIM_Base_Start+0xcc>)
 800749a:	4013      	ands	r3, r2
 800749c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2b06      	cmp	r3, #6
 80074a2:	d015      	beq.n	80074d0 <HAL_TIM_Base_Start+0xa4>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074aa:	d011      	beq.n	80074d0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f042 0201 	orr.w	r2, r2, #1
 80074ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074bc:	e008      	b.n	80074d0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f042 0201 	orr.w	r2, r2, #1
 80074cc:	601a      	str	r2, [r3, #0]
 80074ce:	e000      	b.n	80074d2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	40012c00 	.word	0x40012c00
 80074e4:	40000400 	.word	0x40000400
 80074e8:	40000800 	.word	0x40000800
 80074ec:	40000c00 	.word	0x40000c00
 80074f0:	40013400 	.word	0x40013400
 80074f4:	40014000 	.word	0x40014000
 80074f8:	00010007 	.word	0x00010007

080074fc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	6a1a      	ldr	r2, [r3, #32]
 800750a:	f241 1311 	movw	r3, #4369	; 0x1111
 800750e:	4013      	ands	r3, r2
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10f      	bne.n	8007534 <HAL_TIM_Base_Stop+0x38>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6a1a      	ldr	r2, [r3, #32]
 800751a:	f240 4344 	movw	r3, #1092	; 0x444
 800751e:	4013      	ands	r3, r2
 8007520:	2b00      	cmp	r3, #0
 8007522:	d107      	bne.n	8007534 <HAL_TIM_Base_Stop+0x38>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f022 0201 	bic.w	r2, r2, #1
 8007532:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	370c      	adds	r7, #12
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
	...

0800754c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b01      	cmp	r3, #1
 800755e:	d001      	beq.n	8007564 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e04f      	b.n	8007604 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2202      	movs	r2, #2
 8007568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68da      	ldr	r2, [r3, #12]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f042 0201 	orr.w	r2, r2, #1
 800757a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a23      	ldr	r2, [pc, #140]	; (8007610 <HAL_TIM_Base_Start_IT+0xc4>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d01d      	beq.n	80075c2 <HAL_TIM_Base_Start_IT+0x76>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800758e:	d018      	beq.n	80075c2 <HAL_TIM_Base_Start_IT+0x76>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a1f      	ldr	r2, [pc, #124]	; (8007614 <HAL_TIM_Base_Start_IT+0xc8>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d013      	beq.n	80075c2 <HAL_TIM_Base_Start_IT+0x76>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a1e      	ldr	r2, [pc, #120]	; (8007618 <HAL_TIM_Base_Start_IT+0xcc>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d00e      	beq.n	80075c2 <HAL_TIM_Base_Start_IT+0x76>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a1c      	ldr	r2, [pc, #112]	; (800761c <HAL_TIM_Base_Start_IT+0xd0>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d009      	beq.n	80075c2 <HAL_TIM_Base_Start_IT+0x76>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a1b      	ldr	r2, [pc, #108]	; (8007620 <HAL_TIM_Base_Start_IT+0xd4>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d004      	beq.n	80075c2 <HAL_TIM_Base_Start_IT+0x76>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a19      	ldr	r2, [pc, #100]	; (8007624 <HAL_TIM_Base_Start_IT+0xd8>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d115      	bne.n	80075ee <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	4b17      	ldr	r3, [pc, #92]	; (8007628 <HAL_TIM_Base_Start_IT+0xdc>)
 80075ca:	4013      	ands	r3, r2
 80075cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2b06      	cmp	r3, #6
 80075d2:	d015      	beq.n	8007600 <HAL_TIM_Base_Start_IT+0xb4>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075da:	d011      	beq.n	8007600 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f042 0201 	orr.w	r2, r2, #1
 80075ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ec:	e008      	b.n	8007600 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f042 0201 	orr.w	r2, r2, #1
 80075fc:	601a      	str	r2, [r3, #0]
 80075fe:	e000      	b.n	8007602 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007600:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	3714      	adds	r7, #20
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr
 8007610:	40012c00 	.word	0x40012c00
 8007614:	40000400 	.word	0x40000400
 8007618:	40000800 	.word	0x40000800
 800761c:	40000c00 	.word	0x40000c00
 8007620:	40013400 	.word	0x40013400
 8007624:	40014000 	.word	0x40014000
 8007628:	00010007 	.word	0x00010007

0800762c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68da      	ldr	r2, [r3, #12]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f022 0201 	bic.w	r2, r2, #1
 8007642:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6a1a      	ldr	r2, [r3, #32]
 800764a:	f241 1311 	movw	r3, #4369	; 0x1111
 800764e:	4013      	ands	r3, r2
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10f      	bne.n	8007674 <HAL_TIM_Base_Stop_IT+0x48>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	6a1a      	ldr	r2, [r3, #32]
 800765a:	f240 4344 	movw	r3, #1092	; 0x444
 800765e:	4013      	ands	r3, r2
 8007660:	2b00      	cmp	r3, #0
 8007662:	d107      	bne.n	8007674 <HAL_TIM_Base_Stop_IT+0x48>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f022 0201 	bic.w	r2, r2, #1
 8007672:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b082      	sub	sp, #8
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d101      	bne.n	800769c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e049      	b.n	8007730 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d106      	bne.n	80076b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f7fb ff29 	bl	8003508 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2202      	movs	r2, #2
 80076ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	3304      	adds	r3, #4
 80076c6:	4619      	mov	r1, r3
 80076c8:	4610      	mov	r0, r2
 80076ca:	f000 fcd3 	bl	8008074 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2201      	movs	r2, #1
 800771a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d109      	bne.n	8007760 <HAL_TIM_PWM_Start_IT+0x28>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b01      	cmp	r3, #1
 8007756:	bf14      	ite	ne
 8007758:	2301      	movne	r3, #1
 800775a:	2300      	moveq	r3, #0
 800775c:	b2db      	uxtb	r3, r3
 800775e:	e03c      	b.n	80077da <HAL_TIM_PWM_Start_IT+0xa2>
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	2b04      	cmp	r3, #4
 8007764:	d109      	bne.n	800777a <HAL_TIM_PWM_Start_IT+0x42>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b01      	cmp	r3, #1
 8007770:	bf14      	ite	ne
 8007772:	2301      	movne	r3, #1
 8007774:	2300      	moveq	r3, #0
 8007776:	b2db      	uxtb	r3, r3
 8007778:	e02f      	b.n	80077da <HAL_TIM_PWM_Start_IT+0xa2>
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b08      	cmp	r3, #8
 800777e:	d109      	bne.n	8007794 <HAL_TIM_PWM_Start_IT+0x5c>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007786:	b2db      	uxtb	r3, r3
 8007788:	2b01      	cmp	r3, #1
 800778a:	bf14      	ite	ne
 800778c:	2301      	movne	r3, #1
 800778e:	2300      	moveq	r3, #0
 8007790:	b2db      	uxtb	r3, r3
 8007792:	e022      	b.n	80077da <HAL_TIM_PWM_Start_IT+0xa2>
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	2b0c      	cmp	r3, #12
 8007798:	d109      	bne.n	80077ae <HAL_TIM_PWM_Start_IT+0x76>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	bf14      	ite	ne
 80077a6:	2301      	movne	r3, #1
 80077a8:	2300      	moveq	r3, #0
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	e015      	b.n	80077da <HAL_TIM_PWM_Start_IT+0xa2>
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	2b10      	cmp	r3, #16
 80077b2:	d109      	bne.n	80077c8 <HAL_TIM_PWM_Start_IT+0x90>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	2b01      	cmp	r3, #1
 80077be:	bf14      	ite	ne
 80077c0:	2301      	movne	r3, #1
 80077c2:	2300      	moveq	r3, #0
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	e008      	b.n	80077da <HAL_TIM_PWM_Start_IT+0xa2>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	bf14      	ite	ne
 80077d4:	2301      	movne	r3, #1
 80077d6:	2300      	moveq	r3, #0
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d001      	beq.n	80077e2 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e0e7      	b.n	80079b2 <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d104      	bne.n	80077f2 <HAL_TIM_PWM_Start_IT+0xba>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2202      	movs	r2, #2
 80077ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077f0:	e023      	b.n	800783a <HAL_TIM_PWM_Start_IT+0x102>
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b04      	cmp	r3, #4
 80077f6:	d104      	bne.n	8007802 <HAL_TIM_PWM_Start_IT+0xca>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2202      	movs	r2, #2
 80077fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007800:	e01b      	b.n	800783a <HAL_TIM_PWM_Start_IT+0x102>
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2b08      	cmp	r3, #8
 8007806:	d104      	bne.n	8007812 <HAL_TIM_PWM_Start_IT+0xda>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2202      	movs	r2, #2
 800780c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007810:	e013      	b.n	800783a <HAL_TIM_PWM_Start_IT+0x102>
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	2b0c      	cmp	r3, #12
 8007816:	d104      	bne.n	8007822 <HAL_TIM_PWM_Start_IT+0xea>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2202      	movs	r2, #2
 800781c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007820:	e00b      	b.n	800783a <HAL_TIM_PWM_Start_IT+0x102>
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	2b10      	cmp	r3, #16
 8007826:	d104      	bne.n	8007832 <HAL_TIM_PWM_Start_IT+0xfa>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2202      	movs	r2, #2
 800782c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007830:	e003      	b.n	800783a <HAL_TIM_PWM_Start_IT+0x102>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2202      	movs	r2, #2
 8007836:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	2b0c      	cmp	r3, #12
 800783e:	d841      	bhi.n	80078c4 <HAL_TIM_PWM_Start_IT+0x18c>
 8007840:	a201      	add	r2, pc, #4	; (adr r2, 8007848 <HAL_TIM_PWM_Start_IT+0x110>)
 8007842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007846:	bf00      	nop
 8007848:	0800787d 	.word	0x0800787d
 800784c:	080078c5 	.word	0x080078c5
 8007850:	080078c5 	.word	0x080078c5
 8007854:	080078c5 	.word	0x080078c5
 8007858:	0800788f 	.word	0x0800788f
 800785c:	080078c5 	.word	0x080078c5
 8007860:	080078c5 	.word	0x080078c5
 8007864:	080078c5 	.word	0x080078c5
 8007868:	080078a1 	.word	0x080078a1
 800786c:	080078c5 	.word	0x080078c5
 8007870:	080078c5 	.word	0x080078c5
 8007874:	080078c5 	.word	0x080078c5
 8007878:	080078b3 	.word	0x080078b3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68da      	ldr	r2, [r3, #12]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f042 0202 	orr.w	r2, r2, #2
 800788a:	60da      	str	r2, [r3, #12]
      break;
 800788c:	e01d      	b.n	80078ca <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68da      	ldr	r2, [r3, #12]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f042 0204 	orr.w	r2, r2, #4
 800789c:	60da      	str	r2, [r3, #12]
      break;
 800789e:	e014      	b.n	80078ca <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68da      	ldr	r2, [r3, #12]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f042 0208 	orr.w	r2, r2, #8
 80078ae:	60da      	str	r2, [r3, #12]
      break;
 80078b0:	e00b      	b.n	80078ca <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68da      	ldr	r2, [r3, #12]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f042 0210 	orr.w	r2, r2, #16
 80078c0:	60da      	str	r2, [r3, #12]
      break;
 80078c2:	e002      	b.n	80078ca <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	73fb      	strb	r3, [r7, #15]
      break;
 80078c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d16f      	bne.n	80079b0 <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2201      	movs	r2, #1
 80078d6:	6839      	ldr	r1, [r7, #0]
 80078d8:	4618      	mov	r0, r3
 80078da:	f000 ff3b 	bl	8008754 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a36      	ldr	r2, [pc, #216]	; (80079bc <HAL_TIM_PWM_Start_IT+0x284>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d013      	beq.n	8007910 <HAL_TIM_PWM_Start_IT+0x1d8>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a34      	ldr	r2, [pc, #208]	; (80079c0 <HAL_TIM_PWM_Start_IT+0x288>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d00e      	beq.n	8007910 <HAL_TIM_PWM_Start_IT+0x1d8>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a33      	ldr	r2, [pc, #204]	; (80079c4 <HAL_TIM_PWM_Start_IT+0x28c>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d009      	beq.n	8007910 <HAL_TIM_PWM_Start_IT+0x1d8>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a31      	ldr	r2, [pc, #196]	; (80079c8 <HAL_TIM_PWM_Start_IT+0x290>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d004      	beq.n	8007910 <HAL_TIM_PWM_Start_IT+0x1d8>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a30      	ldr	r2, [pc, #192]	; (80079cc <HAL_TIM_PWM_Start_IT+0x294>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d101      	bne.n	8007914 <HAL_TIM_PWM_Start_IT+0x1dc>
 8007910:	2301      	movs	r3, #1
 8007912:	e000      	b.n	8007916 <HAL_TIM_PWM_Start_IT+0x1de>
 8007914:	2300      	movs	r3, #0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d007      	beq.n	800792a <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007928:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a23      	ldr	r2, [pc, #140]	; (80079bc <HAL_TIM_PWM_Start_IT+0x284>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d01d      	beq.n	8007970 <HAL_TIM_PWM_Start_IT+0x238>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800793c:	d018      	beq.n	8007970 <HAL_TIM_PWM_Start_IT+0x238>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a23      	ldr	r2, [pc, #140]	; (80079d0 <HAL_TIM_PWM_Start_IT+0x298>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d013      	beq.n	8007970 <HAL_TIM_PWM_Start_IT+0x238>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a21      	ldr	r2, [pc, #132]	; (80079d4 <HAL_TIM_PWM_Start_IT+0x29c>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d00e      	beq.n	8007970 <HAL_TIM_PWM_Start_IT+0x238>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a20      	ldr	r2, [pc, #128]	; (80079d8 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d009      	beq.n	8007970 <HAL_TIM_PWM_Start_IT+0x238>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a17      	ldr	r2, [pc, #92]	; (80079c0 <HAL_TIM_PWM_Start_IT+0x288>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d004      	beq.n	8007970 <HAL_TIM_PWM_Start_IT+0x238>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a16      	ldr	r2, [pc, #88]	; (80079c4 <HAL_TIM_PWM_Start_IT+0x28c>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d115      	bne.n	800799c <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	689a      	ldr	r2, [r3, #8]
 8007976:	4b19      	ldr	r3, [pc, #100]	; (80079dc <HAL_TIM_PWM_Start_IT+0x2a4>)
 8007978:	4013      	ands	r3, r2
 800797a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	2b06      	cmp	r3, #6
 8007980:	d015      	beq.n	80079ae <HAL_TIM_PWM_Start_IT+0x276>
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007988:	d011      	beq.n	80079ae <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f042 0201 	orr.w	r2, r2, #1
 8007998:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800799a:	e008      	b.n	80079ae <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f042 0201 	orr.w	r2, r2, #1
 80079aa:	601a      	str	r2, [r3, #0]
 80079ac:	e000      	b.n	80079b0 <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ae:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	40012c00 	.word	0x40012c00
 80079c0:	40013400 	.word	0x40013400
 80079c4:	40014000 	.word	0x40014000
 80079c8:	40014400 	.word	0x40014400
 80079cc:	40014800 	.word	0x40014800
 80079d0:	40000400 	.word	0x40000400
 80079d4:	40000800 	.word	0x40000800
 80079d8:	40000c00 	.word	0x40000c00
 80079dc:	00010007 	.word	0x00010007

080079e0 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	2b0c      	cmp	r3, #12
 80079f2:	d841      	bhi.n	8007a78 <HAL_TIM_PWM_Stop_IT+0x98>
 80079f4:	a201      	add	r2, pc, #4	; (adr r2, 80079fc <HAL_TIM_PWM_Stop_IT+0x1c>)
 80079f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fa:	bf00      	nop
 80079fc:	08007a31 	.word	0x08007a31
 8007a00:	08007a79 	.word	0x08007a79
 8007a04:	08007a79 	.word	0x08007a79
 8007a08:	08007a79 	.word	0x08007a79
 8007a0c:	08007a43 	.word	0x08007a43
 8007a10:	08007a79 	.word	0x08007a79
 8007a14:	08007a79 	.word	0x08007a79
 8007a18:	08007a79 	.word	0x08007a79
 8007a1c:	08007a55 	.word	0x08007a55
 8007a20:	08007a79 	.word	0x08007a79
 8007a24:	08007a79 	.word	0x08007a79
 8007a28:	08007a79 	.word	0x08007a79
 8007a2c:	08007a67 	.word	0x08007a67
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68da      	ldr	r2, [r3, #12]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f022 0202 	bic.w	r2, r2, #2
 8007a3e:	60da      	str	r2, [r3, #12]
      break;
 8007a40:	e01d      	b.n	8007a7e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68da      	ldr	r2, [r3, #12]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f022 0204 	bic.w	r2, r2, #4
 8007a50:	60da      	str	r2, [r3, #12]
      break;
 8007a52:	e014      	b.n	8007a7e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68da      	ldr	r2, [r3, #12]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f022 0208 	bic.w	r2, r2, #8
 8007a62:	60da      	str	r2, [r3, #12]
      break;
 8007a64:	e00b      	b.n	8007a7e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68da      	ldr	r2, [r3, #12]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f022 0210 	bic.w	r2, r2, #16
 8007a74:	60da      	str	r2, [r3, #12]
      break;
 8007a76:	e002      	b.n	8007a7e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a7c:	bf00      	nop
  }

  if (status == HAL_OK)
 8007a7e:	7bfb      	ldrb	r3, [r7, #15]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f040 8081 	bne.w	8007b88 <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	6839      	ldr	r1, [r7, #0]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 fe60 	bl	8008754 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a3e      	ldr	r2, [pc, #248]	; (8007b94 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d013      	beq.n	8007ac6 <HAL_TIM_PWM_Stop_IT+0xe6>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a3d      	ldr	r2, [pc, #244]	; (8007b98 <HAL_TIM_PWM_Stop_IT+0x1b8>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d00e      	beq.n	8007ac6 <HAL_TIM_PWM_Stop_IT+0xe6>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a3b      	ldr	r2, [pc, #236]	; (8007b9c <HAL_TIM_PWM_Stop_IT+0x1bc>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d009      	beq.n	8007ac6 <HAL_TIM_PWM_Stop_IT+0xe6>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a3a      	ldr	r2, [pc, #232]	; (8007ba0 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d004      	beq.n	8007ac6 <HAL_TIM_PWM_Stop_IT+0xe6>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a38      	ldr	r2, [pc, #224]	; (8007ba4 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d101      	bne.n	8007aca <HAL_TIM_PWM_Stop_IT+0xea>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e000      	b.n	8007acc <HAL_TIM_PWM_Stop_IT+0xec>
 8007aca:	2300      	movs	r3, #0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d017      	beq.n	8007b00 <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6a1a      	ldr	r2, [r3, #32]
 8007ad6:	f241 1311 	movw	r3, #4369	; 0x1111
 8007ada:	4013      	ands	r3, r2
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10f      	bne.n	8007b00 <HAL_TIM_PWM_Stop_IT+0x120>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6a1a      	ldr	r2, [r3, #32]
 8007ae6:	f240 4344 	movw	r3, #1092	; 0x444
 8007aea:	4013      	ands	r3, r2
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d107      	bne.n	8007b00 <HAL_TIM_PWM_Stop_IT+0x120>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007afe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6a1a      	ldr	r2, [r3, #32]
 8007b06:	f241 1311 	movw	r3, #4369	; 0x1111
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10f      	bne.n	8007b30 <HAL_TIM_PWM_Stop_IT+0x150>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	6a1a      	ldr	r2, [r3, #32]
 8007b16:	f240 4344 	movw	r3, #1092	; 0x444
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d107      	bne.n	8007b30 <HAL_TIM_PWM_Stop_IT+0x150>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f022 0201 	bic.w	r2, r2, #1
 8007b2e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d104      	bne.n	8007b40 <HAL_TIM_PWM_Stop_IT+0x160>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b3e:	e023      	b.n	8007b88 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	2b04      	cmp	r3, #4
 8007b44:	d104      	bne.n	8007b50 <HAL_TIM_PWM_Stop_IT+0x170>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b4e:	e01b      	b.n	8007b88 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	2b08      	cmp	r3, #8
 8007b54:	d104      	bne.n	8007b60 <HAL_TIM_PWM_Stop_IT+0x180>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b5e:	e013      	b.n	8007b88 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	2b0c      	cmp	r3, #12
 8007b64:	d104      	bne.n	8007b70 <HAL_TIM_PWM_Stop_IT+0x190>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b6e:	e00b      	b.n	8007b88 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	2b10      	cmp	r3, #16
 8007b74:	d104      	bne.n	8007b80 <HAL_TIM_PWM_Stop_IT+0x1a0>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b7e:	e003      	b.n	8007b88 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8007b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	40012c00 	.word	0x40012c00
 8007b98:	40013400 	.word	0x40013400
 8007b9c:	40014000 	.word	0x40014000
 8007ba0:	40014400 	.word	0x40014400
 8007ba4:	40014800 	.word	0x40014800

08007ba8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	f003 0302 	and.w	r3, r3, #2
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d122      	bne.n	8007c04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	f003 0302 	and.w	r3, r3, #2
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d11b      	bne.n	8007c04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f06f 0202 	mvn.w	r2, #2
 8007bd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	699b      	ldr	r3, [r3, #24]
 8007be2:	f003 0303 	and.w	r3, r3, #3
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d003      	beq.n	8007bf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fa24 	bl	8008038 <HAL_TIM_IC_CaptureCallback>
 8007bf0:	e005      	b.n	8007bfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fa16 	bl	8008024 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fa27 	bl	800804c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	f003 0304 	and.w	r3, r3, #4
 8007c0e:	2b04      	cmp	r3, #4
 8007c10:	d122      	bne.n	8007c58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	f003 0304 	and.w	r3, r3, #4
 8007c1c:	2b04      	cmp	r3, #4
 8007c1e:	d11b      	bne.n	8007c58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f06f 0204 	mvn.w	r2, #4
 8007c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2202      	movs	r2, #2
 8007c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	699b      	ldr	r3, [r3, #24]
 8007c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d003      	beq.n	8007c46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f9fa 	bl	8008038 <HAL_TIM_IC_CaptureCallback>
 8007c44:	e005      	b.n	8007c52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f9ec 	bl	8008024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f9fd 	bl	800804c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	f003 0308 	and.w	r3, r3, #8
 8007c62:	2b08      	cmp	r3, #8
 8007c64:	d122      	bne.n	8007cac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	f003 0308 	and.w	r3, r3, #8
 8007c70:	2b08      	cmp	r3, #8
 8007c72:	d11b      	bne.n	8007cac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f06f 0208 	mvn.w	r2, #8
 8007c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2204      	movs	r2, #4
 8007c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	69db      	ldr	r3, [r3, #28]
 8007c8a:	f003 0303 	and.w	r3, r3, #3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d003      	beq.n	8007c9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f9d0 	bl	8008038 <HAL_TIM_IC_CaptureCallback>
 8007c98:	e005      	b.n	8007ca6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f9c2 	bl	8008024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f9d3 	bl	800804c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	f003 0310 	and.w	r3, r3, #16
 8007cb6:	2b10      	cmp	r3, #16
 8007cb8:	d122      	bne.n	8007d00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	f003 0310 	and.w	r3, r3, #16
 8007cc4:	2b10      	cmp	r3, #16
 8007cc6:	d11b      	bne.n	8007d00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f06f 0210 	mvn.w	r2, #16
 8007cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2208      	movs	r2, #8
 8007cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	69db      	ldr	r3, [r3, #28]
 8007cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d003      	beq.n	8007cee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 f9a6 	bl	8008038 <HAL_TIM_IC_CaptureCallback>
 8007cec:	e005      	b.n	8007cfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f998 	bl	8008024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f9a9 	bl	800804c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d10e      	bne.n	8007d2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	f003 0301 	and.w	r3, r3, #1
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d107      	bne.n	8007d2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f06f 0201 	mvn.w	r2, #1
 8007d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f972 	bl	8008010 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d36:	2b80      	cmp	r3, #128	; 0x80
 8007d38:	d10e      	bne.n	8007d58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d44:	2b80      	cmp	r3, #128	; 0x80
 8007d46:	d107      	bne.n	8007d58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fdb6 	bl	80088c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d66:	d10e      	bne.n	8007d86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d72:	2b80      	cmp	r3, #128	; 0x80
 8007d74:	d107      	bne.n	8007d86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fda9 	bl	80088d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d90:	2b40      	cmp	r3, #64	; 0x40
 8007d92:	d10e      	bne.n	8007db2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d9e:	2b40      	cmp	r3, #64	; 0x40
 8007da0:	d107      	bne.n	8007db2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 f957 	bl	8008060 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	f003 0320 	and.w	r3, r3, #32
 8007dbc:	2b20      	cmp	r3, #32
 8007dbe:	d10e      	bne.n	8007dde <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	f003 0320 	and.w	r3, r3, #32
 8007dca:	2b20      	cmp	r3, #32
 8007dcc:	d107      	bne.n	8007dde <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f06f 0220 	mvn.w	r2, #32
 8007dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 fd69 	bl	80088b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007dde:	bf00      	nop
 8007de0:	3708      	adds	r7, #8
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
	...

08007de8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007df4:	2300      	movs	r3, #0
 8007df6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d101      	bne.n	8007e06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e02:	2302      	movs	r3, #2
 8007e04:	e0ff      	b.n	8008006 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2b14      	cmp	r3, #20
 8007e12:	f200 80f0 	bhi.w	8007ff6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007e16:	a201      	add	r2, pc, #4	; (adr r2, 8007e1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1c:	08007e71 	.word	0x08007e71
 8007e20:	08007ff7 	.word	0x08007ff7
 8007e24:	08007ff7 	.word	0x08007ff7
 8007e28:	08007ff7 	.word	0x08007ff7
 8007e2c:	08007eb1 	.word	0x08007eb1
 8007e30:	08007ff7 	.word	0x08007ff7
 8007e34:	08007ff7 	.word	0x08007ff7
 8007e38:	08007ff7 	.word	0x08007ff7
 8007e3c:	08007ef3 	.word	0x08007ef3
 8007e40:	08007ff7 	.word	0x08007ff7
 8007e44:	08007ff7 	.word	0x08007ff7
 8007e48:	08007ff7 	.word	0x08007ff7
 8007e4c:	08007f33 	.word	0x08007f33
 8007e50:	08007ff7 	.word	0x08007ff7
 8007e54:	08007ff7 	.word	0x08007ff7
 8007e58:	08007ff7 	.word	0x08007ff7
 8007e5c:	08007f75 	.word	0x08007f75
 8007e60:	08007ff7 	.word	0x08007ff7
 8007e64:	08007ff7 	.word	0x08007ff7
 8007e68:	08007ff7 	.word	0x08007ff7
 8007e6c:	08007fb5 	.word	0x08007fb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68b9      	ldr	r1, [r7, #8]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 f996 	bl	80081a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	699a      	ldr	r2, [r3, #24]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f042 0208 	orr.w	r2, r2, #8
 8007e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	699a      	ldr	r2, [r3, #24]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f022 0204 	bic.w	r2, r2, #4
 8007e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6999      	ldr	r1, [r3, #24]
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	691a      	ldr	r2, [r3, #16]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	430a      	orrs	r2, r1
 8007eac:	619a      	str	r2, [r3, #24]
      break;
 8007eae:	e0a5      	b.n	8007ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68b9      	ldr	r1, [r7, #8]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 fa06 	bl	80082c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	699a      	ldr	r2, [r3, #24]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	699a      	ldr	r2, [r3, #24]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6999      	ldr	r1, [r3, #24]
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	021a      	lsls	r2, r3, #8
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	430a      	orrs	r2, r1
 8007eee:	619a      	str	r2, [r3, #24]
      break;
 8007ef0:	e084      	b.n	8007ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68b9      	ldr	r1, [r7, #8]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f000 fa6f 	bl	80083dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	69da      	ldr	r2, [r3, #28]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f042 0208 	orr.w	r2, r2, #8
 8007f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	69da      	ldr	r2, [r3, #28]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f022 0204 	bic.w	r2, r2, #4
 8007f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	69d9      	ldr	r1, [r3, #28]
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	691a      	ldr	r2, [r3, #16]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	430a      	orrs	r2, r1
 8007f2e:	61da      	str	r2, [r3, #28]
      break;
 8007f30:	e064      	b.n	8007ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68b9      	ldr	r1, [r7, #8]
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f000 fad7 	bl	80084ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	69da      	ldr	r2, [r3, #28]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	69da      	ldr	r2, [r3, #28]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	69d9      	ldr	r1, [r3, #28]
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	021a      	lsls	r2, r3, #8
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	430a      	orrs	r2, r1
 8007f70:	61da      	str	r2, [r3, #28]
      break;
 8007f72:	e043      	b.n	8007ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68b9      	ldr	r1, [r7, #8]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f000 fb20 	bl	80085c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f042 0208 	orr.w	r2, r2, #8
 8007f8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f022 0204 	bic.w	r2, r2, #4
 8007f9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	691a      	ldr	r2, [r3, #16]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	430a      	orrs	r2, r1
 8007fb0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007fb2:	e023      	b.n	8007ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68b9      	ldr	r1, [r7, #8]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 fb64 	bl	8008688 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	021a      	lsls	r2, r3, #8
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	430a      	orrs	r2, r1
 8007ff2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007ff4:	e002      	b.n	8007ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	75fb      	strb	r3, [r7, #23]
      break;
 8007ffa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008004:	7dfb      	ldrb	r3, [r7, #23]
}
 8008006:	4618      	mov	r0, r3
 8008008:	3718      	adds	r7, #24
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop

08008010 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008040:	bf00      	nop
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008054:	bf00      	nop
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008068:	bf00      	nop
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a40      	ldr	r2, [pc, #256]	; (8008188 <TIM_Base_SetConfig+0x114>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d013      	beq.n	80080b4 <TIM_Base_SetConfig+0x40>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008092:	d00f      	beq.n	80080b4 <TIM_Base_SetConfig+0x40>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a3d      	ldr	r2, [pc, #244]	; (800818c <TIM_Base_SetConfig+0x118>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d00b      	beq.n	80080b4 <TIM_Base_SetConfig+0x40>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a3c      	ldr	r2, [pc, #240]	; (8008190 <TIM_Base_SetConfig+0x11c>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d007      	beq.n	80080b4 <TIM_Base_SetConfig+0x40>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a3b      	ldr	r2, [pc, #236]	; (8008194 <TIM_Base_SetConfig+0x120>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d003      	beq.n	80080b4 <TIM_Base_SetConfig+0x40>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a3a      	ldr	r2, [pc, #232]	; (8008198 <TIM_Base_SetConfig+0x124>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d108      	bne.n	80080c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	68fa      	ldr	r2, [r7, #12]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a2f      	ldr	r2, [pc, #188]	; (8008188 <TIM_Base_SetConfig+0x114>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d01f      	beq.n	800810e <TIM_Base_SetConfig+0x9a>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080d4:	d01b      	beq.n	800810e <TIM_Base_SetConfig+0x9a>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a2c      	ldr	r2, [pc, #176]	; (800818c <TIM_Base_SetConfig+0x118>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d017      	beq.n	800810e <TIM_Base_SetConfig+0x9a>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a2b      	ldr	r2, [pc, #172]	; (8008190 <TIM_Base_SetConfig+0x11c>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d013      	beq.n	800810e <TIM_Base_SetConfig+0x9a>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a2a      	ldr	r2, [pc, #168]	; (8008194 <TIM_Base_SetConfig+0x120>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d00f      	beq.n	800810e <TIM_Base_SetConfig+0x9a>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a29      	ldr	r2, [pc, #164]	; (8008198 <TIM_Base_SetConfig+0x124>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d00b      	beq.n	800810e <TIM_Base_SetConfig+0x9a>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a28      	ldr	r2, [pc, #160]	; (800819c <TIM_Base_SetConfig+0x128>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d007      	beq.n	800810e <TIM_Base_SetConfig+0x9a>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a27      	ldr	r2, [pc, #156]	; (80081a0 <TIM_Base_SetConfig+0x12c>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d003      	beq.n	800810e <TIM_Base_SetConfig+0x9a>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a26      	ldr	r2, [pc, #152]	; (80081a4 <TIM_Base_SetConfig+0x130>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d108      	bne.n	8008120 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	4313      	orrs	r3, r2
 800811e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	695b      	ldr	r3, [r3, #20]
 800812a:	4313      	orrs	r3, r2
 800812c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	689a      	ldr	r2, [r3, #8]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a10      	ldr	r2, [pc, #64]	; (8008188 <TIM_Base_SetConfig+0x114>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d00f      	beq.n	800816c <TIM_Base_SetConfig+0xf8>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a12      	ldr	r2, [pc, #72]	; (8008198 <TIM_Base_SetConfig+0x124>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d00b      	beq.n	800816c <TIM_Base_SetConfig+0xf8>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a11      	ldr	r2, [pc, #68]	; (800819c <TIM_Base_SetConfig+0x128>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d007      	beq.n	800816c <TIM_Base_SetConfig+0xf8>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a10      	ldr	r2, [pc, #64]	; (80081a0 <TIM_Base_SetConfig+0x12c>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d003      	beq.n	800816c <TIM_Base_SetConfig+0xf8>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a0f      	ldr	r2, [pc, #60]	; (80081a4 <TIM_Base_SetConfig+0x130>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d103      	bne.n	8008174 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	691a      	ldr	r2, [r3, #16]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	615a      	str	r2, [r3, #20]
}
 800817a:	bf00      	nop
 800817c:	3714      	adds	r7, #20
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	40012c00 	.word	0x40012c00
 800818c:	40000400 	.word	0x40000400
 8008190:	40000800 	.word	0x40000800
 8008194:	40000c00 	.word	0x40000c00
 8008198:	40013400 	.word	0x40013400
 800819c:	40014000 	.word	0x40014000
 80081a0:	40014400 	.word	0x40014400
 80081a4:	40014800 	.word	0x40014800

080081a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b087      	sub	sp, #28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	f023 0201 	bic.w	r2, r3, #1
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a1b      	ldr	r3, [r3, #32]
 80081c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f023 0303 	bic.w	r3, r3, #3
 80081e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	f023 0302 	bic.w	r3, r3, #2
 80081f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a2c      	ldr	r2, [pc, #176]	; (80082b4 <TIM_OC1_SetConfig+0x10c>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d00f      	beq.n	8008228 <TIM_OC1_SetConfig+0x80>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a2b      	ldr	r2, [pc, #172]	; (80082b8 <TIM_OC1_SetConfig+0x110>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d00b      	beq.n	8008228 <TIM_OC1_SetConfig+0x80>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a2a      	ldr	r2, [pc, #168]	; (80082bc <TIM_OC1_SetConfig+0x114>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d007      	beq.n	8008228 <TIM_OC1_SetConfig+0x80>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a29      	ldr	r2, [pc, #164]	; (80082c0 <TIM_OC1_SetConfig+0x118>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d003      	beq.n	8008228 <TIM_OC1_SetConfig+0x80>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a28      	ldr	r2, [pc, #160]	; (80082c4 <TIM_OC1_SetConfig+0x11c>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d10c      	bne.n	8008242 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	f023 0308 	bic.w	r3, r3, #8
 800822e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	697a      	ldr	r2, [r7, #20]
 8008236:	4313      	orrs	r3, r2
 8008238:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	f023 0304 	bic.w	r3, r3, #4
 8008240:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a1b      	ldr	r2, [pc, #108]	; (80082b4 <TIM_OC1_SetConfig+0x10c>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d00f      	beq.n	800826a <TIM_OC1_SetConfig+0xc2>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a1a      	ldr	r2, [pc, #104]	; (80082b8 <TIM_OC1_SetConfig+0x110>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d00b      	beq.n	800826a <TIM_OC1_SetConfig+0xc2>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a19      	ldr	r2, [pc, #100]	; (80082bc <TIM_OC1_SetConfig+0x114>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d007      	beq.n	800826a <TIM_OC1_SetConfig+0xc2>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a18      	ldr	r2, [pc, #96]	; (80082c0 <TIM_OC1_SetConfig+0x118>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d003      	beq.n	800826a <TIM_OC1_SetConfig+0xc2>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a17      	ldr	r2, [pc, #92]	; (80082c4 <TIM_OC1_SetConfig+0x11c>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d111      	bne.n	800828e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008270:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008278:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	695b      	ldr	r3, [r3, #20]
 800827e:	693a      	ldr	r2, [r7, #16]
 8008280:	4313      	orrs	r3, r2
 8008282:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	699b      	ldr	r3, [r3, #24]
 8008288:	693a      	ldr	r2, [r7, #16]
 800828a:	4313      	orrs	r3, r2
 800828c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	685a      	ldr	r2, [r3, #4]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	697a      	ldr	r2, [r7, #20]
 80082a6:	621a      	str	r2, [r3, #32]
}
 80082a8:	bf00      	nop
 80082aa:	371c      	adds	r7, #28
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr
 80082b4:	40012c00 	.word	0x40012c00
 80082b8:	40013400 	.word	0x40013400
 80082bc:	40014000 	.word	0x40014000
 80082c0:	40014400 	.word	0x40014400
 80082c4:	40014800 	.word	0x40014800

080082c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b087      	sub	sp, #28
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a1b      	ldr	r3, [r3, #32]
 80082d6:	f023 0210 	bic.w	r2, r3, #16
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a1b      	ldr	r3, [r3, #32]
 80082e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	699b      	ldr	r3, [r3, #24]
 80082ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	021b      	lsls	r3, r3, #8
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	4313      	orrs	r3, r2
 800830e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	f023 0320 	bic.w	r3, r3, #32
 8008316:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	011b      	lsls	r3, r3, #4
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	4313      	orrs	r3, r2
 8008322:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a28      	ldr	r2, [pc, #160]	; (80083c8 <TIM_OC2_SetConfig+0x100>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d003      	beq.n	8008334 <TIM_OC2_SetConfig+0x6c>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a27      	ldr	r2, [pc, #156]	; (80083cc <TIM_OC2_SetConfig+0x104>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d10d      	bne.n	8008350 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800833a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	011b      	lsls	r3, r3, #4
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	4313      	orrs	r3, r2
 8008346:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800834e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a1d      	ldr	r2, [pc, #116]	; (80083c8 <TIM_OC2_SetConfig+0x100>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d00f      	beq.n	8008378 <TIM_OC2_SetConfig+0xb0>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a1c      	ldr	r2, [pc, #112]	; (80083cc <TIM_OC2_SetConfig+0x104>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d00b      	beq.n	8008378 <TIM_OC2_SetConfig+0xb0>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a1b      	ldr	r2, [pc, #108]	; (80083d0 <TIM_OC2_SetConfig+0x108>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d007      	beq.n	8008378 <TIM_OC2_SetConfig+0xb0>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a1a      	ldr	r2, [pc, #104]	; (80083d4 <TIM_OC2_SetConfig+0x10c>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d003      	beq.n	8008378 <TIM_OC2_SetConfig+0xb0>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a19      	ldr	r2, [pc, #100]	; (80083d8 <TIM_OC2_SetConfig+0x110>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d113      	bne.n	80083a0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800837e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008386:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	695b      	ldr	r3, [r3, #20]
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	693a      	ldr	r2, [r7, #16]
 8008390:	4313      	orrs	r3, r2
 8008392:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	693a      	ldr	r2, [r7, #16]
 800839c:	4313      	orrs	r3, r2
 800839e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	693a      	ldr	r2, [r7, #16]
 80083a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	685a      	ldr	r2, [r3, #4]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	621a      	str	r2, [r3, #32]
}
 80083ba:	bf00      	nop
 80083bc:	371c      	adds	r7, #28
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	40012c00 	.word	0x40012c00
 80083cc:	40013400 	.word	0x40013400
 80083d0:	40014000 	.word	0x40014000
 80083d4:	40014400 	.word	0x40014400
 80083d8:	40014800 	.word	0x40014800

080083dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083dc:	b480      	push	{r7}
 80083de:	b087      	sub	sp, #28
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a1b      	ldr	r3, [r3, #32]
 80083ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a1b      	ldr	r3, [r3, #32]
 80083f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	69db      	ldr	r3, [r3, #28]
 8008402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800840a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800840e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f023 0303 	bic.w	r3, r3, #3
 8008416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	4313      	orrs	r3, r2
 8008420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008428:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	021b      	lsls	r3, r3, #8
 8008430:	697a      	ldr	r2, [r7, #20]
 8008432:	4313      	orrs	r3, r2
 8008434:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a27      	ldr	r2, [pc, #156]	; (80084d8 <TIM_OC3_SetConfig+0xfc>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d003      	beq.n	8008446 <TIM_OC3_SetConfig+0x6a>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a26      	ldr	r2, [pc, #152]	; (80084dc <TIM_OC3_SetConfig+0x100>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d10d      	bne.n	8008462 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800844c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	021b      	lsls	r3, r3, #8
 8008454:	697a      	ldr	r2, [r7, #20]
 8008456:	4313      	orrs	r3, r2
 8008458:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008460:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a1c      	ldr	r2, [pc, #112]	; (80084d8 <TIM_OC3_SetConfig+0xfc>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d00f      	beq.n	800848a <TIM_OC3_SetConfig+0xae>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a1b      	ldr	r2, [pc, #108]	; (80084dc <TIM_OC3_SetConfig+0x100>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d00b      	beq.n	800848a <TIM_OC3_SetConfig+0xae>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a1a      	ldr	r2, [pc, #104]	; (80084e0 <TIM_OC3_SetConfig+0x104>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d007      	beq.n	800848a <TIM_OC3_SetConfig+0xae>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4a19      	ldr	r2, [pc, #100]	; (80084e4 <TIM_OC3_SetConfig+0x108>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d003      	beq.n	800848a <TIM_OC3_SetConfig+0xae>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4a18      	ldr	r2, [pc, #96]	; (80084e8 <TIM_OC3_SetConfig+0x10c>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d113      	bne.n	80084b2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	011b      	lsls	r3, r3, #4
 80084a0:	693a      	ldr	r2, [r7, #16]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	011b      	lsls	r3, r3, #4
 80084ac:	693a      	ldr	r2, [r7, #16]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	685a      	ldr	r2, [r3, #4]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	697a      	ldr	r2, [r7, #20]
 80084ca:	621a      	str	r2, [r3, #32]
}
 80084cc:	bf00      	nop
 80084ce:	371c      	adds	r7, #28
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr
 80084d8:	40012c00 	.word	0x40012c00
 80084dc:	40013400 	.word	0x40013400
 80084e0:	40014000 	.word	0x40014000
 80084e4:	40014400 	.word	0x40014400
 80084e8:	40014800 	.word	0x40014800

080084ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b087      	sub	sp, #28
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a1b      	ldr	r3, [r3, #32]
 80084fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	69db      	ldr	r3, [r3, #28]
 8008512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800851a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800851e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	021b      	lsls	r3, r3, #8
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	4313      	orrs	r3, r2
 8008532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800853a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	031b      	lsls	r3, r3, #12
 8008542:	693a      	ldr	r2, [r7, #16]
 8008544:	4313      	orrs	r3, r2
 8008546:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a18      	ldr	r2, [pc, #96]	; (80085ac <TIM_OC4_SetConfig+0xc0>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d00f      	beq.n	8008570 <TIM_OC4_SetConfig+0x84>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a17      	ldr	r2, [pc, #92]	; (80085b0 <TIM_OC4_SetConfig+0xc4>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d00b      	beq.n	8008570 <TIM_OC4_SetConfig+0x84>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a16      	ldr	r2, [pc, #88]	; (80085b4 <TIM_OC4_SetConfig+0xc8>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d007      	beq.n	8008570 <TIM_OC4_SetConfig+0x84>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a15      	ldr	r2, [pc, #84]	; (80085b8 <TIM_OC4_SetConfig+0xcc>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d003      	beq.n	8008570 <TIM_OC4_SetConfig+0x84>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a14      	ldr	r2, [pc, #80]	; (80085bc <TIM_OC4_SetConfig+0xd0>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d109      	bne.n	8008584 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008576:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	695b      	ldr	r3, [r3, #20]
 800857c:	019b      	lsls	r3, r3, #6
 800857e:	697a      	ldr	r2, [r7, #20]
 8008580:	4313      	orrs	r3, r2
 8008582:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	685a      	ldr	r2, [r3, #4]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	693a      	ldr	r2, [r7, #16]
 800859c:	621a      	str	r2, [r3, #32]
}
 800859e:	bf00      	nop
 80085a0:	371c      	adds	r7, #28
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	40012c00 	.word	0x40012c00
 80085b0:	40013400 	.word	0x40013400
 80085b4:	40014000 	.word	0x40014000
 80085b8:	40014400 	.word	0x40014400
 80085bc:	40014800 	.word	0x40014800

080085c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b087      	sub	sp, #28
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a1b      	ldr	r3, [r3, #32]
 80085ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a1b      	ldr	r3, [r3, #32]
 80085da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008604:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	041b      	lsls	r3, r3, #16
 800860c:	693a      	ldr	r2, [r7, #16]
 800860e:	4313      	orrs	r3, r2
 8008610:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4a17      	ldr	r2, [pc, #92]	; (8008674 <TIM_OC5_SetConfig+0xb4>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d00f      	beq.n	800863a <TIM_OC5_SetConfig+0x7a>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4a16      	ldr	r2, [pc, #88]	; (8008678 <TIM_OC5_SetConfig+0xb8>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d00b      	beq.n	800863a <TIM_OC5_SetConfig+0x7a>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4a15      	ldr	r2, [pc, #84]	; (800867c <TIM_OC5_SetConfig+0xbc>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d007      	beq.n	800863a <TIM_OC5_SetConfig+0x7a>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a14      	ldr	r2, [pc, #80]	; (8008680 <TIM_OC5_SetConfig+0xc0>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d003      	beq.n	800863a <TIM_OC5_SetConfig+0x7a>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4a13      	ldr	r2, [pc, #76]	; (8008684 <TIM_OC5_SetConfig+0xc4>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d109      	bne.n	800864e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008640:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	695b      	ldr	r3, [r3, #20]
 8008646:	021b      	lsls	r3, r3, #8
 8008648:	697a      	ldr	r2, [r7, #20]
 800864a:	4313      	orrs	r3, r2
 800864c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	697a      	ldr	r2, [r7, #20]
 8008652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	685a      	ldr	r2, [r3, #4]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	621a      	str	r2, [r3, #32]
}
 8008668:	bf00      	nop
 800866a:	371c      	adds	r7, #28
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr
 8008674:	40012c00 	.word	0x40012c00
 8008678:	40013400 	.word	0x40013400
 800867c:	40014000 	.word	0x40014000
 8008680:	40014400 	.word	0x40014400
 8008684:	40014800 	.word	0x40014800

08008688 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008688:	b480      	push	{r7}
 800868a:	b087      	sub	sp, #28
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a1b      	ldr	r3, [r3, #32]
 8008696:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a1b      	ldr	r3, [r3, #32]
 80086a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	021b      	lsls	r3, r3, #8
 80086c2:	68fa      	ldr	r2, [r7, #12]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80086ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	051b      	lsls	r3, r3, #20
 80086d6:	693a      	ldr	r2, [r7, #16]
 80086d8:	4313      	orrs	r3, r2
 80086da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a18      	ldr	r2, [pc, #96]	; (8008740 <TIM_OC6_SetConfig+0xb8>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d00f      	beq.n	8008704 <TIM_OC6_SetConfig+0x7c>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a17      	ldr	r2, [pc, #92]	; (8008744 <TIM_OC6_SetConfig+0xbc>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d00b      	beq.n	8008704 <TIM_OC6_SetConfig+0x7c>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a16      	ldr	r2, [pc, #88]	; (8008748 <TIM_OC6_SetConfig+0xc0>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d007      	beq.n	8008704 <TIM_OC6_SetConfig+0x7c>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a15      	ldr	r2, [pc, #84]	; (800874c <TIM_OC6_SetConfig+0xc4>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d003      	beq.n	8008704 <TIM_OC6_SetConfig+0x7c>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a14      	ldr	r2, [pc, #80]	; (8008750 <TIM_OC6_SetConfig+0xc8>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d109      	bne.n	8008718 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800870a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	695b      	ldr	r3, [r3, #20]
 8008710:	029b      	lsls	r3, r3, #10
 8008712:	697a      	ldr	r2, [r7, #20]
 8008714:	4313      	orrs	r3, r2
 8008716:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	697a      	ldr	r2, [r7, #20]
 800871c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	685a      	ldr	r2, [r3, #4]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	693a      	ldr	r2, [r7, #16]
 8008730:	621a      	str	r2, [r3, #32]
}
 8008732:	bf00      	nop
 8008734:	371c      	adds	r7, #28
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	40012c00 	.word	0x40012c00
 8008744:	40013400 	.word	0x40013400
 8008748:	40014000 	.word	0x40014000
 800874c:	40014400 	.word	0x40014400
 8008750:	40014800 	.word	0x40014800

08008754 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008754:	b480      	push	{r7}
 8008756:	b087      	sub	sp, #28
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	f003 031f 	and.w	r3, r3, #31
 8008766:	2201      	movs	r2, #1
 8008768:	fa02 f303 	lsl.w	r3, r2, r3
 800876c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6a1a      	ldr	r2, [r3, #32]
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	43db      	mvns	r3, r3
 8008776:	401a      	ands	r2, r3
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6a1a      	ldr	r2, [r3, #32]
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	f003 031f 	and.w	r3, r3, #31
 8008786:	6879      	ldr	r1, [r7, #4]
 8008788:	fa01 f303 	lsl.w	r3, r1, r3
 800878c:	431a      	orrs	r2, r3
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	621a      	str	r2, [r3, #32]
}
 8008792:	bf00      	nop
 8008794:	371c      	adds	r7, #28
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
	...

080087a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d101      	bne.n	80087b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087b4:	2302      	movs	r3, #2
 80087b6:	e068      	b.n	800888a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2202      	movs	r2, #2
 80087c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a2e      	ldr	r2, [pc, #184]	; (8008898 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d004      	beq.n	80087ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a2d      	ldr	r2, [pc, #180]	; (800889c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d108      	bne.n	80087fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80087f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008804:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	4313      	orrs	r3, r2
 800880e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a1e      	ldr	r2, [pc, #120]	; (8008898 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d01d      	beq.n	800885e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800882a:	d018      	beq.n	800885e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a1b      	ldr	r2, [pc, #108]	; (80088a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d013      	beq.n	800885e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a1a      	ldr	r2, [pc, #104]	; (80088a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d00e      	beq.n	800885e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a18      	ldr	r2, [pc, #96]	; (80088a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d009      	beq.n	800885e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a13      	ldr	r2, [pc, #76]	; (800889c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d004      	beq.n	800885e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a14      	ldr	r2, [pc, #80]	; (80088ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d10c      	bne.n	8008878 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008864:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	4313      	orrs	r3, r2
 800886e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3714      	adds	r7, #20
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	40012c00 	.word	0x40012c00
 800889c:	40013400 	.word	0x40013400
 80088a0:	40000400 	.word	0x40000400
 80088a4:	40000800 	.word	0x40000800
 80088a8:	40000c00 	.word	0x40000c00
 80088ac:	40014000 	.word	0x40014000

080088b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088b8:	bf00      	nop
 80088ba:	370c      	adds	r7, #12
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088cc:	bf00      	nop
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80088e0:	bf00      	nop
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d101      	bne.n	80088fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e040      	b.n	8008980 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008902:	2b00      	cmp	r3, #0
 8008904:	d106      	bne.n	8008914 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f7fa fe8c 	bl	800362c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2224      	movs	r2, #36	; 0x24
 8008918:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f022 0201 	bic.w	r2, r2, #1
 8008928:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fc94 	bl	8009258 <UART_SetConfig>
 8008930:	4603      	mov	r3, r0
 8008932:	2b01      	cmp	r3, #1
 8008934:	d101      	bne.n	800893a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	e022      	b.n	8008980 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893e:	2b00      	cmp	r3, #0
 8008940:	d002      	beq.n	8008948 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 ff40 	bl	80097c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	685a      	ldr	r2, [r3, #4]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008956:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	689a      	ldr	r2, [r3, #8]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008966:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f042 0201 	orr.w	r2, r2, #1
 8008976:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 ffc7 	bl	800990c <UART_CheckIdleState>
 800897e:	4603      	mov	r3, r0
}
 8008980:	4618      	mov	r0, r3
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b08a      	sub	sp, #40	; 0x28
 800898c:	af02      	add	r7, sp, #8
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	603b      	str	r3, [r7, #0]
 8008994:	4613      	mov	r3, r2
 8008996:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800899c:	2b20      	cmp	r3, #32
 800899e:	f040 8082 	bne.w	8008aa6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d002      	beq.n	80089ae <HAL_UART_Transmit+0x26>
 80089a8:	88fb      	ldrh	r3, [r7, #6]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d101      	bne.n	80089b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	e07a      	b.n	8008aa8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d101      	bne.n	80089c0 <HAL_UART_Transmit+0x38>
 80089bc:	2302      	movs	r3, #2
 80089be:	e073      	b.n	8008aa8 <HAL_UART_Transmit+0x120>
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2221      	movs	r2, #33	; 0x21
 80089d4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089d6:	f7fb f82d 	bl	8003a34 <HAL_GetTick>
 80089da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	88fa      	ldrh	r2, [r7, #6]
 80089e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	88fa      	ldrh	r2, [r7, #6]
 80089e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089f4:	d108      	bne.n	8008a08 <HAL_UART_Transmit+0x80>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d104      	bne.n	8008a08 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80089fe:	2300      	movs	r3, #0
 8008a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	61bb      	str	r3, [r7, #24]
 8008a06:	e003      	b.n	8008a10 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008a18:	e02d      	b.n	8008a76 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	2200      	movs	r2, #0
 8008a22:	2180      	movs	r1, #128	; 0x80
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f000 ffba 	bl	800999e <UART_WaitOnFlagUntilTimeout>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d001      	beq.n	8008a34 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008a30:	2303      	movs	r3, #3
 8008a32:	e039      	b.n	8008aa8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d10b      	bne.n	8008a52 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	881a      	ldrh	r2, [r3, #0]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a46:	b292      	uxth	r2, r2
 8008a48:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	3302      	adds	r3, #2
 8008a4e:	61bb      	str	r3, [r7, #24]
 8008a50:	e008      	b.n	8008a64 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	781a      	ldrb	r2, [r3, #0]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	b292      	uxth	r2, r2
 8008a5c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	3301      	adds	r3, #1
 8008a62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	b29a      	uxth	r2, r3
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1cb      	bne.n	8008a1a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	9300      	str	r3, [sp, #0]
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	2140      	movs	r1, #64	; 0x40
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	f000 ff86 	bl	800999e <UART_WaitOnFlagUntilTimeout>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d001      	beq.n	8008a9c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	e005      	b.n	8008aa8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2220      	movs	r2, #32
 8008aa0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	e000      	b.n	8008aa8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008aa6:	2302      	movs	r3, #2
  }
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3720      	adds	r7, #32
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b08a      	sub	sp, #40	; 0x28
 8008ab4:	af02      	add	r7, sp, #8
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	603b      	str	r3, [r7, #0]
 8008abc:	4613      	mov	r3, r2
 8008abe:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ac4:	2b20      	cmp	r3, #32
 8008ac6:	f040 80bf 	bne.w	8008c48 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d002      	beq.n	8008ad6 <HAL_UART_Receive+0x26>
 8008ad0:	88fb      	ldrh	r3, [r7, #6]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d101      	bne.n	8008ada <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e0b7      	b.n	8008c4a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d101      	bne.n	8008ae8 <HAL_UART_Receive+0x38>
 8008ae4:	2302      	movs	r3, #2
 8008ae6:	e0b0      	b.n	8008c4a <HAL_UART_Receive+0x19a>
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2222      	movs	r2, #34	; 0x22
 8008afc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2200      	movs	r2, #0
 8008b02:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b04:	f7fa ff96 	bl	8003a34 <HAL_GetTick>
 8008b08:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	88fa      	ldrh	r2, [r7, #6]
 8008b0e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	88fa      	ldrh	r2, [r7, #6]
 8008b16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b22:	d10e      	bne.n	8008b42 <HAL_UART_Receive+0x92>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d105      	bne.n	8008b38 <HAL_UART_Receive+0x88>
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008b32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b36:	e02d      	b.n	8008b94 <HAL_UART_Receive+0xe4>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	22ff      	movs	r2, #255	; 0xff
 8008b3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b40:	e028      	b.n	8008b94 <HAL_UART_Receive+0xe4>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d10d      	bne.n	8008b66 <HAL_UART_Receive+0xb6>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d104      	bne.n	8008b5c <HAL_UART_Receive+0xac>
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	22ff      	movs	r2, #255	; 0xff
 8008b56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b5a:	e01b      	b.n	8008b94 <HAL_UART_Receive+0xe4>
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	227f      	movs	r2, #127	; 0x7f
 8008b60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b64:	e016      	b.n	8008b94 <HAL_UART_Receive+0xe4>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b6e:	d10d      	bne.n	8008b8c <HAL_UART_Receive+0xdc>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d104      	bne.n	8008b82 <HAL_UART_Receive+0xd2>
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	227f      	movs	r2, #127	; 0x7f
 8008b7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b80:	e008      	b.n	8008b94 <HAL_UART_Receive+0xe4>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	223f      	movs	r2, #63	; 0x3f
 8008b86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b8a:	e003      	b.n	8008b94 <HAL_UART_Receive+0xe4>
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b9a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ba4:	d108      	bne.n	8008bb8 <HAL_UART_Receive+0x108>
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	691b      	ldr	r3, [r3, #16]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d104      	bne.n	8008bb8 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	61bb      	str	r3, [r7, #24]
 8008bb6:	e003      	b.n	8008bc0 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008bc8:	e033      	b.n	8008c32 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	9300      	str	r3, [sp, #0]
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	2120      	movs	r1, #32
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f000 fee2 	bl	800999e <UART_WaitOnFlagUntilTimeout>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d001      	beq.n	8008be4 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8008be0:	2303      	movs	r3, #3
 8008be2:	e032      	b.n	8008c4a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10c      	bne.n	8008c04 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	8a7b      	ldrh	r3, [r7, #18]
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	3302      	adds	r3, #2
 8008c00:	61bb      	str	r3, [r7, #24]
 8008c02:	e00d      	b.n	8008c20 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	b2da      	uxtb	r2, r3
 8008c0e:	8a7b      	ldrh	r3, [r7, #18]
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	4013      	ands	r3, r2
 8008c14:	b2da      	uxtb	r2, r3
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d1c5      	bne.n	8008bca <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2220      	movs	r2, #32
 8008c42:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008c44:	2300      	movs	r3, #0
 8008c46:	e000      	b.n	8008c4a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8008c48:	2302      	movs	r3, #2
  }
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3720      	adds	r7, #32
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
	...

08008c54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b0ba      	sub	sp, #232	; 0xe8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	69db      	ldr	r3, [r3, #28]
 8008c62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008c7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008c7e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008c82:	4013      	ands	r3, r2
 8008c84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008c88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d115      	bne.n	8008cbc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c94:	f003 0320 	and.w	r3, r3, #32
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00f      	beq.n	8008cbc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ca0:	f003 0320 	and.w	r3, r3, #32
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d009      	beq.n	8008cbc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f000 82a6 	beq.w	80091fe <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	4798      	blx	r3
      }
      return;
 8008cba:	e2a0      	b.n	80091fe <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008cbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	f000 8117 	beq.w	8008ef4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008cc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d106      	bne.n	8008ce0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008cd2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008cd6:	4b85      	ldr	r3, [pc, #532]	; (8008eec <HAL_UART_IRQHandler+0x298>)
 8008cd8:	4013      	ands	r3, r2
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f000 810a 	beq.w	8008ef4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ce4:	f003 0301 	and.w	r3, r3, #1
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d011      	beq.n	8008d10 <HAL_UART_IRQHandler+0xbc>
 8008cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d00b      	beq.n	8008d10 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d06:	f043 0201 	orr.w	r2, r3, #1
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d14:	f003 0302 	and.w	r3, r3, #2
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d011      	beq.n	8008d40 <HAL_UART_IRQHandler+0xec>
 8008d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d20:	f003 0301 	and.w	r3, r3, #1
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00b      	beq.n	8008d40 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2202      	movs	r2, #2
 8008d2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d36:	f043 0204 	orr.w	r2, r3, #4
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d44:	f003 0304 	and.w	r3, r3, #4
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d011      	beq.n	8008d70 <HAL_UART_IRQHandler+0x11c>
 8008d4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d50:	f003 0301 	and.w	r3, r3, #1
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00b      	beq.n	8008d70 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2204      	movs	r2, #4
 8008d5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d66:	f043 0202 	orr.w	r2, r3, #2
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d74:	f003 0308 	and.w	r3, r3, #8
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d017      	beq.n	8008dac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d80:	f003 0320 	and.w	r3, r3, #32
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d105      	bne.n	8008d94 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008d88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d8c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00b      	beq.n	8008dac <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2208      	movs	r2, #8
 8008d9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008da2:	f043 0208 	orr.w	r2, r3, #8
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d012      	beq.n	8008dde <HAL_UART_IRQHandler+0x18a>
 8008db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00c      	beq.n	8008dde <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008dcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dd4:	f043 0220 	orr.w	r2, r3, #32
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f000 820c 	beq.w	8009202 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dee:	f003 0320 	and.w	r3, r3, #32
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00d      	beq.n	8008e12 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dfa:	f003 0320 	and.w	r3, r3, #32
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d007      	beq.n	8008e12 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d003      	beq.n	8008e12 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e26:	2b40      	cmp	r3, #64	; 0x40
 8008e28:	d005      	beq.n	8008e36 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008e2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008e2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d04f      	beq.n	8008ed6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fe75 	bl	8009b26 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e46:	2b40      	cmp	r3, #64	; 0x40
 8008e48:	d141      	bne.n	8008ece <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	3308      	adds	r3, #8
 8008e50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e58:	e853 3f00 	ldrex	r3, [r3]
 8008e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008e60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	3308      	adds	r3, #8
 8008e72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008e76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008e82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008e86:	e841 2300 	strex	r3, r2, [r1]
 8008e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008e8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1d9      	bne.n	8008e4a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d013      	beq.n	8008ec6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ea2:	4a13      	ldr	r2, [pc, #76]	; (8008ef0 <HAL_UART_IRQHandler+0x29c>)
 8008ea4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7fa ff73 	bl	8003d96 <HAL_DMA_Abort_IT>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d017      	beq.n	8008ee6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008ec0:	4610      	mov	r0, r2
 8008ec2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ec4:	e00f      	b.n	8008ee6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f9b0 	bl	800922c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ecc:	e00b      	b.n	8008ee6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 f9ac 	bl	800922c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ed4:	e007      	b.n	8008ee6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 f9a8 	bl	800922c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008ee4:	e18d      	b.n	8009202 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ee6:	bf00      	nop
    return;
 8008ee8:	e18b      	b.n	8009202 <HAL_UART_IRQHandler+0x5ae>
 8008eea:	bf00      	nop
 8008eec:	04000120 	.word	0x04000120
 8008ef0:	08009bed 	.word	0x08009bed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	f040 8146 	bne.w	800918a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f02:	f003 0310 	and.w	r3, r3, #16
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	f000 813f 	beq.w	800918a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f10:	f003 0310 	and.w	r3, r3, #16
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f000 8138 	beq.w	800918a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2210      	movs	r2, #16
 8008f20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f2c:	2b40      	cmp	r3, #64	; 0x40
 8008f2e:	f040 80b4 	bne.w	800909a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008f3e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	f000 815f 	beq.w	8009206 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008f4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008f52:	429a      	cmp	r2, r3
 8008f54:	f080 8157 	bcs.w	8009206 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008f5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f003 0320 	and.w	r3, r3, #32
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	f040 8085 	bne.w	800907e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f80:	e853 3f00 	ldrex	r3, [r3]
 8008f84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008f88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	461a      	mov	r2, r3
 8008f9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008f9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008fa2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008faa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008fae:	e841 2300 	strex	r3, r2, [r1]
 8008fb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1da      	bne.n	8008f74 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	3308      	adds	r3, #8
 8008fc4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fc8:	e853 3f00 	ldrex	r3, [r3]
 8008fcc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008fce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fd0:	f023 0301 	bic.w	r3, r3, #1
 8008fd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	3308      	adds	r3, #8
 8008fde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008fe2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008fe6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008fea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008fee:	e841 2300 	strex	r3, r2, [r1]
 8008ff2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1e1      	bne.n	8008fbe <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	3308      	adds	r3, #8
 8009000:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009002:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009004:	e853 3f00 	ldrex	r3, [r3]
 8009008:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800900a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800900c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009010:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	3308      	adds	r3, #8
 800901a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800901e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009020:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009022:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009024:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009026:	e841 2300 	strex	r3, r2, [r1]
 800902a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800902c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1e3      	bne.n	8008ffa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2220      	movs	r2, #32
 8009036:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009046:	e853 3f00 	ldrex	r3, [r3]
 800904a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800904c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800904e:	f023 0310 	bic.w	r3, r3, #16
 8009052:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	461a      	mov	r2, r3
 800905c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009060:	65bb      	str	r3, [r7, #88]	; 0x58
 8009062:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009064:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009066:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009068:	e841 2300 	strex	r3, r2, [r1]
 800906c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800906e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009070:	2b00      	cmp	r3, #0
 8009072:	d1e4      	bne.n	800903e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009078:	4618      	mov	r0, r3
 800907a:	f7fa fe4e 	bl	8003d1a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800908a:	b29b      	uxth	r3, r3
 800908c:	1ad3      	subs	r3, r2, r3
 800908e:	b29b      	uxth	r3, r3
 8009090:	4619      	mov	r1, r3
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 f8d4 	bl	8009240 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009098:	e0b5      	b.n	8009206 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	f000 80a7 	beq.w	800920a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80090bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f000 80a2 	beq.w	800920a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ce:	e853 3f00 	ldrex	r3, [r3]
 80090d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80090d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80090da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	461a      	mov	r2, r3
 80090e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80090e8:	647b      	str	r3, [r7, #68]	; 0x44
 80090ea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80090ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090f0:	e841 2300 	strex	r3, r2, [r1]
 80090f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80090f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d1e4      	bne.n	80090c6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	3308      	adds	r3, #8
 8009102:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009106:	e853 3f00 	ldrex	r3, [r3]
 800910a:	623b      	str	r3, [r7, #32]
   return(result);
 800910c:	6a3b      	ldr	r3, [r7, #32]
 800910e:	f023 0301 	bic.w	r3, r3, #1
 8009112:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	3308      	adds	r3, #8
 800911c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009120:	633a      	str	r2, [r7, #48]	; 0x30
 8009122:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009124:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009128:	e841 2300 	strex	r3, r2, [r1]
 800912c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800912e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009130:	2b00      	cmp	r3, #0
 8009132:	d1e3      	bne.n	80090fc <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2220      	movs	r2, #32
 8009138:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	e853 3f00 	ldrex	r3, [r3]
 8009152:	60fb      	str	r3, [r7, #12]
   return(result);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f023 0310 	bic.w	r3, r3, #16
 800915a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	461a      	mov	r2, r3
 8009164:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009168:	61fb      	str	r3, [r7, #28]
 800916a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916c:	69b9      	ldr	r1, [r7, #24]
 800916e:	69fa      	ldr	r2, [r7, #28]
 8009170:	e841 2300 	strex	r3, r2, [r1]
 8009174:	617b      	str	r3, [r7, #20]
   return(result);
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1e4      	bne.n	8009146 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800917c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009180:	4619      	mov	r1, r3
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 f85c 	bl	8009240 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009188:	e03f      	b.n	800920a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800918a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800918e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00e      	beq.n	80091b4 <HAL_UART_IRQHandler+0x560>
 8009196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800919a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d008      	beq.n	80091b4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80091aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 fd5d 	bl	8009c6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091b2:	e02d      	b.n	8009210 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80091b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00e      	beq.n	80091de <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80091c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d008      	beq.n	80091de <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d01c      	beq.n	800920e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	4798      	blx	r3
    }
    return;
 80091dc:	e017      	b.n	800920e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80091de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d012      	beq.n	8009210 <HAL_UART_IRQHandler+0x5bc>
 80091ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00c      	beq.n	8009210 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 fd0e 	bl	8009c18 <UART_EndTransmit_IT>
    return;
 80091fc:	e008      	b.n	8009210 <HAL_UART_IRQHandler+0x5bc>
      return;
 80091fe:	bf00      	nop
 8009200:	e006      	b.n	8009210 <HAL_UART_IRQHandler+0x5bc>
    return;
 8009202:	bf00      	nop
 8009204:	e004      	b.n	8009210 <HAL_UART_IRQHandler+0x5bc>
      return;
 8009206:	bf00      	nop
 8009208:	e002      	b.n	8009210 <HAL_UART_IRQHandler+0x5bc>
      return;
 800920a:	bf00      	nop
 800920c:	e000      	b.n	8009210 <HAL_UART_IRQHandler+0x5bc>
    return;
 800920e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009210:	37e8      	adds	r7, #232	; 0xe8
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop

08009218 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009220:	bf00      	nop
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009234:	bf00      	nop
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	460b      	mov	r3, r1
 800924a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800925c:	b08a      	sub	sp, #40	; 0x28
 800925e:	af00      	add	r7, sp, #0
 8009260:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009262:	2300      	movs	r3, #0
 8009264:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	689a      	ldr	r2, [r3, #8]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	431a      	orrs	r2, r3
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	695b      	ldr	r3, [r3, #20]
 8009276:	431a      	orrs	r2, r3
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	69db      	ldr	r3, [r3, #28]
 800927c:	4313      	orrs	r3, r2
 800927e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	4ba4      	ldr	r3, [pc, #656]	; (8009518 <UART_SetConfig+0x2c0>)
 8009288:	4013      	ands	r3, r2
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	6812      	ldr	r2, [r2, #0]
 800928e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009290:	430b      	orrs	r3, r1
 8009292:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	68da      	ldr	r2, [r3, #12]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	430a      	orrs	r2, r1
 80092a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	699b      	ldr	r3, [r3, #24]
 80092ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a99      	ldr	r2, [pc, #612]	; (800951c <UART_SetConfig+0x2c4>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d004      	beq.n	80092c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6a1b      	ldr	r3, [r3, #32]
 80092be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092c0:	4313      	orrs	r3, r2
 80092c2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092d4:	430a      	orrs	r2, r1
 80092d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a90      	ldr	r2, [pc, #576]	; (8009520 <UART_SetConfig+0x2c8>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d126      	bne.n	8009330 <UART_SetConfig+0xd8>
 80092e2:	4b90      	ldr	r3, [pc, #576]	; (8009524 <UART_SetConfig+0x2cc>)
 80092e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092e8:	f003 0303 	and.w	r3, r3, #3
 80092ec:	2b03      	cmp	r3, #3
 80092ee:	d81b      	bhi.n	8009328 <UART_SetConfig+0xd0>
 80092f0:	a201      	add	r2, pc, #4	; (adr r2, 80092f8 <UART_SetConfig+0xa0>)
 80092f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f6:	bf00      	nop
 80092f8:	08009309 	.word	0x08009309
 80092fc:	08009319 	.word	0x08009319
 8009300:	08009311 	.word	0x08009311
 8009304:	08009321 	.word	0x08009321
 8009308:	2301      	movs	r3, #1
 800930a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800930e:	e116      	b.n	800953e <UART_SetConfig+0x2e6>
 8009310:	2302      	movs	r3, #2
 8009312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009316:	e112      	b.n	800953e <UART_SetConfig+0x2e6>
 8009318:	2304      	movs	r3, #4
 800931a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800931e:	e10e      	b.n	800953e <UART_SetConfig+0x2e6>
 8009320:	2308      	movs	r3, #8
 8009322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009326:	e10a      	b.n	800953e <UART_SetConfig+0x2e6>
 8009328:	2310      	movs	r3, #16
 800932a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800932e:	e106      	b.n	800953e <UART_SetConfig+0x2e6>
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a7c      	ldr	r2, [pc, #496]	; (8009528 <UART_SetConfig+0x2d0>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d138      	bne.n	80093ac <UART_SetConfig+0x154>
 800933a:	4b7a      	ldr	r3, [pc, #488]	; (8009524 <UART_SetConfig+0x2cc>)
 800933c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009340:	f003 030c 	and.w	r3, r3, #12
 8009344:	2b0c      	cmp	r3, #12
 8009346:	d82d      	bhi.n	80093a4 <UART_SetConfig+0x14c>
 8009348:	a201      	add	r2, pc, #4	; (adr r2, 8009350 <UART_SetConfig+0xf8>)
 800934a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800934e:	bf00      	nop
 8009350:	08009385 	.word	0x08009385
 8009354:	080093a5 	.word	0x080093a5
 8009358:	080093a5 	.word	0x080093a5
 800935c:	080093a5 	.word	0x080093a5
 8009360:	08009395 	.word	0x08009395
 8009364:	080093a5 	.word	0x080093a5
 8009368:	080093a5 	.word	0x080093a5
 800936c:	080093a5 	.word	0x080093a5
 8009370:	0800938d 	.word	0x0800938d
 8009374:	080093a5 	.word	0x080093a5
 8009378:	080093a5 	.word	0x080093a5
 800937c:	080093a5 	.word	0x080093a5
 8009380:	0800939d 	.word	0x0800939d
 8009384:	2300      	movs	r3, #0
 8009386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800938a:	e0d8      	b.n	800953e <UART_SetConfig+0x2e6>
 800938c:	2302      	movs	r3, #2
 800938e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009392:	e0d4      	b.n	800953e <UART_SetConfig+0x2e6>
 8009394:	2304      	movs	r3, #4
 8009396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800939a:	e0d0      	b.n	800953e <UART_SetConfig+0x2e6>
 800939c:	2308      	movs	r3, #8
 800939e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093a2:	e0cc      	b.n	800953e <UART_SetConfig+0x2e6>
 80093a4:	2310      	movs	r3, #16
 80093a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093aa:	e0c8      	b.n	800953e <UART_SetConfig+0x2e6>
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a5e      	ldr	r2, [pc, #376]	; (800952c <UART_SetConfig+0x2d4>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d125      	bne.n	8009402 <UART_SetConfig+0x1aa>
 80093b6:	4b5b      	ldr	r3, [pc, #364]	; (8009524 <UART_SetConfig+0x2cc>)
 80093b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80093c0:	2b30      	cmp	r3, #48	; 0x30
 80093c2:	d016      	beq.n	80093f2 <UART_SetConfig+0x19a>
 80093c4:	2b30      	cmp	r3, #48	; 0x30
 80093c6:	d818      	bhi.n	80093fa <UART_SetConfig+0x1a2>
 80093c8:	2b20      	cmp	r3, #32
 80093ca:	d00a      	beq.n	80093e2 <UART_SetConfig+0x18a>
 80093cc:	2b20      	cmp	r3, #32
 80093ce:	d814      	bhi.n	80093fa <UART_SetConfig+0x1a2>
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d002      	beq.n	80093da <UART_SetConfig+0x182>
 80093d4:	2b10      	cmp	r3, #16
 80093d6:	d008      	beq.n	80093ea <UART_SetConfig+0x192>
 80093d8:	e00f      	b.n	80093fa <UART_SetConfig+0x1a2>
 80093da:	2300      	movs	r3, #0
 80093dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093e0:	e0ad      	b.n	800953e <UART_SetConfig+0x2e6>
 80093e2:	2302      	movs	r3, #2
 80093e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093e8:	e0a9      	b.n	800953e <UART_SetConfig+0x2e6>
 80093ea:	2304      	movs	r3, #4
 80093ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093f0:	e0a5      	b.n	800953e <UART_SetConfig+0x2e6>
 80093f2:	2308      	movs	r3, #8
 80093f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093f8:	e0a1      	b.n	800953e <UART_SetConfig+0x2e6>
 80093fa:	2310      	movs	r3, #16
 80093fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009400:	e09d      	b.n	800953e <UART_SetConfig+0x2e6>
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a4a      	ldr	r2, [pc, #296]	; (8009530 <UART_SetConfig+0x2d8>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d125      	bne.n	8009458 <UART_SetConfig+0x200>
 800940c:	4b45      	ldr	r3, [pc, #276]	; (8009524 <UART_SetConfig+0x2cc>)
 800940e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009412:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009416:	2bc0      	cmp	r3, #192	; 0xc0
 8009418:	d016      	beq.n	8009448 <UART_SetConfig+0x1f0>
 800941a:	2bc0      	cmp	r3, #192	; 0xc0
 800941c:	d818      	bhi.n	8009450 <UART_SetConfig+0x1f8>
 800941e:	2b80      	cmp	r3, #128	; 0x80
 8009420:	d00a      	beq.n	8009438 <UART_SetConfig+0x1e0>
 8009422:	2b80      	cmp	r3, #128	; 0x80
 8009424:	d814      	bhi.n	8009450 <UART_SetConfig+0x1f8>
 8009426:	2b00      	cmp	r3, #0
 8009428:	d002      	beq.n	8009430 <UART_SetConfig+0x1d8>
 800942a:	2b40      	cmp	r3, #64	; 0x40
 800942c:	d008      	beq.n	8009440 <UART_SetConfig+0x1e8>
 800942e:	e00f      	b.n	8009450 <UART_SetConfig+0x1f8>
 8009430:	2300      	movs	r3, #0
 8009432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009436:	e082      	b.n	800953e <UART_SetConfig+0x2e6>
 8009438:	2302      	movs	r3, #2
 800943a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800943e:	e07e      	b.n	800953e <UART_SetConfig+0x2e6>
 8009440:	2304      	movs	r3, #4
 8009442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009446:	e07a      	b.n	800953e <UART_SetConfig+0x2e6>
 8009448:	2308      	movs	r3, #8
 800944a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800944e:	e076      	b.n	800953e <UART_SetConfig+0x2e6>
 8009450:	2310      	movs	r3, #16
 8009452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009456:	e072      	b.n	800953e <UART_SetConfig+0x2e6>
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a35      	ldr	r2, [pc, #212]	; (8009534 <UART_SetConfig+0x2dc>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d12a      	bne.n	80094b8 <UART_SetConfig+0x260>
 8009462:	4b30      	ldr	r3, [pc, #192]	; (8009524 <UART_SetConfig+0x2cc>)
 8009464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009468:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800946c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009470:	d01a      	beq.n	80094a8 <UART_SetConfig+0x250>
 8009472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009476:	d81b      	bhi.n	80094b0 <UART_SetConfig+0x258>
 8009478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800947c:	d00c      	beq.n	8009498 <UART_SetConfig+0x240>
 800947e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009482:	d815      	bhi.n	80094b0 <UART_SetConfig+0x258>
 8009484:	2b00      	cmp	r3, #0
 8009486:	d003      	beq.n	8009490 <UART_SetConfig+0x238>
 8009488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800948c:	d008      	beq.n	80094a0 <UART_SetConfig+0x248>
 800948e:	e00f      	b.n	80094b0 <UART_SetConfig+0x258>
 8009490:	2300      	movs	r3, #0
 8009492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009496:	e052      	b.n	800953e <UART_SetConfig+0x2e6>
 8009498:	2302      	movs	r3, #2
 800949a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800949e:	e04e      	b.n	800953e <UART_SetConfig+0x2e6>
 80094a0:	2304      	movs	r3, #4
 80094a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094a6:	e04a      	b.n	800953e <UART_SetConfig+0x2e6>
 80094a8:	2308      	movs	r3, #8
 80094aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094ae:	e046      	b.n	800953e <UART_SetConfig+0x2e6>
 80094b0:	2310      	movs	r3, #16
 80094b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094b6:	e042      	b.n	800953e <UART_SetConfig+0x2e6>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a17      	ldr	r2, [pc, #92]	; (800951c <UART_SetConfig+0x2c4>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d13a      	bne.n	8009538 <UART_SetConfig+0x2e0>
 80094c2:	4b18      	ldr	r3, [pc, #96]	; (8009524 <UART_SetConfig+0x2cc>)
 80094c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80094cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80094d0:	d01a      	beq.n	8009508 <UART_SetConfig+0x2b0>
 80094d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80094d6:	d81b      	bhi.n	8009510 <UART_SetConfig+0x2b8>
 80094d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094dc:	d00c      	beq.n	80094f8 <UART_SetConfig+0x2a0>
 80094de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094e2:	d815      	bhi.n	8009510 <UART_SetConfig+0x2b8>
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d003      	beq.n	80094f0 <UART_SetConfig+0x298>
 80094e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094ec:	d008      	beq.n	8009500 <UART_SetConfig+0x2a8>
 80094ee:	e00f      	b.n	8009510 <UART_SetConfig+0x2b8>
 80094f0:	2300      	movs	r3, #0
 80094f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094f6:	e022      	b.n	800953e <UART_SetConfig+0x2e6>
 80094f8:	2302      	movs	r3, #2
 80094fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094fe:	e01e      	b.n	800953e <UART_SetConfig+0x2e6>
 8009500:	2304      	movs	r3, #4
 8009502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009506:	e01a      	b.n	800953e <UART_SetConfig+0x2e6>
 8009508:	2308      	movs	r3, #8
 800950a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800950e:	e016      	b.n	800953e <UART_SetConfig+0x2e6>
 8009510:	2310      	movs	r3, #16
 8009512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009516:	e012      	b.n	800953e <UART_SetConfig+0x2e6>
 8009518:	efff69f3 	.word	0xefff69f3
 800951c:	40008000 	.word	0x40008000
 8009520:	40013800 	.word	0x40013800
 8009524:	40021000 	.word	0x40021000
 8009528:	40004400 	.word	0x40004400
 800952c:	40004800 	.word	0x40004800
 8009530:	40004c00 	.word	0x40004c00
 8009534:	40005000 	.word	0x40005000
 8009538:	2310      	movs	r3, #16
 800953a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a9f      	ldr	r2, [pc, #636]	; (80097c0 <UART_SetConfig+0x568>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d17a      	bne.n	800963e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009548:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800954c:	2b08      	cmp	r3, #8
 800954e:	d824      	bhi.n	800959a <UART_SetConfig+0x342>
 8009550:	a201      	add	r2, pc, #4	; (adr r2, 8009558 <UART_SetConfig+0x300>)
 8009552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009556:	bf00      	nop
 8009558:	0800957d 	.word	0x0800957d
 800955c:	0800959b 	.word	0x0800959b
 8009560:	08009585 	.word	0x08009585
 8009564:	0800959b 	.word	0x0800959b
 8009568:	0800958b 	.word	0x0800958b
 800956c:	0800959b 	.word	0x0800959b
 8009570:	0800959b 	.word	0x0800959b
 8009574:	0800959b 	.word	0x0800959b
 8009578:	08009593 	.word	0x08009593
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800957c:	f7fc fd9c 	bl	80060b8 <HAL_RCC_GetPCLK1Freq>
 8009580:	61f8      	str	r0, [r7, #28]
        break;
 8009582:	e010      	b.n	80095a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009584:	4b8f      	ldr	r3, [pc, #572]	; (80097c4 <UART_SetConfig+0x56c>)
 8009586:	61fb      	str	r3, [r7, #28]
        break;
 8009588:	e00d      	b.n	80095a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800958a:	f7fc fcfd 	bl	8005f88 <HAL_RCC_GetSysClockFreq>
 800958e:	61f8      	str	r0, [r7, #28]
        break;
 8009590:	e009      	b.n	80095a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009596:	61fb      	str	r3, [r7, #28]
        break;
 8009598:	e005      	b.n	80095a6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800959a:	2300      	movs	r3, #0
 800959c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80095a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f000 80fb 	beq.w	80097a4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	685a      	ldr	r2, [r3, #4]
 80095b2:	4613      	mov	r3, r2
 80095b4:	005b      	lsls	r3, r3, #1
 80095b6:	4413      	add	r3, r2
 80095b8:	69fa      	ldr	r2, [r7, #28]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d305      	bcc.n	80095ca <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80095c4:	69fa      	ldr	r2, [r7, #28]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d903      	bls.n	80095d2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80095d0:	e0e8      	b.n	80097a4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	2200      	movs	r2, #0
 80095d6:	461c      	mov	r4, r3
 80095d8:	4615      	mov	r5, r2
 80095da:	f04f 0200 	mov.w	r2, #0
 80095de:	f04f 0300 	mov.w	r3, #0
 80095e2:	022b      	lsls	r3, r5, #8
 80095e4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80095e8:	0222      	lsls	r2, r4, #8
 80095ea:	68f9      	ldr	r1, [r7, #12]
 80095ec:	6849      	ldr	r1, [r1, #4]
 80095ee:	0849      	lsrs	r1, r1, #1
 80095f0:	2000      	movs	r0, #0
 80095f2:	4688      	mov	r8, r1
 80095f4:	4681      	mov	r9, r0
 80095f6:	eb12 0a08 	adds.w	sl, r2, r8
 80095fa:	eb43 0b09 	adc.w	fp, r3, r9
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	603b      	str	r3, [r7, #0]
 8009606:	607a      	str	r2, [r7, #4]
 8009608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800960c:	4650      	mov	r0, sl
 800960e:	4659      	mov	r1, fp
 8009610:	f7f7 fada 	bl	8000bc8 <__aeabi_uldivmod>
 8009614:	4602      	mov	r2, r0
 8009616:	460b      	mov	r3, r1
 8009618:	4613      	mov	r3, r2
 800961a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009622:	d308      	bcc.n	8009636 <UART_SetConfig+0x3de>
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800962a:	d204      	bcs.n	8009636 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	69ba      	ldr	r2, [r7, #24]
 8009632:	60da      	str	r2, [r3, #12]
 8009634:	e0b6      	b.n	80097a4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800963c:	e0b2      	b.n	80097a4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	69db      	ldr	r3, [r3, #28]
 8009642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009646:	d15e      	bne.n	8009706 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8009648:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800964c:	2b08      	cmp	r3, #8
 800964e:	d828      	bhi.n	80096a2 <UART_SetConfig+0x44a>
 8009650:	a201      	add	r2, pc, #4	; (adr r2, 8009658 <UART_SetConfig+0x400>)
 8009652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009656:	bf00      	nop
 8009658:	0800967d 	.word	0x0800967d
 800965c:	08009685 	.word	0x08009685
 8009660:	0800968d 	.word	0x0800968d
 8009664:	080096a3 	.word	0x080096a3
 8009668:	08009693 	.word	0x08009693
 800966c:	080096a3 	.word	0x080096a3
 8009670:	080096a3 	.word	0x080096a3
 8009674:	080096a3 	.word	0x080096a3
 8009678:	0800969b 	.word	0x0800969b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800967c:	f7fc fd1c 	bl	80060b8 <HAL_RCC_GetPCLK1Freq>
 8009680:	61f8      	str	r0, [r7, #28]
        break;
 8009682:	e014      	b.n	80096ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009684:	f7fc fd2e 	bl	80060e4 <HAL_RCC_GetPCLK2Freq>
 8009688:	61f8      	str	r0, [r7, #28]
        break;
 800968a:	e010      	b.n	80096ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800968c:	4b4d      	ldr	r3, [pc, #308]	; (80097c4 <UART_SetConfig+0x56c>)
 800968e:	61fb      	str	r3, [r7, #28]
        break;
 8009690:	e00d      	b.n	80096ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009692:	f7fc fc79 	bl	8005f88 <HAL_RCC_GetSysClockFreq>
 8009696:	61f8      	str	r0, [r7, #28]
        break;
 8009698:	e009      	b.n	80096ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800969a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800969e:	61fb      	str	r3, [r7, #28]
        break;
 80096a0:	e005      	b.n	80096ae <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80096a2:	2300      	movs	r3, #0
 80096a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80096ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d077      	beq.n	80097a4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	005a      	lsls	r2, r3, #1
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	085b      	lsrs	r3, r3, #1
 80096be:	441a      	add	r2, r3
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80096c8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096ca:	69bb      	ldr	r3, [r7, #24]
 80096cc:	2b0f      	cmp	r3, #15
 80096ce:	d916      	bls.n	80096fe <UART_SetConfig+0x4a6>
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096d6:	d212      	bcs.n	80096fe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	b29b      	uxth	r3, r3
 80096dc:	f023 030f 	bic.w	r3, r3, #15
 80096e0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	085b      	lsrs	r3, r3, #1
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	f003 0307 	and.w	r3, r3, #7
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	8afb      	ldrh	r3, [r7, #22]
 80096f0:	4313      	orrs	r3, r2
 80096f2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	8afa      	ldrh	r2, [r7, #22]
 80096fa:	60da      	str	r2, [r3, #12]
 80096fc:	e052      	b.n	80097a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80096fe:	2301      	movs	r3, #1
 8009700:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009704:	e04e      	b.n	80097a4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009706:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800970a:	2b08      	cmp	r3, #8
 800970c:	d827      	bhi.n	800975e <UART_SetConfig+0x506>
 800970e:	a201      	add	r2, pc, #4	; (adr r2, 8009714 <UART_SetConfig+0x4bc>)
 8009710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009714:	08009739 	.word	0x08009739
 8009718:	08009741 	.word	0x08009741
 800971c:	08009749 	.word	0x08009749
 8009720:	0800975f 	.word	0x0800975f
 8009724:	0800974f 	.word	0x0800974f
 8009728:	0800975f 	.word	0x0800975f
 800972c:	0800975f 	.word	0x0800975f
 8009730:	0800975f 	.word	0x0800975f
 8009734:	08009757 	.word	0x08009757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009738:	f7fc fcbe 	bl	80060b8 <HAL_RCC_GetPCLK1Freq>
 800973c:	61f8      	str	r0, [r7, #28]
        break;
 800973e:	e014      	b.n	800976a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009740:	f7fc fcd0 	bl	80060e4 <HAL_RCC_GetPCLK2Freq>
 8009744:	61f8      	str	r0, [r7, #28]
        break;
 8009746:	e010      	b.n	800976a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009748:	4b1e      	ldr	r3, [pc, #120]	; (80097c4 <UART_SetConfig+0x56c>)
 800974a:	61fb      	str	r3, [r7, #28]
        break;
 800974c:	e00d      	b.n	800976a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800974e:	f7fc fc1b 	bl	8005f88 <HAL_RCC_GetSysClockFreq>
 8009752:	61f8      	str	r0, [r7, #28]
        break;
 8009754:	e009      	b.n	800976a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800975a:	61fb      	str	r3, [r7, #28]
        break;
 800975c:	e005      	b.n	800976a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800975e:	2300      	movs	r3, #0
 8009760:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009768:	bf00      	nop
    }

    if (pclk != 0U)
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d019      	beq.n	80097a4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	085a      	lsrs	r2, r3, #1
 8009776:	69fb      	ldr	r3, [r7, #28]
 8009778:	441a      	add	r2, r3
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009782:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	2b0f      	cmp	r3, #15
 8009788:	d909      	bls.n	800979e <UART_SetConfig+0x546>
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009790:	d205      	bcs.n	800979e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009792:	69bb      	ldr	r3, [r7, #24]
 8009794:	b29a      	uxth	r2, r3
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	60da      	str	r2, [r3, #12]
 800979c:	e002      	b.n	80097a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80097b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3728      	adds	r7, #40	; 0x28
 80097b8:	46bd      	mov	sp, r7
 80097ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097be:	bf00      	nop
 80097c0:	40008000 	.word	0x40008000
 80097c4:	00f42400 	.word	0x00f42400

080097c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d4:	f003 0301 	and.w	r3, r3, #1
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00a      	beq.n	80097f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	430a      	orrs	r2, r1
 80097f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f6:	f003 0302 	and.w	r3, r3, #2
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00a      	beq.n	8009814 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	430a      	orrs	r2, r1
 8009812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009818:	f003 0304 	and.w	r3, r3, #4
 800981c:	2b00      	cmp	r3, #0
 800981e:	d00a      	beq.n	8009836 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	430a      	orrs	r2, r1
 8009834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983a:	f003 0308 	and.w	r3, r3, #8
 800983e:	2b00      	cmp	r3, #0
 8009840:	d00a      	beq.n	8009858 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	430a      	orrs	r2, r1
 8009856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985c:	f003 0310 	and.w	r3, r3, #16
 8009860:	2b00      	cmp	r3, #0
 8009862:	d00a      	beq.n	800987a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	430a      	orrs	r2, r1
 8009878:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987e:	f003 0320 	and.w	r3, r3, #32
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00a      	beq.n	800989c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	430a      	orrs	r2, r1
 800989a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d01a      	beq.n	80098de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	430a      	orrs	r2, r1
 80098bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098c6:	d10a      	bne.n	80098de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	430a      	orrs	r2, r1
 80098dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00a      	beq.n	8009900 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	430a      	orrs	r2, r1
 80098fe:	605a      	str	r2, [r3, #4]
  }
}
 8009900:	bf00      	nop
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b086      	sub	sp, #24
 8009910:	af02      	add	r7, sp, #8
 8009912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800991c:	f7fa f88a 	bl	8003a34 <HAL_GetTick>
 8009920:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f003 0308 	and.w	r3, r3, #8
 800992c:	2b08      	cmp	r3, #8
 800992e:	d10e      	bne.n	800994e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009930:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009934:	9300      	str	r3, [sp, #0]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2200      	movs	r2, #0
 800993a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f82d 	bl	800999e <UART_WaitOnFlagUntilTimeout>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d001      	beq.n	800994e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800994a:	2303      	movs	r3, #3
 800994c:	e023      	b.n	8009996 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f003 0304 	and.w	r3, r3, #4
 8009958:	2b04      	cmp	r3, #4
 800995a:	d10e      	bne.n	800997a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800995c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009960:	9300      	str	r3, [sp, #0]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2200      	movs	r2, #0
 8009966:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 f817 	bl	800999e <UART_WaitOnFlagUntilTimeout>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d001      	beq.n	800997a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009976:	2303      	movs	r3, #3
 8009978:	e00d      	b.n	8009996 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2220      	movs	r2, #32
 800997e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2220      	movs	r2, #32
 8009984:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3710      	adds	r7, #16
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b09c      	sub	sp, #112	; 0x70
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	60f8      	str	r0, [r7, #12]
 80099a6:	60b9      	str	r1, [r7, #8]
 80099a8:	603b      	str	r3, [r7, #0]
 80099aa:	4613      	mov	r3, r2
 80099ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099ae:	e0a5      	b.n	8009afc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b6:	f000 80a1 	beq.w	8009afc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099ba:	f7fa f83b 	bl	8003a34 <HAL_GetTick>
 80099be:	4602      	mov	r2, r0
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	1ad3      	subs	r3, r2, r3
 80099c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d302      	bcc.n	80099d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80099ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d13e      	bne.n	8009a4e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099d8:	e853 3f00 	ldrex	r3, [r3]
 80099dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80099de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80099e4:	667b      	str	r3, [r7, #100]	; 0x64
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	461a      	mov	r2, r3
 80099ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099f0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80099f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80099f6:	e841 2300 	strex	r3, r2, [r1]
 80099fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80099fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d1e6      	bne.n	80099d0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	3308      	adds	r3, #8
 8009a08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a0c:	e853 3f00 	ldrex	r3, [r3]
 8009a10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a14:	f023 0301 	bic.w	r3, r3, #1
 8009a18:	663b      	str	r3, [r7, #96]	; 0x60
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	3308      	adds	r3, #8
 8009a20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009a22:	64ba      	str	r2, [r7, #72]	; 0x48
 8009a24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a2a:	e841 2300 	strex	r3, r2, [r1]
 8009a2e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d1e5      	bne.n	8009a02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2220      	movs	r2, #32
 8009a3a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2220      	movs	r2, #32
 8009a40:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009a4a:	2303      	movs	r3, #3
 8009a4c:	e067      	b.n	8009b1e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f003 0304 	and.w	r3, r3, #4
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d04f      	beq.n	8009afc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	69db      	ldr	r3, [r3, #28]
 8009a62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a6a:	d147      	bne.n	8009afc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a74:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7e:	e853 3f00 	ldrex	r3, [r3]
 8009a82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009a8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	461a      	mov	r2, r3
 8009a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a94:	637b      	str	r3, [r7, #52]	; 0x34
 8009a96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a9c:	e841 2300 	strex	r3, r2, [r1]
 8009aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1e6      	bne.n	8009a76 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	3308      	adds	r3, #8
 8009aae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	e853 3f00 	ldrex	r3, [r3]
 8009ab6:	613b      	str	r3, [r7, #16]
   return(result);
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	f023 0301 	bic.w	r3, r3, #1
 8009abe:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	3308      	adds	r3, #8
 8009ac6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009ac8:	623a      	str	r2, [r7, #32]
 8009aca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009acc:	69f9      	ldr	r1, [r7, #28]
 8009ace:	6a3a      	ldr	r2, [r7, #32]
 8009ad0:	e841 2300 	strex	r3, r2, [r1]
 8009ad4:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d1e5      	bne.n	8009aa8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2220      	movs	r2, #32
 8009ae0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2220      	movs	r2, #32
 8009ae6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2220      	movs	r2, #32
 8009aec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2200      	movs	r2, #0
 8009af4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009af8:	2303      	movs	r3, #3
 8009afa:	e010      	b.n	8009b1e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	69da      	ldr	r2, [r3, #28]
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	4013      	ands	r3, r2
 8009b06:	68ba      	ldr	r2, [r7, #8]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	bf0c      	ite	eq
 8009b0c:	2301      	moveq	r3, #1
 8009b0e:	2300      	movne	r3, #0
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	461a      	mov	r2, r3
 8009b14:	79fb      	ldrb	r3, [r7, #7]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	f43f af4a 	beq.w	80099b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3770      	adds	r7, #112	; 0x70
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b26:	b480      	push	{r7}
 8009b28:	b095      	sub	sp, #84	; 0x54
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b36:	e853 3f00 	ldrex	r3, [r3]
 8009b3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	461a      	mov	r2, r3
 8009b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b4c:	643b      	str	r3, [r7, #64]	; 0x40
 8009b4e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b54:	e841 2300 	strex	r3, r2, [r1]
 8009b58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d1e6      	bne.n	8009b2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	3308      	adds	r3, #8
 8009b66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b68:	6a3b      	ldr	r3, [r7, #32]
 8009b6a:	e853 3f00 	ldrex	r3, [r3]
 8009b6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	f023 0301 	bic.w	r3, r3, #1
 8009b76:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	3308      	adds	r3, #8
 8009b7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b88:	e841 2300 	strex	r3, r2, [r1]
 8009b8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d1e5      	bne.n	8009b60 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d118      	bne.n	8009bce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	e853 3f00 	ldrex	r3, [r3]
 8009ba8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	f023 0310 	bic.w	r3, r3, #16
 8009bb0:	647b      	str	r3, [r7, #68]	; 0x44
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bba:	61bb      	str	r3, [r7, #24]
 8009bbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bbe:	6979      	ldr	r1, [r7, #20]
 8009bc0:	69ba      	ldr	r2, [r7, #24]
 8009bc2:	e841 2300 	strex	r3, r2, [r1]
 8009bc6:	613b      	str	r3, [r7, #16]
   return(result);
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d1e6      	bne.n	8009b9c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2220      	movs	r2, #32
 8009bd2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009be0:	bf00      	nop
 8009be2:	3754      	adds	r7, #84	; 0x54
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	f7ff fb0e 	bl	800922c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c10:	bf00      	nop
 8009c12:	3710      	adds	r7, #16
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b088      	sub	sp, #32
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	e853 3f00 	ldrex	r3, [r3]
 8009c2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c34:	61fb      	str	r3, [r7, #28]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	69fb      	ldr	r3, [r7, #28]
 8009c3e:	61bb      	str	r3, [r7, #24]
 8009c40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c42:	6979      	ldr	r1, [r7, #20]
 8009c44:	69ba      	ldr	r2, [r7, #24]
 8009c46:	e841 2300 	strex	r3, r2, [r1]
 8009c4a:	613b      	str	r3, [r7, #16]
   return(result);
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1e6      	bne.n	8009c20 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2220      	movs	r2, #32
 8009c56:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f7ff fada 	bl	8009218 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c64:	bf00      	nop
 8009c66:	3720      	adds	r7, #32
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b083      	sub	sp, #12
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009c74:	bf00      	nop
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009c84:	4904      	ldr	r1, [pc, #16]	; (8009c98 <MX_FATFS_Init+0x18>)
 8009c86:	4805      	ldr	r0, [pc, #20]	; (8009c9c <MX_FATFS_Init+0x1c>)
 8009c88:	f003 f950 	bl	800cf2c <FATFS_LinkDriver>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	461a      	mov	r2, r3
 8009c90:	4b03      	ldr	r3, [pc, #12]	; (8009ca0 <MX_FATFS_Init+0x20>)
 8009c92:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009c94:	bf00      	nop
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	20000d20 	.word	0x20000d20
 8009c9c:	20000034 	.word	0x20000034
 8009ca0:	20000d1c 	.word	0x20000d1c

08009ca4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009ca8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	4603      	mov	r3, r0
 8009cbc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADDED THIS LINE
 8009cbe:	79fb      	ldrb	r3, [r7, #7]
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f000 f9d9 	bl	800a078 <USER_SPI_initialize>
 8009cc6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADDED THIS LINE
 8009cda:	79fb      	ldrb	r3, [r7, #7]
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f000 fab7 	bl	800a250 <USER_SPI_status>
 8009ce2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3708      	adds	r7, #8
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60b9      	str	r1, [r7, #8]
 8009cf4:	607a      	str	r2, [r7, #4]
 8009cf6:	603b      	str	r3, [r7, #0]
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADDED THIS LINE
 8009cfc:	7bf8      	ldrb	r0, [r7, #15]
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	68b9      	ldr	r1, [r7, #8]
 8009d04:	f000 faba 	bl	800a27c <USER_SPI_read>
 8009d08:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b084      	sub	sp, #16
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	607a      	str	r2, [r7, #4]
 8009d1c:	603b      	str	r3, [r7, #0]
 8009d1e:	4603      	mov	r3, r0
 8009d20:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADDED THIS LINE
 8009d22:	7bf8      	ldrb	r0, [r7, #15]
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	68b9      	ldr	r1, [r7, #8]
 8009d2a:	f000 fb0d 	bl	800a348 <USER_SPI_write>
 8009d2e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3710      	adds	r7, #16
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	4603      	mov	r3, r0
 8009d40:	603a      	str	r2, [r7, #0]
 8009d42:	71fb      	strb	r3, [r7, #7]
 8009d44:	460b      	mov	r3, r1
 8009d46:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff); //ADDED THIS LINE
 8009d48:	79b9      	ldrb	r1, [r7, #6]
 8009d4a:	79fb      	ldrb	r3, [r7, #7]
 8009d4c:	683a      	ldr	r2, [r7, #0]
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f000 fb76 	bl	800a440 <USER_SPI_ioctl>
 8009d54:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3708      	adds	r7, #8
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
	...

08009d60 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8009d68:	f7f9 fe64 	bl	8003a34 <HAL_GetTick>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	4a04      	ldr	r2, [pc, #16]	; (8009d80 <SPI_Timer_On+0x20>)
 8009d70:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8009d72:	4a04      	ldr	r2, [pc, #16]	; (8009d84 <SPI_Timer_On+0x24>)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6013      	str	r3, [r2, #0]
}
 8009d78:	bf00      	nop
 8009d7a:	3708      	adds	r7, #8
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	20000d28 	.word	0x20000d28
 8009d84:	20000d2c 	.word	0x20000d2c

08009d88 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8009d8c:	f7f9 fe52 	bl	8003a34 <HAL_GetTick>
 8009d90:	4602      	mov	r2, r0
 8009d92:	4b06      	ldr	r3, [pc, #24]	; (8009dac <SPI_Timer_Status+0x24>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	1ad2      	subs	r2, r2, r3
 8009d98:	4b05      	ldr	r3, [pc, #20]	; (8009db0 <SPI_Timer_Status+0x28>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	bf34      	ite	cc
 8009da0:	2301      	movcc	r3, #1
 8009da2:	2300      	movcs	r3, #0
 8009da4:	b2db      	uxtb	r3, r3
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	20000d28 	.word	0x20000d28
 8009db0:	20000d2c 	.word	0x20000d2c

08009db4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b086      	sub	sp, #24
 8009db8:	af02      	add	r7, sp, #8
 8009dba:	4603      	mov	r3, r0
 8009dbc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009dbe:	f107 020f 	add.w	r2, r7, #15
 8009dc2:	1df9      	adds	r1, r7, #7
 8009dc4:	2332      	movs	r3, #50	; 0x32
 8009dc6:	9300      	str	r3, [sp, #0]
 8009dc8:	2301      	movs	r3, #1
 8009dca:	4804      	ldr	r0, [pc, #16]	; (8009ddc <xchg_spi+0x28>)
 8009dcc:	f7fc ff5f 	bl	8006c8e <HAL_SPI_TransmitReceive>
    return rxDat;
 8009dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	20000b28 	.word	0x20000b28

08009de0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8009de0:	b590      	push	{r4, r7, lr}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8009dea:	2300      	movs	r3, #0
 8009dec:	60fb      	str	r3, [r7, #12]
 8009dee:	e00a      	b.n	8009e06 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	18d4      	adds	r4, r2, r3
 8009df6:	20ff      	movs	r0, #255	; 0xff
 8009df8:	f7ff ffdc 	bl	8009db4 <xchg_spi>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	3301      	adds	r3, #1
 8009e04:	60fb      	str	r3, [r7, #12]
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d3f0      	bcc.n	8009df0 <rcvr_spi_multi+0x10>
	}
}
 8009e0e:	bf00      	nop
 8009e10:	bf00      	nop
 8009e12:	3714      	adds	r7, #20
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd90      	pop	{r4, r7, pc}

08009e18 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8009e22:	2300      	movs	r3, #0
 8009e24:	60fb      	str	r3, [r7, #12]
 8009e26:	e009      	b.n	8009e3c <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	4413      	add	r3, r2
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7ff ffbf 	bl	8009db4 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	60fb      	str	r3, [r7, #12]
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d3f1      	bcc.n	8009e28 <xmit_spi_multi+0x10>
	}
}
 8009e44:	bf00      	nop
 8009e46:	bf00      	nop
 8009e48:	3710      	adds	r7, #16
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}

08009e4e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b086      	sub	sp, #24
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8009e56:	f7f9 fded 	bl	8003a34 <HAL_GetTick>
 8009e5a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8009e60:	20ff      	movs	r0, #255	; 0xff
 8009e62:	f7ff ffa7 	bl	8009db4 <xchg_spi>
 8009e66:	4603      	mov	r3, r0
 8009e68:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8009e6a:	7bfb      	ldrb	r3, [r7, #15]
 8009e6c:	2bff      	cmp	r3, #255	; 0xff
 8009e6e:	d007      	beq.n	8009e80 <wait_ready+0x32>
 8009e70:	f7f9 fde0 	bl	8003a34 <HAL_GetTick>
 8009e74:	4602      	mov	r2, r0
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	1ad3      	subs	r3, r2, r3
 8009e7a:	693a      	ldr	r2, [r7, #16]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d8ef      	bhi.n	8009e60 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8009e80:	7bfb      	ldrb	r3, [r7, #15]
 8009e82:	2bff      	cmp	r3, #255	; 0xff
 8009e84:	bf0c      	ite	eq
 8009e86:	2301      	moveq	r3, #1
 8009e88:	2300      	movne	r3, #0
 8009e8a:	b2db      	uxtb	r3, r3
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3718      	adds	r7, #24
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8009e98:	2201      	movs	r2, #1
 8009e9a:	2140      	movs	r1, #64	; 0x40
 8009e9c:	4803      	ldr	r0, [pc, #12]	; (8009eac <despiselect+0x18>)
 8009e9e:	f7fa fced 	bl	800487c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8009ea2:	20ff      	movs	r0, #255	; 0xff
 8009ea4:	f7ff ff86 	bl	8009db4 <xchg_spi>

}
 8009ea8:	bf00      	nop
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	48000400 	.word	0x48000400

08009eb0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	2140      	movs	r1, #64	; 0x40
 8009eb8:	4809      	ldr	r0, [pc, #36]	; (8009ee0 <spiselect+0x30>)
 8009eba:	f7fa fcdf 	bl	800487c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8009ebe:	20ff      	movs	r0, #255	; 0xff
 8009ec0:	f7ff ff78 	bl	8009db4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8009ec4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009ec8:	f7ff ffc1 	bl	8009e4e <wait_ready>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d001      	beq.n	8009ed6 <spiselect+0x26>
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e002      	b.n	8009edc <spiselect+0x2c>

	despiselect();
 8009ed6:	f7ff ffdd 	bl	8009e94 <despiselect>
	return 0;	/* Timeout */
 8009eda:	2300      	movs	r3, #0
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	48000400 	.word	0x48000400

08009ee4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8009eee:	20c8      	movs	r0, #200	; 0xc8
 8009ef0:	f7ff ff36 	bl	8009d60 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8009ef4:	20ff      	movs	r0, #255	; 0xff
 8009ef6:	f7ff ff5d 	bl	8009db4 <xchg_spi>
 8009efa:	4603      	mov	r3, r0
 8009efc:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8009efe:	7bfb      	ldrb	r3, [r7, #15]
 8009f00:	2bff      	cmp	r3, #255	; 0xff
 8009f02:	d104      	bne.n	8009f0e <rcvr_datablock+0x2a>
 8009f04:	f7ff ff40 	bl	8009d88 <SPI_Timer_Status>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d1f2      	bne.n	8009ef4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8009f0e:	7bfb      	ldrb	r3, [r7, #15]
 8009f10:	2bfe      	cmp	r3, #254	; 0xfe
 8009f12:	d001      	beq.n	8009f18 <rcvr_datablock+0x34>
 8009f14:	2300      	movs	r3, #0
 8009f16:	e00a      	b.n	8009f2e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8009f18:	6839      	ldr	r1, [r7, #0]
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f7ff ff60 	bl	8009de0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8009f20:	20ff      	movs	r0, #255	; 0xff
 8009f22:	f7ff ff47 	bl	8009db4 <xchg_spi>
 8009f26:	20ff      	movs	r0, #255	; 0xff
 8009f28:	f7ff ff44 	bl	8009db4 <xchg_spi>

	return 1;						/* Function succeeded */
 8009f2c:	2301      	movs	r3, #1
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b084      	sub	sp, #16
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
 8009f3e:	460b      	mov	r3, r1
 8009f40:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8009f42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009f46:	f7ff ff82 	bl	8009e4e <wait_ready>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d101      	bne.n	8009f54 <xmit_datablock+0x1e>
 8009f50:	2300      	movs	r3, #0
 8009f52:	e01e      	b.n	8009f92 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8009f54:	78fb      	ldrb	r3, [r7, #3]
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7ff ff2c 	bl	8009db4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8009f5c:	78fb      	ldrb	r3, [r7, #3]
 8009f5e:	2bfd      	cmp	r3, #253	; 0xfd
 8009f60:	d016      	beq.n	8009f90 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8009f62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f7ff ff56 	bl	8009e18 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8009f6c:	20ff      	movs	r0, #255	; 0xff
 8009f6e:	f7ff ff21 	bl	8009db4 <xchg_spi>
 8009f72:	20ff      	movs	r0, #255	; 0xff
 8009f74:	f7ff ff1e 	bl	8009db4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8009f78:	20ff      	movs	r0, #255	; 0xff
 8009f7a:	f7ff ff1b 	bl	8009db4 <xchg_spi>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8009f82:	7bfb      	ldrb	r3, [r7, #15]
 8009f84:	f003 031f 	and.w	r3, r3, #31
 8009f88:	2b05      	cmp	r3, #5
 8009f8a:	d001      	beq.n	8009f90 <xmit_datablock+0x5a>
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	e000      	b.n	8009f92 <xmit_datablock+0x5c>
	}
	return 1;
 8009f90:	2301      	movs	r3, #1
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b084      	sub	sp, #16
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	6039      	str	r1, [r7, #0]
 8009fa4:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8009fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	da0e      	bge.n	8009fcc <send_cmd+0x32>
		cmd &= 0x7F;
 8009fae:	79fb      	ldrb	r3, [r7, #7]
 8009fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fb4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8009fb6:	2100      	movs	r1, #0
 8009fb8:	2037      	movs	r0, #55	; 0x37
 8009fba:	f7ff ffee 	bl	8009f9a <send_cmd>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8009fc2:	7bbb      	ldrb	r3, [r7, #14]
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d901      	bls.n	8009fcc <send_cmd+0x32>
 8009fc8:	7bbb      	ldrb	r3, [r7, #14]
 8009fca:	e051      	b.n	800a070 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8009fcc:	79fb      	ldrb	r3, [r7, #7]
 8009fce:	2b0c      	cmp	r3, #12
 8009fd0:	d008      	beq.n	8009fe4 <send_cmd+0x4a>
		despiselect();
 8009fd2:	f7ff ff5f 	bl	8009e94 <despiselect>
		if (!spiselect()) return 0xFF;
 8009fd6:	f7ff ff6b 	bl	8009eb0 <spiselect>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d101      	bne.n	8009fe4 <send_cmd+0x4a>
 8009fe0:	23ff      	movs	r3, #255	; 0xff
 8009fe2:	e045      	b.n	800a070 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8009fe4:	79fb      	ldrb	r3, [r7, #7]
 8009fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	4618      	mov	r0, r3
 8009fee:	f7ff fee1 	bl	8009db4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	0e1b      	lsrs	r3, r3, #24
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7ff fedb 	bl	8009db4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	0c1b      	lsrs	r3, r3, #16
 800a002:	b2db      	uxtb	r3, r3
 800a004:	4618      	mov	r0, r3
 800a006:	f7ff fed5 	bl	8009db4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	0a1b      	lsrs	r3, r3, #8
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	4618      	mov	r0, r3
 800a012:	f7ff fecf 	bl	8009db4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7ff feca 	bl	8009db4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800a020:	2301      	movs	r3, #1
 800a022:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800a024:	79fb      	ldrb	r3, [r7, #7]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d101      	bne.n	800a02e <send_cmd+0x94>
 800a02a:	2395      	movs	r3, #149	; 0x95
 800a02c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800a02e:	79fb      	ldrb	r3, [r7, #7]
 800a030:	2b08      	cmp	r3, #8
 800a032:	d101      	bne.n	800a038 <send_cmd+0x9e>
 800a034:	2387      	movs	r3, #135	; 0x87
 800a036:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800a038:	7bfb      	ldrb	r3, [r7, #15]
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7ff feba 	bl	8009db4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800a040:	79fb      	ldrb	r3, [r7, #7]
 800a042:	2b0c      	cmp	r3, #12
 800a044:	d102      	bne.n	800a04c <send_cmd+0xb2>
 800a046:	20ff      	movs	r0, #255	; 0xff
 800a048:	f7ff feb4 	bl	8009db4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800a04c:	230a      	movs	r3, #10
 800a04e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800a050:	20ff      	movs	r0, #255	; 0xff
 800a052:	f7ff feaf 	bl	8009db4 <xchg_spi>
 800a056:	4603      	mov	r3, r0
 800a058:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800a05a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	da05      	bge.n	800a06e <send_cmd+0xd4>
 800a062:	7bfb      	ldrb	r3, [r7, #15]
 800a064:	3b01      	subs	r3, #1
 800a066:	73fb      	strb	r3, [r7, #15]
 800a068:	7bfb      	ldrb	r3, [r7, #15]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d1f0      	bne.n	800a050 <send_cmd+0xb6>

	return res;							/* Return received response */
 800a06e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a070:	4618      	mov	r0, r3
 800a072:	3710      	adds	r7, #16
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800a078:	b590      	push	{r4, r7, lr}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	4603      	mov	r3, r0
 800a080:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800a082:	79fb      	ldrb	r3, [r7, #7]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d001      	beq.n	800a08c <USER_SPI_initialize+0x14>
 800a088:	2301      	movs	r3, #1
 800a08a:	e0d6      	b.n	800a23a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800a08c:	4b6d      	ldr	r3, [pc, #436]	; (800a244 <USER_SPI_initialize+0x1cc>)
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	b2db      	uxtb	r3, r3
 800a092:	f003 0302 	and.w	r3, r3, #2
 800a096:	2b00      	cmp	r3, #0
 800a098:	d003      	beq.n	800a0a2 <USER_SPI_initialize+0x2a>
 800a09a:	4b6a      	ldr	r3, [pc, #424]	; (800a244 <USER_SPI_initialize+0x1cc>)
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	e0cb      	b.n	800a23a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800a0a2:	4b69      	ldr	r3, [pc, #420]	; (800a248 <USER_SPI_initialize+0x1d0>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a0ac:	4b66      	ldr	r3, [pc, #408]	; (800a248 <USER_SPI_initialize+0x1d0>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800a0b4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800a0b6:	230a      	movs	r3, #10
 800a0b8:	73fb      	strb	r3, [r7, #15]
 800a0ba:	e005      	b.n	800a0c8 <USER_SPI_initialize+0x50>
 800a0bc:	20ff      	movs	r0, #255	; 0xff
 800a0be:	f7ff fe79 	bl	8009db4 <xchg_spi>
 800a0c2:	7bfb      	ldrb	r3, [r7, #15]
 800a0c4:	3b01      	subs	r3, #1
 800a0c6:	73fb      	strb	r3, [r7, #15]
 800a0c8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d1f6      	bne.n	800a0bc <USER_SPI_initialize+0x44>

	ty = 0;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	2000      	movs	r0, #0
 800a0d6:	f7ff ff60 	bl	8009f9a <send_cmd>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	f040 808b 	bne.w	800a1f8 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800a0e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a0e6:	f7ff fe3b 	bl	8009d60 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800a0ea:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a0ee:	2008      	movs	r0, #8
 800a0f0:	f7ff ff53 	bl	8009f9a <send_cmd>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d151      	bne.n	800a19e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	73fb      	strb	r3, [r7, #15]
 800a0fe:	e00d      	b.n	800a11c <USER_SPI_initialize+0xa4>
 800a100:	7bfc      	ldrb	r4, [r7, #15]
 800a102:	20ff      	movs	r0, #255	; 0xff
 800a104:	f7ff fe56 	bl	8009db4 <xchg_spi>
 800a108:	4603      	mov	r3, r0
 800a10a:	461a      	mov	r2, r3
 800a10c:	f104 0310 	add.w	r3, r4, #16
 800a110:	443b      	add	r3, r7
 800a112:	f803 2c08 	strb.w	r2, [r3, #-8]
 800a116:	7bfb      	ldrb	r3, [r7, #15]
 800a118:	3301      	adds	r3, #1
 800a11a:	73fb      	strb	r3, [r7, #15]
 800a11c:	7bfb      	ldrb	r3, [r7, #15]
 800a11e:	2b03      	cmp	r3, #3
 800a120:	d9ee      	bls.n	800a100 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800a122:	7abb      	ldrb	r3, [r7, #10]
 800a124:	2b01      	cmp	r3, #1
 800a126:	d167      	bne.n	800a1f8 <USER_SPI_initialize+0x180>
 800a128:	7afb      	ldrb	r3, [r7, #11]
 800a12a:	2baa      	cmp	r3, #170	; 0xaa
 800a12c:	d164      	bne.n	800a1f8 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800a12e:	bf00      	nop
 800a130:	f7ff fe2a 	bl	8009d88 <SPI_Timer_Status>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d007      	beq.n	800a14a <USER_SPI_initialize+0xd2>
 800a13a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a13e:	20a9      	movs	r0, #169	; 0xa9
 800a140:	f7ff ff2b 	bl	8009f9a <send_cmd>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d1f2      	bne.n	800a130 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800a14a:	f7ff fe1d 	bl	8009d88 <SPI_Timer_Status>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d051      	beq.n	800a1f8 <USER_SPI_initialize+0x180>
 800a154:	2100      	movs	r1, #0
 800a156:	203a      	movs	r0, #58	; 0x3a
 800a158:	f7ff ff1f 	bl	8009f9a <send_cmd>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d14a      	bne.n	800a1f8 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800a162:	2300      	movs	r3, #0
 800a164:	73fb      	strb	r3, [r7, #15]
 800a166:	e00d      	b.n	800a184 <USER_SPI_initialize+0x10c>
 800a168:	7bfc      	ldrb	r4, [r7, #15]
 800a16a:	20ff      	movs	r0, #255	; 0xff
 800a16c:	f7ff fe22 	bl	8009db4 <xchg_spi>
 800a170:	4603      	mov	r3, r0
 800a172:	461a      	mov	r2, r3
 800a174:	f104 0310 	add.w	r3, r4, #16
 800a178:	443b      	add	r3, r7
 800a17a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800a17e:	7bfb      	ldrb	r3, [r7, #15]
 800a180:	3301      	adds	r3, #1
 800a182:	73fb      	strb	r3, [r7, #15]
 800a184:	7bfb      	ldrb	r3, [r7, #15]
 800a186:	2b03      	cmp	r3, #3
 800a188:	d9ee      	bls.n	800a168 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800a18a:	7a3b      	ldrb	r3, [r7, #8]
 800a18c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a190:	2b00      	cmp	r3, #0
 800a192:	d001      	beq.n	800a198 <USER_SPI_initialize+0x120>
 800a194:	230c      	movs	r3, #12
 800a196:	e000      	b.n	800a19a <USER_SPI_initialize+0x122>
 800a198:	2304      	movs	r3, #4
 800a19a:	737b      	strb	r3, [r7, #13]
 800a19c:	e02c      	b.n	800a1f8 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800a19e:	2100      	movs	r1, #0
 800a1a0:	20a9      	movs	r0, #169	; 0xa9
 800a1a2:	f7ff fefa 	bl	8009f9a <send_cmd>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d804      	bhi.n	800a1b6 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800a1ac:	2302      	movs	r3, #2
 800a1ae:	737b      	strb	r3, [r7, #13]
 800a1b0:	23a9      	movs	r3, #169	; 0xa9
 800a1b2:	73bb      	strb	r3, [r7, #14]
 800a1b4:	e003      	b.n	800a1be <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	737b      	strb	r3, [r7, #13]
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800a1be:	bf00      	nop
 800a1c0:	f7ff fde2 	bl	8009d88 <SPI_Timer_Status>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d007      	beq.n	800a1da <USER_SPI_initialize+0x162>
 800a1ca:	7bbb      	ldrb	r3, [r7, #14]
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7ff fee3 	bl	8009f9a <send_cmd>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d1f2      	bne.n	800a1c0 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800a1da:	f7ff fdd5 	bl	8009d88 <SPI_Timer_Status>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d007      	beq.n	800a1f4 <USER_SPI_initialize+0x17c>
 800a1e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a1e8:	2010      	movs	r0, #16
 800a1ea:	f7ff fed6 	bl	8009f9a <send_cmd>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d001      	beq.n	800a1f8 <USER_SPI_initialize+0x180>
				ty = 0;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800a1f8:	4a14      	ldr	r2, [pc, #80]	; (800a24c <USER_SPI_initialize+0x1d4>)
 800a1fa:	7b7b      	ldrb	r3, [r7, #13]
 800a1fc:	7013      	strb	r3, [r2, #0]
	despiselect();
 800a1fe:	f7ff fe49 	bl	8009e94 <despiselect>

	if (ty) {			/* OK */
 800a202:	7b7b      	ldrb	r3, [r7, #13]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d012      	beq.n	800a22e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800a208:	4b0f      	ldr	r3, [pc, #60]	; (800a248 <USER_SPI_initialize+0x1d0>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a212:	4b0d      	ldr	r3, [pc, #52]	; (800a248 <USER_SPI_initialize+0x1d0>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f042 0210 	orr.w	r2, r2, #16
 800a21a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800a21c:	4b09      	ldr	r3, [pc, #36]	; (800a244 <USER_SPI_initialize+0x1cc>)
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	b2db      	uxtb	r3, r3
 800a222:	f023 0301 	bic.w	r3, r3, #1
 800a226:	b2da      	uxtb	r2, r3
 800a228:	4b06      	ldr	r3, [pc, #24]	; (800a244 <USER_SPI_initialize+0x1cc>)
 800a22a:	701a      	strb	r2, [r3, #0]
 800a22c:	e002      	b.n	800a234 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800a22e:	4b05      	ldr	r3, [pc, #20]	; (800a244 <USER_SPI_initialize+0x1cc>)
 800a230:	2201      	movs	r2, #1
 800a232:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800a234:	4b03      	ldr	r3, [pc, #12]	; (800a244 <USER_SPI_initialize+0x1cc>)
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	b2db      	uxtb	r3, r3
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3714      	adds	r7, #20
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd90      	pop	{r4, r7, pc}
 800a242:	bf00      	nop
 800a244:	20000048 	.word	0x20000048
 800a248:	20000b28 	.word	0x20000b28
 800a24c:	20000d24 	.word	0x20000d24

0800a250 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800a250:	b480      	push	{r7}
 800a252:	b083      	sub	sp, #12
 800a254:	af00      	add	r7, sp, #0
 800a256:	4603      	mov	r3, r0
 800a258:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800a25a:	79fb      	ldrb	r3, [r7, #7]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d001      	beq.n	800a264 <USER_SPI_status+0x14>
 800a260:	2301      	movs	r3, #1
 800a262:	e002      	b.n	800a26a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800a264:	4b04      	ldr	r3, [pc, #16]	; (800a278 <USER_SPI_status+0x28>)
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	b2db      	uxtb	r3, r3
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	370c      	adds	r7, #12
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr
 800a276:	bf00      	nop
 800a278:	20000048 	.word	0x20000048

0800a27c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	60b9      	str	r1, [r7, #8]
 800a284:	607a      	str	r2, [r7, #4]
 800a286:	603b      	str	r3, [r7, #0]
 800a288:	4603      	mov	r3, r0
 800a28a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a28c:	7bfb      	ldrb	r3, [r7, #15]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d102      	bne.n	800a298 <USER_SPI_read+0x1c>
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d101      	bne.n	800a29c <USER_SPI_read+0x20>
 800a298:	2304      	movs	r3, #4
 800a29a:	e04d      	b.n	800a338 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a29c:	4b28      	ldr	r3, [pc, #160]	; (800a340 <USER_SPI_read+0xc4>)
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	f003 0301 	and.w	r3, r3, #1
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d001      	beq.n	800a2ae <USER_SPI_read+0x32>
 800a2aa:	2303      	movs	r3, #3
 800a2ac:	e044      	b.n	800a338 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800a2ae:	4b25      	ldr	r3, [pc, #148]	; (800a344 <USER_SPI_read+0xc8>)
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	f003 0308 	and.w	r3, r3, #8
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d102      	bne.n	800a2c0 <USER_SPI_read+0x44>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	025b      	lsls	r3, r3, #9
 800a2be:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d111      	bne.n	800a2ea <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800a2c6:	6879      	ldr	r1, [r7, #4]
 800a2c8:	2011      	movs	r0, #17
 800a2ca:	f7ff fe66 	bl	8009f9a <send_cmd>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d129      	bne.n	800a328 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800a2d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a2d8:	68b8      	ldr	r0, [r7, #8]
 800a2da:	f7ff fe03 	bl	8009ee4 <rcvr_datablock>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d021      	beq.n	800a328 <USER_SPI_read+0xac>
			count = 0;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	603b      	str	r3, [r7, #0]
 800a2e8:	e01e      	b.n	800a328 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800a2ea:	6879      	ldr	r1, [r7, #4]
 800a2ec:	2012      	movs	r0, #18
 800a2ee:	f7ff fe54 	bl	8009f9a <send_cmd>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d117      	bne.n	800a328 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800a2f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a2fc:	68b8      	ldr	r0, [r7, #8]
 800a2fe:	f7ff fdf1 	bl	8009ee4 <rcvr_datablock>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d00a      	beq.n	800a31e <USER_SPI_read+0xa2>
				buff += 512;
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a30e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	3b01      	subs	r3, #1
 800a314:	603b      	str	r3, [r7, #0]
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d1ed      	bne.n	800a2f8 <USER_SPI_read+0x7c>
 800a31c:	e000      	b.n	800a320 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800a31e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800a320:	2100      	movs	r1, #0
 800a322:	200c      	movs	r0, #12
 800a324:	f7ff fe39 	bl	8009f9a <send_cmd>
		}
	}
	despiselect();
 800a328:	f7ff fdb4 	bl	8009e94 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	bf14      	ite	ne
 800a332:	2301      	movne	r3, #1
 800a334:	2300      	moveq	r3, #0
 800a336:	b2db      	uxtb	r3, r3
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3710      	adds	r7, #16
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	20000048 	.word	0x20000048
 800a344:	20000d24 	.word	0x20000d24

0800a348 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60b9      	str	r1, [r7, #8]
 800a350:	607a      	str	r2, [r7, #4]
 800a352:	603b      	str	r3, [r7, #0]
 800a354:	4603      	mov	r3, r0
 800a356:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a358:	7bfb      	ldrb	r3, [r7, #15]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d102      	bne.n	800a364 <USER_SPI_write+0x1c>
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d101      	bne.n	800a368 <USER_SPI_write+0x20>
 800a364:	2304      	movs	r3, #4
 800a366:	e063      	b.n	800a430 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800a368:	4b33      	ldr	r3, [pc, #204]	; (800a438 <USER_SPI_write+0xf0>)
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	f003 0301 	and.w	r3, r3, #1
 800a372:	2b00      	cmp	r3, #0
 800a374:	d001      	beq.n	800a37a <USER_SPI_write+0x32>
 800a376:	2303      	movs	r3, #3
 800a378:	e05a      	b.n	800a430 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800a37a:	4b2f      	ldr	r3, [pc, #188]	; (800a438 <USER_SPI_write+0xf0>)
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	f003 0304 	and.w	r3, r3, #4
 800a384:	2b00      	cmp	r3, #0
 800a386:	d001      	beq.n	800a38c <USER_SPI_write+0x44>
 800a388:	2302      	movs	r3, #2
 800a38a:	e051      	b.n	800a430 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800a38c:	4b2b      	ldr	r3, [pc, #172]	; (800a43c <USER_SPI_write+0xf4>)
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	f003 0308 	and.w	r3, r3, #8
 800a394:	2b00      	cmp	r3, #0
 800a396:	d102      	bne.n	800a39e <USER_SPI_write+0x56>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	025b      	lsls	r3, r3, #9
 800a39c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d110      	bne.n	800a3c6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800a3a4:	6879      	ldr	r1, [r7, #4]
 800a3a6:	2018      	movs	r0, #24
 800a3a8:	f7ff fdf7 	bl	8009f9a <send_cmd>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d136      	bne.n	800a420 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800a3b2:	21fe      	movs	r1, #254	; 0xfe
 800a3b4:	68b8      	ldr	r0, [r7, #8]
 800a3b6:	f7ff fdbe 	bl	8009f36 <xmit_datablock>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d02f      	beq.n	800a420 <USER_SPI_write+0xd8>
			count = 0;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	603b      	str	r3, [r7, #0]
 800a3c4:	e02c      	b.n	800a420 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800a3c6:	4b1d      	ldr	r3, [pc, #116]	; (800a43c <USER_SPI_write+0xf4>)
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	f003 0306 	and.w	r3, r3, #6
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d003      	beq.n	800a3da <USER_SPI_write+0x92>
 800a3d2:	6839      	ldr	r1, [r7, #0]
 800a3d4:	2097      	movs	r0, #151	; 0x97
 800a3d6:	f7ff fde0 	bl	8009f9a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800a3da:	6879      	ldr	r1, [r7, #4]
 800a3dc:	2019      	movs	r0, #25
 800a3de:	f7ff fddc 	bl	8009f9a <send_cmd>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d11b      	bne.n	800a420 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800a3e8:	21fc      	movs	r1, #252	; 0xfc
 800a3ea:	68b8      	ldr	r0, [r7, #8]
 800a3ec:	f7ff fda3 	bl	8009f36 <xmit_datablock>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d00a      	beq.n	800a40c <USER_SPI_write+0xc4>
				buff += 512;
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a3fc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	3b01      	subs	r3, #1
 800a402:	603b      	str	r3, [r7, #0]
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1ee      	bne.n	800a3e8 <USER_SPI_write+0xa0>
 800a40a:	e000      	b.n	800a40e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800a40c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800a40e:	21fd      	movs	r1, #253	; 0xfd
 800a410:	2000      	movs	r0, #0
 800a412:	f7ff fd90 	bl	8009f36 <xmit_datablock>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d101      	bne.n	800a420 <USER_SPI_write+0xd8>
 800a41c:	2301      	movs	r3, #1
 800a41e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800a420:	f7ff fd38 	bl	8009e94 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	bf14      	ite	ne
 800a42a:	2301      	movne	r3, #1
 800a42c:	2300      	moveq	r3, #0
 800a42e:	b2db      	uxtb	r3, r3
}
 800a430:	4618      	mov	r0, r3
 800a432:	3710      	adds	r7, #16
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	20000048 	.word	0x20000048
 800a43c:	20000d24 	.word	0x20000d24

0800a440 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b08c      	sub	sp, #48	; 0x30
 800a444:	af00      	add	r7, sp, #0
 800a446:	4603      	mov	r3, r0
 800a448:	603a      	str	r2, [r7, #0]
 800a44a:	71fb      	strb	r3, [r7, #7]
 800a44c:	460b      	mov	r3, r1
 800a44e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800a450:	79fb      	ldrb	r3, [r7, #7]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d001      	beq.n	800a45a <USER_SPI_ioctl+0x1a>
 800a456:	2304      	movs	r3, #4
 800a458:	e15a      	b.n	800a710 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a45a:	4baf      	ldr	r3, [pc, #700]	; (800a718 <USER_SPI_ioctl+0x2d8>)
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	f003 0301 	and.w	r3, r3, #1
 800a464:	2b00      	cmp	r3, #0
 800a466:	d001      	beq.n	800a46c <USER_SPI_ioctl+0x2c>
 800a468:	2303      	movs	r3, #3
 800a46a:	e151      	b.n	800a710 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800a46c:	2301      	movs	r3, #1
 800a46e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800a472:	79bb      	ldrb	r3, [r7, #6]
 800a474:	2b04      	cmp	r3, #4
 800a476:	f200 8136 	bhi.w	800a6e6 <USER_SPI_ioctl+0x2a6>
 800a47a:	a201      	add	r2, pc, #4	; (adr r2, 800a480 <USER_SPI_ioctl+0x40>)
 800a47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a480:	0800a495 	.word	0x0800a495
 800a484:	0800a4a9 	.word	0x0800a4a9
 800a488:	0800a6e7 	.word	0x0800a6e7
 800a48c:	0800a555 	.word	0x0800a555
 800a490:	0800a64b 	.word	0x0800a64b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800a494:	f7ff fd0c 	bl	8009eb0 <spiselect>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	f000 8127 	beq.w	800a6ee <USER_SPI_ioctl+0x2ae>
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800a4a6:	e122      	b.n	800a6ee <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	2009      	movs	r0, #9
 800a4ac:	f7ff fd75 	bl	8009f9a <send_cmd>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	f040 811d 	bne.w	800a6f2 <USER_SPI_ioctl+0x2b2>
 800a4b8:	f107 030c 	add.w	r3, r7, #12
 800a4bc:	2110      	movs	r1, #16
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7ff fd10 	bl	8009ee4 <rcvr_datablock>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	f000 8113 	beq.w	800a6f2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800a4cc:	7b3b      	ldrb	r3, [r7, #12]
 800a4ce:	099b      	lsrs	r3, r3, #6
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d111      	bne.n	800a4fa <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800a4d6:	7d7b      	ldrb	r3, [r7, #21]
 800a4d8:	461a      	mov	r2, r3
 800a4da:	7d3b      	ldrb	r3, [r7, #20]
 800a4dc:	021b      	lsls	r3, r3, #8
 800a4de:	4413      	add	r3, r2
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	7cfb      	ldrb	r3, [r7, #19]
 800a4e4:	041b      	lsls	r3, r3, #16
 800a4e6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800a4ea:	4413      	add	r3, r2
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	029a      	lsls	r2, r3, #10
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	601a      	str	r2, [r3, #0]
 800a4f8:	e028      	b.n	800a54c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800a4fa:	7c7b      	ldrb	r3, [r7, #17]
 800a4fc:	f003 030f 	and.w	r3, r3, #15
 800a500:	b2da      	uxtb	r2, r3
 800a502:	7dbb      	ldrb	r3, [r7, #22]
 800a504:	09db      	lsrs	r3, r3, #7
 800a506:	b2db      	uxtb	r3, r3
 800a508:	4413      	add	r3, r2
 800a50a:	b2da      	uxtb	r2, r3
 800a50c:	7d7b      	ldrb	r3, [r7, #21]
 800a50e:	005b      	lsls	r3, r3, #1
 800a510:	b2db      	uxtb	r3, r3
 800a512:	f003 0306 	and.w	r3, r3, #6
 800a516:	b2db      	uxtb	r3, r3
 800a518:	4413      	add	r3, r2
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	3302      	adds	r3, #2
 800a51e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800a522:	7d3b      	ldrb	r3, [r7, #20]
 800a524:	099b      	lsrs	r3, r3, #6
 800a526:	b2db      	uxtb	r3, r3
 800a528:	461a      	mov	r2, r3
 800a52a:	7cfb      	ldrb	r3, [r7, #19]
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	441a      	add	r2, r3
 800a530:	7cbb      	ldrb	r3, [r7, #18]
 800a532:	029b      	lsls	r3, r3, #10
 800a534:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a538:	4413      	add	r3, r2
 800a53a:	3301      	adds	r3, #1
 800a53c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800a53e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a542:	3b09      	subs	r3, #9
 800a544:	69fa      	ldr	r2, [r7, #28]
 800a546:	409a      	lsls	r2, r3
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800a54c:	2300      	movs	r3, #0
 800a54e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800a552:	e0ce      	b.n	800a6f2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800a554:	4b71      	ldr	r3, [pc, #452]	; (800a71c <USER_SPI_ioctl+0x2dc>)
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	f003 0304 	and.w	r3, r3, #4
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d031      	beq.n	800a5c4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800a560:	2100      	movs	r1, #0
 800a562:	208d      	movs	r0, #141	; 0x8d
 800a564:	f7ff fd19 	bl	8009f9a <send_cmd>
 800a568:	4603      	mov	r3, r0
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	f040 80c3 	bne.w	800a6f6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800a570:	20ff      	movs	r0, #255	; 0xff
 800a572:	f7ff fc1f 	bl	8009db4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800a576:	f107 030c 	add.w	r3, r7, #12
 800a57a:	2110      	movs	r1, #16
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7ff fcb1 	bl	8009ee4 <rcvr_datablock>
 800a582:	4603      	mov	r3, r0
 800a584:	2b00      	cmp	r3, #0
 800a586:	f000 80b6 	beq.w	800a6f6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800a58a:	2330      	movs	r3, #48	; 0x30
 800a58c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a590:	e007      	b.n	800a5a2 <USER_SPI_ioctl+0x162>
 800a592:	20ff      	movs	r0, #255	; 0xff
 800a594:	f7ff fc0e 	bl	8009db4 <xchg_spi>
 800a598:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a59c:	3b01      	subs	r3, #1
 800a59e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a5a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d1f3      	bne.n	800a592 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800a5aa:	7dbb      	ldrb	r3, [r7, #22]
 800a5ac:	091b      	lsrs	r3, r3, #4
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	2310      	movs	r3, #16
 800a5b4:	fa03 f202 	lsl.w	r2, r3, r2
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800a5c2:	e098      	b.n	800a6f6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800a5c4:	2100      	movs	r1, #0
 800a5c6:	2009      	movs	r0, #9
 800a5c8:	f7ff fce7 	bl	8009f9a <send_cmd>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f040 8091 	bne.w	800a6f6 <USER_SPI_ioctl+0x2b6>
 800a5d4:	f107 030c 	add.w	r3, r7, #12
 800a5d8:	2110      	movs	r1, #16
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7ff fc82 	bl	8009ee4 <rcvr_datablock>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f000 8087 	beq.w	800a6f6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800a5e8:	4b4c      	ldr	r3, [pc, #304]	; (800a71c <USER_SPI_ioctl+0x2dc>)
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	f003 0302 	and.w	r3, r3, #2
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d012      	beq.n	800a61a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800a5f4:	7dbb      	ldrb	r3, [r7, #22]
 800a5f6:	005b      	lsls	r3, r3, #1
 800a5f8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800a5fc:	7dfa      	ldrb	r2, [r7, #23]
 800a5fe:	09d2      	lsrs	r2, r2, #7
 800a600:	b2d2      	uxtb	r2, r2
 800a602:	4413      	add	r3, r2
 800a604:	1c5a      	adds	r2, r3, #1
 800a606:	7e7b      	ldrb	r3, [r7, #25]
 800a608:	099b      	lsrs	r3, r3, #6
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	3b01      	subs	r3, #1
 800a60e:	fa02 f303 	lsl.w	r3, r2, r3
 800a612:	461a      	mov	r2, r3
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	601a      	str	r2, [r3, #0]
 800a618:	e013      	b.n	800a642 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800a61a:	7dbb      	ldrb	r3, [r7, #22]
 800a61c:	109b      	asrs	r3, r3, #2
 800a61e:	b29b      	uxth	r3, r3
 800a620:	f003 031f 	and.w	r3, r3, #31
 800a624:	3301      	adds	r3, #1
 800a626:	7dfa      	ldrb	r2, [r7, #23]
 800a628:	00d2      	lsls	r2, r2, #3
 800a62a:	f002 0218 	and.w	r2, r2, #24
 800a62e:	7df9      	ldrb	r1, [r7, #23]
 800a630:	0949      	lsrs	r1, r1, #5
 800a632:	b2c9      	uxtb	r1, r1
 800a634:	440a      	add	r2, r1
 800a636:	3201      	adds	r2, #1
 800a638:	fb02 f303 	mul.w	r3, r2, r3
 800a63c:	461a      	mov	r2, r3
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800a642:	2300      	movs	r3, #0
 800a644:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800a648:	e055      	b.n	800a6f6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800a64a:	4b34      	ldr	r3, [pc, #208]	; (800a71c <USER_SPI_ioctl+0x2dc>)
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	f003 0306 	and.w	r3, r3, #6
 800a652:	2b00      	cmp	r3, #0
 800a654:	d051      	beq.n	800a6fa <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800a656:	f107 020c 	add.w	r2, r7, #12
 800a65a:	79fb      	ldrb	r3, [r7, #7]
 800a65c:	210b      	movs	r1, #11
 800a65e:	4618      	mov	r0, r3
 800a660:	f7ff feee 	bl	800a440 <USER_SPI_ioctl>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d149      	bne.n	800a6fe <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800a66a:	7b3b      	ldrb	r3, [r7, #12]
 800a66c:	099b      	lsrs	r3, r3, #6
 800a66e:	b2db      	uxtb	r3, r3
 800a670:	2b00      	cmp	r3, #0
 800a672:	d104      	bne.n	800a67e <USER_SPI_ioctl+0x23e>
 800a674:	7dbb      	ldrb	r3, [r7, #22]
 800a676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d041      	beq.n	800a702 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	623b      	str	r3, [r7, #32]
 800a682:	6a3b      	ldr	r3, [r7, #32]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	62bb      	str	r3, [r7, #40]	; 0x28
 800a688:	6a3b      	ldr	r3, [r7, #32]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800a68e:	4b23      	ldr	r3, [pc, #140]	; (800a71c <USER_SPI_ioctl+0x2dc>)
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	f003 0308 	and.w	r3, r3, #8
 800a696:	2b00      	cmp	r3, #0
 800a698:	d105      	bne.n	800a6a6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800a69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69c:	025b      	lsls	r3, r3, #9
 800a69e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a2:	025b      	lsls	r3, r3, #9
 800a6a4:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800a6a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a6a8:	2020      	movs	r0, #32
 800a6aa:	f7ff fc76 	bl	8009f9a <send_cmd>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d128      	bne.n	800a706 <USER_SPI_ioctl+0x2c6>
 800a6b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a6b6:	2021      	movs	r0, #33	; 0x21
 800a6b8:	f7ff fc6f 	bl	8009f9a <send_cmd>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d121      	bne.n	800a706 <USER_SPI_ioctl+0x2c6>
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	2026      	movs	r0, #38	; 0x26
 800a6c6:	f7ff fc68 	bl	8009f9a <send_cmd>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d11a      	bne.n	800a706 <USER_SPI_ioctl+0x2c6>
 800a6d0:	f247 5030 	movw	r0, #30000	; 0x7530
 800a6d4:	f7ff fbbb 	bl	8009e4e <wait_ready>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d013      	beq.n	800a706 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800a6de:	2300      	movs	r3, #0
 800a6e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800a6e4:	e00f      	b.n	800a706 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800a6e6:	2304      	movs	r3, #4
 800a6e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a6ec:	e00c      	b.n	800a708 <USER_SPI_ioctl+0x2c8>
		break;
 800a6ee:	bf00      	nop
 800a6f0:	e00a      	b.n	800a708 <USER_SPI_ioctl+0x2c8>
		break;
 800a6f2:	bf00      	nop
 800a6f4:	e008      	b.n	800a708 <USER_SPI_ioctl+0x2c8>
		break;
 800a6f6:	bf00      	nop
 800a6f8:	e006      	b.n	800a708 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800a6fa:	bf00      	nop
 800a6fc:	e004      	b.n	800a708 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800a6fe:	bf00      	nop
 800a700:	e002      	b.n	800a708 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800a702:	bf00      	nop
 800a704:	e000      	b.n	800a708 <USER_SPI_ioctl+0x2c8>
		break;
 800a706:	bf00      	nop
	}

	despiselect();
 800a708:	f7ff fbc4 	bl	8009e94 <despiselect>

	return res;
 800a70c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a710:	4618      	mov	r0, r3
 800a712:	3730      	adds	r7, #48	; 0x30
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	20000048 	.word	0x20000048
 800a71c:	20000d24 	.word	0x20000d24

0800a720 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	4603      	mov	r3, r0
 800a728:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a72a:	79fb      	ldrb	r3, [r7, #7]
 800a72c:	4a08      	ldr	r2, [pc, #32]	; (800a750 <disk_status+0x30>)
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	4413      	add	r3, r2
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	79fa      	ldrb	r2, [r7, #7]
 800a738:	4905      	ldr	r1, [pc, #20]	; (800a750 <disk_status+0x30>)
 800a73a:	440a      	add	r2, r1
 800a73c:	7a12      	ldrb	r2, [r2, #8]
 800a73e:	4610      	mov	r0, r2
 800a740:	4798      	blx	r3
 800a742:	4603      	mov	r3, r0
 800a744:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a746:	7bfb      	ldrb	r3, [r7, #15]
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}
 800a750:	20000d58 	.word	0x20000d58

0800a754 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	4603      	mov	r3, r0
 800a75c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a75e:	2300      	movs	r3, #0
 800a760:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a762:	79fb      	ldrb	r3, [r7, #7]
 800a764:	4a0d      	ldr	r2, [pc, #52]	; (800a79c <disk_initialize+0x48>)
 800a766:	5cd3      	ldrb	r3, [r2, r3]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d111      	bne.n	800a790 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a76c:	79fb      	ldrb	r3, [r7, #7]
 800a76e:	4a0b      	ldr	r2, [pc, #44]	; (800a79c <disk_initialize+0x48>)
 800a770:	2101      	movs	r1, #1
 800a772:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a774:	79fb      	ldrb	r3, [r7, #7]
 800a776:	4a09      	ldr	r2, [pc, #36]	; (800a79c <disk_initialize+0x48>)
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	4413      	add	r3, r2
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	79fa      	ldrb	r2, [r7, #7]
 800a782:	4906      	ldr	r1, [pc, #24]	; (800a79c <disk_initialize+0x48>)
 800a784:	440a      	add	r2, r1
 800a786:	7a12      	ldrb	r2, [r2, #8]
 800a788:	4610      	mov	r0, r2
 800a78a:	4798      	blx	r3
 800a78c:	4603      	mov	r3, r0
 800a78e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a790:	7bfb      	ldrb	r3, [r7, #15]
}
 800a792:	4618      	mov	r0, r3
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	20000d58 	.word	0x20000d58

0800a7a0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a7a0:	b590      	push	{r4, r7, lr}
 800a7a2:	b087      	sub	sp, #28
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	60b9      	str	r1, [r7, #8]
 800a7a8:	607a      	str	r2, [r7, #4]
 800a7aa:	603b      	str	r3, [r7, #0]
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a7b0:	7bfb      	ldrb	r3, [r7, #15]
 800a7b2:	4a0a      	ldr	r2, [pc, #40]	; (800a7dc <disk_read+0x3c>)
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	4413      	add	r3, r2
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	689c      	ldr	r4, [r3, #8]
 800a7bc:	7bfb      	ldrb	r3, [r7, #15]
 800a7be:	4a07      	ldr	r2, [pc, #28]	; (800a7dc <disk_read+0x3c>)
 800a7c0:	4413      	add	r3, r2
 800a7c2:	7a18      	ldrb	r0, [r3, #8]
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	68b9      	ldr	r1, [r7, #8]
 800a7ca:	47a0      	blx	r4
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	75fb      	strb	r3, [r7, #23]
  return res;
 800a7d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	371c      	adds	r7, #28
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd90      	pop	{r4, r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	20000d58 	.word	0x20000d58

0800a7e0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a7e0:	b590      	push	{r4, r7, lr}
 800a7e2:	b087      	sub	sp, #28
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	60b9      	str	r1, [r7, #8]
 800a7e8:	607a      	str	r2, [r7, #4]
 800a7ea:	603b      	str	r3, [r7, #0]
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a7f0:	7bfb      	ldrb	r3, [r7, #15]
 800a7f2:	4a0a      	ldr	r2, [pc, #40]	; (800a81c <disk_write+0x3c>)
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	4413      	add	r3, r2
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	68dc      	ldr	r4, [r3, #12]
 800a7fc:	7bfb      	ldrb	r3, [r7, #15]
 800a7fe:	4a07      	ldr	r2, [pc, #28]	; (800a81c <disk_write+0x3c>)
 800a800:	4413      	add	r3, r2
 800a802:	7a18      	ldrb	r0, [r3, #8]
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	68b9      	ldr	r1, [r7, #8]
 800a80a:	47a0      	blx	r4
 800a80c:	4603      	mov	r3, r0
 800a80e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a810:	7dfb      	ldrb	r3, [r7, #23]
}
 800a812:	4618      	mov	r0, r3
 800a814:	371c      	adds	r7, #28
 800a816:	46bd      	mov	sp, r7
 800a818:	bd90      	pop	{r4, r7, pc}
 800a81a:	bf00      	nop
 800a81c:	20000d58 	.word	0x20000d58

0800a820 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	4603      	mov	r3, r0
 800a828:	603a      	str	r2, [r7, #0]
 800a82a:	71fb      	strb	r3, [r7, #7]
 800a82c:	460b      	mov	r3, r1
 800a82e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a830:	79fb      	ldrb	r3, [r7, #7]
 800a832:	4a09      	ldr	r2, [pc, #36]	; (800a858 <disk_ioctl+0x38>)
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	4413      	add	r3, r2
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	79fa      	ldrb	r2, [r7, #7]
 800a83e:	4906      	ldr	r1, [pc, #24]	; (800a858 <disk_ioctl+0x38>)
 800a840:	440a      	add	r2, r1
 800a842:	7a10      	ldrb	r0, [r2, #8]
 800a844:	79b9      	ldrb	r1, [r7, #6]
 800a846:	683a      	ldr	r2, [r7, #0]
 800a848:	4798      	blx	r3
 800a84a:	4603      	mov	r3, r0
 800a84c:	73fb      	strb	r3, [r7, #15]
  return res;
 800a84e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a850:	4618      	mov	r0, r3
 800a852:	3710      	adds	r7, #16
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	20000d58 	.word	0x20000d58

0800a85c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a85c:	b480      	push	{r7}
 800a85e:	b085      	sub	sp, #20
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	3301      	adds	r3, #1
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a86c:	89fb      	ldrh	r3, [r7, #14]
 800a86e:	021b      	lsls	r3, r3, #8
 800a870:	b21a      	sxth	r2, r3
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	b21b      	sxth	r3, r3
 800a878:	4313      	orrs	r3, r2
 800a87a:	b21b      	sxth	r3, r3
 800a87c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a87e:	89fb      	ldrh	r3, [r7, #14]
}
 800a880:	4618      	mov	r0, r3
 800a882:	3714      	adds	r7, #20
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	3303      	adds	r3, #3
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	021b      	lsls	r3, r3, #8
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	3202      	adds	r2, #2
 800a8a4:	7812      	ldrb	r2, [r2, #0]
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	021b      	lsls	r3, r3, #8
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	3201      	adds	r2, #1
 800a8b2:	7812      	ldrb	r2, [r2, #0]
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	021b      	lsls	r3, r3, #8
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	7812      	ldrb	r2, [r2, #0]
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	60fb      	str	r3, [r7, #12]
	return rv;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3714      	adds	r7, #20
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr

0800a8d2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a8d2:	b480      	push	{r7}
 800a8d4:	b083      	sub	sp, #12
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
 800a8da:	460b      	mov	r3, r1
 800a8dc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	1c5a      	adds	r2, r3, #1
 800a8e2:	607a      	str	r2, [r7, #4]
 800a8e4:	887a      	ldrh	r2, [r7, #2]
 800a8e6:	b2d2      	uxtb	r2, r2
 800a8e8:	701a      	strb	r2, [r3, #0]
 800a8ea:	887b      	ldrh	r3, [r7, #2]
 800a8ec:	0a1b      	lsrs	r3, r3, #8
 800a8ee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	1c5a      	adds	r2, r3, #1
 800a8f4:	607a      	str	r2, [r7, #4]
 800a8f6:	887a      	ldrh	r2, [r7, #2]
 800a8f8:	b2d2      	uxtb	r2, r2
 800a8fa:	701a      	strb	r2, [r3, #0]
}
 800a8fc:	bf00      	nop
 800a8fe:	370c      	adds	r7, #12
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	1c5a      	adds	r2, r3, #1
 800a916:	607a      	str	r2, [r7, #4]
 800a918:	683a      	ldr	r2, [r7, #0]
 800a91a:	b2d2      	uxtb	r2, r2
 800a91c:	701a      	strb	r2, [r3, #0]
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	0a1b      	lsrs	r3, r3, #8
 800a922:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	1c5a      	adds	r2, r3, #1
 800a928:	607a      	str	r2, [r7, #4]
 800a92a:	683a      	ldr	r2, [r7, #0]
 800a92c:	b2d2      	uxtb	r2, r2
 800a92e:	701a      	strb	r2, [r3, #0]
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	0a1b      	lsrs	r3, r3, #8
 800a934:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	1c5a      	adds	r2, r3, #1
 800a93a:	607a      	str	r2, [r7, #4]
 800a93c:	683a      	ldr	r2, [r7, #0]
 800a93e:	b2d2      	uxtb	r2, r2
 800a940:	701a      	strb	r2, [r3, #0]
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	0a1b      	lsrs	r3, r3, #8
 800a946:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	1c5a      	adds	r2, r3, #1
 800a94c:	607a      	str	r2, [r7, #4]
 800a94e:	683a      	ldr	r2, [r7, #0]
 800a950:	b2d2      	uxtb	r2, r2
 800a952:	701a      	strb	r2, [r3, #0]
}
 800a954:	bf00      	nop
 800a956:	370c      	adds	r7, #12
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr

0800a960 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a960:	b480      	push	{r7}
 800a962:	b087      	sub	sp, #28
 800a964:	af00      	add	r7, sp, #0
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	60b9      	str	r1, [r7, #8]
 800a96a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00d      	beq.n	800a996 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a97a:	693a      	ldr	r2, [r7, #16]
 800a97c:	1c53      	adds	r3, r2, #1
 800a97e:	613b      	str	r3, [r7, #16]
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	1c59      	adds	r1, r3, #1
 800a984:	6179      	str	r1, [r7, #20]
 800a986:	7812      	ldrb	r2, [r2, #0]
 800a988:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	3b01      	subs	r3, #1
 800a98e:	607b      	str	r3, [r7, #4]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d1f1      	bne.n	800a97a <mem_cpy+0x1a>
	}
}
 800a996:	bf00      	nop
 800a998:	371c      	adds	r7, #28
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr

0800a9a2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a9a2:	b480      	push	{r7}
 800a9a4:	b087      	sub	sp, #28
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	60f8      	str	r0, [r7, #12]
 800a9aa:	60b9      	str	r1, [r7, #8]
 800a9ac:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	1c5a      	adds	r2, r3, #1
 800a9b6:	617a      	str	r2, [r7, #20]
 800a9b8:	68ba      	ldr	r2, [r7, #8]
 800a9ba:	b2d2      	uxtb	r2, r2
 800a9bc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	3b01      	subs	r3, #1
 800a9c2:	607b      	str	r3, [r7, #4]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d1f3      	bne.n	800a9b2 <mem_set+0x10>
}
 800a9ca:	bf00      	nop
 800a9cc:	bf00      	nop
 800a9ce:	371c      	adds	r7, #28
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr

0800a9d8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a9d8:	b480      	push	{r7}
 800a9da:	b089      	sub	sp, #36	; 0x24
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	61fb      	str	r3, [r7, #28]
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a9f0:	69fb      	ldr	r3, [r7, #28]
 800a9f2:	1c5a      	adds	r2, r3, #1
 800a9f4:	61fa      	str	r2, [r7, #28]
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	1c5a      	adds	r2, r3, #1
 800a9fe:	61ba      	str	r2, [r7, #24]
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	1acb      	subs	r3, r1, r3
 800aa04:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	3b01      	subs	r3, #1
 800aa0a:	607b      	str	r3, [r7, #4]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d002      	beq.n	800aa18 <mem_cmp+0x40>
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d0eb      	beq.n	800a9f0 <mem_cmp+0x18>

	return r;
 800aa18:	697b      	ldr	r3, [r7, #20]
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3724      	adds	r7, #36	; 0x24
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr

0800aa26 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800aa26:	b480      	push	{r7}
 800aa28:	b083      	sub	sp, #12
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
 800aa2e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800aa30:	e002      	b.n	800aa38 <chk_chr+0x12>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	3301      	adds	r3, #1
 800aa36:	607b      	str	r3, [r7, #4]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d005      	beq.n	800aa4c <chk_chr+0x26>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	461a      	mov	r2, r3
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d1f2      	bne.n	800aa32 <chk_chr+0xc>
	return *str;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	781b      	ldrb	r3, [r3, #0]
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	370c      	adds	r7, #12
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr

0800aa5c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d009      	beq.n	800aa7e <lock_fs+0x22>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f002 fa92 	bl	800cf98 <ff_req_grant>
 800aa74:	4603      	mov	r3, r0
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d001      	beq.n	800aa7e <lock_fs+0x22>
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	e000      	b.n	800aa80 <lock_fs+0x24>
 800aa7e:	2300      	movs	r3, #0
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3708      	adds	r7, #8
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	460b      	mov	r3, r1
 800aa92:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d00d      	beq.n	800aab6 <unlock_fs+0x2e>
 800aa9a:	78fb      	ldrb	r3, [r7, #3]
 800aa9c:	2b0c      	cmp	r3, #12
 800aa9e:	d00a      	beq.n	800aab6 <unlock_fs+0x2e>
 800aaa0:	78fb      	ldrb	r3, [r7, #3]
 800aaa2:	2b0b      	cmp	r3, #11
 800aaa4:	d007      	beq.n	800aab6 <unlock_fs+0x2e>
 800aaa6:	78fb      	ldrb	r3, [r7, #3]
 800aaa8:	2b0f      	cmp	r3, #15
 800aaaa:	d004      	beq.n	800aab6 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	68db      	ldr	r3, [r3, #12]
 800aab0:	4618      	mov	r0, r3
 800aab2:	f002 fa86 	bl	800cfc2 <ff_rel_grant>
	}
}
 800aab6:	bf00      	nop
 800aab8:	3708      	adds	r7, #8
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
	...

0800aac0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b085      	sub	sp, #20
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aaca:	2300      	movs	r3, #0
 800aacc:	60bb      	str	r3, [r7, #8]
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	60fb      	str	r3, [r7, #12]
 800aad2:	e029      	b.n	800ab28 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800aad4:	4a27      	ldr	r2, [pc, #156]	; (800ab74 <chk_lock+0xb4>)
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	011b      	lsls	r3, r3, #4
 800aada:	4413      	add	r3, r2
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d01d      	beq.n	800ab1e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aae2:	4a24      	ldr	r2, [pc, #144]	; (800ab74 <chk_lock+0xb4>)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	011b      	lsls	r3, r3, #4
 800aae8:	4413      	add	r3, r2
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d116      	bne.n	800ab22 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800aaf4:	4a1f      	ldr	r2, [pc, #124]	; (800ab74 <chk_lock+0xb4>)
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	011b      	lsls	r3, r3, #4
 800aafa:	4413      	add	r3, r2
 800aafc:	3304      	adds	r3, #4
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d10c      	bne.n	800ab22 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ab08:	4a1a      	ldr	r2, [pc, #104]	; (800ab74 <chk_lock+0xb4>)
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	011b      	lsls	r3, r3, #4
 800ab0e:	4413      	add	r3, r2
 800ab10:	3308      	adds	r3, #8
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d102      	bne.n	800ab22 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ab1c:	e007      	b.n	800ab2e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	3301      	adds	r3, #1
 800ab26:	60fb      	str	r3, [r7, #12]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d9d2      	bls.n	800aad4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2b02      	cmp	r3, #2
 800ab32:	d109      	bne.n	800ab48 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d102      	bne.n	800ab40 <chk_lock+0x80>
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	2b02      	cmp	r3, #2
 800ab3e:	d101      	bne.n	800ab44 <chk_lock+0x84>
 800ab40:	2300      	movs	r3, #0
 800ab42:	e010      	b.n	800ab66 <chk_lock+0xa6>
 800ab44:	2312      	movs	r3, #18
 800ab46:	e00e      	b.n	800ab66 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d108      	bne.n	800ab60 <chk_lock+0xa0>
 800ab4e:	4a09      	ldr	r2, [pc, #36]	; (800ab74 <chk_lock+0xb4>)
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	011b      	lsls	r3, r3, #4
 800ab54:	4413      	add	r3, r2
 800ab56:	330c      	adds	r3, #12
 800ab58:	881b      	ldrh	r3, [r3, #0]
 800ab5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab5e:	d101      	bne.n	800ab64 <chk_lock+0xa4>
 800ab60:	2310      	movs	r3, #16
 800ab62:	e000      	b.n	800ab66 <chk_lock+0xa6>
 800ab64:	2300      	movs	r3, #0
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3714      	adds	r7, #20
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab70:	4770      	bx	lr
 800ab72:	bf00      	nop
 800ab74:	20000d38 	.word	0x20000d38

0800ab78 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	607b      	str	r3, [r7, #4]
 800ab82:	e002      	b.n	800ab8a <enq_lock+0x12>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	3301      	adds	r3, #1
 800ab88:	607b      	str	r3, [r7, #4]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d806      	bhi.n	800ab9e <enq_lock+0x26>
 800ab90:	4a09      	ldr	r2, [pc, #36]	; (800abb8 <enq_lock+0x40>)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	011b      	lsls	r3, r3, #4
 800ab96:	4413      	add	r3, r2
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d1f2      	bne.n	800ab84 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	bf14      	ite	ne
 800aba4:	2301      	movne	r3, #1
 800aba6:	2300      	moveq	r3, #0
 800aba8:	b2db      	uxtb	r3, r3
}
 800abaa:	4618      	mov	r0, r3
 800abac:	370c      	adds	r7, #12
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr
 800abb6:	bf00      	nop
 800abb8:	20000d38 	.word	0x20000d38

0800abbc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b085      	sub	sp, #20
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800abc6:	2300      	movs	r3, #0
 800abc8:	60fb      	str	r3, [r7, #12]
 800abca:	e01f      	b.n	800ac0c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800abcc:	4a41      	ldr	r2, [pc, #260]	; (800acd4 <inc_lock+0x118>)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	011b      	lsls	r3, r3, #4
 800abd2:	4413      	add	r3, r2
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d113      	bne.n	800ac06 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800abde:	4a3d      	ldr	r2, [pc, #244]	; (800acd4 <inc_lock+0x118>)
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	011b      	lsls	r3, r3, #4
 800abe4:	4413      	add	r3, r2
 800abe6:	3304      	adds	r3, #4
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800abee:	429a      	cmp	r2, r3
 800abf0:	d109      	bne.n	800ac06 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800abf2:	4a38      	ldr	r2, [pc, #224]	; (800acd4 <inc_lock+0x118>)
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	011b      	lsls	r3, r3, #4
 800abf8:	4413      	add	r3, r2
 800abfa:	3308      	adds	r3, #8
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d006      	beq.n	800ac14 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	60fb      	str	r3, [r7, #12]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d9dc      	bls.n	800abcc <inc_lock+0x10>
 800ac12:	e000      	b.n	800ac16 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ac14:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2b02      	cmp	r3, #2
 800ac1a:	d132      	bne.n	800ac82 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	60fb      	str	r3, [r7, #12]
 800ac20:	e002      	b.n	800ac28 <inc_lock+0x6c>
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	3301      	adds	r3, #1
 800ac26:	60fb      	str	r3, [r7, #12]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d806      	bhi.n	800ac3c <inc_lock+0x80>
 800ac2e:	4a29      	ldr	r2, [pc, #164]	; (800acd4 <inc_lock+0x118>)
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	011b      	lsls	r3, r3, #4
 800ac34:	4413      	add	r3, r2
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d1f2      	bne.n	800ac22 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2b02      	cmp	r3, #2
 800ac40:	d101      	bne.n	800ac46 <inc_lock+0x8a>
 800ac42:	2300      	movs	r3, #0
 800ac44:	e040      	b.n	800acc8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	4922      	ldr	r1, [pc, #136]	; (800acd4 <inc_lock+0x118>)
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	011b      	lsls	r3, r3, #4
 800ac50:	440b      	add	r3, r1
 800ac52:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	689a      	ldr	r2, [r3, #8]
 800ac58:	491e      	ldr	r1, [pc, #120]	; (800acd4 <inc_lock+0x118>)
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	011b      	lsls	r3, r3, #4
 800ac5e:	440b      	add	r3, r1
 800ac60:	3304      	adds	r3, #4
 800ac62:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	695a      	ldr	r2, [r3, #20]
 800ac68:	491a      	ldr	r1, [pc, #104]	; (800acd4 <inc_lock+0x118>)
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	011b      	lsls	r3, r3, #4
 800ac6e:	440b      	add	r3, r1
 800ac70:	3308      	adds	r3, #8
 800ac72:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ac74:	4a17      	ldr	r2, [pc, #92]	; (800acd4 <inc_lock+0x118>)
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	011b      	lsls	r3, r3, #4
 800ac7a:	4413      	add	r3, r2
 800ac7c:	330c      	adds	r3, #12
 800ac7e:	2200      	movs	r2, #0
 800ac80:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d009      	beq.n	800ac9c <inc_lock+0xe0>
 800ac88:	4a12      	ldr	r2, [pc, #72]	; (800acd4 <inc_lock+0x118>)
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	011b      	lsls	r3, r3, #4
 800ac8e:	4413      	add	r3, r2
 800ac90:	330c      	adds	r3, #12
 800ac92:	881b      	ldrh	r3, [r3, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d001      	beq.n	800ac9c <inc_lock+0xe0>
 800ac98:	2300      	movs	r3, #0
 800ac9a:	e015      	b.n	800acc8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d108      	bne.n	800acb4 <inc_lock+0xf8>
 800aca2:	4a0c      	ldr	r2, [pc, #48]	; (800acd4 <inc_lock+0x118>)
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	011b      	lsls	r3, r3, #4
 800aca8:	4413      	add	r3, r2
 800acaa:	330c      	adds	r3, #12
 800acac:	881b      	ldrh	r3, [r3, #0]
 800acae:	3301      	adds	r3, #1
 800acb0:	b29a      	uxth	r2, r3
 800acb2:	e001      	b.n	800acb8 <inc_lock+0xfc>
 800acb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800acb8:	4906      	ldr	r1, [pc, #24]	; (800acd4 <inc_lock+0x118>)
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	011b      	lsls	r3, r3, #4
 800acbe:	440b      	add	r3, r1
 800acc0:	330c      	adds	r3, #12
 800acc2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	3301      	adds	r3, #1
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3714      	adds	r7, #20
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr
 800acd4:	20000d38 	.word	0x20000d38

0800acd8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800acd8:	b480      	push	{r7}
 800acda:	b085      	sub	sp, #20
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	3b01      	subs	r3, #1
 800ace4:	607b      	str	r3, [r7, #4]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d825      	bhi.n	800ad38 <dec_lock+0x60>
		n = Files[i].ctr;
 800acec:	4a17      	ldr	r2, [pc, #92]	; (800ad4c <dec_lock+0x74>)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	011b      	lsls	r3, r3, #4
 800acf2:	4413      	add	r3, r2
 800acf4:	330c      	adds	r3, #12
 800acf6:	881b      	ldrh	r3, [r3, #0]
 800acf8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800acfa:	89fb      	ldrh	r3, [r7, #14]
 800acfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad00:	d101      	bne.n	800ad06 <dec_lock+0x2e>
 800ad02:	2300      	movs	r3, #0
 800ad04:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ad06:	89fb      	ldrh	r3, [r7, #14]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d002      	beq.n	800ad12 <dec_lock+0x3a>
 800ad0c:	89fb      	ldrh	r3, [r7, #14]
 800ad0e:	3b01      	subs	r3, #1
 800ad10:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ad12:	4a0e      	ldr	r2, [pc, #56]	; (800ad4c <dec_lock+0x74>)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	011b      	lsls	r3, r3, #4
 800ad18:	4413      	add	r3, r2
 800ad1a:	330c      	adds	r3, #12
 800ad1c:	89fa      	ldrh	r2, [r7, #14]
 800ad1e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ad20:	89fb      	ldrh	r3, [r7, #14]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d105      	bne.n	800ad32 <dec_lock+0x5a>
 800ad26:	4a09      	ldr	r2, [pc, #36]	; (800ad4c <dec_lock+0x74>)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	011b      	lsls	r3, r3, #4
 800ad2c:	4413      	add	r3, r2
 800ad2e:	2200      	movs	r2, #0
 800ad30:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ad32:	2300      	movs	r3, #0
 800ad34:	737b      	strb	r3, [r7, #13]
 800ad36:	e001      	b.n	800ad3c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ad38:	2302      	movs	r3, #2
 800ad3a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ad3c:	7b7b      	ldrb	r3, [r7, #13]
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3714      	adds	r7, #20
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr
 800ad4a:	bf00      	nop
 800ad4c:	20000d38 	.word	0x20000d38

0800ad50 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b085      	sub	sp, #20
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ad58:	2300      	movs	r3, #0
 800ad5a:	60fb      	str	r3, [r7, #12]
 800ad5c:	e010      	b.n	800ad80 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ad5e:	4a0d      	ldr	r2, [pc, #52]	; (800ad94 <clear_lock+0x44>)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	011b      	lsls	r3, r3, #4
 800ad64:	4413      	add	r3, r2
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	687a      	ldr	r2, [r7, #4]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d105      	bne.n	800ad7a <clear_lock+0x2a>
 800ad6e:	4a09      	ldr	r2, [pc, #36]	; (800ad94 <clear_lock+0x44>)
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	011b      	lsls	r3, r3, #4
 800ad74:	4413      	add	r3, r2
 800ad76:	2200      	movs	r2, #0
 800ad78:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	60fb      	str	r3, [r7, #12]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d9eb      	bls.n	800ad5e <clear_lock+0xe>
	}
}
 800ad86:	bf00      	nop
 800ad88:	bf00      	nop
 800ad8a:	3714      	adds	r7, #20
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr
 800ad94:	20000d38 	.word	0x20000d38

0800ad98 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b086      	sub	sp, #24
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ada0:	2300      	movs	r3, #0
 800ada2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	78db      	ldrb	r3, [r3, #3]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d034      	beq.n	800ae16 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adb0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	7858      	ldrb	r0, [r3, #1]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800adbc:	2301      	movs	r3, #1
 800adbe:	697a      	ldr	r2, [r7, #20]
 800adc0:	f7ff fd0e 	bl	800a7e0 <disk_write>
 800adc4:	4603      	mov	r3, r0
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d002      	beq.n	800add0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800adca:	2301      	movs	r3, #1
 800adcc:	73fb      	strb	r3, [r7, #15]
 800adce:	e022      	b.n	800ae16 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2200      	movs	r2, #0
 800add4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adda:	697a      	ldr	r2, [r7, #20]
 800addc:	1ad2      	subs	r2, r2, r3
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	69db      	ldr	r3, [r3, #28]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d217      	bcs.n	800ae16 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	789b      	ldrb	r3, [r3, #2]
 800adea:	613b      	str	r3, [r7, #16]
 800adec:	e010      	b.n	800ae10 <sync_window+0x78>
					wsect += fs->fsize;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	69db      	ldr	r3, [r3, #28]
 800adf2:	697a      	ldr	r2, [r7, #20]
 800adf4:	4413      	add	r3, r2
 800adf6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	7858      	ldrb	r0, [r3, #1]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ae02:	2301      	movs	r3, #1
 800ae04:	697a      	ldr	r2, [r7, #20]
 800ae06:	f7ff fceb 	bl	800a7e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	3b01      	subs	r3, #1
 800ae0e:	613b      	str	r3, [r7, #16]
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d8eb      	bhi.n	800adee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ae16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3718      	adds	r7, #24
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae32:	683a      	ldr	r2, [r7, #0]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d01b      	beq.n	800ae70 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f7ff ffad 	bl	800ad98 <sync_window>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ae42:	7bfb      	ldrb	r3, [r7, #15]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d113      	bne.n	800ae70 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	7858      	ldrb	r0, [r3, #1]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ae52:	2301      	movs	r3, #1
 800ae54:	683a      	ldr	r2, [r7, #0]
 800ae56:	f7ff fca3 	bl	800a7a0 <disk_read>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d004      	beq.n	800ae6a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ae60:	f04f 33ff 	mov.w	r3, #4294967295
 800ae64:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ae66:	2301      	movs	r3, #1
 800ae68:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	683a      	ldr	r2, [r7, #0]
 800ae6e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800ae70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3710      	adds	r7, #16
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
	...

0800ae7c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f7ff ff87 	bl	800ad98 <sync_window>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ae8e:	7bfb      	ldrb	r3, [r7, #15]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d158      	bne.n	800af46 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	2b03      	cmp	r3, #3
 800ae9a:	d148      	bne.n	800af2e <sync_fs+0xb2>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	791b      	ldrb	r3, [r3, #4]
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d144      	bne.n	800af2e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	3334      	adds	r3, #52	; 0x34
 800aea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aeac:	2100      	movs	r1, #0
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7ff fd77 	bl	800a9a2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	3334      	adds	r3, #52	; 0x34
 800aeb8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aebc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7ff fd06 	bl	800a8d2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	3334      	adds	r3, #52	; 0x34
 800aeca:	4921      	ldr	r1, [pc, #132]	; (800af50 <sync_fs+0xd4>)
 800aecc:	4618      	mov	r0, r3
 800aece:	f7ff fd1b 	bl	800a908 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	3334      	adds	r3, #52	; 0x34
 800aed6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800aeda:	491e      	ldr	r1, [pc, #120]	; (800af54 <sync_fs+0xd8>)
 800aedc:	4618      	mov	r0, r3
 800aede:	f7ff fd13 	bl	800a908 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	3334      	adds	r3, #52	; 0x34
 800aee6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	695b      	ldr	r3, [r3, #20]
 800aeee:	4619      	mov	r1, r3
 800aef0:	4610      	mov	r0, r2
 800aef2:	f7ff fd09 	bl	800a908 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	3334      	adds	r3, #52	; 0x34
 800aefa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	691b      	ldr	r3, [r3, #16]
 800af02:	4619      	mov	r1, r3
 800af04:	4610      	mov	r0, r2
 800af06:	f7ff fcff 	bl	800a908 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6a1b      	ldr	r3, [r3, #32]
 800af0e:	1c5a      	adds	r2, r3, #1
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	7858      	ldrb	r0, [r3, #1]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af22:	2301      	movs	r3, #1
 800af24:	f7ff fc5c 	bl	800a7e0 <disk_write>
			fs->fsi_flag = 0;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	785b      	ldrb	r3, [r3, #1]
 800af32:	2200      	movs	r2, #0
 800af34:	2100      	movs	r1, #0
 800af36:	4618      	mov	r0, r3
 800af38:	f7ff fc72 	bl	800a820 <disk_ioctl>
 800af3c:	4603      	mov	r3, r0
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d001      	beq.n	800af46 <sync_fs+0xca>
 800af42:	2301      	movs	r3, #1
 800af44:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800af46:	7bfb      	ldrb	r3, [r7, #15]
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3710      	adds	r7, #16
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	41615252 	.word	0x41615252
 800af54:	61417272 	.word	0x61417272

0800af58 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800af58:	b480      	push	{r7}
 800af5a:	b083      	sub	sp, #12
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	3b02      	subs	r3, #2
 800af66:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	699b      	ldr	r3, [r3, #24]
 800af6c:	3b02      	subs	r3, #2
 800af6e:	683a      	ldr	r2, [r7, #0]
 800af70:	429a      	cmp	r2, r3
 800af72:	d301      	bcc.n	800af78 <clust2sect+0x20>
 800af74:	2300      	movs	r3, #0
 800af76:	e008      	b.n	800af8a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	895b      	ldrh	r3, [r3, #10]
 800af7c:	461a      	mov	r2, r3
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	fb03 f202 	mul.w	r2, r3, r2
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af88:	4413      	add	r3, r2
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	370c      	adds	r7, #12
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr

0800af96 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800af96:	b580      	push	{r7, lr}
 800af98:	b086      	sub	sp, #24
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
 800af9e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d904      	bls.n	800afb6 <get_fat+0x20>
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	699b      	ldr	r3, [r3, #24]
 800afb0:	683a      	ldr	r2, [r7, #0]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d302      	bcc.n	800afbc <get_fat+0x26>
		val = 1;	/* Internal error */
 800afb6:	2301      	movs	r3, #1
 800afb8:	617b      	str	r3, [r7, #20]
 800afba:	e08f      	b.n	800b0dc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800afbc:	f04f 33ff 	mov.w	r3, #4294967295
 800afc0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	2b03      	cmp	r3, #3
 800afc8:	d062      	beq.n	800b090 <get_fat+0xfa>
 800afca:	2b03      	cmp	r3, #3
 800afcc:	dc7c      	bgt.n	800b0c8 <get_fat+0x132>
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d002      	beq.n	800afd8 <get_fat+0x42>
 800afd2:	2b02      	cmp	r3, #2
 800afd4:	d042      	beq.n	800b05c <get_fat+0xc6>
 800afd6:	e077      	b.n	800b0c8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	60fb      	str	r3, [r7, #12]
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	085b      	lsrs	r3, r3, #1
 800afe0:	68fa      	ldr	r2, [r7, #12]
 800afe2:	4413      	add	r3, r2
 800afe4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	0a5b      	lsrs	r3, r3, #9
 800afee:	4413      	add	r3, r2
 800aff0:	4619      	mov	r1, r3
 800aff2:	6938      	ldr	r0, [r7, #16]
 800aff4:	f7ff ff14 	bl	800ae20 <move_window>
 800aff8:	4603      	mov	r3, r0
 800affa:	2b00      	cmp	r3, #0
 800affc:	d167      	bne.n	800b0ce <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	1c5a      	adds	r2, r3, #1
 800b002:	60fa      	str	r2, [r7, #12]
 800b004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b008:	693a      	ldr	r2, [r7, #16]
 800b00a:	4413      	add	r3, r2
 800b00c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b010:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	0a5b      	lsrs	r3, r3, #9
 800b01a:	4413      	add	r3, r2
 800b01c:	4619      	mov	r1, r3
 800b01e:	6938      	ldr	r0, [r7, #16]
 800b020:	f7ff fefe 	bl	800ae20 <move_window>
 800b024:	4603      	mov	r3, r0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d153      	bne.n	800b0d2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b030:	693a      	ldr	r2, [r7, #16]
 800b032:	4413      	add	r3, r2
 800b034:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b038:	021b      	lsls	r3, r3, #8
 800b03a:	461a      	mov	r2, r3
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	4313      	orrs	r3, r2
 800b040:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	f003 0301 	and.w	r3, r3, #1
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d002      	beq.n	800b052 <get_fat+0xbc>
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	091b      	lsrs	r3, r3, #4
 800b050:	e002      	b.n	800b058 <get_fat+0xc2>
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b058:	617b      	str	r3, [r7, #20]
			break;
 800b05a:	e03f      	b.n	800b0dc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	0a1b      	lsrs	r3, r3, #8
 800b064:	4413      	add	r3, r2
 800b066:	4619      	mov	r1, r3
 800b068:	6938      	ldr	r0, [r7, #16]
 800b06a:	f7ff fed9 	bl	800ae20 <move_window>
 800b06e:	4603      	mov	r3, r0
 800b070:	2b00      	cmp	r3, #0
 800b072:	d130      	bne.n	800b0d6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	005b      	lsls	r3, r3, #1
 800b07e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b082:	4413      	add	r3, r2
 800b084:	4618      	mov	r0, r3
 800b086:	f7ff fbe9 	bl	800a85c <ld_word>
 800b08a:	4603      	mov	r3, r0
 800b08c:	617b      	str	r3, [r7, #20]
			break;
 800b08e:	e025      	b.n	800b0dc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	09db      	lsrs	r3, r3, #7
 800b098:	4413      	add	r3, r2
 800b09a:	4619      	mov	r1, r3
 800b09c:	6938      	ldr	r0, [r7, #16]
 800b09e:	f7ff febf 	bl	800ae20 <move_window>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d118      	bne.n	800b0da <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b0b6:	4413      	add	r3, r2
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f7ff fbe7 	bl	800a88c <ld_dword>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b0c4:	617b      	str	r3, [r7, #20]
			break;
 800b0c6:	e009      	b.n	800b0dc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	617b      	str	r3, [r7, #20]
 800b0cc:	e006      	b.n	800b0dc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b0ce:	bf00      	nop
 800b0d0:	e004      	b.n	800b0dc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b0d2:	bf00      	nop
 800b0d4:	e002      	b.n	800b0dc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b0d6:	bf00      	nop
 800b0d8:	e000      	b.n	800b0dc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b0da:	bf00      	nop
		}
	}

	return val;
 800b0dc:	697b      	ldr	r3, [r7, #20]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3718      	adds	r7, #24
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b0e6:	b590      	push	{r4, r7, lr}
 800b0e8:	b089      	sub	sp, #36	; 0x24
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	60f8      	str	r0, [r7, #12]
 800b0ee:	60b9      	str	r1, [r7, #8]
 800b0f0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b0f2:	2302      	movs	r3, #2
 800b0f4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	f240 80d2 	bls.w	800b2a2 <put_fat+0x1bc>
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	699b      	ldr	r3, [r3, #24]
 800b102:	68ba      	ldr	r2, [r7, #8]
 800b104:	429a      	cmp	r2, r3
 800b106:	f080 80cc 	bcs.w	800b2a2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	2b03      	cmp	r3, #3
 800b110:	f000 8096 	beq.w	800b240 <put_fat+0x15a>
 800b114:	2b03      	cmp	r3, #3
 800b116:	f300 80cd 	bgt.w	800b2b4 <put_fat+0x1ce>
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d002      	beq.n	800b124 <put_fat+0x3e>
 800b11e:	2b02      	cmp	r3, #2
 800b120:	d06e      	beq.n	800b200 <put_fat+0x11a>
 800b122:	e0c7      	b.n	800b2b4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	61bb      	str	r3, [r7, #24]
 800b128:	69bb      	ldr	r3, [r7, #24]
 800b12a:	085b      	lsrs	r3, r3, #1
 800b12c:	69ba      	ldr	r2, [r7, #24]
 800b12e:	4413      	add	r3, r2
 800b130:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	0a5b      	lsrs	r3, r3, #9
 800b13a:	4413      	add	r3, r2
 800b13c:	4619      	mov	r1, r3
 800b13e:	68f8      	ldr	r0, [r7, #12]
 800b140:	f7ff fe6e 	bl	800ae20 <move_window>
 800b144:	4603      	mov	r3, r0
 800b146:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b148:	7ffb      	ldrb	r3, [r7, #31]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	f040 80ab 	bne.w	800b2a6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	1c59      	adds	r1, r3, #1
 800b15a:	61b9      	str	r1, [r7, #24]
 800b15c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b160:	4413      	add	r3, r2
 800b162:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	f003 0301 	and.w	r3, r3, #1
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d00d      	beq.n	800b18a <put_fat+0xa4>
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	b25b      	sxtb	r3, r3
 800b174:	f003 030f 	and.w	r3, r3, #15
 800b178:	b25a      	sxtb	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	011b      	lsls	r3, r3, #4
 800b180:	b25b      	sxtb	r3, r3
 800b182:	4313      	orrs	r3, r2
 800b184:	b25b      	sxtb	r3, r3
 800b186:	b2db      	uxtb	r3, r3
 800b188:	e001      	b.n	800b18e <put_fat+0xa8>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	b2db      	uxtb	r3, r3
 800b18e:	697a      	ldr	r2, [r7, #20]
 800b190:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2201      	movs	r2, #1
 800b196:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	0a5b      	lsrs	r3, r3, #9
 800b1a0:	4413      	add	r3, r2
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	68f8      	ldr	r0, [r7, #12]
 800b1a6:	f7ff fe3b 	bl	800ae20 <move_window>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b1ae:	7ffb      	ldrb	r3, [r7, #31]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d17a      	bne.n	800b2aa <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1c0:	4413      	add	r3, r2
 800b1c2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	f003 0301 	and.w	r3, r3, #1
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d003      	beq.n	800b1d6 <put_fat+0xf0>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	091b      	lsrs	r3, r3, #4
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	e00e      	b.n	800b1f4 <put_fat+0x10e>
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	b25b      	sxtb	r3, r3
 800b1dc:	f023 030f 	bic.w	r3, r3, #15
 800b1e0:	b25a      	sxtb	r2, r3
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	0a1b      	lsrs	r3, r3, #8
 800b1e6:	b25b      	sxtb	r3, r3
 800b1e8:	f003 030f 	and.w	r3, r3, #15
 800b1ec:	b25b      	sxtb	r3, r3
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	b25b      	sxtb	r3, r3
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	697a      	ldr	r2, [r7, #20]
 800b1f6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	70da      	strb	r2, [r3, #3]
			break;
 800b1fe:	e059      	b.n	800b2b4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	0a1b      	lsrs	r3, r3, #8
 800b208:	4413      	add	r3, r2
 800b20a:	4619      	mov	r1, r3
 800b20c:	68f8      	ldr	r0, [r7, #12]
 800b20e:	f7ff fe07 	bl	800ae20 <move_window>
 800b212:	4603      	mov	r3, r0
 800b214:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b216:	7ffb      	ldrb	r3, [r7, #31]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d148      	bne.n	800b2ae <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	005b      	lsls	r3, r3, #1
 800b226:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b22a:	4413      	add	r3, r2
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	b292      	uxth	r2, r2
 800b230:	4611      	mov	r1, r2
 800b232:	4618      	mov	r0, r3
 800b234:	f7ff fb4d 	bl	800a8d2 <st_word>
			fs->wflag = 1;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2201      	movs	r2, #1
 800b23c:	70da      	strb	r2, [r3, #3]
			break;
 800b23e:	e039      	b.n	800b2b4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	09db      	lsrs	r3, r3, #7
 800b248:	4413      	add	r3, r2
 800b24a:	4619      	mov	r1, r3
 800b24c:	68f8      	ldr	r0, [r7, #12]
 800b24e:	f7ff fde7 	bl	800ae20 <move_window>
 800b252:	4603      	mov	r3, r0
 800b254:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b256:	7ffb      	ldrb	r3, [r7, #31]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d12a      	bne.n	800b2b2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	009b      	lsls	r3, r3, #2
 800b26c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b270:	4413      	add	r3, r2
 800b272:	4618      	mov	r0, r3
 800b274:	f7ff fb0a 	bl	800a88c <ld_dword>
 800b278:	4603      	mov	r3, r0
 800b27a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b27e:	4323      	orrs	r3, r4
 800b280:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	009b      	lsls	r3, r3, #2
 800b28c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b290:	4413      	add	r3, r2
 800b292:	6879      	ldr	r1, [r7, #4]
 800b294:	4618      	mov	r0, r3
 800b296:	f7ff fb37 	bl	800a908 <st_dword>
			fs->wflag = 1;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2201      	movs	r2, #1
 800b29e:	70da      	strb	r2, [r3, #3]
			break;
 800b2a0:	e008      	b.n	800b2b4 <put_fat+0x1ce>
		}
	}
 800b2a2:	bf00      	nop
 800b2a4:	e006      	b.n	800b2b4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b2a6:	bf00      	nop
 800b2a8:	e004      	b.n	800b2b4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b2aa:	bf00      	nop
 800b2ac:	e002      	b.n	800b2b4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b2ae:	bf00      	nop
 800b2b0:	e000      	b.n	800b2b4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b2b2:	bf00      	nop
	return res;
 800b2b4:	7ffb      	ldrb	r3, [r7, #31]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3724      	adds	r7, #36	; 0x24
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd90      	pop	{r4, r7, pc}

0800b2be <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b2be:	b580      	push	{r7, lr}
 800b2c0:	b088      	sub	sp, #32
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	60f8      	str	r0, [r7, #12]
 800b2c6:	60b9      	str	r1, [r7, #8]
 800b2c8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	d904      	bls.n	800b2e4 <remove_chain+0x26>
 800b2da:	69bb      	ldr	r3, [r7, #24]
 800b2dc:	699b      	ldr	r3, [r3, #24]
 800b2de:	68ba      	ldr	r2, [r7, #8]
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d301      	bcc.n	800b2e8 <remove_chain+0x2a>
 800b2e4:	2302      	movs	r3, #2
 800b2e6:	e04b      	b.n	800b380 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d00c      	beq.n	800b308 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b2ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b2f2:	6879      	ldr	r1, [r7, #4]
 800b2f4:	69b8      	ldr	r0, [r7, #24]
 800b2f6:	f7ff fef6 	bl	800b0e6 <put_fat>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b2fe:	7ffb      	ldrb	r3, [r7, #31]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d001      	beq.n	800b308 <remove_chain+0x4a>
 800b304:	7ffb      	ldrb	r3, [r7, #31]
 800b306:	e03b      	b.n	800b380 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b308:	68b9      	ldr	r1, [r7, #8]
 800b30a:	68f8      	ldr	r0, [r7, #12]
 800b30c:	f7ff fe43 	bl	800af96 <get_fat>
 800b310:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d031      	beq.n	800b37c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	d101      	bne.n	800b322 <remove_chain+0x64>
 800b31e:	2302      	movs	r3, #2
 800b320:	e02e      	b.n	800b380 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b328:	d101      	bne.n	800b32e <remove_chain+0x70>
 800b32a:	2301      	movs	r3, #1
 800b32c:	e028      	b.n	800b380 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b32e:	2200      	movs	r2, #0
 800b330:	68b9      	ldr	r1, [r7, #8]
 800b332:	69b8      	ldr	r0, [r7, #24]
 800b334:	f7ff fed7 	bl	800b0e6 <put_fat>
 800b338:	4603      	mov	r3, r0
 800b33a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b33c:	7ffb      	ldrb	r3, [r7, #31]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d001      	beq.n	800b346 <remove_chain+0x88>
 800b342:	7ffb      	ldrb	r3, [r7, #31]
 800b344:	e01c      	b.n	800b380 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b346:	69bb      	ldr	r3, [r7, #24]
 800b348:	695a      	ldr	r2, [r3, #20]
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	699b      	ldr	r3, [r3, #24]
 800b34e:	3b02      	subs	r3, #2
 800b350:	429a      	cmp	r2, r3
 800b352:	d20b      	bcs.n	800b36c <remove_chain+0xae>
			fs->free_clst++;
 800b354:	69bb      	ldr	r3, [r7, #24]
 800b356:	695b      	ldr	r3, [r3, #20]
 800b358:	1c5a      	adds	r2, r3, #1
 800b35a:	69bb      	ldr	r3, [r7, #24]
 800b35c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800b35e:	69bb      	ldr	r3, [r7, #24]
 800b360:	791b      	ldrb	r3, [r3, #4]
 800b362:	f043 0301 	orr.w	r3, r3, #1
 800b366:	b2da      	uxtb	r2, r3
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b370:	69bb      	ldr	r3, [r7, #24]
 800b372:	699b      	ldr	r3, [r3, #24]
 800b374:	68ba      	ldr	r2, [r7, #8]
 800b376:	429a      	cmp	r2, r3
 800b378:	d3c6      	bcc.n	800b308 <remove_chain+0x4a>
 800b37a:	e000      	b.n	800b37e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b37c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b37e:	2300      	movs	r3, #0
}
 800b380:	4618      	mov	r0, r3
 800b382:	3720      	adds	r7, #32
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b088      	sub	sp, #32
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d10d      	bne.n	800b3ba <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	691b      	ldr	r3, [r3, #16]
 800b3a2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b3a4:	69bb      	ldr	r3, [r7, #24]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d004      	beq.n	800b3b4 <create_chain+0x2c>
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	699b      	ldr	r3, [r3, #24]
 800b3ae:	69ba      	ldr	r2, [r7, #24]
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d31b      	bcc.n	800b3ec <create_chain+0x64>
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	61bb      	str	r3, [r7, #24]
 800b3b8:	e018      	b.n	800b3ec <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b3ba:	6839      	ldr	r1, [r7, #0]
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f7ff fdea 	bl	800af96 <get_fat>
 800b3c2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	d801      	bhi.n	800b3ce <create_chain+0x46>
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	e070      	b.n	800b4b0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3d4:	d101      	bne.n	800b3da <create_chain+0x52>
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	e06a      	b.n	800b4b0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	699b      	ldr	r3, [r3, #24]
 800b3de:	68fa      	ldr	r2, [r7, #12]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d201      	bcs.n	800b3e8 <create_chain+0x60>
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	e063      	b.n	800b4b0 <create_chain+0x128>
		scl = clst;
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b3ec:	69bb      	ldr	r3, [r7, #24]
 800b3ee:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b3f0:	69fb      	ldr	r3, [r7, #28]
 800b3f2:	3301      	adds	r3, #1
 800b3f4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	699b      	ldr	r3, [r3, #24]
 800b3fa:	69fa      	ldr	r2, [r7, #28]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d307      	bcc.n	800b410 <create_chain+0x88>
				ncl = 2;
 800b400:	2302      	movs	r3, #2
 800b402:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b404:	69fa      	ldr	r2, [r7, #28]
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	429a      	cmp	r2, r3
 800b40a:	d901      	bls.n	800b410 <create_chain+0x88>
 800b40c:	2300      	movs	r3, #0
 800b40e:	e04f      	b.n	800b4b0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b410:	69f9      	ldr	r1, [r7, #28]
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f7ff fdbf 	bl	800af96 <get_fat>
 800b418:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d00e      	beq.n	800b43e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2b01      	cmp	r3, #1
 800b424:	d003      	beq.n	800b42e <create_chain+0xa6>
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b42c:	d101      	bne.n	800b432 <create_chain+0xaa>
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	e03e      	b.n	800b4b0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b432:	69fa      	ldr	r2, [r7, #28]
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	429a      	cmp	r2, r3
 800b438:	d1da      	bne.n	800b3f0 <create_chain+0x68>
 800b43a:	2300      	movs	r3, #0
 800b43c:	e038      	b.n	800b4b0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b43e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b440:	f04f 32ff 	mov.w	r2, #4294967295
 800b444:	69f9      	ldr	r1, [r7, #28]
 800b446:	6938      	ldr	r0, [r7, #16]
 800b448:	f7ff fe4d 	bl	800b0e6 <put_fat>
 800b44c:	4603      	mov	r3, r0
 800b44e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b450:	7dfb      	ldrb	r3, [r7, #23]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d109      	bne.n	800b46a <create_chain+0xe2>
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d006      	beq.n	800b46a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b45c:	69fa      	ldr	r2, [r7, #28]
 800b45e:	6839      	ldr	r1, [r7, #0]
 800b460:	6938      	ldr	r0, [r7, #16]
 800b462:	f7ff fe40 	bl	800b0e6 <put_fat>
 800b466:	4603      	mov	r3, r0
 800b468:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b46a:	7dfb      	ldrb	r3, [r7, #23]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d116      	bne.n	800b49e <create_chain+0x116>
		fs->last_clst = ncl;
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	69fa      	ldr	r2, [r7, #28]
 800b474:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	695a      	ldr	r2, [r3, #20]
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	699b      	ldr	r3, [r3, #24]
 800b47e:	3b02      	subs	r3, #2
 800b480:	429a      	cmp	r2, r3
 800b482:	d804      	bhi.n	800b48e <create_chain+0x106>
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	695b      	ldr	r3, [r3, #20]
 800b488:	1e5a      	subs	r2, r3, #1
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	791b      	ldrb	r3, [r3, #4]
 800b492:	f043 0301 	orr.w	r3, r3, #1
 800b496:	b2da      	uxtb	r2, r3
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	711a      	strb	r2, [r3, #4]
 800b49c:	e007      	b.n	800b4ae <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b49e:	7dfb      	ldrb	r3, [r7, #23]
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d102      	bne.n	800b4aa <create_chain+0x122>
 800b4a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b4a8:	e000      	b.n	800b4ac <create_chain+0x124>
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b4ae:	69fb      	ldr	r3, [r7, #28]
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3720      	adds	r7, #32
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b087      	sub	sp, #28
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4cc:	3304      	adds	r3, #4
 800b4ce:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	0a5b      	lsrs	r3, r3, #9
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	8952      	ldrh	r2, [r2, #10]
 800b4d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4dc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	1d1a      	adds	r2, r3, #4
 800b4e2:	613a      	str	r2, [r7, #16]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d101      	bne.n	800b4f2 <clmt_clust+0x3a>
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	e010      	b.n	800b514 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b4f2:	697a      	ldr	r2, [r7, #20]
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d307      	bcc.n	800b50a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b4fa:	697a      	ldr	r2, [r7, #20]
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	1ad3      	subs	r3, r2, r3
 800b500:	617b      	str	r3, [r7, #20]
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	3304      	adds	r3, #4
 800b506:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b508:	e7e9      	b.n	800b4de <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b50a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	681a      	ldr	r2, [r3, #0]
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	4413      	add	r3, r2
}
 800b514:	4618      	mov	r0, r3
 800b516:	371c      	adds	r7, #28
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b086      	sub	sp, #24
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b536:	d204      	bcs.n	800b542 <dir_sdi+0x22>
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	f003 031f 	and.w	r3, r3, #31
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d001      	beq.n	800b546 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b542:	2302      	movs	r3, #2
 800b544:	e063      	b.n	800b60e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	683a      	ldr	r2, [r7, #0]
 800b54a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d106      	bne.n	800b566 <dir_sdi+0x46>
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	2b02      	cmp	r3, #2
 800b55e:	d902      	bls.n	800b566 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b564:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d10c      	bne.n	800b586 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	095b      	lsrs	r3, r3, #5
 800b570:	693a      	ldr	r2, [r7, #16]
 800b572:	8912      	ldrh	r2, [r2, #8]
 800b574:	4293      	cmp	r3, r2
 800b576:	d301      	bcc.n	800b57c <dir_sdi+0x5c>
 800b578:	2302      	movs	r3, #2
 800b57a:	e048      	b.n	800b60e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	61da      	str	r2, [r3, #28]
 800b584:	e029      	b.n	800b5da <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	895b      	ldrh	r3, [r3, #10]
 800b58a:	025b      	lsls	r3, r3, #9
 800b58c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b58e:	e019      	b.n	800b5c4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6979      	ldr	r1, [r7, #20]
 800b594:	4618      	mov	r0, r3
 800b596:	f7ff fcfe 	bl	800af96 <get_fat>
 800b59a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5a2:	d101      	bne.n	800b5a8 <dir_sdi+0x88>
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	e032      	b.n	800b60e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	2b01      	cmp	r3, #1
 800b5ac:	d904      	bls.n	800b5b8 <dir_sdi+0x98>
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	699b      	ldr	r3, [r3, #24]
 800b5b2:	697a      	ldr	r2, [r7, #20]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d301      	bcc.n	800b5bc <dir_sdi+0x9c>
 800b5b8:	2302      	movs	r3, #2
 800b5ba:	e028      	b.n	800b60e <dir_sdi+0xee>
			ofs -= csz;
 800b5bc:	683a      	ldr	r2, [r7, #0]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	1ad3      	subs	r3, r2, r3
 800b5c2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b5c4:	683a      	ldr	r2, [r7, #0]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d2e1      	bcs.n	800b590 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b5cc:	6979      	ldr	r1, [r7, #20]
 800b5ce:	6938      	ldr	r0, [r7, #16]
 800b5d0:	f7ff fcc2 	bl	800af58 <clust2sect>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	697a      	ldr	r2, [r7, #20]
 800b5de:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	69db      	ldr	r3, [r3, #28]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d101      	bne.n	800b5ec <dir_sdi+0xcc>
 800b5e8:	2302      	movs	r3, #2
 800b5ea:	e010      	b.n	800b60e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	69da      	ldr	r2, [r3, #28]
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	0a5b      	lsrs	r3, r3, #9
 800b5f4:	441a      	add	r2, r3
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b606:	441a      	add	r2, r3
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b60c:	2300      	movs	r3, #0
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3718      	adds	r7, #24
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b616:	b580      	push	{r7, lr}
 800b618:	b086      	sub	sp, #24
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
 800b61e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	695b      	ldr	r3, [r3, #20]
 800b62a:	3320      	adds	r3, #32
 800b62c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	69db      	ldr	r3, [r3, #28]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d003      	beq.n	800b63e <dir_next+0x28>
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b63c:	d301      	bcc.n	800b642 <dir_next+0x2c>
 800b63e:	2304      	movs	r3, #4
 800b640:	e0aa      	b.n	800b798 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b648:	2b00      	cmp	r3, #0
 800b64a:	f040 8098 	bne.w	800b77e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	69db      	ldr	r3, [r3, #28]
 800b652:	1c5a      	adds	r2, r3, #1
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	699b      	ldr	r3, [r3, #24]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d10b      	bne.n	800b678 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	095b      	lsrs	r3, r3, #5
 800b664:	68fa      	ldr	r2, [r7, #12]
 800b666:	8912      	ldrh	r2, [r2, #8]
 800b668:	4293      	cmp	r3, r2
 800b66a:	f0c0 8088 	bcc.w	800b77e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2200      	movs	r2, #0
 800b672:	61da      	str	r2, [r3, #28]
 800b674:	2304      	movs	r3, #4
 800b676:	e08f      	b.n	800b798 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	0a5b      	lsrs	r3, r3, #9
 800b67c:	68fa      	ldr	r2, [r7, #12]
 800b67e:	8952      	ldrh	r2, [r2, #10]
 800b680:	3a01      	subs	r2, #1
 800b682:	4013      	ands	r3, r2
 800b684:	2b00      	cmp	r3, #0
 800b686:	d17a      	bne.n	800b77e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	699b      	ldr	r3, [r3, #24]
 800b68e:	4619      	mov	r1, r3
 800b690:	4610      	mov	r0, r2
 800b692:	f7ff fc80 	bl	800af96 <get_fat>
 800b696:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d801      	bhi.n	800b6a2 <dir_next+0x8c>
 800b69e:	2302      	movs	r3, #2
 800b6a0:	e07a      	b.n	800b798 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6a8:	d101      	bne.n	800b6ae <dir_next+0x98>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e074      	b.n	800b798 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	699b      	ldr	r3, [r3, #24]
 800b6b2:	697a      	ldr	r2, [r7, #20]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d358      	bcc.n	800b76a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d104      	bne.n	800b6c8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	61da      	str	r2, [r3, #28]
 800b6c4:	2304      	movs	r3, #4
 800b6c6:	e067      	b.n	800b798 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b6c8:	687a      	ldr	r2, [r7, #4]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	699b      	ldr	r3, [r3, #24]
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	4610      	mov	r0, r2
 800b6d2:	f7ff fe59 	bl	800b388 <create_chain>
 800b6d6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d101      	bne.n	800b6e2 <dir_next+0xcc>
 800b6de:	2307      	movs	r3, #7
 800b6e0:	e05a      	b.n	800b798 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	d101      	bne.n	800b6ec <dir_next+0xd6>
 800b6e8:	2302      	movs	r3, #2
 800b6ea:	e055      	b.n	800b798 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6f2:	d101      	bne.n	800b6f8 <dir_next+0xe2>
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	e04f      	b.n	800b798 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b6f8:	68f8      	ldr	r0, [r7, #12]
 800b6fa:	f7ff fb4d 	bl	800ad98 <sync_window>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b00      	cmp	r3, #0
 800b702:	d001      	beq.n	800b708 <dir_next+0xf2>
 800b704:	2301      	movs	r3, #1
 800b706:	e047      	b.n	800b798 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	3334      	adds	r3, #52	; 0x34
 800b70c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b710:	2100      	movs	r1, #0
 800b712:	4618      	mov	r0, r3
 800b714:	f7ff f945 	bl	800a9a2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b718:	2300      	movs	r3, #0
 800b71a:	613b      	str	r3, [r7, #16]
 800b71c:	6979      	ldr	r1, [r7, #20]
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	f7ff fc1a 	bl	800af58 <clust2sect>
 800b724:	4602      	mov	r2, r0
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	631a      	str	r2, [r3, #48]	; 0x30
 800b72a:	e012      	b.n	800b752 <dir_next+0x13c>
						fs->wflag = 1;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2201      	movs	r2, #1
 800b730:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b732:	68f8      	ldr	r0, [r7, #12]
 800b734:	f7ff fb30 	bl	800ad98 <sync_window>
 800b738:	4603      	mov	r3, r0
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d001      	beq.n	800b742 <dir_next+0x12c>
 800b73e:	2301      	movs	r3, #1
 800b740:	e02a      	b.n	800b798 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	3301      	adds	r3, #1
 800b746:	613b      	str	r3, [r7, #16]
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b74c:	1c5a      	adds	r2, r3, #1
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	631a      	str	r2, [r3, #48]	; 0x30
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	895b      	ldrh	r3, [r3, #10]
 800b756:	461a      	mov	r2, r3
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d3e6      	bcc.n	800b72c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	1ad2      	subs	r2, r2, r3
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	697a      	ldr	r2, [r7, #20]
 800b76e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b770:	6979      	ldr	r1, [r7, #20]
 800b772:	68f8      	ldr	r0, [r7, #12]
 800b774:	f7ff fbf0 	bl	800af58 <clust2sect>
 800b778:	4602      	mov	r2, r0
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	68ba      	ldr	r2, [r7, #8]
 800b782:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b790:	441a      	add	r2, r3
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b796:	2300      	movs	r3, #0
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3718      	adds	r7, #24
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b086      	sub	sp, #24
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f7ff feb4 	bl	800b520 <dir_sdi>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b7bc:	7dfb      	ldrb	r3, [r7, #23]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d12b      	bne.n	800b81a <dir_alloc+0x7a>
		n = 0;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	69db      	ldr	r3, [r3, #28]
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	68f8      	ldr	r0, [r7, #12]
 800b7ce:	f7ff fb27 	bl	800ae20 <move_window>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b7d6:	7dfb      	ldrb	r3, [r7, #23]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d11d      	bne.n	800b818 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6a1b      	ldr	r3, [r3, #32]
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	2be5      	cmp	r3, #229	; 0xe5
 800b7e4:	d004      	beq.n	800b7f0 <dir_alloc+0x50>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6a1b      	ldr	r3, [r3, #32]
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d107      	bne.n	800b800 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	613b      	str	r3, [r7, #16]
 800b7f6:	693a      	ldr	r2, [r7, #16]
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d102      	bne.n	800b804 <dir_alloc+0x64>
 800b7fe:	e00c      	b.n	800b81a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b800:	2300      	movs	r3, #0
 800b802:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b804:	2101      	movs	r1, #1
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f7ff ff05 	bl	800b616 <dir_next>
 800b80c:	4603      	mov	r3, r0
 800b80e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b810:	7dfb      	ldrb	r3, [r7, #23]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d0d7      	beq.n	800b7c6 <dir_alloc+0x26>
 800b816:	e000      	b.n	800b81a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b818:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b81a:	7dfb      	ldrb	r3, [r7, #23]
 800b81c:	2b04      	cmp	r3, #4
 800b81e:	d101      	bne.n	800b824 <dir_alloc+0x84>
 800b820:	2307      	movs	r3, #7
 800b822:	75fb      	strb	r3, [r7, #23]
	return res;
 800b824:	7dfb      	ldrb	r3, [r7, #23]
}
 800b826:	4618      	mov	r0, r3
 800b828:	3718      	adds	r7, #24
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}

0800b82e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b82e:	b580      	push	{r7, lr}
 800b830:	b084      	sub	sp, #16
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
 800b836:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	331a      	adds	r3, #26
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7ff f80d 	bl	800a85c <ld_word>
 800b842:	4603      	mov	r3, r0
 800b844:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	2b03      	cmp	r3, #3
 800b84c:	d109      	bne.n	800b862 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	3314      	adds	r3, #20
 800b852:	4618      	mov	r0, r3
 800b854:	f7ff f802 	bl	800a85c <ld_word>
 800b858:	4603      	mov	r3, r0
 800b85a:	041b      	lsls	r3, r3, #16
 800b85c:	68fa      	ldr	r2, [r7, #12]
 800b85e:	4313      	orrs	r3, r2
 800b860:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b862:	68fb      	ldr	r3, [r7, #12]
}
 800b864:	4618      	mov	r0, r3
 800b866:	3710      	adds	r7, #16
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b084      	sub	sp, #16
 800b870:	af00      	add	r7, sp, #0
 800b872:	60f8      	str	r0, [r7, #12]
 800b874:	60b9      	str	r1, [r7, #8]
 800b876:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	331a      	adds	r3, #26
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	b292      	uxth	r2, r2
 800b880:	4611      	mov	r1, r2
 800b882:	4618      	mov	r0, r3
 800b884:	f7ff f825 	bl	800a8d2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	2b03      	cmp	r3, #3
 800b88e:	d109      	bne.n	800b8a4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	f103 0214 	add.w	r2, r3, #20
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	0c1b      	lsrs	r3, r3, #16
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	4619      	mov	r1, r3
 800b89e:	4610      	mov	r0, r2
 800b8a0:	f7ff f817 	bl	800a8d2 <st_word>
	}
}
 800b8a4:	bf00      	nop
 800b8a6:	3710      	adds	r7, #16
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b086      	sub	sp, #24
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b8ba:	2100      	movs	r1, #0
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f7ff fe2f 	bl	800b520 <dir_sdi>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b8c6:	7dfb      	ldrb	r3, [r7, #23]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d001      	beq.n	800b8d0 <dir_find+0x24>
 800b8cc:	7dfb      	ldrb	r3, [r7, #23]
 800b8ce:	e03e      	b.n	800b94e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	69db      	ldr	r3, [r3, #28]
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	6938      	ldr	r0, [r7, #16]
 800b8d8:	f7ff faa2 	bl	800ae20 <move_window>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b8e0:	7dfb      	ldrb	r3, [r7, #23]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d12f      	bne.n	800b946 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a1b      	ldr	r3, [r3, #32]
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b8ee:	7bfb      	ldrb	r3, [r7, #15]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d102      	bne.n	800b8fa <dir_find+0x4e>
 800b8f4:	2304      	movs	r3, #4
 800b8f6:	75fb      	strb	r3, [r7, #23]
 800b8f8:	e028      	b.n	800b94c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6a1b      	ldr	r3, [r3, #32]
 800b8fe:	330b      	adds	r3, #11
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b906:	b2da      	uxtb	r2, r3
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6a1b      	ldr	r3, [r3, #32]
 800b910:	330b      	adds	r3, #11
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	f003 0308 	and.w	r3, r3, #8
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d10a      	bne.n	800b932 <dir_find+0x86>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6a18      	ldr	r0, [r3, #32]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	3324      	adds	r3, #36	; 0x24
 800b924:	220b      	movs	r2, #11
 800b926:	4619      	mov	r1, r3
 800b928:	f7ff f856 	bl	800a9d8 <mem_cmp>
 800b92c:	4603      	mov	r3, r0
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d00b      	beq.n	800b94a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b932:	2100      	movs	r1, #0
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f7ff fe6e 	bl	800b616 <dir_next>
 800b93a:	4603      	mov	r3, r0
 800b93c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b93e:	7dfb      	ldrb	r3, [r7, #23]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d0c5      	beq.n	800b8d0 <dir_find+0x24>
 800b944:	e002      	b.n	800b94c <dir_find+0xa0>
		if (res != FR_OK) break;
 800b946:	bf00      	nop
 800b948:	e000      	b.n	800b94c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b94a:	bf00      	nop

	return res;
 800b94c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3718      	adds	r7, #24
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}

0800b956 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b956:	b580      	push	{r7, lr}
 800b958:	b084      	sub	sp, #16
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b964:	2101      	movs	r1, #1
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f7ff ff1a 	bl	800b7a0 <dir_alloc>
 800b96c:	4603      	mov	r3, r0
 800b96e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b970:	7bfb      	ldrb	r3, [r7, #15]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d11c      	bne.n	800b9b0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	69db      	ldr	r3, [r3, #28]
 800b97a:	4619      	mov	r1, r3
 800b97c:	68b8      	ldr	r0, [r7, #8]
 800b97e:	f7ff fa4f 	bl	800ae20 <move_window>
 800b982:	4603      	mov	r3, r0
 800b984:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b986:	7bfb      	ldrb	r3, [r7, #15]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d111      	bne.n	800b9b0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6a1b      	ldr	r3, [r3, #32]
 800b990:	2220      	movs	r2, #32
 800b992:	2100      	movs	r1, #0
 800b994:	4618      	mov	r0, r3
 800b996:	f7ff f804 	bl	800a9a2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6a18      	ldr	r0, [r3, #32]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	3324      	adds	r3, #36	; 0x24
 800b9a2:	220b      	movs	r2, #11
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	f7fe ffdb 	bl	800a960 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b9b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3710      	adds	r7, #16
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}
	...

0800b9bc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b088      	sub	sp, #32
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	60fb      	str	r3, [r7, #12]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	3324      	adds	r3, #36	; 0x24
 800b9d0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b9d2:	220b      	movs	r2, #11
 800b9d4:	2120      	movs	r1, #32
 800b9d6:	68b8      	ldr	r0, [r7, #8]
 800b9d8:	f7fe ffe3 	bl	800a9a2 <mem_set>
	si = i = 0; ni = 8;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	613b      	str	r3, [r7, #16]
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	61fb      	str	r3, [r7, #28]
 800b9e4:	2308      	movs	r3, #8
 800b9e6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b9e8:	69fb      	ldr	r3, [r7, #28]
 800b9ea:	1c5a      	adds	r2, r3, #1
 800b9ec:	61fa      	str	r2, [r7, #28]
 800b9ee:	68fa      	ldr	r2, [r7, #12]
 800b9f0:	4413      	add	r3, r2
 800b9f2:	781b      	ldrb	r3, [r3, #0]
 800b9f4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b9f6:	7efb      	ldrb	r3, [r7, #27]
 800b9f8:	2b20      	cmp	r3, #32
 800b9fa:	d94e      	bls.n	800ba9a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b9fc:	7efb      	ldrb	r3, [r7, #27]
 800b9fe:	2b2f      	cmp	r3, #47	; 0x2f
 800ba00:	d006      	beq.n	800ba10 <create_name+0x54>
 800ba02:	7efb      	ldrb	r3, [r7, #27]
 800ba04:	2b5c      	cmp	r3, #92	; 0x5c
 800ba06:	d110      	bne.n	800ba2a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ba08:	e002      	b.n	800ba10 <create_name+0x54>
 800ba0a:	69fb      	ldr	r3, [r7, #28]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	61fb      	str	r3, [r7, #28]
 800ba10:	68fa      	ldr	r2, [r7, #12]
 800ba12:	69fb      	ldr	r3, [r7, #28]
 800ba14:	4413      	add	r3, r2
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	2b2f      	cmp	r3, #47	; 0x2f
 800ba1a:	d0f6      	beq.n	800ba0a <create_name+0x4e>
 800ba1c:	68fa      	ldr	r2, [r7, #12]
 800ba1e:	69fb      	ldr	r3, [r7, #28]
 800ba20:	4413      	add	r3, r2
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	2b5c      	cmp	r3, #92	; 0x5c
 800ba26:	d0f0      	beq.n	800ba0a <create_name+0x4e>
			break;
 800ba28:	e038      	b.n	800ba9c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ba2a:	7efb      	ldrb	r3, [r7, #27]
 800ba2c:	2b2e      	cmp	r3, #46	; 0x2e
 800ba2e:	d003      	beq.n	800ba38 <create_name+0x7c>
 800ba30:	693a      	ldr	r2, [r7, #16]
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d30c      	bcc.n	800ba52 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	2b0b      	cmp	r3, #11
 800ba3c:	d002      	beq.n	800ba44 <create_name+0x88>
 800ba3e:	7efb      	ldrb	r3, [r7, #27]
 800ba40:	2b2e      	cmp	r3, #46	; 0x2e
 800ba42:	d001      	beq.n	800ba48 <create_name+0x8c>
 800ba44:	2306      	movs	r3, #6
 800ba46:	e044      	b.n	800bad2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ba48:	2308      	movs	r3, #8
 800ba4a:	613b      	str	r3, [r7, #16]
 800ba4c:	230b      	movs	r3, #11
 800ba4e:	617b      	str	r3, [r7, #20]
			continue;
 800ba50:	e022      	b.n	800ba98 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ba52:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	da04      	bge.n	800ba64 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ba5a:	7efb      	ldrb	r3, [r7, #27]
 800ba5c:	3b80      	subs	r3, #128	; 0x80
 800ba5e:	4a1f      	ldr	r2, [pc, #124]	; (800badc <create_name+0x120>)
 800ba60:	5cd3      	ldrb	r3, [r2, r3]
 800ba62:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ba64:	7efb      	ldrb	r3, [r7, #27]
 800ba66:	4619      	mov	r1, r3
 800ba68:	481d      	ldr	r0, [pc, #116]	; (800bae0 <create_name+0x124>)
 800ba6a:	f7fe ffdc 	bl	800aa26 <chk_chr>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d001      	beq.n	800ba78 <create_name+0xbc>
 800ba74:	2306      	movs	r3, #6
 800ba76:	e02c      	b.n	800bad2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ba78:	7efb      	ldrb	r3, [r7, #27]
 800ba7a:	2b60      	cmp	r3, #96	; 0x60
 800ba7c:	d905      	bls.n	800ba8a <create_name+0xce>
 800ba7e:	7efb      	ldrb	r3, [r7, #27]
 800ba80:	2b7a      	cmp	r3, #122	; 0x7a
 800ba82:	d802      	bhi.n	800ba8a <create_name+0xce>
 800ba84:	7efb      	ldrb	r3, [r7, #27]
 800ba86:	3b20      	subs	r3, #32
 800ba88:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	1c5a      	adds	r2, r3, #1
 800ba8e:	613a      	str	r2, [r7, #16]
 800ba90:	68ba      	ldr	r2, [r7, #8]
 800ba92:	4413      	add	r3, r2
 800ba94:	7efa      	ldrb	r2, [r7, #27]
 800ba96:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ba98:	e7a6      	b.n	800b9e8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ba9a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ba9c:	68fa      	ldr	r2, [r7, #12]
 800ba9e:	69fb      	ldr	r3, [r7, #28]
 800baa0:	441a      	add	r2, r3
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d101      	bne.n	800bab0 <create_name+0xf4>
 800baac:	2306      	movs	r3, #6
 800baae:	e010      	b.n	800bad2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	2be5      	cmp	r3, #229	; 0xe5
 800bab6:	d102      	bne.n	800babe <create_name+0x102>
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	2205      	movs	r2, #5
 800babc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800babe:	7efb      	ldrb	r3, [r7, #27]
 800bac0:	2b20      	cmp	r3, #32
 800bac2:	d801      	bhi.n	800bac8 <create_name+0x10c>
 800bac4:	2204      	movs	r2, #4
 800bac6:	e000      	b.n	800baca <create_name+0x10e>
 800bac8:	2200      	movs	r2, #0
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	330b      	adds	r3, #11
 800bace:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800bad0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3720      	adds	r7, #32
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
 800bada:	bf00      	nop
 800badc:	080147b4 	.word	0x080147b4
 800bae0:	080144e0 	.word	0x080144e0

0800bae4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b086      	sub	sp, #24
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800baf8:	e002      	b.n	800bb00 <follow_path+0x1c>
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	3301      	adds	r3, #1
 800bafe:	603b      	str	r3, [r7, #0]
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	2b2f      	cmp	r3, #47	; 0x2f
 800bb06:	d0f8      	beq.n	800bafa <follow_path+0x16>
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	2b5c      	cmp	r3, #92	; 0x5c
 800bb0e:	d0f4      	beq.n	800bafa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	2200      	movs	r2, #0
 800bb14:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	2b1f      	cmp	r3, #31
 800bb1c:	d80a      	bhi.n	800bb34 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2280      	movs	r2, #128	; 0x80
 800bb22:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800bb26:	2100      	movs	r1, #0
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f7ff fcf9 	bl	800b520 <dir_sdi>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	75fb      	strb	r3, [r7, #23]
 800bb32:	e043      	b.n	800bbbc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bb34:	463b      	mov	r3, r7
 800bb36:	4619      	mov	r1, r3
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f7ff ff3f 	bl	800b9bc <create_name>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bb42:	7dfb      	ldrb	r3, [r7, #23]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d134      	bne.n	800bbb2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f7ff feaf 	bl	800b8ac <dir_find>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bb58:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bb5a:	7dfb      	ldrb	r3, [r7, #23]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d00a      	beq.n	800bb76 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bb60:	7dfb      	ldrb	r3, [r7, #23]
 800bb62:	2b04      	cmp	r3, #4
 800bb64:	d127      	bne.n	800bbb6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bb66:	7afb      	ldrb	r3, [r7, #11]
 800bb68:	f003 0304 	and.w	r3, r3, #4
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d122      	bne.n	800bbb6 <follow_path+0xd2>
 800bb70:	2305      	movs	r3, #5
 800bb72:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bb74:	e01f      	b.n	800bbb6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bb76:	7afb      	ldrb	r3, [r7, #11]
 800bb78:	f003 0304 	and.w	r3, r3, #4
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d11c      	bne.n	800bbba <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	799b      	ldrb	r3, [r3, #6]
 800bb84:	f003 0310 	and.w	r3, r3, #16
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d102      	bne.n	800bb92 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bb8c:	2305      	movs	r3, #5
 800bb8e:	75fb      	strb	r3, [r7, #23]
 800bb90:	e014      	b.n	800bbbc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	695b      	ldr	r3, [r3, #20]
 800bb9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bba0:	4413      	add	r3, r2
 800bba2:	4619      	mov	r1, r3
 800bba4:	68f8      	ldr	r0, [r7, #12]
 800bba6:	f7ff fe42 	bl	800b82e <ld_clust>
 800bbaa:	4602      	mov	r2, r0
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bbb0:	e7c0      	b.n	800bb34 <follow_path+0x50>
			if (res != FR_OK) break;
 800bbb2:	bf00      	nop
 800bbb4:	e002      	b.n	800bbbc <follow_path+0xd8>
				break;
 800bbb6:	bf00      	nop
 800bbb8:	e000      	b.n	800bbbc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bbba:	bf00      	nop
			}
		}
	}

	return res;
 800bbbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3718      	adds	r7, #24
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}

0800bbc6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bbc6:	b480      	push	{r7}
 800bbc8:	b087      	sub	sp, #28
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bbce:	f04f 33ff 	mov.w	r3, #4294967295
 800bbd2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d031      	beq.n	800bc40 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	617b      	str	r3, [r7, #20]
 800bbe2:	e002      	b.n	800bbea <get_ldnumber+0x24>
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	617b      	str	r3, [r7, #20]
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	2b20      	cmp	r3, #32
 800bbf0:	d903      	bls.n	800bbfa <get_ldnumber+0x34>
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	2b3a      	cmp	r3, #58	; 0x3a
 800bbf8:	d1f4      	bne.n	800bbe4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	2b3a      	cmp	r3, #58	; 0x3a
 800bc00:	d11c      	bne.n	800bc3c <get_ldnumber+0x76>
			tp = *path;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	1c5a      	adds	r2, r3, #1
 800bc0c:	60fa      	str	r2, [r7, #12]
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	3b30      	subs	r3, #48	; 0x30
 800bc12:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	2b09      	cmp	r3, #9
 800bc18:	d80e      	bhi.n	800bc38 <get_ldnumber+0x72>
 800bc1a:	68fa      	ldr	r2, [r7, #12]
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d10a      	bne.n	800bc38 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d107      	bne.n	800bc38 <get_ldnumber+0x72>
					vol = (int)i;
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	3301      	adds	r3, #1
 800bc30:	617b      	str	r3, [r7, #20]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	697a      	ldr	r2, [r7, #20]
 800bc36:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	e002      	b.n	800bc42 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bc40:	693b      	ldr	r3, [r7, #16]
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	371c      	adds	r7, #28
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr
	...

0800bc50 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b082      	sub	sp, #8
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	70da      	strb	r2, [r3, #3]
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f04f 32ff 	mov.w	r2, #4294967295
 800bc66:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bc68:	6839      	ldr	r1, [r7, #0]
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f7ff f8d8 	bl	800ae20 <move_window>
 800bc70:	4603      	mov	r3, r0
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d001      	beq.n	800bc7a <check_fs+0x2a>
 800bc76:	2304      	movs	r3, #4
 800bc78:	e038      	b.n	800bcec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	3334      	adds	r3, #52	; 0x34
 800bc7e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7fe fdea 	bl	800a85c <ld_word>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bc90:	429a      	cmp	r2, r3
 800bc92:	d001      	beq.n	800bc98 <check_fs+0x48>
 800bc94:	2303      	movs	r3, #3
 800bc96:	e029      	b.n	800bcec <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bc9e:	2be9      	cmp	r3, #233	; 0xe9
 800bca0:	d009      	beq.n	800bcb6 <check_fs+0x66>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bca8:	2beb      	cmp	r3, #235	; 0xeb
 800bcaa:	d11e      	bne.n	800bcea <check_fs+0x9a>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800bcb2:	2b90      	cmp	r3, #144	; 0x90
 800bcb4:	d119      	bne.n	800bcea <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	3334      	adds	r3, #52	; 0x34
 800bcba:	3336      	adds	r3, #54	; 0x36
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f7fe fde5 	bl	800a88c <ld_dword>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bcc8:	4a0a      	ldr	r2, [pc, #40]	; (800bcf4 <check_fs+0xa4>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d101      	bne.n	800bcd2 <check_fs+0x82>
 800bcce:	2300      	movs	r3, #0
 800bcd0:	e00c      	b.n	800bcec <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	3334      	adds	r3, #52	; 0x34
 800bcd6:	3352      	adds	r3, #82	; 0x52
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7fe fdd7 	bl	800a88c <ld_dword>
 800bcde:	4603      	mov	r3, r0
 800bce0:	4a05      	ldr	r2, [pc, #20]	; (800bcf8 <check_fs+0xa8>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d101      	bne.n	800bcea <check_fs+0x9a>
 800bce6:	2300      	movs	r3, #0
 800bce8:	e000      	b.n	800bcec <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bcea:	2302      	movs	r3, #2
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3708      	adds	r7, #8
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}
 800bcf4:	00544146 	.word	0x00544146
 800bcf8:	33544146 	.word	0x33544146

0800bcfc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b096      	sub	sp, #88	; 0x58
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	60f8      	str	r0, [r7, #12]
 800bd04:	60b9      	str	r1, [r7, #8]
 800bd06:	4613      	mov	r3, r2
 800bd08:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bd10:	68f8      	ldr	r0, [r7, #12]
 800bd12:	f7ff ff58 	bl	800bbc6 <get_ldnumber>
 800bd16:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bd18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	da01      	bge.n	800bd22 <find_volume+0x26>
 800bd1e:	230b      	movs	r3, #11
 800bd20:	e235      	b.n	800c18e <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bd22:	4aa5      	ldr	r2, [pc, #660]	; (800bfb8 <find_volume+0x2bc>)
 800bd24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd2a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d101      	bne.n	800bd36 <find_volume+0x3a>
 800bd32:	230c      	movs	r3, #12
 800bd34:	e22b      	b.n	800c18e <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800bd36:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bd38:	f7fe fe90 	bl	800aa5c <lock_fs>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d101      	bne.n	800bd46 <find_volume+0x4a>
 800bd42:	230f      	movs	r3, #15
 800bd44:	e223      	b.n	800c18e <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd4a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bd4c:	79fb      	ldrb	r3, [r7, #7]
 800bd4e:	f023 0301 	bic.w	r3, r3, #1
 800bd52:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d01a      	beq.n	800bd92 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800bd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd5e:	785b      	ldrb	r3, [r3, #1]
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7fe fcdd 	bl	800a720 <disk_status>
 800bd66:	4603      	mov	r3, r0
 800bd68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bd6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd70:	f003 0301 	and.w	r3, r3, #1
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d10c      	bne.n	800bd92 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bd78:	79fb      	ldrb	r3, [r7, #7]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d007      	beq.n	800bd8e <find_volume+0x92>
 800bd7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd82:	f003 0304 	and.w	r3, r3, #4
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d001      	beq.n	800bd8e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800bd8a:	230a      	movs	r3, #10
 800bd8c:	e1ff      	b.n	800c18e <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800bd8e:	2300      	movs	r3, #0
 800bd90:	e1fd      	b.n	800c18e <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd94:	2200      	movs	r2, #0
 800bd96:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bd98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd9a:	b2da      	uxtb	r2, r3
 800bd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd9e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda2:	785b      	ldrb	r3, [r3, #1]
 800bda4:	4618      	mov	r0, r3
 800bda6:	f7fe fcd5 	bl	800a754 <disk_initialize>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bdb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bdb4:	f003 0301 	and.w	r3, r3, #1
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d001      	beq.n	800bdc0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bdbc:	2303      	movs	r3, #3
 800bdbe:	e1e6      	b.n	800c18e <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bdc0:	79fb      	ldrb	r3, [r7, #7]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d007      	beq.n	800bdd6 <find_volume+0xda>
 800bdc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bdca:	f003 0304 	and.w	r3, r3, #4
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d001      	beq.n	800bdd6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800bdd2:	230a      	movs	r3, #10
 800bdd4:	e1db      	b.n	800c18e <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bdda:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bddc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bdde:	f7ff ff37 	bl	800bc50 <check_fs>
 800bde2:	4603      	mov	r3, r0
 800bde4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bde8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bdec:	2b02      	cmp	r3, #2
 800bdee:	d149      	bne.n	800be84 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	643b      	str	r3, [r7, #64]	; 0x40
 800bdf4:	e01e      	b.n	800be34 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bdf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bdfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdfe:	011b      	lsls	r3, r3, #4
 800be00:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800be04:	4413      	add	r3, r2
 800be06:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800be08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0a:	3304      	adds	r3, #4
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d006      	beq.n	800be20 <find_volume+0x124>
 800be12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be14:	3308      	adds	r3, #8
 800be16:	4618      	mov	r0, r3
 800be18:	f7fe fd38 	bl	800a88c <ld_dword>
 800be1c:	4602      	mov	r2, r0
 800be1e:	e000      	b.n	800be22 <find_volume+0x126>
 800be20:	2200      	movs	r2, #0
 800be22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be24:	009b      	lsls	r3, r3, #2
 800be26:	3358      	adds	r3, #88	; 0x58
 800be28:	443b      	add	r3, r7
 800be2a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800be2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be30:	3301      	adds	r3, #1
 800be32:	643b      	str	r3, [r7, #64]	; 0x40
 800be34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be36:	2b03      	cmp	r3, #3
 800be38:	d9dd      	bls.n	800bdf6 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800be3a:	2300      	movs	r3, #0
 800be3c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800be3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be40:	2b00      	cmp	r3, #0
 800be42:	d002      	beq.n	800be4a <find_volume+0x14e>
 800be44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be46:	3b01      	subs	r3, #1
 800be48:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800be4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	3358      	adds	r3, #88	; 0x58
 800be50:	443b      	add	r3, r7
 800be52:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800be56:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800be58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d005      	beq.n	800be6a <find_volume+0x16e>
 800be5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800be60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800be62:	f7ff fef5 	bl	800bc50 <check_fs>
 800be66:	4603      	mov	r3, r0
 800be68:	e000      	b.n	800be6c <find_volume+0x170>
 800be6a:	2303      	movs	r3, #3
 800be6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800be70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be74:	2b01      	cmp	r3, #1
 800be76:	d905      	bls.n	800be84 <find_volume+0x188>
 800be78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be7a:	3301      	adds	r3, #1
 800be7c:	643b      	str	r3, [r7, #64]	; 0x40
 800be7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be80:	2b03      	cmp	r3, #3
 800be82:	d9e2      	bls.n	800be4a <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800be84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be88:	2b04      	cmp	r3, #4
 800be8a:	d101      	bne.n	800be90 <find_volume+0x194>
 800be8c:	2301      	movs	r3, #1
 800be8e:	e17e      	b.n	800c18e <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800be90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be94:	2b01      	cmp	r3, #1
 800be96:	d901      	bls.n	800be9c <find_volume+0x1a0>
 800be98:	230d      	movs	r3, #13
 800be9a:	e178      	b.n	800c18e <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800be9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be9e:	3334      	adds	r3, #52	; 0x34
 800bea0:	330b      	adds	r3, #11
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7fe fcda 	bl	800a85c <ld_word>
 800bea8:	4603      	mov	r3, r0
 800beaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800beae:	d001      	beq.n	800beb4 <find_volume+0x1b8>
 800beb0:	230d      	movs	r3, #13
 800beb2:	e16c      	b.n	800c18e <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800beb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb6:	3334      	adds	r3, #52	; 0x34
 800beb8:	3316      	adds	r3, #22
 800beba:	4618      	mov	r0, r3
 800bebc:	f7fe fcce 	bl	800a85c <ld_word>
 800bec0:	4603      	mov	r3, r0
 800bec2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d106      	bne.n	800bed8 <find_volume+0x1dc>
 800beca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800becc:	3334      	adds	r3, #52	; 0x34
 800bece:	3324      	adds	r3, #36	; 0x24
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7fe fcdb 	bl	800a88c <ld_dword>
 800bed6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800bed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bedc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800bee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beea:	789b      	ldrb	r3, [r3, #2]
 800beec:	2b01      	cmp	r3, #1
 800beee:	d005      	beq.n	800befc <find_volume+0x200>
 800bef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef2:	789b      	ldrb	r3, [r3, #2]
 800bef4:	2b02      	cmp	r3, #2
 800bef6:	d001      	beq.n	800befc <find_volume+0x200>
 800bef8:	230d      	movs	r3, #13
 800befa:	e148      	b.n	800c18e <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800befc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800befe:	789b      	ldrb	r3, [r3, #2]
 800bf00:	461a      	mov	r2, r3
 800bf02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf04:	fb02 f303 	mul.w	r3, r2, r3
 800bf08:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bf0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf10:	b29a      	uxth	r2, r3
 800bf12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf14:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bf16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf18:	895b      	ldrh	r3, [r3, #10]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d008      	beq.n	800bf30 <find_volume+0x234>
 800bf1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf20:	895b      	ldrh	r3, [r3, #10]
 800bf22:	461a      	mov	r2, r3
 800bf24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf26:	895b      	ldrh	r3, [r3, #10]
 800bf28:	3b01      	subs	r3, #1
 800bf2a:	4013      	ands	r3, r2
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d001      	beq.n	800bf34 <find_volume+0x238>
 800bf30:	230d      	movs	r3, #13
 800bf32:	e12c      	b.n	800c18e <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bf34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf36:	3334      	adds	r3, #52	; 0x34
 800bf38:	3311      	adds	r3, #17
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7fe fc8e 	bl	800a85c <ld_word>
 800bf40:	4603      	mov	r3, r0
 800bf42:	461a      	mov	r2, r3
 800bf44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf46:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bf48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf4a:	891b      	ldrh	r3, [r3, #8]
 800bf4c:	f003 030f 	and.w	r3, r3, #15
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d001      	beq.n	800bf5a <find_volume+0x25e>
 800bf56:	230d      	movs	r3, #13
 800bf58:	e119      	b.n	800c18e <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bf5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf5c:	3334      	adds	r3, #52	; 0x34
 800bf5e:	3313      	adds	r3, #19
 800bf60:	4618      	mov	r0, r3
 800bf62:	f7fe fc7b 	bl	800a85c <ld_word>
 800bf66:	4603      	mov	r3, r0
 800bf68:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bf6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d106      	bne.n	800bf7e <find_volume+0x282>
 800bf70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf72:	3334      	adds	r3, #52	; 0x34
 800bf74:	3320      	adds	r3, #32
 800bf76:	4618      	mov	r0, r3
 800bf78:	f7fe fc88 	bl	800a88c <ld_dword>
 800bf7c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bf7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf80:	3334      	adds	r3, #52	; 0x34
 800bf82:	330e      	adds	r3, #14
 800bf84:	4618      	mov	r0, r3
 800bf86:	f7fe fc69 	bl	800a85c <ld_word>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bf8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d101      	bne.n	800bf98 <find_volume+0x29c>
 800bf94:	230d      	movs	r3, #13
 800bf96:	e0fa      	b.n	800c18e <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bf98:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bf9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf9c:	4413      	add	r3, r2
 800bf9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfa0:	8912      	ldrh	r2, [r2, #8]
 800bfa2:	0912      	lsrs	r2, r2, #4
 800bfa4:	b292      	uxth	r2, r2
 800bfa6:	4413      	add	r3, r2
 800bfa8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bfaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d204      	bcs.n	800bfbc <find_volume+0x2c0>
 800bfb2:	230d      	movs	r3, #13
 800bfb4:	e0eb      	b.n	800c18e <find_volume+0x492>
 800bfb6:	bf00      	nop
 800bfb8:	20000d30 	.word	0x20000d30
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bfbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc0:	1ad3      	subs	r3, r2, r3
 800bfc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfc4:	8952      	ldrh	r2, [r2, #10]
 800bfc6:	fbb3 f3f2 	udiv	r3, r3, r2
 800bfca:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d101      	bne.n	800bfd6 <find_volume+0x2da>
 800bfd2:	230d      	movs	r3, #13
 800bfd4:	e0db      	b.n	800c18e <find_volume+0x492>
		fmt = FS_FAT32;
 800bfd6:	2303      	movs	r3, #3
 800bfd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bfdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfde:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d802      	bhi.n	800bfec <find_volume+0x2f0>
 800bfe6:	2302      	movs	r3, #2
 800bfe8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfee:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d802      	bhi.n	800bffc <find_volume+0x300>
 800bff6:	2301      	movs	r3, #1
 800bff8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffe:	1c9a      	adds	r2, r3, #2
 800c000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c002:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c006:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c008:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c00a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c00c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c00e:	441a      	add	r2, r3
 800c010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c012:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c014:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c018:	441a      	add	r2, r3
 800c01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c01c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800c01e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c022:	2b03      	cmp	r3, #3
 800c024:	d11e      	bne.n	800c064 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c028:	3334      	adds	r3, #52	; 0x34
 800c02a:	332a      	adds	r3, #42	; 0x2a
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7fe fc15 	bl	800a85c <ld_word>
 800c032:	4603      	mov	r3, r0
 800c034:	2b00      	cmp	r3, #0
 800c036:	d001      	beq.n	800c03c <find_volume+0x340>
 800c038:	230d      	movs	r3, #13
 800c03a:	e0a8      	b.n	800c18e <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c03e:	891b      	ldrh	r3, [r3, #8]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d001      	beq.n	800c048 <find_volume+0x34c>
 800c044:	230d      	movs	r3, #13
 800c046:	e0a2      	b.n	800c18e <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c04a:	3334      	adds	r3, #52	; 0x34
 800c04c:	332c      	adds	r3, #44	; 0x2c
 800c04e:	4618      	mov	r0, r3
 800c050:	f7fe fc1c 	bl	800a88c <ld_dword>
 800c054:	4602      	mov	r2, r0
 800c056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c058:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c05c:	699b      	ldr	r3, [r3, #24]
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	647b      	str	r3, [r7, #68]	; 0x44
 800c062:	e01f      	b.n	800c0a4 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c066:	891b      	ldrh	r3, [r3, #8]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d101      	bne.n	800c070 <find_volume+0x374>
 800c06c:	230d      	movs	r3, #13
 800c06e:	e08e      	b.n	800c18e <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c072:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c076:	441a      	add	r2, r3
 800c078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c07a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c07c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c080:	2b02      	cmp	r3, #2
 800c082:	d103      	bne.n	800c08c <find_volume+0x390>
 800c084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c086:	699b      	ldr	r3, [r3, #24]
 800c088:	005b      	lsls	r3, r3, #1
 800c08a:	e00a      	b.n	800c0a2 <find_volume+0x3a6>
 800c08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08e:	699a      	ldr	r2, [r3, #24]
 800c090:	4613      	mov	r3, r2
 800c092:	005b      	lsls	r3, r3, #1
 800c094:	4413      	add	r3, r2
 800c096:	085a      	lsrs	r2, r3, #1
 800c098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c09a:	699b      	ldr	r3, [r3, #24]
 800c09c:	f003 0301 	and.w	r3, r3, #1
 800c0a0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c0a2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a6:	69da      	ldr	r2, [r3, #28]
 800c0a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0aa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c0ae:	0a5b      	lsrs	r3, r3, #9
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d201      	bcs.n	800c0b8 <find_volume+0x3bc>
 800c0b4:	230d      	movs	r3, #13
 800c0b6:	e06a      	b.n	800c18e <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c0be:	615a      	str	r2, [r3, #20]
 800c0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c2:	695a      	ldr	r2, [r3, #20]
 800c0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800c0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ca:	2280      	movs	r2, #128	; 0x80
 800c0cc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c0ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c0d2:	2b03      	cmp	r3, #3
 800c0d4:	d149      	bne.n	800c16a <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d8:	3334      	adds	r3, #52	; 0x34
 800c0da:	3330      	adds	r3, #48	; 0x30
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7fe fbbd 	bl	800a85c <ld_word>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b01      	cmp	r3, #1
 800c0e6:	d140      	bne.n	800c16a <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c0e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c0f0:	f7fe fe96 	bl	800ae20 <move_window>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d137      	bne.n	800c16a <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800c0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c102:	3334      	adds	r3, #52	; 0x34
 800c104:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c108:	4618      	mov	r0, r3
 800c10a:	f7fe fba7 	bl	800a85c <ld_word>
 800c10e:	4603      	mov	r3, r0
 800c110:	461a      	mov	r2, r3
 800c112:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c116:	429a      	cmp	r2, r3
 800c118:	d127      	bne.n	800c16a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11c:	3334      	adds	r3, #52	; 0x34
 800c11e:	4618      	mov	r0, r3
 800c120:	f7fe fbb4 	bl	800a88c <ld_dword>
 800c124:	4603      	mov	r3, r0
 800c126:	4a1c      	ldr	r2, [pc, #112]	; (800c198 <find_volume+0x49c>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d11e      	bne.n	800c16a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12e:	3334      	adds	r3, #52	; 0x34
 800c130:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c134:	4618      	mov	r0, r3
 800c136:	f7fe fba9 	bl	800a88c <ld_dword>
 800c13a:	4603      	mov	r3, r0
 800c13c:	4a17      	ldr	r2, [pc, #92]	; (800c19c <find_volume+0x4a0>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d113      	bne.n	800c16a <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c144:	3334      	adds	r3, #52	; 0x34
 800c146:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7fe fb9e 	bl	800a88c <ld_dword>
 800c150:	4602      	mov	r2, r0
 800c152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c154:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c158:	3334      	adds	r3, #52	; 0x34
 800c15a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c15e:	4618      	mov	r0, r3
 800c160:	f7fe fb94 	bl	800a88c <ld_dword>
 800c164:	4602      	mov	r2, r0
 800c166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c168:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c16c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c170:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c172:	4b0b      	ldr	r3, [pc, #44]	; (800c1a0 <find_volume+0x4a4>)
 800c174:	881b      	ldrh	r3, [r3, #0]
 800c176:	3301      	adds	r3, #1
 800c178:	b29a      	uxth	r2, r3
 800c17a:	4b09      	ldr	r3, [pc, #36]	; (800c1a0 <find_volume+0x4a4>)
 800c17c:	801a      	strh	r2, [r3, #0]
 800c17e:	4b08      	ldr	r3, [pc, #32]	; (800c1a0 <find_volume+0x4a4>)
 800c180:	881a      	ldrh	r2, [r3, #0]
 800c182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c184:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c186:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c188:	f7fe fde2 	bl	800ad50 <clear_lock>
#endif
	return FR_OK;
 800c18c:	2300      	movs	r3, #0
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3758      	adds	r7, #88	; 0x58
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	41615252 	.word	0x41615252
 800c19c:	61417272 	.word	0x61417272
 800c1a0:	20000d34 	.word	0x20000d34

0800c1a4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c1ae:	2309      	movs	r3, #9
 800c1b0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d02e      	beq.n	800c216 <validate+0x72>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d02a      	beq.n	800c216 <validate+0x72>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d025      	beq.n	800c216 <validate+0x72>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	889a      	ldrh	r2, [r3, #4]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	88db      	ldrh	r3, [r3, #6]
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	d11e      	bne.n	800c216 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7fe fc3d 	bl	800aa5c <lock_fs>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d014      	beq.n	800c212 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	785b      	ldrb	r3, [r3, #1]
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7fe fa96 	bl	800a720 <disk_status>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	f003 0301 	and.w	r3, r3, #1
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d102      	bne.n	800c204 <validate+0x60>
				res = FR_OK;
 800c1fe:	2300      	movs	r3, #0
 800c200:	73fb      	strb	r3, [r7, #15]
 800c202:	e008      	b.n	800c216 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	2100      	movs	r1, #0
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7fe fc3c 	bl	800aa88 <unlock_fs>
 800c210:	e001      	b.n	800c216 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800c212:	230f      	movs	r3, #15
 800c214:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c216:	7bfb      	ldrb	r3, [r7, #15]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d102      	bne.n	800c222 <validate+0x7e>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	e000      	b.n	800c224 <validate+0x80>
 800c222:	2300      	movs	r3, #0
 800c224:	683a      	ldr	r2, [r7, #0]
 800c226:	6013      	str	r3, [r2, #0]
	return res;
 800c228:	7bfb      	ldrb	r3, [r7, #15]
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3710      	adds	r7, #16
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
	...

0800c234 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b088      	sub	sp, #32
 800c238:	af00      	add	r7, sp, #0
 800c23a:	60f8      	str	r0, [r7, #12]
 800c23c:	60b9      	str	r1, [r7, #8]
 800c23e:	4613      	mov	r3, r2
 800c240:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c246:	f107 0310 	add.w	r3, r7, #16
 800c24a:	4618      	mov	r0, r3
 800c24c:	f7ff fcbb 	bl	800bbc6 <get_ldnumber>
 800c250:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c252:	69fb      	ldr	r3, [r7, #28]
 800c254:	2b00      	cmp	r3, #0
 800c256:	da01      	bge.n	800c25c <f_mount+0x28>
 800c258:	230b      	movs	r3, #11
 800c25a:	e048      	b.n	800c2ee <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c25c:	4a26      	ldr	r2, [pc, #152]	; (800c2f8 <f_mount+0xc4>)
 800c25e:	69fb      	ldr	r3, [r7, #28]
 800c260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c264:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d00f      	beq.n	800c28c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c26c:	69b8      	ldr	r0, [r7, #24]
 800c26e:	f7fe fd6f 	bl	800ad50 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	68db      	ldr	r3, [r3, #12]
 800c276:	4618      	mov	r0, r3
 800c278:	f000 fe82 	bl	800cf80 <ff_del_syncobj>
 800c27c:	4603      	mov	r3, r0
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d101      	bne.n	800c286 <f_mount+0x52>
 800c282:	2302      	movs	r3, #2
 800c284:	e033      	b.n	800c2ee <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	2200      	movs	r2, #0
 800c28a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d00f      	beq.n	800c2b2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2200      	movs	r2, #0
 800c296:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800c298:	69fb      	ldr	r3, [r7, #28]
 800c29a:	b2da      	uxtb	r2, r3
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	330c      	adds	r3, #12
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	4610      	mov	r0, r2
 800c2a4:	f000 fe51 	bl	800cf4a <ff_cre_syncobj>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d101      	bne.n	800c2b2 <f_mount+0x7e>
 800c2ae:	2302      	movs	r3, #2
 800c2b0:	e01d      	b.n	800c2ee <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c2b2:	68fa      	ldr	r2, [r7, #12]
 800c2b4:	4910      	ldr	r1, [pc, #64]	; (800c2f8 <f_mount+0xc4>)
 800c2b6:	69fb      	ldr	r3, [r7, #28]
 800c2b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d002      	beq.n	800c2c8 <f_mount+0x94>
 800c2c2:	79fb      	ldrb	r3, [r7, #7]
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	d001      	beq.n	800c2cc <f_mount+0x98>
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	e010      	b.n	800c2ee <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c2cc:	f107 010c 	add.w	r1, r7, #12
 800c2d0:	f107 0308 	add.w	r3, r7, #8
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7ff fd10 	bl	800bcfc <find_volume>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	7dfa      	ldrb	r2, [r7, #23]
 800c2e4:	4611      	mov	r1, r2
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f7fe fbce 	bl	800aa88 <unlock_fs>
 800c2ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3720      	adds	r7, #32
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	20000d30 	.word	0x20000d30

0800c2fc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b098      	sub	sp, #96	; 0x60
 800c300:	af00      	add	r7, sp, #0
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	60b9      	str	r1, [r7, #8]
 800c306:	4613      	mov	r3, r2
 800c308:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d101      	bne.n	800c314 <f_open+0x18>
 800c310:	2309      	movs	r3, #9
 800c312:	e1b4      	b.n	800c67e <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c314:	79fb      	ldrb	r3, [r7, #7]
 800c316:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c31a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c31c:	79fa      	ldrb	r2, [r7, #7]
 800c31e:	f107 0110 	add.w	r1, r7, #16
 800c322:	f107 0308 	add.w	r3, r7, #8
 800c326:	4618      	mov	r0, r3
 800c328:	f7ff fce8 	bl	800bcfc <find_volume>
 800c32c:	4603      	mov	r3, r0
 800c32e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800c332:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c336:	2b00      	cmp	r3, #0
 800c338:	f040 8191 	bne.w	800c65e <f_open+0x362>
		dj.obj.fs = fs;
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c340:	68ba      	ldr	r2, [r7, #8]
 800c342:	f107 0314 	add.w	r3, r7, #20
 800c346:	4611      	mov	r1, r2
 800c348:	4618      	mov	r0, r3
 800c34a:	f7ff fbcb 	bl	800bae4 <follow_path>
 800c34e:	4603      	mov	r3, r0
 800c350:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c354:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d11a      	bne.n	800c392 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c35c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c360:	b25b      	sxtb	r3, r3
 800c362:	2b00      	cmp	r3, #0
 800c364:	da03      	bge.n	800c36e <f_open+0x72>
				res = FR_INVALID_NAME;
 800c366:	2306      	movs	r3, #6
 800c368:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c36c:	e011      	b.n	800c392 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c36e:	79fb      	ldrb	r3, [r7, #7]
 800c370:	f023 0301 	bic.w	r3, r3, #1
 800c374:	2b00      	cmp	r3, #0
 800c376:	bf14      	ite	ne
 800c378:	2301      	movne	r3, #1
 800c37a:	2300      	moveq	r3, #0
 800c37c:	b2db      	uxtb	r3, r3
 800c37e:	461a      	mov	r2, r3
 800c380:	f107 0314 	add.w	r3, r7, #20
 800c384:	4611      	mov	r1, r2
 800c386:	4618      	mov	r0, r3
 800c388:	f7fe fb9a 	bl	800aac0 <chk_lock>
 800c38c:	4603      	mov	r3, r0
 800c38e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c392:	79fb      	ldrb	r3, [r7, #7]
 800c394:	f003 031c 	and.w	r3, r3, #28
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d07f      	beq.n	800c49c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c39c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d017      	beq.n	800c3d4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c3a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3a8:	2b04      	cmp	r3, #4
 800c3aa:	d10e      	bne.n	800c3ca <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c3ac:	f7fe fbe4 	bl	800ab78 <enq_lock>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d006      	beq.n	800c3c4 <f_open+0xc8>
 800c3b6:	f107 0314 	add.w	r3, r7, #20
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7ff facb 	bl	800b956 <dir_register>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	e000      	b.n	800c3c6 <f_open+0xca>
 800c3c4:	2312      	movs	r3, #18
 800c3c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c3ca:	79fb      	ldrb	r3, [r7, #7]
 800c3cc:	f043 0308 	orr.w	r3, r3, #8
 800c3d0:	71fb      	strb	r3, [r7, #7]
 800c3d2:	e010      	b.n	800c3f6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c3d4:	7ebb      	ldrb	r3, [r7, #26]
 800c3d6:	f003 0311 	and.w	r3, r3, #17
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d003      	beq.n	800c3e6 <f_open+0xea>
					res = FR_DENIED;
 800c3de:	2307      	movs	r3, #7
 800c3e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c3e4:	e007      	b.n	800c3f6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c3e6:	79fb      	ldrb	r3, [r7, #7]
 800c3e8:	f003 0304 	and.w	r3, r3, #4
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d002      	beq.n	800c3f6 <f_open+0xfa>
 800c3f0:	2308      	movs	r3, #8
 800c3f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c3f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d168      	bne.n	800c4d0 <f_open+0x1d4>
 800c3fe:	79fb      	ldrb	r3, [r7, #7]
 800c400:	f003 0308 	and.w	r3, r3, #8
 800c404:	2b00      	cmp	r3, #0
 800c406:	d063      	beq.n	800c4d0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800c408:	f7fd fc4c 	bl	8009ca4 <get_fattime>
 800c40c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c410:	330e      	adds	r3, #14
 800c412:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c414:	4618      	mov	r0, r3
 800c416:	f7fe fa77 	bl	800a908 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c41a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c41c:	3316      	adds	r3, #22
 800c41e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c420:	4618      	mov	r0, r3
 800c422:	f7fe fa71 	bl	800a908 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c428:	330b      	adds	r3, #11
 800c42a:	2220      	movs	r2, #32
 800c42c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c432:	4611      	mov	r1, r2
 800c434:	4618      	mov	r0, r3
 800c436:	f7ff f9fa 	bl	800b82e <ld_clust>
 800c43a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c440:	2200      	movs	r2, #0
 800c442:	4618      	mov	r0, r3
 800c444:	f7ff fa12 	bl	800b86c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c44a:	331c      	adds	r3, #28
 800c44c:	2100      	movs	r1, #0
 800c44e:	4618      	mov	r0, r3
 800c450:	f7fe fa5a 	bl	800a908 <st_dword>
					fs->wflag = 1;
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	2201      	movs	r2, #1
 800c458:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c45a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d037      	beq.n	800c4d0 <f_open+0x1d4>
						dw = fs->winsect;
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c464:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c466:	f107 0314 	add.w	r3, r7, #20
 800c46a:	2200      	movs	r2, #0
 800c46c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c46e:	4618      	mov	r0, r3
 800c470:	f7fe ff25 	bl	800b2be <remove_chain>
 800c474:	4603      	mov	r3, r0
 800c476:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c47a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d126      	bne.n	800c4d0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c486:	4618      	mov	r0, r3
 800c488:	f7fe fcca 	bl	800ae20 <move_window>
 800c48c:	4603      	mov	r3, r0
 800c48e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c496:	3a01      	subs	r2, #1
 800c498:	611a      	str	r2, [r3, #16]
 800c49a:	e019      	b.n	800c4d0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c49c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d115      	bne.n	800c4d0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c4a4:	7ebb      	ldrb	r3, [r7, #26]
 800c4a6:	f003 0310 	and.w	r3, r3, #16
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d003      	beq.n	800c4b6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800c4ae:	2304      	movs	r3, #4
 800c4b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c4b4:	e00c      	b.n	800c4d0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c4b6:	79fb      	ldrb	r3, [r7, #7]
 800c4b8:	f003 0302 	and.w	r3, r3, #2
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d007      	beq.n	800c4d0 <f_open+0x1d4>
 800c4c0:	7ebb      	ldrb	r3, [r7, #26]
 800c4c2:	f003 0301 	and.w	r3, r3, #1
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d002      	beq.n	800c4d0 <f_open+0x1d4>
						res = FR_DENIED;
 800c4ca:	2307      	movs	r3, #7
 800c4cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c4d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d128      	bne.n	800c52a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c4d8:	79fb      	ldrb	r3, [r7, #7]
 800c4da:	f003 0308 	and.w	r3, r3, #8
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d003      	beq.n	800c4ea <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c4e2:	79fb      	ldrb	r3, [r7, #7]
 800c4e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4e8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c4f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c4f8:	79fb      	ldrb	r3, [r7, #7]
 800c4fa:	f023 0301 	bic.w	r3, r3, #1
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	bf14      	ite	ne
 800c502:	2301      	movne	r3, #1
 800c504:	2300      	moveq	r3, #0
 800c506:	b2db      	uxtb	r3, r3
 800c508:	461a      	mov	r2, r3
 800c50a:	f107 0314 	add.w	r3, r7, #20
 800c50e:	4611      	mov	r1, r2
 800c510:	4618      	mov	r0, r3
 800c512:	f7fe fb53 	bl	800abbc <inc_lock>
 800c516:	4602      	mov	r2, r0
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	691b      	ldr	r3, [r3, #16]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d102      	bne.n	800c52a <f_open+0x22e>
 800c524:	2302      	movs	r3, #2
 800c526:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c52a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c52e:	2b00      	cmp	r3, #0
 800c530:	f040 8095 	bne.w	800c65e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c538:	4611      	mov	r1, r2
 800c53a:	4618      	mov	r0, r3
 800c53c:	f7ff f977 	bl	800b82e <ld_clust>
 800c540:	4602      	mov	r2, r0
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c548:	331c      	adds	r3, #28
 800c54a:	4618      	mov	r0, r3
 800c54c:	f7fe f99e 	bl	800a88c <ld_dword>
 800c550:	4602      	mov	r2, r0
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2200      	movs	r2, #0
 800c55a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c55c:	693a      	ldr	r2, [r7, #16]
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	88da      	ldrh	r2, [r3, #6]
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	79fa      	ldrb	r2, [r7, #7]
 800c56e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	2200      	movs	r2, #0
 800c574:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2200      	movs	r2, #0
 800c57a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2200      	movs	r2, #0
 800c580:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	3330      	adds	r3, #48	; 0x30
 800c586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c58a:	2100      	movs	r1, #0
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7fe fa08 	bl	800a9a2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c592:	79fb      	ldrb	r3, [r7, #7]
 800c594:	f003 0320 	and.w	r3, r3, #32
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d060      	beq.n	800c65e <f_open+0x362>
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	68db      	ldr	r3, [r3, #12]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d05c      	beq.n	800c65e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	68da      	ldr	r2, [r3, #12]
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	895b      	ldrh	r3, [r3, #10]
 800c5b0:	025b      	lsls	r3, r3, #9
 800c5b2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	689b      	ldr	r3, [r3, #8]
 800c5b8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	657b      	str	r3, [r7, #84]	; 0x54
 800c5c0:	e016      	b.n	800c5f0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7fe fce5 	bl	800af96 <get_fat>
 800c5cc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c5ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d802      	bhi.n	800c5da <f_open+0x2de>
 800c5d4:	2302      	movs	r3, #2
 800c5d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c5da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5e0:	d102      	bne.n	800c5e8 <f_open+0x2ec>
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c5e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c5ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5ec:	1ad3      	subs	r3, r2, r3
 800c5ee:	657b      	str	r3, [r7, #84]	; 0x54
 800c5f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d103      	bne.n	800c600 <f_open+0x304>
 800c5f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c5fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	d8e0      	bhi.n	800c5c2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c604:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c606:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d127      	bne.n	800c65e <f_open+0x362>
 800c60e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c614:	2b00      	cmp	r3, #0
 800c616:	d022      	beq.n	800c65e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c61c:	4618      	mov	r0, r3
 800c61e:	f7fe fc9b 	bl	800af58 <clust2sect>
 800c622:	6478      	str	r0, [r7, #68]	; 0x44
 800c624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c626:	2b00      	cmp	r3, #0
 800c628:	d103      	bne.n	800c632 <f_open+0x336>
						res = FR_INT_ERR;
 800c62a:	2302      	movs	r3, #2
 800c62c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c630:	e015      	b.n	800c65e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c634:	0a5a      	lsrs	r2, r3, #9
 800c636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c638:	441a      	add	r2, r3
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	7858      	ldrb	r0, [r3, #1]
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	6a1a      	ldr	r2, [r3, #32]
 800c64c:	2301      	movs	r3, #1
 800c64e:	f7fe f8a7 	bl	800a7a0 <disk_read>
 800c652:	4603      	mov	r3, r0
 800c654:	2b00      	cmp	r3, #0
 800c656:	d002      	beq.n	800c65e <f_open+0x362>
 800c658:	2301      	movs	r3, #1
 800c65a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c65e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c662:	2b00      	cmp	r3, #0
 800c664:	d002      	beq.n	800c66c <f_open+0x370>
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	2200      	movs	r2, #0
 800c66a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800c672:	4611      	mov	r1, r2
 800c674:	4618      	mov	r0, r3
 800c676:	f7fe fa07 	bl	800aa88 <unlock_fs>
 800c67a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3760      	adds	r7, #96	; 0x60
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}

0800c686 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c686:	b580      	push	{r7, lr}
 800c688:	b08e      	sub	sp, #56	; 0x38
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	60f8      	str	r0, [r7, #12]
 800c68e:	60b9      	str	r1, [r7, #8]
 800c690:	607a      	str	r2, [r7, #4]
 800c692:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	2200      	movs	r2, #0
 800c69c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	f107 0214 	add.w	r2, r7, #20
 800c6a4:	4611      	mov	r1, r2
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7ff fd7c 	bl	800c1a4 <validate>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c6b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d107      	bne.n	800c6ca <f_read+0x44>
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	7d5b      	ldrb	r3, [r3, #21]
 800c6be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c6c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d009      	beq.n	800c6de <f_read+0x58>
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800c6d0:	4611      	mov	r1, r2
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f7fe f9d8 	bl	800aa88 <unlock_fs>
 800c6d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c6dc:	e13d      	b.n	800c95a <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	7d1b      	ldrb	r3, [r3, #20]
 800c6e2:	f003 0301 	and.w	r3, r3, #1
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d106      	bne.n	800c6f8 <f_read+0x72>
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	2107      	movs	r1, #7
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7fe f9ca 	bl	800aa88 <unlock_fs>
 800c6f4:	2307      	movs	r3, #7
 800c6f6:	e130      	b.n	800c95a <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	68da      	ldr	r2, [r3, #12]
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	699b      	ldr	r3, [r3, #24]
 800c700:	1ad3      	subs	r3, r2, r3
 800c702:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c704:	687a      	ldr	r2, [r7, #4]
 800c706:	6a3b      	ldr	r3, [r7, #32]
 800c708:	429a      	cmp	r2, r3
 800c70a:	f240 811c 	bls.w	800c946 <f_read+0x2c0>
 800c70e:	6a3b      	ldr	r3, [r7, #32]
 800c710:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c712:	e118      	b.n	800c946 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	699b      	ldr	r3, [r3, #24]
 800c718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	f040 80e4 	bne.w	800c8ea <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	699b      	ldr	r3, [r3, #24]
 800c726:	0a5b      	lsrs	r3, r3, #9
 800c728:	697a      	ldr	r2, [r7, #20]
 800c72a:	8952      	ldrh	r2, [r2, #10]
 800c72c:	3a01      	subs	r2, #1
 800c72e:	4013      	ands	r3, r2
 800c730:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c732:	69fb      	ldr	r3, [r7, #28]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d139      	bne.n	800c7ac <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	699b      	ldr	r3, [r3, #24]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d103      	bne.n	800c748 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	689b      	ldr	r3, [r3, #8]
 800c744:	633b      	str	r3, [r7, #48]	; 0x30
 800c746:	e013      	b.n	800c770 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d007      	beq.n	800c760 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	699b      	ldr	r3, [r3, #24]
 800c754:	4619      	mov	r1, r3
 800c756:	68f8      	ldr	r0, [r7, #12]
 800c758:	f7fe feae 	bl	800b4b8 <clmt_clust>
 800c75c:	6338      	str	r0, [r7, #48]	; 0x30
 800c75e:	e007      	b.n	800c770 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c760:	68fa      	ldr	r2, [r7, #12]
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	69db      	ldr	r3, [r3, #28]
 800c766:	4619      	mov	r1, r3
 800c768:	4610      	mov	r0, r2
 800c76a:	f7fe fc14 	bl	800af96 <get_fat>
 800c76e:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c772:	2b01      	cmp	r3, #1
 800c774:	d809      	bhi.n	800c78a <f_read+0x104>
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2202      	movs	r2, #2
 800c77a:	755a      	strb	r2, [r3, #21]
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	2102      	movs	r1, #2
 800c780:	4618      	mov	r0, r3
 800c782:	f7fe f981 	bl	800aa88 <unlock_fs>
 800c786:	2302      	movs	r3, #2
 800c788:	e0e7      	b.n	800c95a <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c790:	d109      	bne.n	800c7a6 <f_read+0x120>
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	2201      	movs	r2, #1
 800c796:	755a      	strb	r2, [r3, #21]
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	2101      	movs	r1, #1
 800c79c:	4618      	mov	r0, r3
 800c79e:	f7fe f973 	bl	800aa88 <unlock_fs>
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	e0d9      	b.n	800c95a <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7aa:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c7ac:	697a      	ldr	r2, [r7, #20]
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	69db      	ldr	r3, [r3, #28]
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	4610      	mov	r0, r2
 800c7b6:	f7fe fbcf 	bl	800af58 <clust2sect>
 800c7ba:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c7bc:	69bb      	ldr	r3, [r7, #24]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d109      	bne.n	800c7d6 <f_read+0x150>
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	2202      	movs	r2, #2
 800c7c6:	755a      	strb	r2, [r3, #21]
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	2102      	movs	r1, #2
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f7fe f95b 	bl	800aa88 <unlock_fs>
 800c7d2:	2302      	movs	r3, #2
 800c7d4:	e0c1      	b.n	800c95a <f_read+0x2d4>
			sect += csect;
 800c7d6:	69ba      	ldr	r2, [r7, #24]
 800c7d8:	69fb      	ldr	r3, [r7, #28]
 800c7da:	4413      	add	r3, r2
 800c7dc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	0a5b      	lsrs	r3, r3, #9
 800c7e2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d03e      	beq.n	800c868 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c7ea:	69fa      	ldr	r2, [r7, #28]
 800c7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ee:	4413      	add	r3, r2
 800c7f0:	697a      	ldr	r2, [r7, #20]
 800c7f2:	8952      	ldrh	r2, [r2, #10]
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d905      	bls.n	800c804 <f_read+0x17e>
					cc = fs->csize - csect;
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	895b      	ldrh	r3, [r3, #10]
 800c7fc:	461a      	mov	r2, r3
 800c7fe:	69fb      	ldr	r3, [r7, #28]
 800c800:	1ad3      	subs	r3, r2, r3
 800c802:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	7858      	ldrb	r0, [r3, #1]
 800c808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80a:	69ba      	ldr	r2, [r7, #24]
 800c80c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c80e:	f7fd ffc7 	bl	800a7a0 <disk_read>
 800c812:	4603      	mov	r3, r0
 800c814:	2b00      	cmp	r3, #0
 800c816:	d009      	beq.n	800c82c <f_read+0x1a6>
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2201      	movs	r2, #1
 800c81c:	755a      	strb	r2, [r3, #21]
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	2101      	movs	r1, #1
 800c822:	4618      	mov	r0, r3
 800c824:	f7fe f930 	bl	800aa88 <unlock_fs>
 800c828:	2301      	movs	r3, #1
 800c82a:	e096      	b.n	800c95a <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	7d1b      	ldrb	r3, [r3, #20]
 800c830:	b25b      	sxtb	r3, r3
 800c832:	2b00      	cmp	r3, #0
 800c834:	da14      	bge.n	800c860 <f_read+0x1da>
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	6a1a      	ldr	r2, [r3, #32]
 800c83a:	69bb      	ldr	r3, [r7, #24]
 800c83c:	1ad3      	subs	r3, r2, r3
 800c83e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c840:	429a      	cmp	r2, r3
 800c842:	d90d      	bls.n	800c860 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	6a1a      	ldr	r2, [r3, #32]
 800c848:	69bb      	ldr	r3, [r7, #24]
 800c84a:	1ad3      	subs	r3, r2, r3
 800c84c:	025b      	lsls	r3, r3, #9
 800c84e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c850:	18d0      	adds	r0, r2, r3
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	3330      	adds	r3, #48	; 0x30
 800c856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c85a:	4619      	mov	r1, r3
 800c85c:	f7fe f880 	bl	800a960 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c862:	025b      	lsls	r3, r3, #9
 800c864:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800c866:	e05a      	b.n	800c91e <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	6a1b      	ldr	r3, [r3, #32]
 800c86c:	69ba      	ldr	r2, [r7, #24]
 800c86e:	429a      	cmp	r2, r3
 800c870:	d038      	beq.n	800c8e4 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	7d1b      	ldrb	r3, [r3, #20]
 800c876:	b25b      	sxtb	r3, r3
 800c878:	2b00      	cmp	r3, #0
 800c87a:	da1d      	bge.n	800c8b8 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	7858      	ldrb	r0, [r3, #1]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	6a1a      	ldr	r2, [r3, #32]
 800c88a:	2301      	movs	r3, #1
 800c88c:	f7fd ffa8 	bl	800a7e0 <disk_write>
 800c890:	4603      	mov	r3, r0
 800c892:	2b00      	cmp	r3, #0
 800c894:	d009      	beq.n	800c8aa <f_read+0x224>
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2201      	movs	r2, #1
 800c89a:	755a      	strb	r2, [r3, #21]
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	2101      	movs	r1, #1
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f7fe f8f1 	bl	800aa88 <unlock_fs>
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	e057      	b.n	800c95a <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	7d1b      	ldrb	r3, [r3, #20]
 800c8ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8b2:	b2da      	uxtb	r2, r3
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	7858      	ldrb	r0, [r3, #1]
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	69ba      	ldr	r2, [r7, #24]
 800c8c6:	f7fd ff6b 	bl	800a7a0 <disk_read>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d009      	beq.n	800c8e4 <f_read+0x25e>
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	755a      	strb	r2, [r3, #21]
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	2101      	movs	r1, #1
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f7fe f8d4 	bl	800aa88 <unlock_fs>
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	e03a      	b.n	800c95a <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	69ba      	ldr	r2, [r7, #24]
 800c8e8:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	699b      	ldr	r3, [r3, #24]
 800c8ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8f2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c8f6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c8f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d901      	bls.n	800c904 <f_read+0x27e>
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	699b      	ldr	r3, [r3, #24]
 800c90e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c912:	4413      	add	r3, r2
 800c914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c916:	4619      	mov	r1, r3
 800c918:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c91a:	f7fe f821 	bl	800a960 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c91e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c922:	4413      	add	r3, r2
 800c924:	627b      	str	r3, [r7, #36]	; 0x24
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	699a      	ldr	r2, [r3, #24]
 800c92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c92c:	441a      	add	r2, r3
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	619a      	str	r2, [r3, #24]
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	681a      	ldr	r2, [r3, #0]
 800c936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c938:	441a      	add	r2, r3
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	601a      	str	r2, [r3, #0]
 800c93e:	687a      	ldr	r2, [r7, #4]
 800c940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c942:	1ad3      	subs	r3, r2, r3
 800c944:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	f47f aee3 	bne.w	800c714 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	2100      	movs	r1, #0
 800c952:	4618      	mov	r0, r3
 800c954:	f7fe f898 	bl	800aa88 <unlock_fs>
 800c958:	2300      	movs	r3, #0
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	3738      	adds	r7, #56	; 0x38
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}

0800c962 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c962:	b580      	push	{r7, lr}
 800c964:	b08c      	sub	sp, #48	; 0x30
 800c966:	af00      	add	r7, sp, #0
 800c968:	60f8      	str	r0, [r7, #12]
 800c96a:	60b9      	str	r1, [r7, #8]
 800c96c:	607a      	str	r2, [r7, #4]
 800c96e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	2200      	movs	r2, #0
 800c978:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	f107 0210 	add.w	r2, r7, #16
 800c980:	4611      	mov	r1, r2
 800c982:	4618      	mov	r0, r3
 800c984:	f7ff fc0e 	bl	800c1a4 <validate>
 800c988:	4603      	mov	r3, r0
 800c98a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c98e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c992:	2b00      	cmp	r3, #0
 800c994:	d107      	bne.n	800c9a6 <f_write+0x44>
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	7d5b      	ldrb	r3, [r3, #21]
 800c99a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c99e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d009      	beq.n	800c9ba <f_write+0x58>
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c9ac:	4611      	mov	r1, r2
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7fe f86a 	bl	800aa88 <unlock_fs>
 800c9b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9b8:	e173      	b.n	800cca2 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	7d1b      	ldrb	r3, [r3, #20]
 800c9be:	f003 0302 	and.w	r3, r3, #2
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d106      	bne.n	800c9d4 <f_write+0x72>
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	2107      	movs	r1, #7
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7fe f85c 	bl	800aa88 <unlock_fs>
 800c9d0:	2307      	movs	r3, #7
 800c9d2:	e166      	b.n	800cca2 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	699a      	ldr	r2, [r3, #24]
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	441a      	add	r2, r3
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	699b      	ldr	r3, [r3, #24]
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	f080 814b 	bcs.w	800cc7c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	699b      	ldr	r3, [r3, #24]
 800c9ea:	43db      	mvns	r3, r3
 800c9ec:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c9ee:	e145      	b.n	800cc7c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	699b      	ldr	r3, [r3, #24]
 800c9f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	f040 8101 	bne.w	800cc00 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	699b      	ldr	r3, [r3, #24]
 800ca02:	0a5b      	lsrs	r3, r3, #9
 800ca04:	693a      	ldr	r2, [r7, #16]
 800ca06:	8952      	ldrh	r2, [r2, #10]
 800ca08:	3a01      	subs	r2, #1
 800ca0a:	4013      	ands	r3, r2
 800ca0c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ca0e:	69bb      	ldr	r3, [r7, #24]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d14d      	bne.n	800cab0 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	699b      	ldr	r3, [r3, #24]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d10c      	bne.n	800ca36 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	689b      	ldr	r3, [r3, #8]
 800ca20:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ca22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d11a      	bne.n	800ca5e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	2100      	movs	r1, #0
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f7fe fcab 	bl	800b388 <create_chain>
 800ca32:	62b8      	str	r0, [r7, #40]	; 0x28
 800ca34:	e013      	b.n	800ca5e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d007      	beq.n	800ca4e <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	699b      	ldr	r3, [r3, #24]
 800ca42:	4619      	mov	r1, r3
 800ca44:	68f8      	ldr	r0, [r7, #12]
 800ca46:	f7fe fd37 	bl	800b4b8 <clmt_clust>
 800ca4a:	62b8      	str	r0, [r7, #40]	; 0x28
 800ca4c:	e007      	b.n	800ca5e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ca4e:	68fa      	ldr	r2, [r7, #12]
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	69db      	ldr	r3, [r3, #28]
 800ca54:	4619      	mov	r1, r3
 800ca56:	4610      	mov	r0, r2
 800ca58:	f7fe fc96 	bl	800b388 <create_chain>
 800ca5c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ca5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	f000 8110 	beq.w	800cc86 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ca66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d109      	bne.n	800ca80 <f_write+0x11e>
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	2202      	movs	r2, #2
 800ca70:	755a      	strb	r2, [r3, #21]
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	2102      	movs	r1, #2
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7fe f806 	bl	800aa88 <unlock_fs>
 800ca7c:	2302      	movs	r3, #2
 800ca7e:	e110      	b.n	800cca2 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ca80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca86:	d109      	bne.n	800ca9c <f_write+0x13a>
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	755a      	strb	r2, [r3, #21]
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	2101      	movs	r1, #1
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7fd fff8 	bl	800aa88 <unlock_fs>
 800ca98:	2301      	movs	r3, #1
 800ca9a:	e102      	b.n	800cca2 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800caa0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	689b      	ldr	r3, [r3, #8]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d102      	bne.n	800cab0 <f_write+0x14e>
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800caae:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	7d1b      	ldrb	r3, [r3, #20]
 800cab4:	b25b      	sxtb	r3, r3
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	da1d      	bge.n	800caf6 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	7858      	ldrb	r0, [r3, #1]
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	6a1a      	ldr	r2, [r3, #32]
 800cac8:	2301      	movs	r3, #1
 800caca:	f7fd fe89 	bl	800a7e0 <disk_write>
 800cace:	4603      	mov	r3, r0
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d009      	beq.n	800cae8 <f_write+0x186>
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2201      	movs	r2, #1
 800cad8:	755a      	strb	r2, [r3, #21]
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	2101      	movs	r1, #1
 800cade:	4618      	mov	r0, r3
 800cae0:	f7fd ffd2 	bl	800aa88 <unlock_fs>
 800cae4:	2301      	movs	r3, #1
 800cae6:	e0dc      	b.n	800cca2 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	7d1b      	ldrb	r3, [r3, #20]
 800caec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caf0:	b2da      	uxtb	r2, r3
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800caf6:	693a      	ldr	r2, [r7, #16]
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	69db      	ldr	r3, [r3, #28]
 800cafc:	4619      	mov	r1, r3
 800cafe:	4610      	mov	r0, r2
 800cb00:	f7fe fa2a 	bl	800af58 <clust2sect>
 800cb04:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d109      	bne.n	800cb20 <f_write+0x1be>
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	2202      	movs	r2, #2
 800cb10:	755a      	strb	r2, [r3, #21]
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	2102      	movs	r1, #2
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7fd ffb6 	bl	800aa88 <unlock_fs>
 800cb1c:	2302      	movs	r3, #2
 800cb1e:	e0c0      	b.n	800cca2 <f_write+0x340>
			sect += csect;
 800cb20:	697a      	ldr	r2, [r7, #20]
 800cb22:	69bb      	ldr	r3, [r7, #24]
 800cb24:	4413      	add	r3, r2
 800cb26:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	0a5b      	lsrs	r3, r3, #9
 800cb2c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800cb2e:	6a3b      	ldr	r3, [r7, #32]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d041      	beq.n	800cbb8 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cb34:	69ba      	ldr	r2, [r7, #24]
 800cb36:	6a3b      	ldr	r3, [r7, #32]
 800cb38:	4413      	add	r3, r2
 800cb3a:	693a      	ldr	r2, [r7, #16]
 800cb3c:	8952      	ldrh	r2, [r2, #10]
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d905      	bls.n	800cb4e <f_write+0x1ec>
					cc = fs->csize - csect;
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	895b      	ldrh	r3, [r3, #10]
 800cb46:	461a      	mov	r2, r3
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	1ad3      	subs	r3, r2, r3
 800cb4c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	7858      	ldrb	r0, [r3, #1]
 800cb52:	6a3b      	ldr	r3, [r7, #32]
 800cb54:	697a      	ldr	r2, [r7, #20]
 800cb56:	69f9      	ldr	r1, [r7, #28]
 800cb58:	f7fd fe42 	bl	800a7e0 <disk_write>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d009      	beq.n	800cb76 <f_write+0x214>
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2201      	movs	r2, #1
 800cb66:	755a      	strb	r2, [r3, #21]
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	2101      	movs	r1, #1
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7fd ff8b 	bl	800aa88 <unlock_fs>
 800cb72:	2301      	movs	r3, #1
 800cb74:	e095      	b.n	800cca2 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	6a1a      	ldr	r2, [r3, #32]
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	1ad3      	subs	r3, r2, r3
 800cb7e:	6a3a      	ldr	r2, [r7, #32]
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d915      	bls.n	800cbb0 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	6a1a      	ldr	r2, [r3, #32]
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	1ad3      	subs	r3, r2, r3
 800cb92:	025b      	lsls	r3, r3, #9
 800cb94:	69fa      	ldr	r2, [r7, #28]
 800cb96:	4413      	add	r3, r2
 800cb98:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb9c:	4619      	mov	r1, r3
 800cb9e:	f7fd fedf 	bl	800a960 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	7d1b      	ldrb	r3, [r3, #20]
 800cba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbaa:	b2da      	uxtb	r2, r3
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800cbb0:	6a3b      	ldr	r3, [r7, #32]
 800cbb2:	025b      	lsls	r3, r3, #9
 800cbb4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800cbb6:	e044      	b.n	800cc42 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	6a1b      	ldr	r3, [r3, #32]
 800cbbc:	697a      	ldr	r2, [r7, #20]
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d01b      	beq.n	800cbfa <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	699a      	ldr	r2, [r3, #24]
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d215      	bcs.n	800cbfa <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	7858      	ldrb	r0, [r3, #1]
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cbd8:	2301      	movs	r3, #1
 800cbda:	697a      	ldr	r2, [r7, #20]
 800cbdc:	f7fd fde0 	bl	800a7a0 <disk_read>
 800cbe0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d009      	beq.n	800cbfa <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2201      	movs	r2, #1
 800cbea:	755a      	strb	r2, [r3, #21]
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	2101      	movs	r1, #1
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f7fd ff49 	bl	800aa88 <unlock_fs>
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	e053      	b.n	800cca2 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	697a      	ldr	r2, [r7, #20]
 800cbfe:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	699b      	ldr	r3, [r3, #24]
 800cc04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc08:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800cc0c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800cc0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d901      	bls.n	800cc1a <f_write+0x2b8>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	699b      	ldr	r3, [r3, #24]
 800cc24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc28:	4413      	add	r3, r2
 800cc2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc2c:	69f9      	ldr	r1, [r7, #28]
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f7fd fe96 	bl	800a960 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	7d1b      	ldrb	r3, [r3, #20]
 800cc38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cc3c:	b2da      	uxtb	r2, r3
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800cc42:	69fa      	ldr	r2, [r7, #28]
 800cc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc46:	4413      	add	r3, r2
 800cc48:	61fb      	str	r3, [r7, #28]
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	699a      	ldr	r2, [r3, #24]
 800cc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc50:	441a      	add	r2, r3
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	619a      	str	r2, [r3, #24]
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	68da      	ldr	r2, [r3, #12]
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	699b      	ldr	r3, [r3, #24]
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	bf38      	it	cc
 800cc62:	461a      	movcc	r2, r3
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	60da      	str	r2, [r3, #12]
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	681a      	ldr	r2, [r3, #0]
 800cc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6e:	441a      	add	r2, r3
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	601a      	str	r2, [r3, #0]
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc78:	1ad3      	subs	r3, r2, r3
 800cc7a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	f47f aeb6 	bne.w	800c9f0 <f_write+0x8e>
 800cc84:	e000      	b.n	800cc88 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cc86:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	7d1b      	ldrb	r3, [r3, #20]
 800cc8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc90:	b2da      	uxtb	r2, r3
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	2100      	movs	r1, #0
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f7fd fef4 	bl	800aa88 <unlock_fs>
 800cca0:	2300      	movs	r3, #0
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3730      	adds	r7, #48	; 0x30
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}

0800ccaa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ccaa:	b580      	push	{r7, lr}
 800ccac:	b086      	sub	sp, #24
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f107 0208 	add.w	r2, r7, #8
 800ccb8:	4611      	mov	r1, r2
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f7ff fa72 	bl	800c1a4 <validate>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ccc4:	7dfb      	ldrb	r3, [r7, #23]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d16d      	bne.n	800cda6 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	7d1b      	ldrb	r3, [r3, #20]
 800ccce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d067      	beq.n	800cda6 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	7d1b      	ldrb	r3, [r3, #20]
 800ccda:	b25b      	sxtb	r3, r3
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	da1a      	bge.n	800cd16 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	7858      	ldrb	r0, [r3, #1]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6a1a      	ldr	r2, [r3, #32]
 800ccee:	2301      	movs	r3, #1
 800ccf0:	f7fd fd76 	bl	800a7e0 <disk_write>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d006      	beq.n	800cd08 <f_sync+0x5e>
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	2101      	movs	r1, #1
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7fd fec2 	bl	800aa88 <unlock_fs>
 800cd04:	2301      	movs	r3, #1
 800cd06:	e055      	b.n	800cdb4 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	7d1b      	ldrb	r3, [r3, #20]
 800cd0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd10:	b2da      	uxtb	r2, r3
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cd16:	f7fc ffc5 	bl	8009ca4 <get_fattime>
 800cd1a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800cd1c:	68ba      	ldr	r2, [r7, #8]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd22:	4619      	mov	r1, r3
 800cd24:	4610      	mov	r0, r2
 800cd26:	f7fe f87b 	bl	800ae20 <move_window>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800cd2e:	7dfb      	ldrb	r3, [r7, #23]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d138      	bne.n	800cda6 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd38:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	330b      	adds	r3, #11
 800cd3e:	781a      	ldrb	r2, [r3, #0]
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	330b      	adds	r3, #11
 800cd44:	f042 0220 	orr.w	r2, r2, #32
 800cd48:	b2d2      	uxtb	r2, r2
 800cd4a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6818      	ldr	r0, [r3, #0]
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	689b      	ldr	r3, [r3, #8]
 800cd54:	461a      	mov	r2, r3
 800cd56:	68f9      	ldr	r1, [r7, #12]
 800cd58:	f7fe fd88 	bl	800b86c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f103 021c 	add.w	r2, r3, #28
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	68db      	ldr	r3, [r3, #12]
 800cd66:	4619      	mov	r1, r3
 800cd68:	4610      	mov	r0, r2
 800cd6a:	f7fd fdcd 	bl	800a908 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	3316      	adds	r3, #22
 800cd72:	6939      	ldr	r1, [r7, #16]
 800cd74:	4618      	mov	r0, r3
 800cd76:	f7fd fdc7 	bl	800a908 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	3312      	adds	r3, #18
 800cd7e:	2100      	movs	r1, #0
 800cd80:	4618      	mov	r0, r3
 800cd82:	f7fd fda6 	bl	800a8d2 <st_word>
					fs->wflag = 1;
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	2201      	movs	r2, #1
 800cd8a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f7fe f874 	bl	800ae7c <sync_fs>
 800cd94:	4603      	mov	r3, r0
 800cd96:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	7d1b      	ldrb	r3, [r3, #20]
 800cd9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cda0:	b2da      	uxtb	r2, r3
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	7dfa      	ldrb	r2, [r7, #23]
 800cdaa:	4611      	mov	r1, r2
 800cdac:	4618      	mov	r0, r3
 800cdae:	f7fd fe6b 	bl	800aa88 <unlock_fs>
 800cdb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3718      	adds	r7, #24
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b084      	sub	sp, #16
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f7ff ff70 	bl	800ccaa <f_sync>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cdce:	7bfb      	ldrb	r3, [r7, #15]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d11d      	bne.n	800ce10 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f107 0208 	add.w	r2, r7, #8
 800cdda:	4611      	mov	r1, r2
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7ff f9e1 	bl	800c1a4 <validate>
 800cde2:	4603      	mov	r3, r0
 800cde4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cde6:	7bfb      	ldrb	r3, [r7, #15]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d111      	bne.n	800ce10 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	691b      	ldr	r3, [r3, #16]
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f7fd ff71 	bl	800acd8 <dec_lock>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cdfa:	7bfb      	ldrb	r3, [r7, #15]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d102      	bne.n	800ce06 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2200      	movs	r2, #0
 800ce04:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	2100      	movs	r1, #0
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7fd fe3c 	bl	800aa88 <unlock_fs>
#endif
		}
	}
	return res;
 800ce10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3710      	adds	r7, #16
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}

0800ce1a <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800ce1a:	b580      	push	{r7, lr}
 800ce1c:	b088      	sub	sp, #32
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	60f8      	str	r0, [r7, #12]
 800ce22:	60b9      	str	r1, [r7, #8]
 800ce24:	607a      	str	r2, [r7, #4]
	int n = 0;
 800ce26:	2300      	movs	r3, #0
 800ce28:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800ce2e:	e01b      	b.n	800ce68 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800ce30:	f107 0310 	add.w	r3, r7, #16
 800ce34:	f107 0114 	add.w	r1, r7, #20
 800ce38:	2201      	movs	r2, #1
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f7ff fc23 	bl	800c686 <f_read>
		if (rc != 1) break;
 800ce40:	693b      	ldr	r3, [r7, #16]
 800ce42:	2b01      	cmp	r3, #1
 800ce44:	d116      	bne.n	800ce74 <f_gets+0x5a>
		c = s[0];
 800ce46:	7d3b      	ldrb	r3, [r7, #20]
 800ce48:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800ce4a:	7dfb      	ldrb	r3, [r7, #23]
 800ce4c:	2b0d      	cmp	r3, #13
 800ce4e:	d100      	bne.n	800ce52 <f_gets+0x38>
 800ce50:	e00a      	b.n	800ce68 <f_gets+0x4e>
		*p++ = c;
 800ce52:	69bb      	ldr	r3, [r7, #24]
 800ce54:	1c5a      	adds	r2, r3, #1
 800ce56:	61ba      	str	r2, [r7, #24]
 800ce58:	7dfa      	ldrb	r2, [r7, #23]
 800ce5a:	701a      	strb	r2, [r3, #0]
		n++;
 800ce5c:	69fb      	ldr	r3, [r7, #28]
 800ce5e:	3301      	adds	r3, #1
 800ce60:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800ce62:	7dfb      	ldrb	r3, [r7, #23]
 800ce64:	2b0a      	cmp	r3, #10
 800ce66:	d007      	beq.n	800ce78 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	3b01      	subs	r3, #1
 800ce6c:	69fa      	ldr	r2, [r7, #28]
 800ce6e:	429a      	cmp	r2, r3
 800ce70:	dbde      	blt.n	800ce30 <f_gets+0x16>
 800ce72:	e002      	b.n	800ce7a <f_gets+0x60>
		if (rc != 1) break;
 800ce74:	bf00      	nop
 800ce76:	e000      	b.n	800ce7a <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800ce78:	bf00      	nop
	}
	*p = 0;
 800ce7a:	69bb      	ldr	r3, [r7, #24]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800ce80:	69fb      	ldr	r3, [r7, #28]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d001      	beq.n	800ce8a <f_gets+0x70>
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	e000      	b.n	800ce8c <f_gets+0x72>
 800ce8a:	2300      	movs	r3, #0
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3720      	adds	r7, #32
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ce94:	b480      	push	{r7}
 800ce96:	b087      	sub	sp, #28
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	60f8      	str	r0, [r7, #12]
 800ce9c:	60b9      	str	r1, [r7, #8]
 800ce9e:	4613      	mov	r3, r2
 800cea0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cea2:	2301      	movs	r3, #1
 800cea4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cea6:	2300      	movs	r3, #0
 800cea8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ceaa:	4b1f      	ldr	r3, [pc, #124]	; (800cf28 <FATFS_LinkDriverEx+0x94>)
 800ceac:	7a5b      	ldrb	r3, [r3, #9]
 800ceae:	b2db      	uxtb	r3, r3
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d131      	bne.n	800cf18 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ceb4:	4b1c      	ldr	r3, [pc, #112]	; (800cf28 <FATFS_LinkDriverEx+0x94>)
 800ceb6:	7a5b      	ldrb	r3, [r3, #9]
 800ceb8:	b2db      	uxtb	r3, r3
 800ceba:	461a      	mov	r2, r3
 800cebc:	4b1a      	ldr	r3, [pc, #104]	; (800cf28 <FATFS_LinkDriverEx+0x94>)
 800cebe:	2100      	movs	r1, #0
 800cec0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cec2:	4b19      	ldr	r3, [pc, #100]	; (800cf28 <FATFS_LinkDriverEx+0x94>)
 800cec4:	7a5b      	ldrb	r3, [r3, #9]
 800cec6:	b2db      	uxtb	r3, r3
 800cec8:	4a17      	ldr	r2, [pc, #92]	; (800cf28 <FATFS_LinkDriverEx+0x94>)
 800ceca:	009b      	lsls	r3, r3, #2
 800cecc:	4413      	add	r3, r2
 800cece:	68fa      	ldr	r2, [r7, #12]
 800ced0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ced2:	4b15      	ldr	r3, [pc, #84]	; (800cf28 <FATFS_LinkDriverEx+0x94>)
 800ced4:	7a5b      	ldrb	r3, [r3, #9]
 800ced6:	b2db      	uxtb	r3, r3
 800ced8:	461a      	mov	r2, r3
 800ceda:	4b13      	ldr	r3, [pc, #76]	; (800cf28 <FATFS_LinkDriverEx+0x94>)
 800cedc:	4413      	add	r3, r2
 800cede:	79fa      	ldrb	r2, [r7, #7]
 800cee0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cee2:	4b11      	ldr	r3, [pc, #68]	; (800cf28 <FATFS_LinkDriverEx+0x94>)
 800cee4:	7a5b      	ldrb	r3, [r3, #9]
 800cee6:	b2db      	uxtb	r3, r3
 800cee8:	1c5a      	adds	r2, r3, #1
 800ceea:	b2d1      	uxtb	r1, r2
 800ceec:	4a0e      	ldr	r2, [pc, #56]	; (800cf28 <FATFS_LinkDriverEx+0x94>)
 800ceee:	7251      	strb	r1, [r2, #9]
 800cef0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cef2:	7dbb      	ldrb	r3, [r7, #22]
 800cef4:	3330      	adds	r3, #48	; 0x30
 800cef6:	b2da      	uxtb	r2, r3
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	3301      	adds	r3, #1
 800cf00:	223a      	movs	r2, #58	; 0x3a
 800cf02:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	3302      	adds	r3, #2
 800cf08:	222f      	movs	r2, #47	; 0x2f
 800cf0a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cf0c:	68bb      	ldr	r3, [r7, #8]
 800cf0e:	3303      	adds	r3, #3
 800cf10:	2200      	movs	r2, #0
 800cf12:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cf14:	2300      	movs	r3, #0
 800cf16:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cf18:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	371c      	adds	r7, #28
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr
 800cf26:	bf00      	nop
 800cf28:	20000d58 	.word	0x20000d58

0800cf2c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b082      	sub	sp, #8
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cf36:	2200      	movs	r2, #0
 800cf38:	6839      	ldr	r1, [r7, #0]
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f7ff ffaa 	bl	800ce94 <FATFS_LinkDriverEx>
 800cf40:	4603      	mov	r3, r0
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3708      	adds	r7, #8
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}

0800cf4a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800cf4a:	b580      	push	{r7, lr}
 800cf4c:	b084      	sub	sp, #16
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	4603      	mov	r3, r0
 800cf52:	6039      	str	r1, [r7, #0]
 800cf54:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800cf56:	2200      	movs	r2, #0
 800cf58:	2101      	movs	r1, #1
 800cf5a:	2001      	movs	r0, #1
 800cf5c:	f000 f994 	bl	800d288 <osSemaphoreNew>
 800cf60:	4602      	mov	r2, r0
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	bf14      	ite	ne
 800cf6e:	2301      	movne	r3, #1
 800cf70:	2300      	moveq	r3, #0
 800cf72:	b2db      	uxtb	r3, r3
 800cf74:	60fb      	str	r3, [r7, #12]

    return ret;
 800cf76:	68fb      	ldr	r3, [r7, #12]
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3710      	adds	r7, #16
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b082      	sub	sp, #8
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 fa9d 	bl	800d4c8 <osSemaphoreDelete>
#endif
    return 1;
 800cf8e:	2301      	movs	r3, #1
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	3708      	adds	r7, #8
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}

0800cf98 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b084      	sub	sp, #16
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800cfa4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f000 f9f7 	bl	800d39c <osSemaphoreAcquire>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d101      	bne.n	800cfb8 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3710      	adds	r7, #16
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}

0800cfc2 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800cfc2:	b580      	push	{r7, lr}
 800cfc4:	b082      	sub	sp, #8
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f000 fa38 	bl	800d440 <osSemaphoreRelease>
#endif
}
 800cfd0:	bf00      	nop
 800cfd2:	3708      	adds	r7, #8
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <__NVIC_SetPriority>:
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b083      	sub	sp, #12
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	4603      	mov	r3, r0
 800cfe0:	6039      	str	r1, [r7, #0]
 800cfe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cfe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	db0a      	blt.n	800d002 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	b2da      	uxtb	r2, r3
 800cff0:	490c      	ldr	r1, [pc, #48]	; (800d024 <__NVIC_SetPriority+0x4c>)
 800cff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cff6:	0112      	lsls	r2, r2, #4
 800cff8:	b2d2      	uxtb	r2, r2
 800cffa:	440b      	add	r3, r1
 800cffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d000:	e00a      	b.n	800d018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	b2da      	uxtb	r2, r3
 800d006:	4908      	ldr	r1, [pc, #32]	; (800d028 <__NVIC_SetPriority+0x50>)
 800d008:	79fb      	ldrb	r3, [r7, #7]
 800d00a:	f003 030f 	and.w	r3, r3, #15
 800d00e:	3b04      	subs	r3, #4
 800d010:	0112      	lsls	r2, r2, #4
 800d012:	b2d2      	uxtb	r2, r2
 800d014:	440b      	add	r3, r1
 800d016:	761a      	strb	r2, [r3, #24]
}
 800d018:	bf00      	nop
 800d01a:	370c      	adds	r7, #12
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr
 800d024:	e000e100 	.word	0xe000e100
 800d028:	e000ed00 	.word	0xe000ed00

0800d02c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d02c:	b580      	push	{r7, lr}
 800d02e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d030:	2100      	movs	r1, #0
 800d032:	f06f 0004 	mvn.w	r0, #4
 800d036:	f7ff ffcf 	bl	800cfd8 <__NVIC_SetPriority>
#endif
}
 800d03a:	bf00      	nop
 800d03c:	bd80      	pop	{r7, pc}
	...

0800d040 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d040:	b480      	push	{r7}
 800d042:	b083      	sub	sp, #12
 800d044:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d046:	f3ef 8305 	mrs	r3, IPSR
 800d04a:	603b      	str	r3, [r7, #0]
  return(result);
 800d04c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d003      	beq.n	800d05a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d052:	f06f 0305 	mvn.w	r3, #5
 800d056:	607b      	str	r3, [r7, #4]
 800d058:	e00c      	b.n	800d074 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d05a:	4b0a      	ldr	r3, [pc, #40]	; (800d084 <osKernelInitialize+0x44>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d105      	bne.n	800d06e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d062:	4b08      	ldr	r3, [pc, #32]	; (800d084 <osKernelInitialize+0x44>)
 800d064:	2201      	movs	r2, #1
 800d066:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d068:	2300      	movs	r3, #0
 800d06a:	607b      	str	r3, [r7, #4]
 800d06c:	e002      	b.n	800d074 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d06e:	f04f 33ff 	mov.w	r3, #4294967295
 800d072:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d074:	687b      	ldr	r3, [r7, #4]
}
 800d076:	4618      	mov	r0, r3
 800d078:	370c      	adds	r7, #12
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr
 800d082:	bf00      	nop
 800d084:	20000d64 	.word	0x20000d64

0800d088 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d088:	b580      	push	{r7, lr}
 800d08a:	b082      	sub	sp, #8
 800d08c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d08e:	f3ef 8305 	mrs	r3, IPSR
 800d092:	603b      	str	r3, [r7, #0]
  return(result);
 800d094:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d096:	2b00      	cmp	r3, #0
 800d098:	d003      	beq.n	800d0a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d09a:	f06f 0305 	mvn.w	r3, #5
 800d09e:	607b      	str	r3, [r7, #4]
 800d0a0:	e010      	b.n	800d0c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d0a2:	4b0b      	ldr	r3, [pc, #44]	; (800d0d0 <osKernelStart+0x48>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	2b01      	cmp	r3, #1
 800d0a8:	d109      	bne.n	800d0be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d0aa:	f7ff ffbf 	bl	800d02c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d0ae:	4b08      	ldr	r3, [pc, #32]	; (800d0d0 <osKernelStart+0x48>)
 800d0b0:	2202      	movs	r2, #2
 800d0b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d0b4:	f001 fd76 	bl	800eba4 <vTaskStartScheduler>
      stat = osOK;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	607b      	str	r3, [r7, #4]
 800d0bc:	e002      	b.n	800d0c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d0be:	f04f 33ff 	mov.w	r3, #4294967295
 800d0c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d0c4:	687b      	ldr	r3, [r7, #4]
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3708      	adds	r7, #8
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}
 800d0ce:	bf00      	nop
 800d0d0:	20000d64 	.word	0x20000d64

0800d0d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b08e      	sub	sp, #56	; 0x38
 800d0d8:	af04      	add	r7, sp, #16
 800d0da:	60f8      	str	r0, [r7, #12]
 800d0dc:	60b9      	str	r1, [r7, #8]
 800d0de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0e4:	f3ef 8305 	mrs	r3, IPSR
 800d0e8:	617b      	str	r3, [r7, #20]
  return(result);
 800d0ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d17e      	bne.n	800d1ee <osThreadNew+0x11a>
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d07b      	beq.n	800d1ee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d0f6:	2380      	movs	r3, #128	; 0x80
 800d0f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d0fa:	2318      	movs	r3, #24
 800d0fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d0fe:	2300      	movs	r3, #0
 800d100:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d102:	f04f 33ff 	mov.w	r3, #4294967295
 800d106:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d045      	beq.n	800d19a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d002      	beq.n	800d11c <osThreadNew+0x48>
        name = attr->name;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	699b      	ldr	r3, [r3, #24]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d002      	beq.n	800d12a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	699b      	ldr	r3, [r3, #24]
 800d128:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d12a:	69fb      	ldr	r3, [r7, #28]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d008      	beq.n	800d142 <osThreadNew+0x6e>
 800d130:	69fb      	ldr	r3, [r7, #28]
 800d132:	2b38      	cmp	r3, #56	; 0x38
 800d134:	d805      	bhi.n	800d142 <osThreadNew+0x6e>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	f003 0301 	and.w	r3, r3, #1
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d001      	beq.n	800d146 <osThreadNew+0x72>
        return (NULL);
 800d142:	2300      	movs	r3, #0
 800d144:	e054      	b.n	800d1f0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	695b      	ldr	r3, [r3, #20]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d003      	beq.n	800d156 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	695b      	ldr	r3, [r3, #20]
 800d152:	089b      	lsrs	r3, r3, #2
 800d154:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	689b      	ldr	r3, [r3, #8]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d00e      	beq.n	800d17c <osThreadNew+0xa8>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	68db      	ldr	r3, [r3, #12]
 800d162:	2b5b      	cmp	r3, #91	; 0x5b
 800d164:	d90a      	bls.n	800d17c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d006      	beq.n	800d17c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	695b      	ldr	r3, [r3, #20]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d002      	beq.n	800d17c <osThreadNew+0xa8>
        mem = 1;
 800d176:	2301      	movs	r3, #1
 800d178:	61bb      	str	r3, [r7, #24]
 800d17a:	e010      	b.n	800d19e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	689b      	ldr	r3, [r3, #8]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d10c      	bne.n	800d19e <osThreadNew+0xca>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	68db      	ldr	r3, [r3, #12]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d108      	bne.n	800d19e <osThreadNew+0xca>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	691b      	ldr	r3, [r3, #16]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d104      	bne.n	800d19e <osThreadNew+0xca>
          mem = 0;
 800d194:	2300      	movs	r3, #0
 800d196:	61bb      	str	r3, [r7, #24]
 800d198:	e001      	b.n	800d19e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d19a:	2300      	movs	r3, #0
 800d19c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d19e:	69bb      	ldr	r3, [r7, #24]
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d110      	bne.n	800d1c6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d1a8:	687a      	ldr	r2, [r7, #4]
 800d1aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d1ac:	9202      	str	r2, [sp, #8]
 800d1ae:	9301      	str	r3, [sp, #4]
 800d1b0:	69fb      	ldr	r3, [r7, #28]
 800d1b2:	9300      	str	r3, [sp, #0]
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	6a3a      	ldr	r2, [r7, #32]
 800d1b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d1ba:	68f8      	ldr	r0, [r7, #12]
 800d1bc:	f001 fa9e 	bl	800e6fc <xTaskCreateStatic>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	613b      	str	r3, [r7, #16]
 800d1c4:	e013      	b.n	800d1ee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d1c6:	69bb      	ldr	r3, [r7, #24]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d110      	bne.n	800d1ee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d1cc:	6a3b      	ldr	r3, [r7, #32]
 800d1ce:	b29a      	uxth	r2, r3
 800d1d0:	f107 0310 	add.w	r3, r7, #16
 800d1d4:	9301      	str	r3, [sp, #4]
 800d1d6:	69fb      	ldr	r3, [r7, #28]
 800d1d8:	9300      	str	r3, [sp, #0]
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d1de:	68f8      	ldr	r0, [r7, #12]
 800d1e0:	f001 fae9 	bl	800e7b6 <xTaskCreate>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	2b01      	cmp	r3, #1
 800d1e8:	d001      	beq.n	800d1ee <osThreadNew+0x11a>
            hTask = NULL;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d1ee:	693b      	ldr	r3, [r7, #16]
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3728      	adds	r7, #40	; 0x28
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}

0800d1f8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b084      	sub	sp, #16
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d200:	f3ef 8305 	mrs	r3, IPSR
 800d204:	60bb      	str	r3, [r7, #8]
  return(result);
 800d206:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d003      	beq.n	800d214 <osDelay+0x1c>
    stat = osErrorISR;
 800d20c:	f06f 0305 	mvn.w	r3, #5
 800d210:	60fb      	str	r3, [r7, #12]
 800d212:	e007      	b.n	800d224 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d214:	2300      	movs	r3, #0
 800d216:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d002      	beq.n	800d224 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f001 fc8c 	bl	800eb3c <vTaskDelay>
    }
  }

  return (stat);
 800d224:	68fb      	ldr	r3, [r7, #12]
}
 800d226:	4618      	mov	r0, r3
 800d228:	3710      	adds	r7, #16
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}

0800d22e <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800d22e:	b580      	push	{r7, lr}
 800d230:	b086      	sub	sp, #24
 800d232:	af00      	add	r7, sp, #0
 800d234:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d236:	f3ef 8305 	mrs	r3, IPSR
 800d23a:	60fb      	str	r3, [r7, #12]
  return(result);
 800d23c:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d003      	beq.n	800d24a <osDelayUntil+0x1c>
    stat = osErrorISR;
 800d242:	f06f 0305 	mvn.w	r3, #5
 800d246:	617b      	str	r3, [r7, #20]
 800d248:	e019      	b.n	800d27e <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800d24a:	2300      	movs	r3, #0
 800d24c:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800d24e:	f001 fdbb 	bl	800edc8 <xTaskGetTickCount>
 800d252:	4603      	mov	r3, r0
 800d254:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	1ad3      	subs	r3, r2, r3
 800d25c:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d009      	beq.n	800d278 <osDelayUntil+0x4a>
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	2b00      	cmp	r3, #0
 800d268:	db06      	blt.n	800d278 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800d26a:	f107 0308 	add.w	r3, r7, #8
 800d26e:	6939      	ldr	r1, [r7, #16]
 800d270:	4618      	mov	r0, r3
 800d272:	f001 fbe5 	bl	800ea40 <vTaskDelayUntil>
 800d276:	e002      	b.n	800d27e <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800d278:	f06f 0303 	mvn.w	r3, #3
 800d27c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800d27e:	697b      	ldr	r3, [r7, #20]
}
 800d280:	4618      	mov	r0, r3
 800d282:	3718      	adds	r7, #24
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}

0800d288 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d288:	b580      	push	{r7, lr}
 800d28a:	b08a      	sub	sp, #40	; 0x28
 800d28c:	af02      	add	r7, sp, #8
 800d28e:	60f8      	str	r0, [r7, #12]
 800d290:	60b9      	str	r1, [r7, #8]
 800d292:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800d294:	2300      	movs	r3, #0
 800d296:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d298:	f3ef 8305 	mrs	r3, IPSR
 800d29c:	613b      	str	r3, [r7, #16]
  return(result);
 800d29e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d175      	bne.n	800d390 <osSemaphoreNew+0x108>
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d072      	beq.n	800d390 <osSemaphoreNew+0x108>
 800d2aa:	68ba      	ldr	r2, [r7, #8]
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d86e      	bhi.n	800d390 <osSemaphoreNew+0x108>
    mem = -1;
 800d2b2:	f04f 33ff 	mov.w	r3, #4294967295
 800d2b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d015      	beq.n	800d2ea <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	689b      	ldr	r3, [r3, #8]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d006      	beq.n	800d2d4 <osSemaphoreNew+0x4c>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	68db      	ldr	r3, [r3, #12]
 800d2ca:	2b4f      	cmp	r3, #79	; 0x4f
 800d2cc:	d902      	bls.n	800d2d4 <osSemaphoreNew+0x4c>
        mem = 1;
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	61bb      	str	r3, [r7, #24]
 800d2d2:	e00c      	b.n	800d2ee <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	689b      	ldr	r3, [r3, #8]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d108      	bne.n	800d2ee <osSemaphoreNew+0x66>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	68db      	ldr	r3, [r3, #12]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d104      	bne.n	800d2ee <osSemaphoreNew+0x66>
          mem = 0;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	61bb      	str	r3, [r7, #24]
 800d2e8:	e001      	b.n	800d2ee <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800d2ee:	69bb      	ldr	r3, [r7, #24]
 800d2f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2f4:	d04c      	beq.n	800d390 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2b01      	cmp	r3, #1
 800d2fa:	d128      	bne.n	800d34e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800d2fc:	69bb      	ldr	r3, [r7, #24]
 800d2fe:	2b01      	cmp	r3, #1
 800d300:	d10a      	bne.n	800d318 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	689b      	ldr	r3, [r3, #8]
 800d306:	2203      	movs	r2, #3
 800d308:	9200      	str	r2, [sp, #0]
 800d30a:	2200      	movs	r2, #0
 800d30c:	2100      	movs	r1, #0
 800d30e:	2001      	movs	r0, #1
 800d310:	f000 fa4e 	bl	800d7b0 <xQueueGenericCreateStatic>
 800d314:	61f8      	str	r0, [r7, #28]
 800d316:	e005      	b.n	800d324 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800d318:	2203      	movs	r2, #3
 800d31a:	2100      	movs	r1, #0
 800d31c:	2001      	movs	r0, #1
 800d31e:	f000 fabf 	bl	800d8a0 <xQueueGenericCreate>
 800d322:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d324:	69fb      	ldr	r3, [r7, #28]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d022      	beq.n	800d370 <osSemaphoreNew+0xe8>
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d01f      	beq.n	800d370 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d330:	2300      	movs	r3, #0
 800d332:	2200      	movs	r2, #0
 800d334:	2100      	movs	r1, #0
 800d336:	69f8      	ldr	r0, [r7, #28]
 800d338:	f000 fb7a 	bl	800da30 <xQueueGenericSend>
 800d33c:	4603      	mov	r3, r0
 800d33e:	2b01      	cmp	r3, #1
 800d340:	d016      	beq.n	800d370 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800d342:	69f8      	ldr	r0, [r7, #28]
 800d344:	f001 f806 	bl	800e354 <vQueueDelete>
            hSemaphore = NULL;
 800d348:	2300      	movs	r3, #0
 800d34a:	61fb      	str	r3, [r7, #28]
 800d34c:	e010      	b.n	800d370 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800d34e:	69bb      	ldr	r3, [r7, #24]
 800d350:	2b01      	cmp	r3, #1
 800d352:	d108      	bne.n	800d366 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	689b      	ldr	r3, [r3, #8]
 800d358:	461a      	mov	r2, r3
 800d35a:	68b9      	ldr	r1, [r7, #8]
 800d35c:	68f8      	ldr	r0, [r7, #12]
 800d35e:	f000 fafc 	bl	800d95a <xQueueCreateCountingSemaphoreStatic>
 800d362:	61f8      	str	r0, [r7, #28]
 800d364:	e004      	b.n	800d370 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d366:	68b9      	ldr	r1, [r7, #8]
 800d368:	68f8      	ldr	r0, [r7, #12]
 800d36a:	f000 fb2d 	bl	800d9c8 <xQueueCreateCountingSemaphore>
 800d36e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800d370:	69fb      	ldr	r3, [r7, #28]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d00c      	beq.n	800d390 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d003      	beq.n	800d384 <osSemaphoreNew+0xfc>
          name = attr->name;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	617b      	str	r3, [r7, #20]
 800d382:	e001      	b.n	800d388 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800d384:	2300      	movs	r3, #0
 800d386:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d388:	6979      	ldr	r1, [r7, #20]
 800d38a:	69f8      	ldr	r0, [r7, #28]
 800d38c:	f001 f92e 	bl	800e5ec <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d390:	69fb      	ldr	r3, [r7, #28]
}
 800d392:	4618      	mov	r0, r3
 800d394:	3720      	adds	r7, #32
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
	...

0800d39c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b086      	sub	sp, #24
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d103      	bne.n	800d3bc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800d3b4:	f06f 0303 	mvn.w	r3, #3
 800d3b8:	617b      	str	r3, [r7, #20]
 800d3ba:	e039      	b.n	800d430 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d3bc:	f3ef 8305 	mrs	r3, IPSR
 800d3c0:	60fb      	str	r3, [r7, #12]
  return(result);
 800d3c2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d022      	beq.n	800d40e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d003      	beq.n	800d3d6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800d3ce:	f06f 0303 	mvn.w	r3, #3
 800d3d2:	617b      	str	r3, [r7, #20]
 800d3d4:	e02c      	b.n	800d430 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d3da:	f107 0308 	add.w	r3, r7, #8
 800d3de:	461a      	mov	r2, r3
 800d3e0:	2100      	movs	r1, #0
 800d3e2:	6938      	ldr	r0, [r7, #16]
 800d3e4:	f000 ff36 	bl	800e254 <xQueueReceiveFromISR>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	2b01      	cmp	r3, #1
 800d3ec:	d003      	beq.n	800d3f6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800d3ee:	f06f 0302 	mvn.w	r3, #2
 800d3f2:	617b      	str	r3, [r7, #20]
 800d3f4:	e01c      	b.n	800d430 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d019      	beq.n	800d430 <osSemaphoreAcquire+0x94>
 800d3fc:	4b0f      	ldr	r3, [pc, #60]	; (800d43c <osSemaphoreAcquire+0xa0>)
 800d3fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d402:	601a      	str	r2, [r3, #0]
 800d404:	f3bf 8f4f 	dsb	sy
 800d408:	f3bf 8f6f 	isb	sy
 800d40c:	e010      	b.n	800d430 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d40e:	6839      	ldr	r1, [r7, #0]
 800d410:	6938      	ldr	r0, [r7, #16]
 800d412:	f000 fe13 	bl	800e03c <xQueueSemaphoreTake>
 800d416:	4603      	mov	r3, r0
 800d418:	2b01      	cmp	r3, #1
 800d41a:	d009      	beq.n	800d430 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d003      	beq.n	800d42a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800d422:	f06f 0301 	mvn.w	r3, #1
 800d426:	617b      	str	r3, [r7, #20]
 800d428:	e002      	b.n	800d430 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800d42a:	f06f 0302 	mvn.w	r3, #2
 800d42e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800d430:	697b      	ldr	r3, [r7, #20]
}
 800d432:	4618      	mov	r0, r3
 800d434:	3718      	adds	r7, #24
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
 800d43a:	bf00      	nop
 800d43c:	e000ed04 	.word	0xe000ed04

0800d440 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d440:	b580      	push	{r7, lr}
 800d442:	b086      	sub	sp, #24
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d44c:	2300      	movs	r3, #0
 800d44e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d103      	bne.n	800d45e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d456:	f06f 0303 	mvn.w	r3, #3
 800d45a:	617b      	str	r3, [r7, #20]
 800d45c:	e02c      	b.n	800d4b8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d45e:	f3ef 8305 	mrs	r3, IPSR
 800d462:	60fb      	str	r3, [r7, #12]
  return(result);
 800d464:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d466:	2b00      	cmp	r3, #0
 800d468:	d01a      	beq.n	800d4a0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800d46a:	2300      	movs	r3, #0
 800d46c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d46e:	f107 0308 	add.w	r3, r7, #8
 800d472:	4619      	mov	r1, r3
 800d474:	6938      	ldr	r0, [r7, #16]
 800d476:	f000 fc74 	bl	800dd62 <xQueueGiveFromISR>
 800d47a:	4603      	mov	r3, r0
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	d003      	beq.n	800d488 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800d480:	f06f 0302 	mvn.w	r3, #2
 800d484:	617b      	str	r3, [r7, #20]
 800d486:	e017      	b.n	800d4b8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d014      	beq.n	800d4b8 <osSemaphoreRelease+0x78>
 800d48e:	4b0d      	ldr	r3, [pc, #52]	; (800d4c4 <osSemaphoreRelease+0x84>)
 800d490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d494:	601a      	str	r2, [r3, #0]
 800d496:	f3bf 8f4f 	dsb	sy
 800d49a:	f3bf 8f6f 	isb	sy
 800d49e:	e00b      	b.n	800d4b8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	2100      	movs	r1, #0
 800d4a6:	6938      	ldr	r0, [r7, #16]
 800d4a8:	f000 fac2 	bl	800da30 <xQueueGenericSend>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	2b01      	cmp	r3, #1
 800d4b0:	d002      	beq.n	800d4b8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800d4b2:	f06f 0302 	mvn.w	r3, #2
 800d4b6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800d4b8:	697b      	ldr	r3, [r7, #20]
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	3718      	adds	r7, #24
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}
 800d4c2:	bf00      	nop
 800d4c4:	e000ed04 	.word	0xe000ed04

0800d4c8 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b086      	sub	sp, #24
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d4d4:	f3ef 8305 	mrs	r3, IPSR
 800d4d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800d4da:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d003      	beq.n	800d4e8 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800d4e0:	f06f 0305 	mvn.w	r3, #5
 800d4e4:	617b      	str	r3, [r7, #20]
 800d4e6:	e00e      	b.n	800d506 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d103      	bne.n	800d4f6 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800d4ee:	f06f 0303 	mvn.w	r3, #3
 800d4f2:	617b      	str	r3, [r7, #20]
 800d4f4:	e007      	b.n	800d506 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800d4f6:	6938      	ldr	r0, [r7, #16]
 800d4f8:	f001 f8a2 	bl	800e640 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800d500:	6938      	ldr	r0, [r7, #16]
 800d502:	f000 ff27 	bl	800e354 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d506:	697b      	ldr	r3, [r7, #20]
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3718      	adds	r7, #24
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d510:	b480      	push	{r7}
 800d512:	b085      	sub	sp, #20
 800d514:	af00      	add	r7, sp, #0
 800d516:	60f8      	str	r0, [r7, #12]
 800d518:	60b9      	str	r1, [r7, #8]
 800d51a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	4a07      	ldr	r2, [pc, #28]	; (800d53c <vApplicationGetIdleTaskMemory+0x2c>)
 800d520:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	4a06      	ldr	r2, [pc, #24]	; (800d540 <vApplicationGetIdleTaskMemory+0x30>)
 800d526:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2280      	movs	r2, #128	; 0x80
 800d52c:	601a      	str	r2, [r3, #0]
}
 800d52e:	bf00      	nop
 800d530:	3714      	adds	r7, #20
 800d532:	46bd      	mov	sp, r7
 800d534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d538:	4770      	bx	lr
 800d53a:	bf00      	nop
 800d53c:	20000d68 	.word	0x20000d68
 800d540:	20000dc4 	.word	0x20000dc4

0800d544 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d544:	b480      	push	{r7}
 800d546:	b085      	sub	sp, #20
 800d548:	af00      	add	r7, sp, #0
 800d54a:	60f8      	str	r0, [r7, #12]
 800d54c:	60b9      	str	r1, [r7, #8]
 800d54e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	4a07      	ldr	r2, [pc, #28]	; (800d570 <vApplicationGetTimerTaskMemory+0x2c>)
 800d554:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	4a06      	ldr	r2, [pc, #24]	; (800d574 <vApplicationGetTimerTaskMemory+0x30>)
 800d55a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d562:	601a      	str	r2, [r3, #0]
}
 800d564:	bf00      	nop
 800d566:	3714      	adds	r7, #20
 800d568:	46bd      	mov	sp, r7
 800d56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56e:	4770      	bx	lr
 800d570:	20000fc4 	.word	0x20000fc4
 800d574:	20001020 	.word	0x20001020

0800d578 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d578:	b480      	push	{r7}
 800d57a:	b083      	sub	sp, #12
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f103 0208 	add.w	r2, r3, #8
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f04f 32ff 	mov.w	r2, #4294967295
 800d590:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f103 0208 	add.w	r2, r3, #8
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f103 0208 	add.w	r2, r3, #8
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d5ac:	bf00      	nop
 800d5ae:	370c      	adds	r7, #12
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b6:	4770      	bx	lr

0800d5b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b083      	sub	sp, #12
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d5c6:	bf00      	nop
 800d5c8:	370c      	adds	r7, #12
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr

0800d5d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d5d2:	b480      	push	{r7}
 800d5d4:	b085      	sub	sp, #20
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	6078      	str	r0, [r7, #4]
 800d5da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	685b      	ldr	r3, [r3, #4]
 800d5e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	68fa      	ldr	r2, [r7, #12]
 800d5e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	689a      	ldr	r2, [r3, #8]
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	689b      	ldr	r3, [r3, #8]
 800d5f4:	683a      	ldr	r2, [r7, #0]
 800d5f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	683a      	ldr	r2, [r7, #0]
 800d5fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	687a      	ldr	r2, [r7, #4]
 800d602:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	1c5a      	adds	r2, r3, #1
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	601a      	str	r2, [r3, #0]
}
 800d60e:	bf00      	nop
 800d610:	3714      	adds	r7, #20
 800d612:	46bd      	mov	sp, r7
 800d614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d618:	4770      	bx	lr

0800d61a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d61a:	b480      	push	{r7}
 800d61c:	b085      	sub	sp, #20
 800d61e:	af00      	add	r7, sp, #0
 800d620:	6078      	str	r0, [r7, #4]
 800d622:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d630:	d103      	bne.n	800d63a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	691b      	ldr	r3, [r3, #16]
 800d636:	60fb      	str	r3, [r7, #12]
 800d638:	e00c      	b.n	800d654 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	3308      	adds	r3, #8
 800d63e:	60fb      	str	r3, [r7, #12]
 800d640:	e002      	b.n	800d648 <vListInsert+0x2e>
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	685b      	ldr	r3, [r3, #4]
 800d646:	60fb      	str	r3, [r7, #12]
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	685b      	ldr	r3, [r3, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	68ba      	ldr	r2, [r7, #8]
 800d650:	429a      	cmp	r2, r3
 800d652:	d2f6      	bcs.n	800d642 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	685a      	ldr	r2, [r3, #4]
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	685b      	ldr	r3, [r3, #4]
 800d660:	683a      	ldr	r2, [r7, #0]
 800d662:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	68fa      	ldr	r2, [r7, #12]
 800d668:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	683a      	ldr	r2, [r7, #0]
 800d66e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	687a      	ldr	r2, [r7, #4]
 800d674:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	1c5a      	adds	r2, r3, #1
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	601a      	str	r2, [r3, #0]
}
 800d680:	bf00      	nop
 800d682:	3714      	adds	r7, #20
 800d684:	46bd      	mov	sp, r7
 800d686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68a:	4770      	bx	lr

0800d68c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d68c:	b480      	push	{r7}
 800d68e:	b085      	sub	sp, #20
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	691b      	ldr	r3, [r3, #16]
 800d698:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	687a      	ldr	r2, [r7, #4]
 800d6a0:	6892      	ldr	r2, [r2, #8]
 800d6a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	689b      	ldr	r3, [r3, #8]
 800d6a8:	687a      	ldr	r2, [r7, #4]
 800d6aa:	6852      	ldr	r2, [r2, #4]
 800d6ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	685b      	ldr	r3, [r3, #4]
 800d6b2:	687a      	ldr	r2, [r7, #4]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d103      	bne.n	800d6c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	689a      	ldr	r2, [r3, #8]
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	1e5a      	subs	r2, r3, #1
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	681b      	ldr	r3, [r3, #0]
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3714      	adds	r7, #20
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6de:	4770      	bx	lr

0800d6e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b084      	sub	sp, #16
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d10a      	bne.n	800d70a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f8:	f383 8811 	msr	BASEPRI, r3
 800d6fc:	f3bf 8f6f 	isb	sy
 800d700:	f3bf 8f4f 	dsb	sy
 800d704:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d706:	bf00      	nop
 800d708:	e7fe      	b.n	800d708 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d70a:	f002 fceb 	bl	80100e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681a      	ldr	r2, [r3, #0]
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d716:	68f9      	ldr	r1, [r7, #12]
 800d718:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d71a:	fb01 f303 	mul.w	r3, r1, r3
 800d71e:	441a      	add	r2, r3
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	2200      	movs	r2, #0
 800d728:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	681a      	ldr	r2, [r3, #0]
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	681a      	ldr	r2, [r3, #0]
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d73a:	3b01      	subs	r3, #1
 800d73c:	68f9      	ldr	r1, [r7, #12]
 800d73e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d740:	fb01 f303 	mul.w	r3, r1, r3
 800d744:	441a      	add	r2, r3
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	22ff      	movs	r2, #255	; 0xff
 800d74e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	22ff      	movs	r2, #255	; 0xff
 800d756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d114      	bne.n	800d78a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	691b      	ldr	r3, [r3, #16]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d01a      	beq.n	800d79e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	3310      	adds	r3, #16
 800d76c:	4618      	mov	r0, r3
 800d76e:	f001 fca3 	bl	800f0b8 <xTaskRemoveFromEventList>
 800d772:	4603      	mov	r3, r0
 800d774:	2b00      	cmp	r3, #0
 800d776:	d012      	beq.n	800d79e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d778:	4b0c      	ldr	r3, [pc, #48]	; (800d7ac <xQueueGenericReset+0xcc>)
 800d77a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d77e:	601a      	str	r2, [r3, #0]
 800d780:	f3bf 8f4f 	dsb	sy
 800d784:	f3bf 8f6f 	isb	sy
 800d788:	e009      	b.n	800d79e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	3310      	adds	r3, #16
 800d78e:	4618      	mov	r0, r3
 800d790:	f7ff fef2 	bl	800d578 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	3324      	adds	r3, #36	; 0x24
 800d798:	4618      	mov	r0, r3
 800d79a:	f7ff feed 	bl	800d578 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d79e:	f002 fcd1 	bl	8010144 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d7a2:	2301      	movs	r3, #1
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3710      	adds	r7, #16
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}
 800d7ac:	e000ed04 	.word	0xe000ed04

0800d7b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b08e      	sub	sp, #56	; 0x38
 800d7b4:	af02      	add	r7, sp, #8
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	60b9      	str	r1, [r7, #8]
 800d7ba:	607a      	str	r2, [r7, #4]
 800d7bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d10a      	bne.n	800d7da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c8:	f383 8811 	msr	BASEPRI, r3
 800d7cc:	f3bf 8f6f 	isb	sy
 800d7d0:	f3bf 8f4f 	dsb	sy
 800d7d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d7d6:	bf00      	nop
 800d7d8:	e7fe      	b.n	800d7d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d10a      	bne.n	800d7f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e4:	f383 8811 	msr	BASEPRI, r3
 800d7e8:	f3bf 8f6f 	isb	sy
 800d7ec:	f3bf 8f4f 	dsb	sy
 800d7f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d7f2:	bf00      	nop
 800d7f4:	e7fe      	b.n	800d7f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d002      	beq.n	800d802 <xQueueGenericCreateStatic+0x52>
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d001      	beq.n	800d806 <xQueueGenericCreateStatic+0x56>
 800d802:	2301      	movs	r3, #1
 800d804:	e000      	b.n	800d808 <xQueueGenericCreateStatic+0x58>
 800d806:	2300      	movs	r3, #0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d10a      	bne.n	800d822 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d810:	f383 8811 	msr	BASEPRI, r3
 800d814:	f3bf 8f6f 	isb	sy
 800d818:	f3bf 8f4f 	dsb	sy
 800d81c:	623b      	str	r3, [r7, #32]
}
 800d81e:	bf00      	nop
 800d820:	e7fe      	b.n	800d820 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d102      	bne.n	800d82e <xQueueGenericCreateStatic+0x7e>
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d101      	bne.n	800d832 <xQueueGenericCreateStatic+0x82>
 800d82e:	2301      	movs	r3, #1
 800d830:	e000      	b.n	800d834 <xQueueGenericCreateStatic+0x84>
 800d832:	2300      	movs	r3, #0
 800d834:	2b00      	cmp	r3, #0
 800d836:	d10a      	bne.n	800d84e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d83c:	f383 8811 	msr	BASEPRI, r3
 800d840:	f3bf 8f6f 	isb	sy
 800d844:	f3bf 8f4f 	dsb	sy
 800d848:	61fb      	str	r3, [r7, #28]
}
 800d84a:	bf00      	nop
 800d84c:	e7fe      	b.n	800d84c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d84e:	2350      	movs	r3, #80	; 0x50
 800d850:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	2b50      	cmp	r3, #80	; 0x50
 800d856:	d00a      	beq.n	800d86e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d85c:	f383 8811 	msr	BASEPRI, r3
 800d860:	f3bf 8f6f 	isb	sy
 800d864:	f3bf 8f4f 	dsb	sy
 800d868:	61bb      	str	r3, [r7, #24]
}
 800d86a:	bf00      	nop
 800d86c:	e7fe      	b.n	800d86c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d86e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d876:	2b00      	cmp	r3, #0
 800d878:	d00d      	beq.n	800d896 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d87c:	2201      	movs	r2, #1
 800d87e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d882:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d888:	9300      	str	r3, [sp, #0]
 800d88a:	4613      	mov	r3, r2
 800d88c:	687a      	ldr	r2, [r7, #4]
 800d88e:	68b9      	ldr	r1, [r7, #8]
 800d890:	68f8      	ldr	r0, [r7, #12]
 800d892:	f000 f83f 	bl	800d914 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d898:	4618      	mov	r0, r3
 800d89a:	3730      	adds	r7, #48	; 0x30
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}

0800d8a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b08a      	sub	sp, #40	; 0x28
 800d8a4:	af02      	add	r7, sp, #8
 800d8a6:	60f8      	str	r0, [r7, #12]
 800d8a8:	60b9      	str	r1, [r7, #8]
 800d8aa:	4613      	mov	r3, r2
 800d8ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d10a      	bne.n	800d8ca <xQueueGenericCreate+0x2a>
	__asm volatile
 800d8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b8:	f383 8811 	msr	BASEPRI, r3
 800d8bc:	f3bf 8f6f 	isb	sy
 800d8c0:	f3bf 8f4f 	dsb	sy
 800d8c4:	613b      	str	r3, [r7, #16]
}
 800d8c6:	bf00      	nop
 800d8c8:	e7fe      	b.n	800d8c8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	68ba      	ldr	r2, [r7, #8]
 800d8ce:	fb02 f303 	mul.w	r3, r2, r3
 800d8d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d8d4:	69fb      	ldr	r3, [r7, #28]
 800d8d6:	3350      	adds	r3, #80	; 0x50
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f002 fd25 	bl	8010328 <pvPortMalloc>
 800d8de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d8e0:	69bb      	ldr	r3, [r7, #24]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d011      	beq.n	800d90a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d8e6:	69bb      	ldr	r3, [r7, #24]
 800d8e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	3350      	adds	r3, #80	; 0x50
 800d8ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d8f0:	69bb      	ldr	r3, [r7, #24]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d8f8:	79fa      	ldrb	r2, [r7, #7]
 800d8fa:	69bb      	ldr	r3, [r7, #24]
 800d8fc:	9300      	str	r3, [sp, #0]
 800d8fe:	4613      	mov	r3, r2
 800d900:	697a      	ldr	r2, [r7, #20]
 800d902:	68b9      	ldr	r1, [r7, #8]
 800d904:	68f8      	ldr	r0, [r7, #12]
 800d906:	f000 f805 	bl	800d914 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d90a:	69bb      	ldr	r3, [r7, #24]
	}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3720      	adds	r7, #32
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}

0800d914 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b084      	sub	sp, #16
 800d918:	af00      	add	r7, sp, #0
 800d91a:	60f8      	str	r0, [r7, #12]
 800d91c:	60b9      	str	r1, [r7, #8]
 800d91e:	607a      	str	r2, [r7, #4]
 800d920:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d103      	bne.n	800d930 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d928:	69bb      	ldr	r3, [r7, #24]
 800d92a:	69ba      	ldr	r2, [r7, #24]
 800d92c:	601a      	str	r2, [r3, #0]
 800d92e:	e002      	b.n	800d936 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d930:	69bb      	ldr	r3, [r7, #24]
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d936:	69bb      	ldr	r3, [r7, #24]
 800d938:	68fa      	ldr	r2, [r7, #12]
 800d93a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d93c:	69bb      	ldr	r3, [r7, #24]
 800d93e:	68ba      	ldr	r2, [r7, #8]
 800d940:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d942:	2101      	movs	r1, #1
 800d944:	69b8      	ldr	r0, [r7, #24]
 800d946:	f7ff fecb 	bl	800d6e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d94a:	69bb      	ldr	r3, [r7, #24]
 800d94c:	78fa      	ldrb	r2, [r7, #3]
 800d94e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d952:	bf00      	nop
 800d954:	3710      	adds	r7, #16
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}

0800d95a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d95a:	b580      	push	{r7, lr}
 800d95c:	b08a      	sub	sp, #40	; 0x28
 800d95e:	af02      	add	r7, sp, #8
 800d960:	60f8      	str	r0, [r7, #12]
 800d962:	60b9      	str	r1, [r7, #8]
 800d964:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d10a      	bne.n	800d982 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800d96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d970:	f383 8811 	msr	BASEPRI, r3
 800d974:	f3bf 8f6f 	isb	sy
 800d978:	f3bf 8f4f 	dsb	sy
 800d97c:	61bb      	str	r3, [r7, #24]
}
 800d97e:	bf00      	nop
 800d980:	e7fe      	b.n	800d980 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d982:	68ba      	ldr	r2, [r7, #8]
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	429a      	cmp	r2, r3
 800d988:	d90a      	bls.n	800d9a0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800d98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d98e:	f383 8811 	msr	BASEPRI, r3
 800d992:	f3bf 8f6f 	isb	sy
 800d996:	f3bf 8f4f 	dsb	sy
 800d99a:	617b      	str	r3, [r7, #20]
}
 800d99c:	bf00      	nop
 800d99e:	e7fe      	b.n	800d99e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d9a0:	2302      	movs	r3, #2
 800d9a2:	9300      	str	r3, [sp, #0]
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	2100      	movs	r1, #0
 800d9aa:	68f8      	ldr	r0, [r7, #12]
 800d9ac:	f7ff ff00 	bl	800d7b0 <xQueueGenericCreateStatic>
 800d9b0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d9b2:	69fb      	ldr	r3, [r7, #28]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d002      	beq.n	800d9be <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d9b8:	69fb      	ldr	r3, [r7, #28]
 800d9ba:	68ba      	ldr	r2, [r7, #8]
 800d9bc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d9be:	69fb      	ldr	r3, [r7, #28]
	}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	3720      	adds	r7, #32
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}

0800d9c8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b086      	sub	sp, #24
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
 800d9d0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d10a      	bne.n	800d9ee <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800d9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9dc:	f383 8811 	msr	BASEPRI, r3
 800d9e0:	f3bf 8f6f 	isb	sy
 800d9e4:	f3bf 8f4f 	dsb	sy
 800d9e8:	613b      	str	r3, [r7, #16]
}
 800d9ea:	bf00      	nop
 800d9ec:	e7fe      	b.n	800d9ec <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d9ee:	683a      	ldr	r2, [r7, #0]
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d90a      	bls.n	800da0c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800d9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9fa:	f383 8811 	msr	BASEPRI, r3
 800d9fe:	f3bf 8f6f 	isb	sy
 800da02:	f3bf 8f4f 	dsb	sy
 800da06:	60fb      	str	r3, [r7, #12]
}
 800da08:	bf00      	nop
 800da0a:	e7fe      	b.n	800da0a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800da0c:	2202      	movs	r2, #2
 800da0e:	2100      	movs	r1, #0
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f7ff ff45 	bl	800d8a0 <xQueueGenericCreate>
 800da16:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d002      	beq.n	800da24 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	683a      	ldr	r2, [r7, #0]
 800da22:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800da24:	697b      	ldr	r3, [r7, #20]
	}
 800da26:	4618      	mov	r0, r3
 800da28:	3718      	adds	r7, #24
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}
	...

0800da30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b08e      	sub	sp, #56	; 0x38
 800da34:	af00      	add	r7, sp, #0
 800da36:	60f8      	str	r0, [r7, #12]
 800da38:	60b9      	str	r1, [r7, #8]
 800da3a:	607a      	str	r2, [r7, #4]
 800da3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800da3e:	2300      	movs	r3, #0
 800da40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800da46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d10a      	bne.n	800da62 <xQueueGenericSend+0x32>
	__asm volatile
 800da4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da50:	f383 8811 	msr	BASEPRI, r3
 800da54:	f3bf 8f6f 	isb	sy
 800da58:	f3bf 8f4f 	dsb	sy
 800da5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800da5e:	bf00      	nop
 800da60:	e7fe      	b.n	800da60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d103      	bne.n	800da70 <xQueueGenericSend+0x40>
 800da68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d101      	bne.n	800da74 <xQueueGenericSend+0x44>
 800da70:	2301      	movs	r3, #1
 800da72:	e000      	b.n	800da76 <xQueueGenericSend+0x46>
 800da74:	2300      	movs	r3, #0
 800da76:	2b00      	cmp	r3, #0
 800da78:	d10a      	bne.n	800da90 <xQueueGenericSend+0x60>
	__asm volatile
 800da7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da7e:	f383 8811 	msr	BASEPRI, r3
 800da82:	f3bf 8f6f 	isb	sy
 800da86:	f3bf 8f4f 	dsb	sy
 800da8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800da8c:	bf00      	nop
 800da8e:	e7fe      	b.n	800da8e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	2b02      	cmp	r3, #2
 800da94:	d103      	bne.n	800da9e <xQueueGenericSend+0x6e>
 800da96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da9a:	2b01      	cmp	r3, #1
 800da9c:	d101      	bne.n	800daa2 <xQueueGenericSend+0x72>
 800da9e:	2301      	movs	r3, #1
 800daa0:	e000      	b.n	800daa4 <xQueueGenericSend+0x74>
 800daa2:	2300      	movs	r3, #0
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d10a      	bne.n	800dabe <xQueueGenericSend+0x8e>
	__asm volatile
 800daa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daac:	f383 8811 	msr	BASEPRI, r3
 800dab0:	f3bf 8f6f 	isb	sy
 800dab4:	f3bf 8f4f 	dsb	sy
 800dab8:	623b      	str	r3, [r7, #32]
}
 800daba:	bf00      	nop
 800dabc:	e7fe      	b.n	800dabc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dabe:	f001 fcb9 	bl	800f434 <xTaskGetSchedulerState>
 800dac2:	4603      	mov	r3, r0
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d102      	bne.n	800dace <xQueueGenericSend+0x9e>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d101      	bne.n	800dad2 <xQueueGenericSend+0xa2>
 800dace:	2301      	movs	r3, #1
 800dad0:	e000      	b.n	800dad4 <xQueueGenericSend+0xa4>
 800dad2:	2300      	movs	r3, #0
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d10a      	bne.n	800daee <xQueueGenericSend+0xbe>
	__asm volatile
 800dad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dadc:	f383 8811 	msr	BASEPRI, r3
 800dae0:	f3bf 8f6f 	isb	sy
 800dae4:	f3bf 8f4f 	dsb	sy
 800dae8:	61fb      	str	r3, [r7, #28]
}
 800daea:	bf00      	nop
 800daec:	e7fe      	b.n	800daec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800daee:	f002 faf9 	bl	80100e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800daf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800daf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d302      	bcc.n	800db04 <xQueueGenericSend+0xd4>
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	2b02      	cmp	r3, #2
 800db02:	d129      	bne.n	800db58 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800db04:	683a      	ldr	r2, [r7, #0]
 800db06:	68b9      	ldr	r1, [r7, #8]
 800db08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db0a:	f000 fc5e 	bl	800e3ca <prvCopyDataToQueue>
 800db0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db14:	2b00      	cmp	r3, #0
 800db16:	d010      	beq.n	800db3a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db1a:	3324      	adds	r3, #36	; 0x24
 800db1c:	4618      	mov	r0, r3
 800db1e:	f001 facb 	bl	800f0b8 <xTaskRemoveFromEventList>
 800db22:	4603      	mov	r3, r0
 800db24:	2b00      	cmp	r3, #0
 800db26:	d013      	beq.n	800db50 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800db28:	4b3f      	ldr	r3, [pc, #252]	; (800dc28 <xQueueGenericSend+0x1f8>)
 800db2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db2e:	601a      	str	r2, [r3, #0]
 800db30:	f3bf 8f4f 	dsb	sy
 800db34:	f3bf 8f6f 	isb	sy
 800db38:	e00a      	b.n	800db50 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800db3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d007      	beq.n	800db50 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800db40:	4b39      	ldr	r3, [pc, #228]	; (800dc28 <xQueueGenericSend+0x1f8>)
 800db42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db46:	601a      	str	r2, [r3, #0]
 800db48:	f3bf 8f4f 	dsb	sy
 800db4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800db50:	f002 faf8 	bl	8010144 <vPortExitCritical>
				return pdPASS;
 800db54:	2301      	movs	r3, #1
 800db56:	e063      	b.n	800dc20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d103      	bne.n	800db66 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800db5e:	f002 faf1 	bl	8010144 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800db62:	2300      	movs	r3, #0
 800db64:	e05c      	b.n	800dc20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800db66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d106      	bne.n	800db7a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800db6c:	f107 0314 	add.w	r3, r7, #20
 800db70:	4618      	mov	r0, r3
 800db72:	f001 fb05 	bl	800f180 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800db76:	2301      	movs	r3, #1
 800db78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800db7a:	f002 fae3 	bl	8010144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800db7e:	f001 f877 	bl	800ec70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800db82:	f002 faaf 	bl	80100e4 <vPortEnterCritical>
 800db86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db8c:	b25b      	sxtb	r3, r3
 800db8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db92:	d103      	bne.n	800db9c <xQueueGenericSend+0x16c>
 800db94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db96:	2200      	movs	r2, #0
 800db98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800db9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dba2:	b25b      	sxtb	r3, r3
 800dba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dba8:	d103      	bne.n	800dbb2 <xQueueGenericSend+0x182>
 800dbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbac:	2200      	movs	r2, #0
 800dbae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dbb2:	f002 fac7 	bl	8010144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dbb6:	1d3a      	adds	r2, r7, #4
 800dbb8:	f107 0314 	add.w	r3, r7, #20
 800dbbc:	4611      	mov	r1, r2
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f001 faf4 	bl	800f1ac <xTaskCheckForTimeOut>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d124      	bne.n	800dc14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dbca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dbcc:	f000 fcf5 	bl	800e5ba <prvIsQueueFull>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d018      	beq.n	800dc08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd8:	3310      	adds	r3, #16
 800dbda:	687a      	ldr	r2, [r7, #4]
 800dbdc:	4611      	mov	r1, r2
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f001 fa1a 	bl	800f018 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800dbe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dbe6:	f000 fc80 	bl	800e4ea <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800dbea:	f001 f84f 	bl	800ec8c <xTaskResumeAll>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	f47f af7c 	bne.w	800daee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800dbf6:	4b0c      	ldr	r3, [pc, #48]	; (800dc28 <xQueueGenericSend+0x1f8>)
 800dbf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbfc:	601a      	str	r2, [r3, #0]
 800dbfe:	f3bf 8f4f 	dsb	sy
 800dc02:	f3bf 8f6f 	isb	sy
 800dc06:	e772      	b.n	800daee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dc08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc0a:	f000 fc6e 	bl	800e4ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dc0e:	f001 f83d 	bl	800ec8c <xTaskResumeAll>
 800dc12:	e76c      	b.n	800daee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800dc14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc16:	f000 fc68 	bl	800e4ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dc1a:	f001 f837 	bl	800ec8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800dc1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	3738      	adds	r7, #56	; 0x38
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	e000ed04 	.word	0xe000ed04

0800dc2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b090      	sub	sp, #64	; 0x40
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	60f8      	str	r0, [r7, #12]
 800dc34:	60b9      	str	r1, [r7, #8]
 800dc36:	607a      	str	r2, [r7, #4]
 800dc38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800dc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d10a      	bne.n	800dc5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800dc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc48:	f383 8811 	msr	BASEPRI, r3
 800dc4c:	f3bf 8f6f 	isb	sy
 800dc50:	f3bf 8f4f 	dsb	sy
 800dc54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800dc56:	bf00      	nop
 800dc58:	e7fe      	b.n	800dc58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d103      	bne.n	800dc68 <xQueueGenericSendFromISR+0x3c>
 800dc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d101      	bne.n	800dc6c <xQueueGenericSendFromISR+0x40>
 800dc68:	2301      	movs	r3, #1
 800dc6a:	e000      	b.n	800dc6e <xQueueGenericSendFromISR+0x42>
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d10a      	bne.n	800dc88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800dc72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc76:	f383 8811 	msr	BASEPRI, r3
 800dc7a:	f3bf 8f6f 	isb	sy
 800dc7e:	f3bf 8f4f 	dsb	sy
 800dc82:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dc84:	bf00      	nop
 800dc86:	e7fe      	b.n	800dc86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	2b02      	cmp	r3, #2
 800dc8c:	d103      	bne.n	800dc96 <xQueueGenericSendFromISR+0x6a>
 800dc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc92:	2b01      	cmp	r3, #1
 800dc94:	d101      	bne.n	800dc9a <xQueueGenericSendFromISR+0x6e>
 800dc96:	2301      	movs	r3, #1
 800dc98:	e000      	b.n	800dc9c <xQueueGenericSendFromISR+0x70>
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d10a      	bne.n	800dcb6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800dca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca4:	f383 8811 	msr	BASEPRI, r3
 800dca8:	f3bf 8f6f 	isb	sy
 800dcac:	f3bf 8f4f 	dsb	sy
 800dcb0:	623b      	str	r3, [r7, #32]
}
 800dcb2:	bf00      	nop
 800dcb4:	e7fe      	b.n	800dcb4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dcb6:	f002 faf7 	bl	80102a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800dcba:	f3ef 8211 	mrs	r2, BASEPRI
 800dcbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcc2:	f383 8811 	msr	BASEPRI, r3
 800dcc6:	f3bf 8f6f 	isb	sy
 800dcca:	f3bf 8f4f 	dsb	sy
 800dcce:	61fa      	str	r2, [r7, #28]
 800dcd0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800dcd2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dcd4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dcd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d302      	bcc.n	800dce8 <xQueueGenericSendFromISR+0xbc>
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	2b02      	cmp	r3, #2
 800dce6:	d12f      	bne.n	800dd48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dcee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dcf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcf6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dcf8:	683a      	ldr	r2, [r7, #0]
 800dcfa:	68b9      	ldr	r1, [r7, #8]
 800dcfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dcfe:	f000 fb64 	bl	800e3ca <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dd02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800dd06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd0a:	d112      	bne.n	800dd32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d016      	beq.n	800dd42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd16:	3324      	adds	r3, #36	; 0x24
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f001 f9cd 	bl	800f0b8 <xTaskRemoveFromEventList>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d00e      	beq.n	800dd42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d00b      	beq.n	800dd42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2201      	movs	r2, #1
 800dd2e:	601a      	str	r2, [r3, #0]
 800dd30:	e007      	b.n	800dd42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dd32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dd36:	3301      	adds	r3, #1
 800dd38:	b2db      	uxtb	r3, r3
 800dd3a:	b25a      	sxtb	r2, r3
 800dd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dd42:	2301      	movs	r3, #1
 800dd44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800dd46:	e001      	b.n	800dd4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dd4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dd56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dd58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	3740      	adds	r7, #64	; 0x40
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}

0800dd62 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dd62:	b580      	push	{r7, lr}
 800dd64:	b08e      	sub	sp, #56	; 0x38
 800dd66:	af00      	add	r7, sp, #0
 800dd68:	6078      	str	r0, [r7, #4]
 800dd6a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800dd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d10a      	bne.n	800dd8c <xQueueGiveFromISR+0x2a>
	__asm volatile
 800dd76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd7a:	f383 8811 	msr	BASEPRI, r3
 800dd7e:	f3bf 8f6f 	isb	sy
 800dd82:	f3bf 8f4f 	dsb	sy
 800dd86:	623b      	str	r3, [r7, #32]
}
 800dd88:	bf00      	nop
 800dd8a:	e7fe      	b.n	800dd8a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d00a      	beq.n	800ddaa <xQueueGiveFromISR+0x48>
	__asm volatile
 800dd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd98:	f383 8811 	msr	BASEPRI, r3
 800dd9c:	f3bf 8f6f 	isb	sy
 800dda0:	f3bf 8f4f 	dsb	sy
 800dda4:	61fb      	str	r3, [r7, #28]
}
 800dda6:	bf00      	nop
 800dda8:	e7fe      	b.n	800dda8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ddaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d103      	bne.n	800ddba <xQueueGiveFromISR+0x58>
 800ddb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb4:	689b      	ldr	r3, [r3, #8]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d101      	bne.n	800ddbe <xQueueGiveFromISR+0x5c>
 800ddba:	2301      	movs	r3, #1
 800ddbc:	e000      	b.n	800ddc0 <xQueueGiveFromISR+0x5e>
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d10a      	bne.n	800ddda <xQueueGiveFromISR+0x78>
	__asm volatile
 800ddc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc8:	f383 8811 	msr	BASEPRI, r3
 800ddcc:	f3bf 8f6f 	isb	sy
 800ddd0:	f3bf 8f4f 	dsb	sy
 800ddd4:	61bb      	str	r3, [r7, #24]
}
 800ddd6:	bf00      	nop
 800ddd8:	e7fe      	b.n	800ddd8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ddda:	f002 fa65 	bl	80102a8 <vPortValidateInterruptPriority>
	__asm volatile
 800ddde:	f3ef 8211 	mrs	r2, BASEPRI
 800dde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dde6:	f383 8811 	msr	BASEPRI, r3
 800ddea:	f3bf 8f6f 	isb	sy
 800ddee:	f3bf 8f4f 	dsb	sy
 800ddf2:	617a      	str	r2, [r7, #20]
 800ddf4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ddf6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ddf8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ddfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddfe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800de00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de06:	429a      	cmp	r2, r3
 800de08:	d22b      	bcs.n	800de62 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800de0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800de14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de16:	1c5a      	adds	r2, r3, #1
 800de18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de1a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800de1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800de20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de24:	d112      	bne.n	800de4c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d016      	beq.n	800de5c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de30:	3324      	adds	r3, #36	; 0x24
 800de32:	4618      	mov	r0, r3
 800de34:	f001 f940 	bl	800f0b8 <xTaskRemoveFromEventList>
 800de38:	4603      	mov	r3, r0
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d00e      	beq.n	800de5c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d00b      	beq.n	800de5c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	2201      	movs	r2, #1
 800de48:	601a      	str	r2, [r3, #0]
 800de4a:	e007      	b.n	800de5c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800de4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de50:	3301      	adds	r3, #1
 800de52:	b2db      	uxtb	r3, r3
 800de54:	b25a      	sxtb	r2, r3
 800de56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800de5c:	2301      	movs	r3, #1
 800de5e:	637b      	str	r3, [r7, #52]	; 0x34
 800de60:	e001      	b.n	800de66 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800de62:	2300      	movs	r3, #0
 800de64:	637b      	str	r3, [r7, #52]	; 0x34
 800de66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de68:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	f383 8811 	msr	BASEPRI, r3
}
 800de70:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800de72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800de74:	4618      	mov	r0, r3
 800de76:	3738      	adds	r7, #56	; 0x38
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b08c      	sub	sp, #48	; 0x30
 800de80:	af00      	add	r7, sp, #0
 800de82:	60f8      	str	r0, [r7, #12]
 800de84:	60b9      	str	r1, [r7, #8]
 800de86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800de88:	2300      	movs	r3, #0
 800de8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800de90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de92:	2b00      	cmp	r3, #0
 800de94:	d10a      	bne.n	800deac <xQueueReceive+0x30>
	__asm volatile
 800de96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de9a:	f383 8811 	msr	BASEPRI, r3
 800de9e:	f3bf 8f6f 	isb	sy
 800dea2:	f3bf 8f4f 	dsb	sy
 800dea6:	623b      	str	r3, [r7, #32]
}
 800dea8:	bf00      	nop
 800deaa:	e7fe      	b.n	800deaa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d103      	bne.n	800deba <xQueueReceive+0x3e>
 800deb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d101      	bne.n	800debe <xQueueReceive+0x42>
 800deba:	2301      	movs	r3, #1
 800debc:	e000      	b.n	800dec0 <xQueueReceive+0x44>
 800debe:	2300      	movs	r3, #0
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d10a      	bne.n	800deda <xQueueReceive+0x5e>
	__asm volatile
 800dec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec8:	f383 8811 	msr	BASEPRI, r3
 800decc:	f3bf 8f6f 	isb	sy
 800ded0:	f3bf 8f4f 	dsb	sy
 800ded4:	61fb      	str	r3, [r7, #28]
}
 800ded6:	bf00      	nop
 800ded8:	e7fe      	b.n	800ded8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800deda:	f001 faab 	bl	800f434 <xTaskGetSchedulerState>
 800dede:	4603      	mov	r3, r0
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d102      	bne.n	800deea <xQueueReceive+0x6e>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d101      	bne.n	800deee <xQueueReceive+0x72>
 800deea:	2301      	movs	r3, #1
 800deec:	e000      	b.n	800def0 <xQueueReceive+0x74>
 800deee:	2300      	movs	r3, #0
 800def0:	2b00      	cmp	r3, #0
 800def2:	d10a      	bne.n	800df0a <xQueueReceive+0x8e>
	__asm volatile
 800def4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def8:	f383 8811 	msr	BASEPRI, r3
 800defc:	f3bf 8f6f 	isb	sy
 800df00:	f3bf 8f4f 	dsb	sy
 800df04:	61bb      	str	r3, [r7, #24]
}
 800df06:	bf00      	nop
 800df08:	e7fe      	b.n	800df08 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800df0a:	f002 f8eb 	bl	80100e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800df0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df12:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df16:	2b00      	cmp	r3, #0
 800df18:	d01f      	beq.n	800df5a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800df1a:	68b9      	ldr	r1, [r7, #8]
 800df1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df1e:	f000 fabe 	bl	800e49e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800df22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df24:	1e5a      	subs	r2, r3, #1
 800df26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df28:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df2c:	691b      	ldr	r3, [r3, #16]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d00f      	beq.n	800df52 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df34:	3310      	adds	r3, #16
 800df36:	4618      	mov	r0, r3
 800df38:	f001 f8be 	bl	800f0b8 <xTaskRemoveFromEventList>
 800df3c:	4603      	mov	r3, r0
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d007      	beq.n	800df52 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800df42:	4b3d      	ldr	r3, [pc, #244]	; (800e038 <xQueueReceive+0x1bc>)
 800df44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df48:	601a      	str	r2, [r3, #0]
 800df4a:	f3bf 8f4f 	dsb	sy
 800df4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800df52:	f002 f8f7 	bl	8010144 <vPortExitCritical>
				return pdPASS;
 800df56:	2301      	movs	r3, #1
 800df58:	e069      	b.n	800e02e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d103      	bne.n	800df68 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800df60:	f002 f8f0 	bl	8010144 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800df64:	2300      	movs	r3, #0
 800df66:	e062      	b.n	800e02e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800df68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d106      	bne.n	800df7c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800df6e:	f107 0310 	add.w	r3, r7, #16
 800df72:	4618      	mov	r0, r3
 800df74:	f001 f904 	bl	800f180 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800df78:	2301      	movs	r3, #1
 800df7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800df7c:	f002 f8e2 	bl	8010144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800df80:	f000 fe76 	bl	800ec70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800df84:	f002 f8ae 	bl	80100e4 <vPortEnterCritical>
 800df88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df8e:	b25b      	sxtb	r3, r3
 800df90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df94:	d103      	bne.n	800df9e <xQueueReceive+0x122>
 800df96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df98:	2200      	movs	r2, #0
 800df9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800df9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dfa4:	b25b      	sxtb	r3, r3
 800dfa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfaa:	d103      	bne.n	800dfb4 <xQueueReceive+0x138>
 800dfac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfae:	2200      	movs	r2, #0
 800dfb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dfb4:	f002 f8c6 	bl	8010144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dfb8:	1d3a      	adds	r2, r7, #4
 800dfba:	f107 0310 	add.w	r3, r7, #16
 800dfbe:	4611      	mov	r1, r2
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f001 f8f3 	bl	800f1ac <xTaskCheckForTimeOut>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d123      	bne.n	800e014 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dfcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfce:	f000 fade 	bl	800e58e <prvIsQueueEmpty>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d017      	beq.n	800e008 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dfd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfda:	3324      	adds	r3, #36	; 0x24
 800dfdc:	687a      	ldr	r2, [r7, #4]
 800dfde:	4611      	mov	r1, r2
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f001 f819 	bl	800f018 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dfe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfe8:	f000 fa7f 	bl	800e4ea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dfec:	f000 fe4e 	bl	800ec8c <xTaskResumeAll>
 800dff0:	4603      	mov	r3, r0
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d189      	bne.n	800df0a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800dff6:	4b10      	ldr	r3, [pc, #64]	; (800e038 <xQueueReceive+0x1bc>)
 800dff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dffc:	601a      	str	r2, [r3, #0]
 800dffe:	f3bf 8f4f 	dsb	sy
 800e002:	f3bf 8f6f 	isb	sy
 800e006:	e780      	b.n	800df0a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e00a:	f000 fa6e 	bl	800e4ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e00e:	f000 fe3d 	bl	800ec8c <xTaskResumeAll>
 800e012:	e77a      	b.n	800df0a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e016:	f000 fa68 	bl	800e4ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e01a:	f000 fe37 	bl	800ec8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e01e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e020:	f000 fab5 	bl	800e58e <prvIsQueueEmpty>
 800e024:	4603      	mov	r3, r0
 800e026:	2b00      	cmp	r3, #0
 800e028:	f43f af6f 	beq.w	800df0a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e02c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e02e:	4618      	mov	r0, r3
 800e030:	3730      	adds	r7, #48	; 0x30
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}
 800e036:	bf00      	nop
 800e038:	e000ed04 	.word	0xe000ed04

0800e03c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b08e      	sub	sp, #56	; 0x38
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
 800e044:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e046:	2300      	movs	r3, #0
 800e048:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e04e:	2300      	movs	r3, #0
 800e050:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e054:	2b00      	cmp	r3, #0
 800e056:	d10a      	bne.n	800e06e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800e058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e05c:	f383 8811 	msr	BASEPRI, r3
 800e060:	f3bf 8f6f 	isb	sy
 800e064:	f3bf 8f4f 	dsb	sy
 800e068:	623b      	str	r3, [r7, #32]
}
 800e06a:	bf00      	nop
 800e06c:	e7fe      	b.n	800e06c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e072:	2b00      	cmp	r3, #0
 800e074:	d00a      	beq.n	800e08c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800e076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e07a:	f383 8811 	msr	BASEPRI, r3
 800e07e:	f3bf 8f6f 	isb	sy
 800e082:	f3bf 8f4f 	dsb	sy
 800e086:	61fb      	str	r3, [r7, #28]
}
 800e088:	bf00      	nop
 800e08a:	e7fe      	b.n	800e08a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e08c:	f001 f9d2 	bl	800f434 <xTaskGetSchedulerState>
 800e090:	4603      	mov	r3, r0
 800e092:	2b00      	cmp	r3, #0
 800e094:	d102      	bne.n	800e09c <xQueueSemaphoreTake+0x60>
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d101      	bne.n	800e0a0 <xQueueSemaphoreTake+0x64>
 800e09c:	2301      	movs	r3, #1
 800e09e:	e000      	b.n	800e0a2 <xQueueSemaphoreTake+0x66>
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d10a      	bne.n	800e0bc <xQueueSemaphoreTake+0x80>
	__asm volatile
 800e0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0aa:	f383 8811 	msr	BASEPRI, r3
 800e0ae:	f3bf 8f6f 	isb	sy
 800e0b2:	f3bf 8f4f 	dsb	sy
 800e0b6:	61bb      	str	r3, [r7, #24]
}
 800e0b8:	bf00      	nop
 800e0ba:	e7fe      	b.n	800e0ba <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e0bc:	f002 f812 	bl	80100e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0c4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d024      	beq.n	800e116 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ce:	1e5a      	subs	r2, r3, #1
 800e0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d104      	bne.n	800e0e6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e0dc:	f001 fb20 	bl	800f720 <pvTaskIncrementMutexHeldCount>
 800e0e0:	4602      	mov	r2, r0
 800e0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e8:	691b      	ldr	r3, [r3, #16]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d00f      	beq.n	800e10e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f0:	3310      	adds	r3, #16
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f000 ffe0 	bl	800f0b8 <xTaskRemoveFromEventList>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d007      	beq.n	800e10e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e0fe:	4b54      	ldr	r3, [pc, #336]	; (800e250 <xQueueSemaphoreTake+0x214>)
 800e100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e104:	601a      	str	r2, [r3, #0]
 800e106:	f3bf 8f4f 	dsb	sy
 800e10a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e10e:	f002 f819 	bl	8010144 <vPortExitCritical>
				return pdPASS;
 800e112:	2301      	movs	r3, #1
 800e114:	e097      	b.n	800e246 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d111      	bne.n	800e140 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d00a      	beq.n	800e138 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800e122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e126:	f383 8811 	msr	BASEPRI, r3
 800e12a:	f3bf 8f6f 	isb	sy
 800e12e:	f3bf 8f4f 	dsb	sy
 800e132:	617b      	str	r3, [r7, #20]
}
 800e134:	bf00      	nop
 800e136:	e7fe      	b.n	800e136 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e138:	f002 f804 	bl	8010144 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e13c:	2300      	movs	r3, #0
 800e13e:	e082      	b.n	800e246 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e142:	2b00      	cmp	r3, #0
 800e144:	d106      	bne.n	800e154 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e146:	f107 030c 	add.w	r3, r7, #12
 800e14a:	4618      	mov	r0, r3
 800e14c:	f001 f818 	bl	800f180 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e150:	2301      	movs	r3, #1
 800e152:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e154:	f001 fff6 	bl	8010144 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e158:	f000 fd8a 	bl	800ec70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e15c:	f001 ffc2 	bl	80100e4 <vPortEnterCritical>
 800e160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e162:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e166:	b25b      	sxtb	r3, r3
 800e168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e16c:	d103      	bne.n	800e176 <xQueueSemaphoreTake+0x13a>
 800e16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e170:	2200      	movs	r2, #0
 800e172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e178:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e17c:	b25b      	sxtb	r3, r3
 800e17e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e182:	d103      	bne.n	800e18c <xQueueSemaphoreTake+0x150>
 800e184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e186:	2200      	movs	r2, #0
 800e188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e18c:	f001 ffda 	bl	8010144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e190:	463a      	mov	r2, r7
 800e192:	f107 030c 	add.w	r3, r7, #12
 800e196:	4611      	mov	r1, r2
 800e198:	4618      	mov	r0, r3
 800e19a:	f001 f807 	bl	800f1ac <xTaskCheckForTimeOut>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d132      	bne.n	800e20a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e1a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e1a6:	f000 f9f2 	bl	800e58e <prvIsQueueEmpty>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d026      	beq.n	800e1fe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d109      	bne.n	800e1cc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800e1b8:	f001 ff94 	bl	80100e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1be:	689b      	ldr	r3, [r3, #8]
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f001 f955 	bl	800f470 <xTaskPriorityInherit>
 800e1c6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e1c8:	f001 ffbc 	bl	8010144 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ce:	3324      	adds	r3, #36	; 0x24
 800e1d0:	683a      	ldr	r2, [r7, #0]
 800e1d2:	4611      	mov	r1, r2
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f000 ff1f 	bl	800f018 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e1da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e1dc:	f000 f985 	bl	800e4ea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e1e0:	f000 fd54 	bl	800ec8c <xTaskResumeAll>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	f47f af68 	bne.w	800e0bc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800e1ec:	4b18      	ldr	r3, [pc, #96]	; (800e250 <xQueueSemaphoreTake+0x214>)
 800e1ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1f2:	601a      	str	r2, [r3, #0]
 800e1f4:	f3bf 8f4f 	dsb	sy
 800e1f8:	f3bf 8f6f 	isb	sy
 800e1fc:	e75e      	b.n	800e0bc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e1fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e200:	f000 f973 	bl	800e4ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e204:	f000 fd42 	bl	800ec8c <xTaskResumeAll>
 800e208:	e758      	b.n	800e0bc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e20a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e20c:	f000 f96d 	bl	800e4ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e210:	f000 fd3c 	bl	800ec8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e214:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e216:	f000 f9ba 	bl	800e58e <prvIsQueueEmpty>
 800e21a:	4603      	mov	r3, r0
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	f43f af4d 	beq.w	800e0bc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e224:	2b00      	cmp	r3, #0
 800e226:	d00d      	beq.n	800e244 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800e228:	f001 ff5c 	bl	80100e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e22c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e22e:	f000 f8b4 	bl	800e39a <prvGetDisinheritPriorityAfterTimeout>
 800e232:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e236:	689b      	ldr	r3, [r3, #8]
 800e238:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e23a:	4618      	mov	r0, r3
 800e23c:	f001 f9ee 	bl	800f61c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e240:	f001 ff80 	bl	8010144 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e244:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e246:	4618      	mov	r0, r3
 800e248:	3738      	adds	r7, #56	; 0x38
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	bf00      	nop
 800e250:	e000ed04 	.word	0xe000ed04

0800e254 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b08e      	sub	sp, #56	; 0x38
 800e258:	af00      	add	r7, sp, #0
 800e25a:	60f8      	str	r0, [r7, #12]
 800e25c:	60b9      	str	r1, [r7, #8]
 800e25e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e266:	2b00      	cmp	r3, #0
 800e268:	d10a      	bne.n	800e280 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e26e:	f383 8811 	msr	BASEPRI, r3
 800e272:	f3bf 8f6f 	isb	sy
 800e276:	f3bf 8f4f 	dsb	sy
 800e27a:	623b      	str	r3, [r7, #32]
}
 800e27c:	bf00      	nop
 800e27e:	e7fe      	b.n	800e27e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d103      	bne.n	800e28e <xQueueReceiveFromISR+0x3a>
 800e286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d101      	bne.n	800e292 <xQueueReceiveFromISR+0x3e>
 800e28e:	2301      	movs	r3, #1
 800e290:	e000      	b.n	800e294 <xQueueReceiveFromISR+0x40>
 800e292:	2300      	movs	r3, #0
 800e294:	2b00      	cmp	r3, #0
 800e296:	d10a      	bne.n	800e2ae <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e29c:	f383 8811 	msr	BASEPRI, r3
 800e2a0:	f3bf 8f6f 	isb	sy
 800e2a4:	f3bf 8f4f 	dsb	sy
 800e2a8:	61fb      	str	r3, [r7, #28]
}
 800e2aa:	bf00      	nop
 800e2ac:	e7fe      	b.n	800e2ac <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e2ae:	f001 fffb 	bl	80102a8 <vPortValidateInterruptPriority>
	__asm volatile
 800e2b2:	f3ef 8211 	mrs	r2, BASEPRI
 800e2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ba:	f383 8811 	msr	BASEPRI, r3
 800e2be:	f3bf 8f6f 	isb	sy
 800e2c2:	f3bf 8f4f 	dsb	sy
 800e2c6:	61ba      	str	r2, [r7, #24]
 800e2c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e2ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e2cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d02f      	beq.n	800e33a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e2e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e2e4:	68b9      	ldr	r1, [r7, #8]
 800e2e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e2e8:	f000 f8d9 	bl	800e49e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ee:	1e5a      	subs	r2, r3, #1
 800e2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e2f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e2f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2fc:	d112      	bne.n	800e324 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e300:	691b      	ldr	r3, [r3, #16]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d016      	beq.n	800e334 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e308:	3310      	adds	r3, #16
 800e30a:	4618      	mov	r0, r3
 800e30c:	f000 fed4 	bl	800f0b8 <xTaskRemoveFromEventList>
 800e310:	4603      	mov	r3, r0
 800e312:	2b00      	cmp	r3, #0
 800e314:	d00e      	beq.n	800e334 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d00b      	beq.n	800e334 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2201      	movs	r2, #1
 800e320:	601a      	str	r2, [r3, #0]
 800e322:	e007      	b.n	800e334 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e328:	3301      	adds	r3, #1
 800e32a:	b2db      	uxtb	r3, r3
 800e32c:	b25a      	sxtb	r2, r3
 800e32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e334:	2301      	movs	r3, #1
 800e336:	637b      	str	r3, [r7, #52]	; 0x34
 800e338:	e001      	b.n	800e33e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e33a:	2300      	movs	r3, #0
 800e33c:	637b      	str	r3, [r7, #52]	; 0x34
 800e33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e340:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e342:	693b      	ldr	r3, [r7, #16]
 800e344:	f383 8811 	msr	BASEPRI, r3
}
 800e348:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	3738      	adds	r7, #56	; 0x38
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}

0800e354 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b084      	sub	sp, #16
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d10a      	bne.n	800e37c <vQueueDelete+0x28>
	__asm volatile
 800e366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e36a:	f383 8811 	msr	BASEPRI, r3
 800e36e:	f3bf 8f6f 	isb	sy
 800e372:	f3bf 8f4f 	dsb	sy
 800e376:	60bb      	str	r3, [r7, #8]
}
 800e378:	bf00      	nop
 800e37a:	e7fe      	b.n	800e37a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e37c:	68f8      	ldr	r0, [r7, #12]
 800e37e:	f000 f95f 	bl	800e640 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d102      	bne.n	800e392 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800e38c:	68f8      	ldr	r0, [r7, #12]
 800e38e:	f002 f897 	bl	80104c0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e392:	bf00      	nop
 800e394:	3710      	adds	r7, #16
 800e396:	46bd      	mov	sp, r7
 800e398:	bd80      	pop	{r7, pc}

0800e39a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e39a:	b480      	push	{r7}
 800e39c:	b085      	sub	sp, #20
 800e39e:	af00      	add	r7, sp, #0
 800e3a0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d006      	beq.n	800e3b8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800e3b4:	60fb      	str	r3, [r7, #12]
 800e3b6:	e001      	b.n	800e3bc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
	}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	3714      	adds	r7, #20
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c8:	4770      	bx	lr

0800e3ca <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e3ca:	b580      	push	{r7, lr}
 800e3cc:	b086      	sub	sp, #24
 800e3ce:	af00      	add	r7, sp, #0
 800e3d0:	60f8      	str	r0, [r7, #12]
 800e3d2:	60b9      	str	r1, [r7, #8]
 800e3d4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3de:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d10d      	bne.n	800e404 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d14d      	bne.n	800e48c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	689b      	ldr	r3, [r3, #8]
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f001 f8a3 	bl	800f540 <xTaskPriorityDisinherit>
 800e3fa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	2200      	movs	r2, #0
 800e400:	609a      	str	r2, [r3, #8]
 800e402:	e043      	b.n	800e48c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d119      	bne.n	800e43e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	6858      	ldr	r0, [r3, #4]
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e412:	461a      	mov	r2, r3
 800e414:	68b9      	ldr	r1, [r7, #8]
 800e416:	f002 f9e9 	bl	80107ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	685a      	ldr	r2, [r3, #4]
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e422:	441a      	add	r2, r3
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	685a      	ldr	r2, [r3, #4]
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	689b      	ldr	r3, [r3, #8]
 800e430:	429a      	cmp	r2, r3
 800e432:	d32b      	bcc.n	800e48c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	681a      	ldr	r2, [r3, #0]
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	605a      	str	r2, [r3, #4]
 800e43c:	e026      	b.n	800e48c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	68d8      	ldr	r0, [r3, #12]
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e446:	461a      	mov	r2, r3
 800e448:	68b9      	ldr	r1, [r7, #8]
 800e44a:	f002 f9cf 	bl	80107ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	68da      	ldr	r2, [r3, #12]
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e456:	425b      	negs	r3, r3
 800e458:	441a      	add	r2, r3
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	68da      	ldr	r2, [r3, #12]
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	429a      	cmp	r2, r3
 800e468:	d207      	bcs.n	800e47a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	689a      	ldr	r2, [r3, #8]
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e472:	425b      	negs	r3, r3
 800e474:	441a      	add	r2, r3
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2b02      	cmp	r3, #2
 800e47e:	d105      	bne.n	800e48c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e480:	693b      	ldr	r3, [r7, #16]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d002      	beq.n	800e48c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e486:	693b      	ldr	r3, [r7, #16]
 800e488:	3b01      	subs	r3, #1
 800e48a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e48c:	693b      	ldr	r3, [r7, #16]
 800e48e:	1c5a      	adds	r2, r3, #1
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e494:	697b      	ldr	r3, [r7, #20]
}
 800e496:	4618      	mov	r0, r3
 800e498:	3718      	adds	r7, #24
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}

0800e49e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e49e:	b580      	push	{r7, lr}
 800e4a0:	b082      	sub	sp, #8
 800e4a2:	af00      	add	r7, sp, #0
 800e4a4:	6078      	str	r0, [r7, #4]
 800e4a6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d018      	beq.n	800e4e2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	68da      	ldr	r2, [r3, #12]
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4b8:	441a      	add	r2, r3
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	68da      	ldr	r2, [r3, #12]
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	689b      	ldr	r3, [r3, #8]
 800e4c6:	429a      	cmp	r2, r3
 800e4c8:	d303      	bcc.n	800e4d2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681a      	ldr	r2, [r3, #0]
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	68d9      	ldr	r1, [r3, #12]
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4da:	461a      	mov	r2, r3
 800e4dc:	6838      	ldr	r0, [r7, #0]
 800e4de:	f002 f985 	bl	80107ec <memcpy>
	}
}
 800e4e2:	bf00      	nop
 800e4e4:	3708      	adds	r7, #8
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}

0800e4ea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e4ea:	b580      	push	{r7, lr}
 800e4ec:	b084      	sub	sp, #16
 800e4ee:	af00      	add	r7, sp, #0
 800e4f0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e4f2:	f001 fdf7 	bl	80100e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e4fc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e4fe:	e011      	b.n	800e524 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e504:	2b00      	cmp	r3, #0
 800e506:	d012      	beq.n	800e52e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	3324      	adds	r3, #36	; 0x24
 800e50c:	4618      	mov	r0, r3
 800e50e:	f000 fdd3 	bl	800f0b8 <xTaskRemoveFromEventList>
 800e512:	4603      	mov	r3, r0
 800e514:	2b00      	cmp	r3, #0
 800e516:	d001      	beq.n	800e51c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e518:	f000 feaa 	bl	800f270 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e51c:	7bfb      	ldrb	r3, [r7, #15]
 800e51e:	3b01      	subs	r3, #1
 800e520:	b2db      	uxtb	r3, r3
 800e522:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	dce9      	bgt.n	800e500 <prvUnlockQueue+0x16>
 800e52c:	e000      	b.n	800e530 <prvUnlockQueue+0x46>
					break;
 800e52e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	22ff      	movs	r2, #255	; 0xff
 800e534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e538:	f001 fe04 	bl	8010144 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e53c:	f001 fdd2 	bl	80100e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e546:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e548:	e011      	b.n	800e56e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	691b      	ldr	r3, [r3, #16]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d012      	beq.n	800e578 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	3310      	adds	r3, #16
 800e556:	4618      	mov	r0, r3
 800e558:	f000 fdae 	bl	800f0b8 <xTaskRemoveFromEventList>
 800e55c:	4603      	mov	r3, r0
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d001      	beq.n	800e566 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e562:	f000 fe85 	bl	800f270 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e566:	7bbb      	ldrb	r3, [r7, #14]
 800e568:	3b01      	subs	r3, #1
 800e56a:	b2db      	uxtb	r3, r3
 800e56c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e56e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e572:	2b00      	cmp	r3, #0
 800e574:	dce9      	bgt.n	800e54a <prvUnlockQueue+0x60>
 800e576:	e000      	b.n	800e57a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e578:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	22ff      	movs	r2, #255	; 0xff
 800e57e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e582:	f001 fddf 	bl	8010144 <vPortExitCritical>
}
 800e586:	bf00      	nop
 800e588:	3710      	adds	r7, #16
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}

0800e58e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e58e:	b580      	push	{r7, lr}
 800e590:	b084      	sub	sp, #16
 800e592:	af00      	add	r7, sp, #0
 800e594:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e596:	f001 fda5 	bl	80100e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d102      	bne.n	800e5a8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	60fb      	str	r3, [r7, #12]
 800e5a6:	e001      	b.n	800e5ac <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e5ac:	f001 fdca 	bl	8010144 <vPortExitCritical>

	return xReturn;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3710      	adds	r7, #16
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}

0800e5ba <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e5ba:	b580      	push	{r7, lr}
 800e5bc:	b084      	sub	sp, #16
 800e5be:	af00      	add	r7, sp, #0
 800e5c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e5c2:	f001 fd8f 	bl	80100e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	d102      	bne.n	800e5d8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	60fb      	str	r3, [r7, #12]
 800e5d6:	e001      	b.n	800e5dc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e5dc:	f001 fdb2 	bl	8010144 <vPortExitCritical>

	return xReturn;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	3710      	adds	r7, #16
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}
	...

0800e5ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e5ec:	b480      	push	{r7}
 800e5ee:	b085      	sub	sp, #20
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
 800e5f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	60fb      	str	r3, [r7, #12]
 800e5fa:	e014      	b.n	800e626 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e5fc:	4a0f      	ldr	r2, [pc, #60]	; (800e63c <vQueueAddToRegistry+0x50>)
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d10b      	bne.n	800e620 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e608:	490c      	ldr	r1, [pc, #48]	; (800e63c <vQueueAddToRegistry+0x50>)
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	683a      	ldr	r2, [r7, #0]
 800e60e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e612:	4a0a      	ldr	r2, [pc, #40]	; (800e63c <vQueueAddToRegistry+0x50>)
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	00db      	lsls	r3, r3, #3
 800e618:	4413      	add	r3, r2
 800e61a:	687a      	ldr	r2, [r7, #4]
 800e61c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e61e:	e006      	b.n	800e62e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	3301      	adds	r3, #1
 800e624:	60fb      	str	r3, [r7, #12]
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	2b07      	cmp	r3, #7
 800e62a:	d9e7      	bls.n	800e5fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e62c:	bf00      	nop
 800e62e:	bf00      	nop
 800e630:	3714      	adds	r7, #20
 800e632:	46bd      	mov	sp, r7
 800e634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e638:	4770      	bx	lr
 800e63a:	bf00      	nop
 800e63c:	20001420 	.word	0x20001420

0800e640 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e640:	b480      	push	{r7}
 800e642:	b085      	sub	sp, #20
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e648:	2300      	movs	r3, #0
 800e64a:	60fb      	str	r3, [r7, #12]
 800e64c:	e016      	b.n	800e67c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e64e:	4a10      	ldr	r2, [pc, #64]	; (800e690 <vQueueUnregisterQueue+0x50>)
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	00db      	lsls	r3, r3, #3
 800e654:	4413      	add	r3, r2
 800e656:	685b      	ldr	r3, [r3, #4]
 800e658:	687a      	ldr	r2, [r7, #4]
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d10b      	bne.n	800e676 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e65e:	4a0c      	ldr	r2, [pc, #48]	; (800e690 <vQueueUnregisterQueue+0x50>)
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	2100      	movs	r1, #0
 800e664:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e668:	4a09      	ldr	r2, [pc, #36]	; (800e690 <vQueueUnregisterQueue+0x50>)
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	00db      	lsls	r3, r3, #3
 800e66e:	4413      	add	r3, r2
 800e670:	2200      	movs	r2, #0
 800e672:	605a      	str	r2, [r3, #4]
				break;
 800e674:	e006      	b.n	800e684 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	3301      	adds	r3, #1
 800e67a:	60fb      	str	r3, [r7, #12]
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	2b07      	cmp	r3, #7
 800e680:	d9e5      	bls.n	800e64e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e682:	bf00      	nop
 800e684:	bf00      	nop
 800e686:	3714      	adds	r7, #20
 800e688:	46bd      	mov	sp, r7
 800e68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68e:	4770      	bx	lr
 800e690:	20001420 	.word	0x20001420

0800e694 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e694:	b580      	push	{r7, lr}
 800e696:	b086      	sub	sp, #24
 800e698:	af00      	add	r7, sp, #0
 800e69a:	60f8      	str	r0, [r7, #12]
 800e69c:	60b9      	str	r1, [r7, #8]
 800e69e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e6a4:	f001 fd1e 	bl	80100e4 <vPortEnterCritical>
 800e6a8:	697b      	ldr	r3, [r7, #20]
 800e6aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e6ae:	b25b      	sxtb	r3, r3
 800e6b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6b4:	d103      	bne.n	800e6be <vQueueWaitForMessageRestricted+0x2a>
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6c4:	b25b      	sxtb	r3, r3
 800e6c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6ca:	d103      	bne.n	800e6d4 <vQueueWaitForMessageRestricted+0x40>
 800e6cc:	697b      	ldr	r3, [r7, #20]
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e6d4:	f001 fd36 	bl	8010144 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e6d8:	697b      	ldr	r3, [r7, #20]
 800e6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d106      	bne.n	800e6ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e6e0:	697b      	ldr	r3, [r7, #20]
 800e6e2:	3324      	adds	r3, #36	; 0x24
 800e6e4:	687a      	ldr	r2, [r7, #4]
 800e6e6:	68b9      	ldr	r1, [r7, #8]
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f000 fcb9 	bl	800f060 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e6ee:	6978      	ldr	r0, [r7, #20]
 800e6f0:	f7ff fefb 	bl	800e4ea <prvUnlockQueue>
	}
 800e6f4:	bf00      	nop
 800e6f6:	3718      	adds	r7, #24
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}

0800e6fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b08e      	sub	sp, #56	; 0x38
 800e700:	af04      	add	r7, sp, #16
 800e702:	60f8      	str	r0, [r7, #12]
 800e704:	60b9      	str	r1, [r7, #8]
 800e706:	607a      	str	r2, [r7, #4]
 800e708:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e70a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d10a      	bne.n	800e726 <xTaskCreateStatic+0x2a>
	__asm volatile
 800e710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e714:	f383 8811 	msr	BASEPRI, r3
 800e718:	f3bf 8f6f 	isb	sy
 800e71c:	f3bf 8f4f 	dsb	sy
 800e720:	623b      	str	r3, [r7, #32]
}
 800e722:	bf00      	nop
 800e724:	e7fe      	b.n	800e724 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d10a      	bne.n	800e742 <xTaskCreateStatic+0x46>
	__asm volatile
 800e72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e730:	f383 8811 	msr	BASEPRI, r3
 800e734:	f3bf 8f6f 	isb	sy
 800e738:	f3bf 8f4f 	dsb	sy
 800e73c:	61fb      	str	r3, [r7, #28]
}
 800e73e:	bf00      	nop
 800e740:	e7fe      	b.n	800e740 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e742:	235c      	movs	r3, #92	; 0x5c
 800e744:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	2b5c      	cmp	r3, #92	; 0x5c
 800e74a:	d00a      	beq.n	800e762 <xTaskCreateStatic+0x66>
	__asm volatile
 800e74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e750:	f383 8811 	msr	BASEPRI, r3
 800e754:	f3bf 8f6f 	isb	sy
 800e758:	f3bf 8f4f 	dsb	sy
 800e75c:	61bb      	str	r3, [r7, #24]
}
 800e75e:	bf00      	nop
 800e760:	e7fe      	b.n	800e760 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e762:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e766:	2b00      	cmp	r3, #0
 800e768:	d01e      	beq.n	800e7a8 <xTaskCreateStatic+0xac>
 800e76a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d01b      	beq.n	800e7a8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e772:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e776:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e778:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e77c:	2202      	movs	r2, #2
 800e77e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e782:	2300      	movs	r3, #0
 800e784:	9303      	str	r3, [sp, #12]
 800e786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e788:	9302      	str	r3, [sp, #8]
 800e78a:	f107 0314 	add.w	r3, r7, #20
 800e78e:	9301      	str	r3, [sp, #4]
 800e790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e792:	9300      	str	r3, [sp, #0]
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	687a      	ldr	r2, [r7, #4]
 800e798:	68b9      	ldr	r1, [r7, #8]
 800e79a:	68f8      	ldr	r0, [r7, #12]
 800e79c:	f000 f850 	bl	800e840 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e7a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e7a2:	f000 f8dd 	bl	800e960 <prvAddNewTaskToReadyList>
 800e7a6:	e001      	b.n	800e7ac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e7ac:	697b      	ldr	r3, [r7, #20]
	}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	3728      	adds	r7, #40	; 0x28
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}

0800e7b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e7b6:	b580      	push	{r7, lr}
 800e7b8:	b08c      	sub	sp, #48	; 0x30
 800e7ba:	af04      	add	r7, sp, #16
 800e7bc:	60f8      	str	r0, [r7, #12]
 800e7be:	60b9      	str	r1, [r7, #8]
 800e7c0:	603b      	str	r3, [r7, #0]
 800e7c2:	4613      	mov	r3, r2
 800e7c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e7c6:	88fb      	ldrh	r3, [r7, #6]
 800e7c8:	009b      	lsls	r3, r3, #2
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f001 fdac 	bl	8010328 <pvPortMalloc>
 800e7d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d00e      	beq.n	800e7f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e7d8:	205c      	movs	r0, #92	; 0x5c
 800e7da:	f001 fda5 	bl	8010328 <pvPortMalloc>
 800e7de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e7e0:	69fb      	ldr	r3, [r7, #28]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d003      	beq.n	800e7ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e7e6:	69fb      	ldr	r3, [r7, #28]
 800e7e8:	697a      	ldr	r2, [r7, #20]
 800e7ea:	631a      	str	r2, [r3, #48]	; 0x30
 800e7ec:	e005      	b.n	800e7fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e7ee:	6978      	ldr	r0, [r7, #20]
 800e7f0:	f001 fe66 	bl	80104c0 <vPortFree>
 800e7f4:	e001      	b.n	800e7fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e7fa:	69fb      	ldr	r3, [r7, #28]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d017      	beq.n	800e830 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e800:	69fb      	ldr	r3, [r7, #28]
 800e802:	2200      	movs	r2, #0
 800e804:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e808:	88fa      	ldrh	r2, [r7, #6]
 800e80a:	2300      	movs	r3, #0
 800e80c:	9303      	str	r3, [sp, #12]
 800e80e:	69fb      	ldr	r3, [r7, #28]
 800e810:	9302      	str	r3, [sp, #8]
 800e812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e814:	9301      	str	r3, [sp, #4]
 800e816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e818:	9300      	str	r3, [sp, #0]
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	68b9      	ldr	r1, [r7, #8]
 800e81e:	68f8      	ldr	r0, [r7, #12]
 800e820:	f000 f80e 	bl	800e840 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e824:	69f8      	ldr	r0, [r7, #28]
 800e826:	f000 f89b 	bl	800e960 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e82a:	2301      	movs	r3, #1
 800e82c:	61bb      	str	r3, [r7, #24]
 800e82e:	e002      	b.n	800e836 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e830:	f04f 33ff 	mov.w	r3, #4294967295
 800e834:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e836:	69bb      	ldr	r3, [r7, #24]
	}
 800e838:	4618      	mov	r0, r3
 800e83a:	3720      	adds	r7, #32
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}

0800e840 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b088      	sub	sp, #32
 800e844:	af00      	add	r7, sp, #0
 800e846:	60f8      	str	r0, [r7, #12]
 800e848:	60b9      	str	r1, [r7, #8]
 800e84a:	607a      	str	r2, [r7, #4]
 800e84c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e850:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	009b      	lsls	r3, r3, #2
 800e856:	461a      	mov	r2, r3
 800e858:	21a5      	movs	r1, #165	; 0xa5
 800e85a:	f001 ffd5 	bl	8010808 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e868:	3b01      	subs	r3, #1
 800e86a:	009b      	lsls	r3, r3, #2
 800e86c:	4413      	add	r3, r2
 800e86e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e870:	69bb      	ldr	r3, [r7, #24]
 800e872:	f023 0307 	bic.w	r3, r3, #7
 800e876:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e878:	69bb      	ldr	r3, [r7, #24]
 800e87a:	f003 0307 	and.w	r3, r3, #7
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d00a      	beq.n	800e898 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e886:	f383 8811 	msr	BASEPRI, r3
 800e88a:	f3bf 8f6f 	isb	sy
 800e88e:	f3bf 8f4f 	dsb	sy
 800e892:	617b      	str	r3, [r7, #20]
}
 800e894:	bf00      	nop
 800e896:	e7fe      	b.n	800e896 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d01f      	beq.n	800e8de <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e89e:	2300      	movs	r3, #0
 800e8a0:	61fb      	str	r3, [r7, #28]
 800e8a2:	e012      	b.n	800e8ca <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e8a4:	68ba      	ldr	r2, [r7, #8]
 800e8a6:	69fb      	ldr	r3, [r7, #28]
 800e8a8:	4413      	add	r3, r2
 800e8aa:	7819      	ldrb	r1, [r3, #0]
 800e8ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8ae:	69fb      	ldr	r3, [r7, #28]
 800e8b0:	4413      	add	r3, r2
 800e8b2:	3334      	adds	r3, #52	; 0x34
 800e8b4:	460a      	mov	r2, r1
 800e8b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e8b8:	68ba      	ldr	r2, [r7, #8]
 800e8ba:	69fb      	ldr	r3, [r7, #28]
 800e8bc:	4413      	add	r3, r2
 800e8be:	781b      	ldrb	r3, [r3, #0]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d006      	beq.n	800e8d2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e8c4:	69fb      	ldr	r3, [r7, #28]
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	61fb      	str	r3, [r7, #28]
 800e8ca:	69fb      	ldr	r3, [r7, #28]
 800e8cc:	2b0f      	cmp	r3, #15
 800e8ce:	d9e9      	bls.n	800e8a4 <prvInitialiseNewTask+0x64>
 800e8d0:	e000      	b.n	800e8d4 <prvInitialiseNewTask+0x94>
			{
				break;
 800e8d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e8dc:	e003      	b.n	800e8e6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e8:	2b37      	cmp	r3, #55	; 0x37
 800e8ea:	d901      	bls.n	800e8f0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e8ec:	2337      	movs	r3, #55	; 0x37
 800e8ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8fe:	2200      	movs	r2, #0
 800e900:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e904:	3304      	adds	r3, #4
 800e906:	4618      	mov	r0, r3
 800e908:	f7fe fe56 	bl	800d5b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e90e:	3318      	adds	r3, #24
 800e910:	4618      	mov	r0, r3
 800e912:	f7fe fe51 	bl	800d5b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e91a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e91e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e924:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e92a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e92e:	2200      	movs	r2, #0
 800e930:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e934:	2200      	movs	r2, #0
 800e936:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e93a:	683a      	ldr	r2, [r7, #0]
 800e93c:	68f9      	ldr	r1, [r7, #12]
 800e93e:	69b8      	ldr	r0, [r7, #24]
 800e940:	f001 faa4 	bl	800fe8c <pxPortInitialiseStack>
 800e944:	4602      	mov	r2, r0
 800e946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e948:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d002      	beq.n	800e956 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e956:	bf00      	nop
 800e958:	3720      	adds	r7, #32
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}
	...

0800e960 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b082      	sub	sp, #8
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e968:	f001 fbbc 	bl	80100e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e96c:	4b2d      	ldr	r3, [pc, #180]	; (800ea24 <prvAddNewTaskToReadyList+0xc4>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	3301      	adds	r3, #1
 800e972:	4a2c      	ldr	r2, [pc, #176]	; (800ea24 <prvAddNewTaskToReadyList+0xc4>)
 800e974:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e976:	4b2c      	ldr	r3, [pc, #176]	; (800ea28 <prvAddNewTaskToReadyList+0xc8>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d109      	bne.n	800e992 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e97e:	4a2a      	ldr	r2, [pc, #168]	; (800ea28 <prvAddNewTaskToReadyList+0xc8>)
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e984:	4b27      	ldr	r3, [pc, #156]	; (800ea24 <prvAddNewTaskToReadyList+0xc4>)
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	2b01      	cmp	r3, #1
 800e98a:	d110      	bne.n	800e9ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e98c:	f000 fc94 	bl	800f2b8 <prvInitialiseTaskLists>
 800e990:	e00d      	b.n	800e9ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e992:	4b26      	ldr	r3, [pc, #152]	; (800ea2c <prvAddNewTaskToReadyList+0xcc>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d109      	bne.n	800e9ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e99a:	4b23      	ldr	r3, [pc, #140]	; (800ea28 <prvAddNewTaskToReadyList+0xc8>)
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9a4:	429a      	cmp	r2, r3
 800e9a6:	d802      	bhi.n	800e9ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e9a8:	4a1f      	ldr	r2, [pc, #124]	; (800ea28 <prvAddNewTaskToReadyList+0xc8>)
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e9ae:	4b20      	ldr	r3, [pc, #128]	; (800ea30 <prvAddNewTaskToReadyList+0xd0>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	4a1e      	ldr	r2, [pc, #120]	; (800ea30 <prvAddNewTaskToReadyList+0xd0>)
 800e9b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e9b8:	4b1d      	ldr	r3, [pc, #116]	; (800ea30 <prvAddNewTaskToReadyList+0xd0>)
 800e9ba:	681a      	ldr	r2, [r3, #0]
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9c4:	4b1b      	ldr	r3, [pc, #108]	; (800ea34 <prvAddNewTaskToReadyList+0xd4>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d903      	bls.n	800e9d4 <prvAddNewTaskToReadyList+0x74>
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9d0:	4a18      	ldr	r2, [pc, #96]	; (800ea34 <prvAddNewTaskToReadyList+0xd4>)
 800e9d2:	6013      	str	r3, [r2, #0]
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9d8:	4613      	mov	r3, r2
 800e9da:	009b      	lsls	r3, r3, #2
 800e9dc:	4413      	add	r3, r2
 800e9de:	009b      	lsls	r3, r3, #2
 800e9e0:	4a15      	ldr	r2, [pc, #84]	; (800ea38 <prvAddNewTaskToReadyList+0xd8>)
 800e9e2:	441a      	add	r2, r3
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	3304      	adds	r3, #4
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	4610      	mov	r0, r2
 800e9ec:	f7fe fdf1 	bl	800d5d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e9f0:	f001 fba8 	bl	8010144 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e9f4:	4b0d      	ldr	r3, [pc, #52]	; (800ea2c <prvAddNewTaskToReadyList+0xcc>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d00e      	beq.n	800ea1a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e9fc:	4b0a      	ldr	r3, [pc, #40]	; (800ea28 <prvAddNewTaskToReadyList+0xc8>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d207      	bcs.n	800ea1a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ea0a:	4b0c      	ldr	r3, [pc, #48]	; (800ea3c <prvAddNewTaskToReadyList+0xdc>)
 800ea0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea10:	601a      	str	r2, [r3, #0]
 800ea12:	f3bf 8f4f 	dsb	sy
 800ea16:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea1a:	bf00      	nop
 800ea1c:	3708      	adds	r7, #8
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}
 800ea22:	bf00      	nop
 800ea24:	20001934 	.word	0x20001934
 800ea28:	20001460 	.word	0x20001460
 800ea2c:	20001940 	.word	0x20001940
 800ea30:	20001950 	.word	0x20001950
 800ea34:	2000193c 	.word	0x2000193c
 800ea38:	20001464 	.word	0x20001464
 800ea3c:	e000ed04 	.word	0xe000ed04

0800ea40 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b08a      	sub	sp, #40	; 0x28
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d10a      	bne.n	800ea6a <vTaskDelayUntil+0x2a>
	__asm volatile
 800ea54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea58:	f383 8811 	msr	BASEPRI, r3
 800ea5c:	f3bf 8f6f 	isb	sy
 800ea60:	f3bf 8f4f 	dsb	sy
 800ea64:	617b      	str	r3, [r7, #20]
}
 800ea66:	bf00      	nop
 800ea68:	e7fe      	b.n	800ea68 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d10a      	bne.n	800ea86 <vTaskDelayUntil+0x46>
	__asm volatile
 800ea70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea74:	f383 8811 	msr	BASEPRI, r3
 800ea78:	f3bf 8f6f 	isb	sy
 800ea7c:	f3bf 8f4f 	dsb	sy
 800ea80:	613b      	str	r3, [r7, #16]
}
 800ea82:	bf00      	nop
 800ea84:	e7fe      	b.n	800ea84 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800ea86:	4b2a      	ldr	r3, [pc, #168]	; (800eb30 <vTaskDelayUntil+0xf0>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d00a      	beq.n	800eaa4 <vTaskDelayUntil+0x64>
	__asm volatile
 800ea8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea92:	f383 8811 	msr	BASEPRI, r3
 800ea96:	f3bf 8f6f 	isb	sy
 800ea9a:	f3bf 8f4f 	dsb	sy
 800ea9e:	60fb      	str	r3, [r7, #12]
}
 800eaa0:	bf00      	nop
 800eaa2:	e7fe      	b.n	800eaa2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800eaa4:	f000 f8e4 	bl	800ec70 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800eaa8:	4b22      	ldr	r3, [pc, #136]	; (800eb34 <vTaskDelayUntil+0xf4>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	683a      	ldr	r2, [r7, #0]
 800eab4:	4413      	add	r3, r2
 800eab6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	6a3a      	ldr	r2, [r7, #32]
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d20b      	bcs.n	800eada <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	69fa      	ldr	r2, [r7, #28]
 800eac8:	429a      	cmp	r2, r3
 800eaca:	d211      	bcs.n	800eaf0 <vTaskDelayUntil+0xb0>
 800eacc:	69fa      	ldr	r2, [r7, #28]
 800eace:	6a3b      	ldr	r3, [r7, #32]
 800ead0:	429a      	cmp	r2, r3
 800ead2:	d90d      	bls.n	800eaf0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800ead4:	2301      	movs	r3, #1
 800ead6:	627b      	str	r3, [r7, #36]	; 0x24
 800ead8:	e00a      	b.n	800eaf0 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	69fa      	ldr	r2, [r7, #28]
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d303      	bcc.n	800eaec <vTaskDelayUntil+0xac>
 800eae4:	69fa      	ldr	r2, [r7, #28]
 800eae6:	6a3b      	ldr	r3, [r7, #32]
 800eae8:	429a      	cmp	r2, r3
 800eaea:	d901      	bls.n	800eaf0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800eaec:	2301      	movs	r3, #1
 800eaee:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	69fa      	ldr	r2, [r7, #28]
 800eaf4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800eaf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d006      	beq.n	800eb0a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800eafc:	69fa      	ldr	r2, [r7, #28]
 800eafe:	6a3b      	ldr	r3, [r7, #32]
 800eb00:	1ad3      	subs	r3, r2, r3
 800eb02:	2100      	movs	r1, #0
 800eb04:	4618      	mov	r0, r3
 800eb06:	f000 fe1f 	bl	800f748 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800eb0a:	f000 f8bf 	bl	800ec8c <xTaskResumeAll>
 800eb0e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800eb10:	69bb      	ldr	r3, [r7, #24]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d107      	bne.n	800eb26 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800eb16:	4b08      	ldr	r3, [pc, #32]	; (800eb38 <vTaskDelayUntil+0xf8>)
 800eb18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb1c:	601a      	str	r2, [r3, #0]
 800eb1e:	f3bf 8f4f 	dsb	sy
 800eb22:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eb26:	bf00      	nop
 800eb28:	3728      	adds	r7, #40	; 0x28
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}
 800eb2e:	bf00      	nop
 800eb30:	2000195c 	.word	0x2000195c
 800eb34:	20001938 	.word	0x20001938
 800eb38:	e000ed04 	.word	0xe000ed04

0800eb3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b084      	sub	sp, #16
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800eb44:	2300      	movs	r3, #0
 800eb46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d017      	beq.n	800eb7e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800eb4e:	4b13      	ldr	r3, [pc, #76]	; (800eb9c <vTaskDelay+0x60>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d00a      	beq.n	800eb6c <vTaskDelay+0x30>
	__asm volatile
 800eb56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb5a:	f383 8811 	msr	BASEPRI, r3
 800eb5e:	f3bf 8f6f 	isb	sy
 800eb62:	f3bf 8f4f 	dsb	sy
 800eb66:	60bb      	str	r3, [r7, #8]
}
 800eb68:	bf00      	nop
 800eb6a:	e7fe      	b.n	800eb6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800eb6c:	f000 f880 	bl	800ec70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800eb70:	2100      	movs	r1, #0
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f000 fde8 	bl	800f748 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800eb78:	f000 f888 	bl	800ec8c <xTaskResumeAll>
 800eb7c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d107      	bne.n	800eb94 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800eb84:	4b06      	ldr	r3, [pc, #24]	; (800eba0 <vTaskDelay+0x64>)
 800eb86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb8a:	601a      	str	r2, [r3, #0]
 800eb8c:	f3bf 8f4f 	dsb	sy
 800eb90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eb94:	bf00      	nop
 800eb96:	3710      	adds	r7, #16
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}
 800eb9c:	2000195c 	.word	0x2000195c
 800eba0:	e000ed04 	.word	0xe000ed04

0800eba4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b08a      	sub	sp, #40	; 0x28
 800eba8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ebb2:	463a      	mov	r2, r7
 800ebb4:	1d39      	adds	r1, r7, #4
 800ebb6:	f107 0308 	add.w	r3, r7, #8
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f7fe fca8 	bl	800d510 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ebc0:	6839      	ldr	r1, [r7, #0]
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	68ba      	ldr	r2, [r7, #8]
 800ebc6:	9202      	str	r2, [sp, #8]
 800ebc8:	9301      	str	r3, [sp, #4]
 800ebca:	2300      	movs	r3, #0
 800ebcc:	9300      	str	r3, [sp, #0]
 800ebce:	2300      	movs	r3, #0
 800ebd0:	460a      	mov	r2, r1
 800ebd2:	4921      	ldr	r1, [pc, #132]	; (800ec58 <vTaskStartScheduler+0xb4>)
 800ebd4:	4821      	ldr	r0, [pc, #132]	; (800ec5c <vTaskStartScheduler+0xb8>)
 800ebd6:	f7ff fd91 	bl	800e6fc <xTaskCreateStatic>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	4a20      	ldr	r2, [pc, #128]	; (800ec60 <vTaskStartScheduler+0xbc>)
 800ebde:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ebe0:	4b1f      	ldr	r3, [pc, #124]	; (800ec60 <vTaskStartScheduler+0xbc>)
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d002      	beq.n	800ebee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ebe8:	2301      	movs	r3, #1
 800ebea:	617b      	str	r3, [r7, #20]
 800ebec:	e001      	b.n	800ebf2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	2b01      	cmp	r3, #1
 800ebf6:	d102      	bne.n	800ebfe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ebf8:	f000 fdfa 	bl	800f7f0 <xTimerCreateTimerTask>
 800ebfc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	2b01      	cmp	r3, #1
 800ec02:	d116      	bne.n	800ec32 <vTaskStartScheduler+0x8e>
	__asm volatile
 800ec04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec08:	f383 8811 	msr	BASEPRI, r3
 800ec0c:	f3bf 8f6f 	isb	sy
 800ec10:	f3bf 8f4f 	dsb	sy
 800ec14:	613b      	str	r3, [r7, #16]
}
 800ec16:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ec18:	4b12      	ldr	r3, [pc, #72]	; (800ec64 <vTaskStartScheduler+0xc0>)
 800ec1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ec1e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ec20:	4b11      	ldr	r3, [pc, #68]	; (800ec68 <vTaskStartScheduler+0xc4>)
 800ec22:	2201      	movs	r2, #1
 800ec24:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ec26:	4b11      	ldr	r3, [pc, #68]	; (800ec6c <vTaskStartScheduler+0xc8>)
 800ec28:	2200      	movs	r2, #0
 800ec2a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ec2c:	f001 f9b8 	bl	800ffa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ec30:	e00e      	b.n	800ec50 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ec32:	697b      	ldr	r3, [r7, #20]
 800ec34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec38:	d10a      	bne.n	800ec50 <vTaskStartScheduler+0xac>
	__asm volatile
 800ec3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec3e:	f383 8811 	msr	BASEPRI, r3
 800ec42:	f3bf 8f6f 	isb	sy
 800ec46:	f3bf 8f4f 	dsb	sy
 800ec4a:	60fb      	str	r3, [r7, #12]
}
 800ec4c:	bf00      	nop
 800ec4e:	e7fe      	b.n	800ec4e <vTaskStartScheduler+0xaa>
}
 800ec50:	bf00      	nop
 800ec52:	3718      	adds	r7, #24
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd80      	pop	{r7, pc}
 800ec58:	08014524 	.word	0x08014524
 800ec5c:	0800f289 	.word	0x0800f289
 800ec60:	20001958 	.word	0x20001958
 800ec64:	20001954 	.word	0x20001954
 800ec68:	20001940 	.word	0x20001940
 800ec6c:	20001938 	.word	0x20001938

0800ec70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ec70:	b480      	push	{r7}
 800ec72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ec74:	4b04      	ldr	r3, [pc, #16]	; (800ec88 <vTaskSuspendAll+0x18>)
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	3301      	adds	r3, #1
 800ec7a:	4a03      	ldr	r2, [pc, #12]	; (800ec88 <vTaskSuspendAll+0x18>)
 800ec7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ec7e:	bf00      	nop
 800ec80:	46bd      	mov	sp, r7
 800ec82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec86:	4770      	bx	lr
 800ec88:	2000195c 	.word	0x2000195c

0800ec8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b084      	sub	sp, #16
 800ec90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ec92:	2300      	movs	r3, #0
 800ec94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ec96:	2300      	movs	r3, #0
 800ec98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ec9a:	4b42      	ldr	r3, [pc, #264]	; (800eda4 <xTaskResumeAll+0x118>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d10a      	bne.n	800ecb8 <xTaskResumeAll+0x2c>
	__asm volatile
 800eca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca6:	f383 8811 	msr	BASEPRI, r3
 800ecaa:	f3bf 8f6f 	isb	sy
 800ecae:	f3bf 8f4f 	dsb	sy
 800ecb2:	603b      	str	r3, [r7, #0]
}
 800ecb4:	bf00      	nop
 800ecb6:	e7fe      	b.n	800ecb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ecb8:	f001 fa14 	bl	80100e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ecbc:	4b39      	ldr	r3, [pc, #228]	; (800eda4 <xTaskResumeAll+0x118>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	3b01      	subs	r3, #1
 800ecc2:	4a38      	ldr	r2, [pc, #224]	; (800eda4 <xTaskResumeAll+0x118>)
 800ecc4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ecc6:	4b37      	ldr	r3, [pc, #220]	; (800eda4 <xTaskResumeAll+0x118>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d162      	bne.n	800ed94 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ecce:	4b36      	ldr	r3, [pc, #216]	; (800eda8 <xTaskResumeAll+0x11c>)
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d05e      	beq.n	800ed94 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ecd6:	e02f      	b.n	800ed38 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecd8:	4b34      	ldr	r3, [pc, #208]	; (800edac <xTaskResumeAll+0x120>)
 800ecda:	68db      	ldr	r3, [r3, #12]
 800ecdc:	68db      	ldr	r3, [r3, #12]
 800ecde:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	3318      	adds	r3, #24
 800ece4:	4618      	mov	r0, r3
 800ece6:	f7fe fcd1 	bl	800d68c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	3304      	adds	r3, #4
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f7fe fccc 	bl	800d68c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecf8:	4b2d      	ldr	r3, [pc, #180]	; (800edb0 <xTaskResumeAll+0x124>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	d903      	bls.n	800ed08 <xTaskResumeAll+0x7c>
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed04:	4a2a      	ldr	r2, [pc, #168]	; (800edb0 <xTaskResumeAll+0x124>)
 800ed06:	6013      	str	r3, [r2, #0]
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed0c:	4613      	mov	r3, r2
 800ed0e:	009b      	lsls	r3, r3, #2
 800ed10:	4413      	add	r3, r2
 800ed12:	009b      	lsls	r3, r3, #2
 800ed14:	4a27      	ldr	r2, [pc, #156]	; (800edb4 <xTaskResumeAll+0x128>)
 800ed16:	441a      	add	r2, r3
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	3304      	adds	r3, #4
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	4610      	mov	r0, r2
 800ed20:	f7fe fc57 	bl	800d5d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed28:	4b23      	ldr	r3, [pc, #140]	; (800edb8 <xTaskResumeAll+0x12c>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed2e:	429a      	cmp	r2, r3
 800ed30:	d302      	bcc.n	800ed38 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ed32:	4b22      	ldr	r3, [pc, #136]	; (800edbc <xTaskResumeAll+0x130>)
 800ed34:	2201      	movs	r2, #1
 800ed36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ed38:	4b1c      	ldr	r3, [pc, #112]	; (800edac <xTaskResumeAll+0x120>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d1cb      	bne.n	800ecd8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d001      	beq.n	800ed4a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ed46:	f000 fb55 	bl	800f3f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ed4a:	4b1d      	ldr	r3, [pc, #116]	; (800edc0 <xTaskResumeAll+0x134>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d010      	beq.n	800ed78 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ed56:	f000 f847 	bl	800ede8 <xTaskIncrementTick>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d002      	beq.n	800ed66 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ed60:	4b16      	ldr	r3, [pc, #88]	; (800edbc <xTaskResumeAll+0x130>)
 800ed62:	2201      	movs	r2, #1
 800ed64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	3b01      	subs	r3, #1
 800ed6a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d1f1      	bne.n	800ed56 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ed72:	4b13      	ldr	r3, [pc, #76]	; (800edc0 <xTaskResumeAll+0x134>)
 800ed74:	2200      	movs	r2, #0
 800ed76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ed78:	4b10      	ldr	r3, [pc, #64]	; (800edbc <xTaskResumeAll+0x130>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d009      	beq.n	800ed94 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ed80:	2301      	movs	r3, #1
 800ed82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ed84:	4b0f      	ldr	r3, [pc, #60]	; (800edc4 <xTaskResumeAll+0x138>)
 800ed86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed8a:	601a      	str	r2, [r3, #0]
 800ed8c:	f3bf 8f4f 	dsb	sy
 800ed90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ed94:	f001 f9d6 	bl	8010144 <vPortExitCritical>

	return xAlreadyYielded;
 800ed98:	68bb      	ldr	r3, [r7, #8]
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	3710      	adds	r7, #16
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
 800eda2:	bf00      	nop
 800eda4:	2000195c 	.word	0x2000195c
 800eda8:	20001934 	.word	0x20001934
 800edac:	200018f4 	.word	0x200018f4
 800edb0:	2000193c 	.word	0x2000193c
 800edb4:	20001464 	.word	0x20001464
 800edb8:	20001460 	.word	0x20001460
 800edbc:	20001948 	.word	0x20001948
 800edc0:	20001944 	.word	0x20001944
 800edc4:	e000ed04 	.word	0xe000ed04

0800edc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800edc8:	b480      	push	{r7}
 800edca:	b083      	sub	sp, #12
 800edcc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800edce:	4b05      	ldr	r3, [pc, #20]	; (800ede4 <xTaskGetTickCount+0x1c>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800edd4:	687b      	ldr	r3, [r7, #4]
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	370c      	adds	r7, #12
 800edda:	46bd      	mov	sp, r7
 800eddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede0:	4770      	bx	lr
 800ede2:	bf00      	nop
 800ede4:	20001938 	.word	0x20001938

0800ede8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b086      	sub	sp, #24
 800edec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800edee:	2300      	movs	r3, #0
 800edf0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edf2:	4b4f      	ldr	r3, [pc, #316]	; (800ef30 <xTaskIncrementTick+0x148>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	f040 808f 	bne.w	800ef1a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800edfc:	4b4d      	ldr	r3, [pc, #308]	; (800ef34 <xTaskIncrementTick+0x14c>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	3301      	adds	r3, #1
 800ee02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ee04:	4a4b      	ldr	r2, [pc, #300]	; (800ef34 <xTaskIncrementTick+0x14c>)
 800ee06:	693b      	ldr	r3, [r7, #16]
 800ee08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d120      	bne.n	800ee52 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ee10:	4b49      	ldr	r3, [pc, #292]	; (800ef38 <xTaskIncrementTick+0x150>)
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d00a      	beq.n	800ee30 <xTaskIncrementTick+0x48>
	__asm volatile
 800ee1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee1e:	f383 8811 	msr	BASEPRI, r3
 800ee22:	f3bf 8f6f 	isb	sy
 800ee26:	f3bf 8f4f 	dsb	sy
 800ee2a:	603b      	str	r3, [r7, #0]
}
 800ee2c:	bf00      	nop
 800ee2e:	e7fe      	b.n	800ee2e <xTaskIncrementTick+0x46>
 800ee30:	4b41      	ldr	r3, [pc, #260]	; (800ef38 <xTaskIncrementTick+0x150>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	60fb      	str	r3, [r7, #12]
 800ee36:	4b41      	ldr	r3, [pc, #260]	; (800ef3c <xTaskIncrementTick+0x154>)
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	4a3f      	ldr	r2, [pc, #252]	; (800ef38 <xTaskIncrementTick+0x150>)
 800ee3c:	6013      	str	r3, [r2, #0]
 800ee3e:	4a3f      	ldr	r2, [pc, #252]	; (800ef3c <xTaskIncrementTick+0x154>)
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	6013      	str	r3, [r2, #0]
 800ee44:	4b3e      	ldr	r3, [pc, #248]	; (800ef40 <xTaskIncrementTick+0x158>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	3301      	adds	r3, #1
 800ee4a:	4a3d      	ldr	r2, [pc, #244]	; (800ef40 <xTaskIncrementTick+0x158>)
 800ee4c:	6013      	str	r3, [r2, #0]
 800ee4e:	f000 fad1 	bl	800f3f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ee52:	4b3c      	ldr	r3, [pc, #240]	; (800ef44 <xTaskIncrementTick+0x15c>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	693a      	ldr	r2, [r7, #16]
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	d349      	bcc.n	800eef0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee5c:	4b36      	ldr	r3, [pc, #216]	; (800ef38 <xTaskIncrementTick+0x150>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d104      	bne.n	800ee70 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee66:	4b37      	ldr	r3, [pc, #220]	; (800ef44 <xTaskIncrementTick+0x15c>)
 800ee68:	f04f 32ff 	mov.w	r2, #4294967295
 800ee6c:	601a      	str	r2, [r3, #0]
					break;
 800ee6e:	e03f      	b.n	800eef0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee70:	4b31      	ldr	r3, [pc, #196]	; (800ef38 <xTaskIncrementTick+0x150>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	68db      	ldr	r3, [r3, #12]
 800ee76:	68db      	ldr	r3, [r3, #12]
 800ee78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	685b      	ldr	r3, [r3, #4]
 800ee7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ee80:	693a      	ldr	r2, [r7, #16]
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	429a      	cmp	r2, r3
 800ee86:	d203      	bcs.n	800ee90 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ee88:	4a2e      	ldr	r2, [pc, #184]	; (800ef44 <xTaskIncrementTick+0x15c>)
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ee8e:	e02f      	b.n	800eef0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	3304      	adds	r3, #4
 800ee94:	4618      	mov	r0, r3
 800ee96:	f7fe fbf9 	bl	800d68c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ee9a:	68bb      	ldr	r3, [r7, #8]
 800ee9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d004      	beq.n	800eeac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	3318      	adds	r3, #24
 800eea6:	4618      	mov	r0, r3
 800eea8:	f7fe fbf0 	bl	800d68c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeb0:	4b25      	ldr	r3, [pc, #148]	; (800ef48 <xTaskIncrementTick+0x160>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d903      	bls.n	800eec0 <xTaskIncrementTick+0xd8>
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eebc:	4a22      	ldr	r2, [pc, #136]	; (800ef48 <xTaskIncrementTick+0x160>)
 800eebe:	6013      	str	r3, [r2, #0]
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eec4:	4613      	mov	r3, r2
 800eec6:	009b      	lsls	r3, r3, #2
 800eec8:	4413      	add	r3, r2
 800eeca:	009b      	lsls	r3, r3, #2
 800eecc:	4a1f      	ldr	r2, [pc, #124]	; (800ef4c <xTaskIncrementTick+0x164>)
 800eece:	441a      	add	r2, r3
 800eed0:	68bb      	ldr	r3, [r7, #8]
 800eed2:	3304      	adds	r3, #4
 800eed4:	4619      	mov	r1, r3
 800eed6:	4610      	mov	r0, r2
 800eed8:	f7fe fb7b 	bl	800d5d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eee0:	4b1b      	ldr	r3, [pc, #108]	; (800ef50 <xTaskIncrementTick+0x168>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eee6:	429a      	cmp	r2, r3
 800eee8:	d3b8      	bcc.n	800ee5c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800eeea:	2301      	movs	r3, #1
 800eeec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eeee:	e7b5      	b.n	800ee5c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800eef0:	4b17      	ldr	r3, [pc, #92]	; (800ef50 <xTaskIncrementTick+0x168>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eef6:	4915      	ldr	r1, [pc, #84]	; (800ef4c <xTaskIncrementTick+0x164>)
 800eef8:	4613      	mov	r3, r2
 800eefa:	009b      	lsls	r3, r3, #2
 800eefc:	4413      	add	r3, r2
 800eefe:	009b      	lsls	r3, r3, #2
 800ef00:	440b      	add	r3, r1
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	2b01      	cmp	r3, #1
 800ef06:	d901      	bls.n	800ef0c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ef08:	2301      	movs	r3, #1
 800ef0a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ef0c:	4b11      	ldr	r3, [pc, #68]	; (800ef54 <xTaskIncrementTick+0x16c>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d007      	beq.n	800ef24 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ef14:	2301      	movs	r3, #1
 800ef16:	617b      	str	r3, [r7, #20]
 800ef18:	e004      	b.n	800ef24 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ef1a:	4b0f      	ldr	r3, [pc, #60]	; (800ef58 <xTaskIncrementTick+0x170>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	3301      	adds	r3, #1
 800ef20:	4a0d      	ldr	r2, [pc, #52]	; (800ef58 <xTaskIncrementTick+0x170>)
 800ef22:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ef24:	697b      	ldr	r3, [r7, #20]
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	3718      	adds	r7, #24
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}
 800ef2e:	bf00      	nop
 800ef30:	2000195c 	.word	0x2000195c
 800ef34:	20001938 	.word	0x20001938
 800ef38:	200018ec 	.word	0x200018ec
 800ef3c:	200018f0 	.word	0x200018f0
 800ef40:	2000194c 	.word	0x2000194c
 800ef44:	20001954 	.word	0x20001954
 800ef48:	2000193c 	.word	0x2000193c
 800ef4c:	20001464 	.word	0x20001464
 800ef50:	20001460 	.word	0x20001460
 800ef54:	20001948 	.word	0x20001948
 800ef58:	20001944 	.word	0x20001944

0800ef5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ef5c:	b480      	push	{r7}
 800ef5e:	b085      	sub	sp, #20
 800ef60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ef62:	4b28      	ldr	r3, [pc, #160]	; (800f004 <vTaskSwitchContext+0xa8>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d003      	beq.n	800ef72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ef6a:	4b27      	ldr	r3, [pc, #156]	; (800f008 <vTaskSwitchContext+0xac>)
 800ef6c:	2201      	movs	r2, #1
 800ef6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ef70:	e041      	b.n	800eff6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ef72:	4b25      	ldr	r3, [pc, #148]	; (800f008 <vTaskSwitchContext+0xac>)
 800ef74:	2200      	movs	r2, #0
 800ef76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef78:	4b24      	ldr	r3, [pc, #144]	; (800f00c <vTaskSwitchContext+0xb0>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	60fb      	str	r3, [r7, #12]
 800ef7e:	e010      	b.n	800efa2 <vTaskSwitchContext+0x46>
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d10a      	bne.n	800ef9c <vTaskSwitchContext+0x40>
	__asm volatile
 800ef86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef8a:	f383 8811 	msr	BASEPRI, r3
 800ef8e:	f3bf 8f6f 	isb	sy
 800ef92:	f3bf 8f4f 	dsb	sy
 800ef96:	607b      	str	r3, [r7, #4]
}
 800ef98:	bf00      	nop
 800ef9a:	e7fe      	b.n	800ef9a <vTaskSwitchContext+0x3e>
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	3b01      	subs	r3, #1
 800efa0:	60fb      	str	r3, [r7, #12]
 800efa2:	491b      	ldr	r1, [pc, #108]	; (800f010 <vTaskSwitchContext+0xb4>)
 800efa4:	68fa      	ldr	r2, [r7, #12]
 800efa6:	4613      	mov	r3, r2
 800efa8:	009b      	lsls	r3, r3, #2
 800efaa:	4413      	add	r3, r2
 800efac:	009b      	lsls	r3, r3, #2
 800efae:	440b      	add	r3, r1
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d0e4      	beq.n	800ef80 <vTaskSwitchContext+0x24>
 800efb6:	68fa      	ldr	r2, [r7, #12]
 800efb8:	4613      	mov	r3, r2
 800efba:	009b      	lsls	r3, r3, #2
 800efbc:	4413      	add	r3, r2
 800efbe:	009b      	lsls	r3, r3, #2
 800efc0:	4a13      	ldr	r2, [pc, #76]	; (800f010 <vTaskSwitchContext+0xb4>)
 800efc2:	4413      	add	r3, r2
 800efc4:	60bb      	str	r3, [r7, #8]
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	685b      	ldr	r3, [r3, #4]
 800efca:	685a      	ldr	r2, [r3, #4]
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	605a      	str	r2, [r3, #4]
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	685a      	ldr	r2, [r3, #4]
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	3308      	adds	r3, #8
 800efd8:	429a      	cmp	r2, r3
 800efda:	d104      	bne.n	800efe6 <vTaskSwitchContext+0x8a>
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	685b      	ldr	r3, [r3, #4]
 800efe0:	685a      	ldr	r2, [r3, #4]
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	605a      	str	r2, [r3, #4]
 800efe6:	68bb      	ldr	r3, [r7, #8]
 800efe8:	685b      	ldr	r3, [r3, #4]
 800efea:	68db      	ldr	r3, [r3, #12]
 800efec:	4a09      	ldr	r2, [pc, #36]	; (800f014 <vTaskSwitchContext+0xb8>)
 800efee:	6013      	str	r3, [r2, #0]
 800eff0:	4a06      	ldr	r2, [pc, #24]	; (800f00c <vTaskSwitchContext+0xb0>)
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	6013      	str	r3, [r2, #0]
}
 800eff6:	bf00      	nop
 800eff8:	3714      	adds	r7, #20
 800effa:	46bd      	mov	sp, r7
 800effc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f000:	4770      	bx	lr
 800f002:	bf00      	nop
 800f004:	2000195c 	.word	0x2000195c
 800f008:	20001948 	.word	0x20001948
 800f00c:	2000193c 	.word	0x2000193c
 800f010:	20001464 	.word	0x20001464
 800f014:	20001460 	.word	0x20001460

0800f018 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b084      	sub	sp, #16
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
 800f020:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d10a      	bne.n	800f03e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f02c:	f383 8811 	msr	BASEPRI, r3
 800f030:	f3bf 8f6f 	isb	sy
 800f034:	f3bf 8f4f 	dsb	sy
 800f038:	60fb      	str	r3, [r7, #12]
}
 800f03a:	bf00      	nop
 800f03c:	e7fe      	b.n	800f03c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f03e:	4b07      	ldr	r3, [pc, #28]	; (800f05c <vTaskPlaceOnEventList+0x44>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	3318      	adds	r3, #24
 800f044:	4619      	mov	r1, r3
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f7fe fae7 	bl	800d61a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f04c:	2101      	movs	r1, #1
 800f04e:	6838      	ldr	r0, [r7, #0]
 800f050:	f000 fb7a 	bl	800f748 <prvAddCurrentTaskToDelayedList>
}
 800f054:	bf00      	nop
 800f056:	3710      	adds	r7, #16
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}
 800f05c:	20001460 	.word	0x20001460

0800f060 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f060:	b580      	push	{r7, lr}
 800f062:	b086      	sub	sp, #24
 800f064:	af00      	add	r7, sp, #0
 800f066:	60f8      	str	r0, [r7, #12]
 800f068:	60b9      	str	r1, [r7, #8]
 800f06a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d10a      	bne.n	800f088 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f076:	f383 8811 	msr	BASEPRI, r3
 800f07a:	f3bf 8f6f 	isb	sy
 800f07e:	f3bf 8f4f 	dsb	sy
 800f082:	617b      	str	r3, [r7, #20]
}
 800f084:	bf00      	nop
 800f086:	e7fe      	b.n	800f086 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f088:	4b0a      	ldr	r3, [pc, #40]	; (800f0b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	3318      	adds	r3, #24
 800f08e:	4619      	mov	r1, r3
 800f090:	68f8      	ldr	r0, [r7, #12]
 800f092:	f7fe fa9e 	bl	800d5d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d002      	beq.n	800f0a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f09c:	f04f 33ff 	mov.w	r3, #4294967295
 800f0a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f0a2:	6879      	ldr	r1, [r7, #4]
 800f0a4:	68b8      	ldr	r0, [r7, #8]
 800f0a6:	f000 fb4f 	bl	800f748 <prvAddCurrentTaskToDelayedList>
	}
 800f0aa:	bf00      	nop
 800f0ac:	3718      	adds	r7, #24
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}
 800f0b2:	bf00      	nop
 800f0b4:	20001460 	.word	0x20001460

0800f0b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b086      	sub	sp, #24
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	68db      	ldr	r3, [r3, #12]
 800f0c4:	68db      	ldr	r3, [r3, #12]
 800f0c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f0c8:	693b      	ldr	r3, [r7, #16]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d10a      	bne.n	800f0e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d2:	f383 8811 	msr	BASEPRI, r3
 800f0d6:	f3bf 8f6f 	isb	sy
 800f0da:	f3bf 8f4f 	dsb	sy
 800f0de:	60fb      	str	r3, [r7, #12]
}
 800f0e0:	bf00      	nop
 800f0e2:	e7fe      	b.n	800f0e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	3318      	adds	r3, #24
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f7fe facf 	bl	800d68c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0ee:	4b1e      	ldr	r3, [pc, #120]	; (800f168 <xTaskRemoveFromEventList+0xb0>)
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d11d      	bne.n	800f132 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f0f6:	693b      	ldr	r3, [r7, #16]
 800f0f8:	3304      	adds	r3, #4
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f7fe fac6 	bl	800d68c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f100:	693b      	ldr	r3, [r7, #16]
 800f102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f104:	4b19      	ldr	r3, [pc, #100]	; (800f16c <xTaskRemoveFromEventList+0xb4>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	429a      	cmp	r2, r3
 800f10a:	d903      	bls.n	800f114 <xTaskRemoveFromEventList+0x5c>
 800f10c:	693b      	ldr	r3, [r7, #16]
 800f10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f110:	4a16      	ldr	r2, [pc, #88]	; (800f16c <xTaskRemoveFromEventList+0xb4>)
 800f112:	6013      	str	r3, [r2, #0]
 800f114:	693b      	ldr	r3, [r7, #16]
 800f116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f118:	4613      	mov	r3, r2
 800f11a:	009b      	lsls	r3, r3, #2
 800f11c:	4413      	add	r3, r2
 800f11e:	009b      	lsls	r3, r3, #2
 800f120:	4a13      	ldr	r2, [pc, #76]	; (800f170 <xTaskRemoveFromEventList+0xb8>)
 800f122:	441a      	add	r2, r3
 800f124:	693b      	ldr	r3, [r7, #16]
 800f126:	3304      	adds	r3, #4
 800f128:	4619      	mov	r1, r3
 800f12a:	4610      	mov	r0, r2
 800f12c:	f7fe fa51 	bl	800d5d2 <vListInsertEnd>
 800f130:	e005      	b.n	800f13e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f132:	693b      	ldr	r3, [r7, #16]
 800f134:	3318      	adds	r3, #24
 800f136:	4619      	mov	r1, r3
 800f138:	480e      	ldr	r0, [pc, #56]	; (800f174 <xTaskRemoveFromEventList+0xbc>)
 800f13a:	f7fe fa4a 	bl	800d5d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f13e:	693b      	ldr	r3, [r7, #16]
 800f140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f142:	4b0d      	ldr	r3, [pc, #52]	; (800f178 <xTaskRemoveFromEventList+0xc0>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f148:	429a      	cmp	r2, r3
 800f14a:	d905      	bls.n	800f158 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f14c:	2301      	movs	r3, #1
 800f14e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f150:	4b0a      	ldr	r3, [pc, #40]	; (800f17c <xTaskRemoveFromEventList+0xc4>)
 800f152:	2201      	movs	r2, #1
 800f154:	601a      	str	r2, [r3, #0]
 800f156:	e001      	b.n	800f15c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f158:	2300      	movs	r3, #0
 800f15a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f15c:	697b      	ldr	r3, [r7, #20]
}
 800f15e:	4618      	mov	r0, r3
 800f160:	3718      	adds	r7, #24
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}
 800f166:	bf00      	nop
 800f168:	2000195c 	.word	0x2000195c
 800f16c:	2000193c 	.word	0x2000193c
 800f170:	20001464 	.word	0x20001464
 800f174:	200018f4 	.word	0x200018f4
 800f178:	20001460 	.word	0x20001460
 800f17c:	20001948 	.word	0x20001948

0800f180 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f180:	b480      	push	{r7}
 800f182:	b083      	sub	sp, #12
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f188:	4b06      	ldr	r3, [pc, #24]	; (800f1a4 <vTaskInternalSetTimeOutState+0x24>)
 800f18a:	681a      	ldr	r2, [r3, #0]
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f190:	4b05      	ldr	r3, [pc, #20]	; (800f1a8 <vTaskInternalSetTimeOutState+0x28>)
 800f192:	681a      	ldr	r2, [r3, #0]
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	605a      	str	r2, [r3, #4]
}
 800f198:	bf00      	nop
 800f19a:	370c      	adds	r7, #12
 800f19c:	46bd      	mov	sp, r7
 800f19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a2:	4770      	bx	lr
 800f1a4:	2000194c 	.word	0x2000194c
 800f1a8:	20001938 	.word	0x20001938

0800f1ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b088      	sub	sp, #32
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
 800f1b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d10a      	bne.n	800f1d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1c0:	f383 8811 	msr	BASEPRI, r3
 800f1c4:	f3bf 8f6f 	isb	sy
 800f1c8:	f3bf 8f4f 	dsb	sy
 800f1cc:	613b      	str	r3, [r7, #16]
}
 800f1ce:	bf00      	nop
 800f1d0:	e7fe      	b.n	800f1d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d10a      	bne.n	800f1ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1dc:	f383 8811 	msr	BASEPRI, r3
 800f1e0:	f3bf 8f6f 	isb	sy
 800f1e4:	f3bf 8f4f 	dsb	sy
 800f1e8:	60fb      	str	r3, [r7, #12]
}
 800f1ea:	bf00      	nop
 800f1ec:	e7fe      	b.n	800f1ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f1ee:	f000 ff79 	bl	80100e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f1f2:	4b1d      	ldr	r3, [pc, #116]	; (800f268 <xTaskCheckForTimeOut+0xbc>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	685b      	ldr	r3, [r3, #4]
 800f1fc:	69ba      	ldr	r2, [r7, #24]
 800f1fe:	1ad3      	subs	r3, r2, r3
 800f200:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f20a:	d102      	bne.n	800f212 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f20c:	2300      	movs	r3, #0
 800f20e:	61fb      	str	r3, [r7, #28]
 800f210:	e023      	b.n	800f25a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681a      	ldr	r2, [r3, #0]
 800f216:	4b15      	ldr	r3, [pc, #84]	; (800f26c <xTaskCheckForTimeOut+0xc0>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	429a      	cmp	r2, r3
 800f21c:	d007      	beq.n	800f22e <xTaskCheckForTimeOut+0x82>
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	685b      	ldr	r3, [r3, #4]
 800f222:	69ba      	ldr	r2, [r7, #24]
 800f224:	429a      	cmp	r2, r3
 800f226:	d302      	bcc.n	800f22e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f228:	2301      	movs	r3, #1
 800f22a:	61fb      	str	r3, [r7, #28]
 800f22c:	e015      	b.n	800f25a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	697a      	ldr	r2, [r7, #20]
 800f234:	429a      	cmp	r2, r3
 800f236:	d20b      	bcs.n	800f250 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	681a      	ldr	r2, [r3, #0]
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	1ad2      	subs	r2, r2, r3
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f7ff ff9b 	bl	800f180 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f24a:	2300      	movs	r3, #0
 800f24c:	61fb      	str	r3, [r7, #28]
 800f24e:	e004      	b.n	800f25a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	2200      	movs	r2, #0
 800f254:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f256:	2301      	movs	r3, #1
 800f258:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f25a:	f000 ff73 	bl	8010144 <vPortExitCritical>

	return xReturn;
 800f25e:	69fb      	ldr	r3, [r7, #28]
}
 800f260:	4618      	mov	r0, r3
 800f262:	3720      	adds	r7, #32
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}
 800f268:	20001938 	.word	0x20001938
 800f26c:	2000194c 	.word	0x2000194c

0800f270 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f270:	b480      	push	{r7}
 800f272:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f274:	4b03      	ldr	r3, [pc, #12]	; (800f284 <vTaskMissedYield+0x14>)
 800f276:	2201      	movs	r2, #1
 800f278:	601a      	str	r2, [r3, #0]
}
 800f27a:	bf00      	nop
 800f27c:	46bd      	mov	sp, r7
 800f27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f282:	4770      	bx	lr
 800f284:	20001948 	.word	0x20001948

0800f288 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b082      	sub	sp, #8
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f290:	f000 f852 	bl	800f338 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f294:	4b06      	ldr	r3, [pc, #24]	; (800f2b0 <prvIdleTask+0x28>)
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	2b01      	cmp	r3, #1
 800f29a:	d9f9      	bls.n	800f290 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f29c:	4b05      	ldr	r3, [pc, #20]	; (800f2b4 <prvIdleTask+0x2c>)
 800f29e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2a2:	601a      	str	r2, [r3, #0]
 800f2a4:	f3bf 8f4f 	dsb	sy
 800f2a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f2ac:	e7f0      	b.n	800f290 <prvIdleTask+0x8>
 800f2ae:	bf00      	nop
 800f2b0:	20001464 	.word	0x20001464
 800f2b4:	e000ed04 	.word	0xe000ed04

0800f2b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b082      	sub	sp, #8
 800f2bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f2be:	2300      	movs	r3, #0
 800f2c0:	607b      	str	r3, [r7, #4]
 800f2c2:	e00c      	b.n	800f2de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f2c4:	687a      	ldr	r2, [r7, #4]
 800f2c6:	4613      	mov	r3, r2
 800f2c8:	009b      	lsls	r3, r3, #2
 800f2ca:	4413      	add	r3, r2
 800f2cc:	009b      	lsls	r3, r3, #2
 800f2ce:	4a12      	ldr	r2, [pc, #72]	; (800f318 <prvInitialiseTaskLists+0x60>)
 800f2d0:	4413      	add	r3, r2
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f7fe f950 	bl	800d578 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	3301      	adds	r3, #1
 800f2dc:	607b      	str	r3, [r7, #4]
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	2b37      	cmp	r3, #55	; 0x37
 800f2e2:	d9ef      	bls.n	800f2c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f2e4:	480d      	ldr	r0, [pc, #52]	; (800f31c <prvInitialiseTaskLists+0x64>)
 800f2e6:	f7fe f947 	bl	800d578 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f2ea:	480d      	ldr	r0, [pc, #52]	; (800f320 <prvInitialiseTaskLists+0x68>)
 800f2ec:	f7fe f944 	bl	800d578 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f2f0:	480c      	ldr	r0, [pc, #48]	; (800f324 <prvInitialiseTaskLists+0x6c>)
 800f2f2:	f7fe f941 	bl	800d578 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f2f6:	480c      	ldr	r0, [pc, #48]	; (800f328 <prvInitialiseTaskLists+0x70>)
 800f2f8:	f7fe f93e 	bl	800d578 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f2fc:	480b      	ldr	r0, [pc, #44]	; (800f32c <prvInitialiseTaskLists+0x74>)
 800f2fe:	f7fe f93b 	bl	800d578 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f302:	4b0b      	ldr	r3, [pc, #44]	; (800f330 <prvInitialiseTaskLists+0x78>)
 800f304:	4a05      	ldr	r2, [pc, #20]	; (800f31c <prvInitialiseTaskLists+0x64>)
 800f306:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f308:	4b0a      	ldr	r3, [pc, #40]	; (800f334 <prvInitialiseTaskLists+0x7c>)
 800f30a:	4a05      	ldr	r2, [pc, #20]	; (800f320 <prvInitialiseTaskLists+0x68>)
 800f30c:	601a      	str	r2, [r3, #0]
}
 800f30e:	bf00      	nop
 800f310:	3708      	adds	r7, #8
 800f312:	46bd      	mov	sp, r7
 800f314:	bd80      	pop	{r7, pc}
 800f316:	bf00      	nop
 800f318:	20001464 	.word	0x20001464
 800f31c:	200018c4 	.word	0x200018c4
 800f320:	200018d8 	.word	0x200018d8
 800f324:	200018f4 	.word	0x200018f4
 800f328:	20001908 	.word	0x20001908
 800f32c:	20001920 	.word	0x20001920
 800f330:	200018ec 	.word	0x200018ec
 800f334:	200018f0 	.word	0x200018f0

0800f338 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b082      	sub	sp, #8
 800f33c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f33e:	e019      	b.n	800f374 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f340:	f000 fed0 	bl	80100e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f344:	4b10      	ldr	r3, [pc, #64]	; (800f388 <prvCheckTasksWaitingTermination+0x50>)
 800f346:	68db      	ldr	r3, [r3, #12]
 800f348:	68db      	ldr	r3, [r3, #12]
 800f34a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	3304      	adds	r3, #4
 800f350:	4618      	mov	r0, r3
 800f352:	f7fe f99b 	bl	800d68c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f356:	4b0d      	ldr	r3, [pc, #52]	; (800f38c <prvCheckTasksWaitingTermination+0x54>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	3b01      	subs	r3, #1
 800f35c:	4a0b      	ldr	r2, [pc, #44]	; (800f38c <prvCheckTasksWaitingTermination+0x54>)
 800f35e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f360:	4b0b      	ldr	r3, [pc, #44]	; (800f390 <prvCheckTasksWaitingTermination+0x58>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	3b01      	subs	r3, #1
 800f366:	4a0a      	ldr	r2, [pc, #40]	; (800f390 <prvCheckTasksWaitingTermination+0x58>)
 800f368:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f36a:	f000 feeb 	bl	8010144 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f000 f810 	bl	800f394 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f374:	4b06      	ldr	r3, [pc, #24]	; (800f390 <prvCheckTasksWaitingTermination+0x58>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d1e1      	bne.n	800f340 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f37c:	bf00      	nop
 800f37e:	bf00      	nop
 800f380:	3708      	adds	r7, #8
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}
 800f386:	bf00      	nop
 800f388:	20001908 	.word	0x20001908
 800f38c:	20001934 	.word	0x20001934
 800f390:	2000191c 	.word	0x2000191c

0800f394 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f394:	b580      	push	{r7, lr}
 800f396:	b084      	sub	sp, #16
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d108      	bne.n	800f3b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f001 f888 	bl	80104c0 <vPortFree>
				vPortFree( pxTCB );
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f001 f885 	bl	80104c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f3b6:	e018      	b.n	800f3ea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f3be:	2b01      	cmp	r3, #1
 800f3c0:	d103      	bne.n	800f3ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f001 f87c 	bl	80104c0 <vPortFree>
	}
 800f3c8:	e00f      	b.n	800f3ea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f3d0:	2b02      	cmp	r3, #2
 800f3d2:	d00a      	beq.n	800f3ea <prvDeleteTCB+0x56>
	__asm volatile
 800f3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3d8:	f383 8811 	msr	BASEPRI, r3
 800f3dc:	f3bf 8f6f 	isb	sy
 800f3e0:	f3bf 8f4f 	dsb	sy
 800f3e4:	60fb      	str	r3, [r7, #12]
}
 800f3e6:	bf00      	nop
 800f3e8:	e7fe      	b.n	800f3e8 <prvDeleteTCB+0x54>
	}
 800f3ea:	bf00      	nop
 800f3ec:	3710      	adds	r7, #16
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}
	...

0800f3f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f3f4:	b480      	push	{r7}
 800f3f6:	b083      	sub	sp, #12
 800f3f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f3fa:	4b0c      	ldr	r3, [pc, #48]	; (800f42c <prvResetNextTaskUnblockTime+0x38>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d104      	bne.n	800f40e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f404:	4b0a      	ldr	r3, [pc, #40]	; (800f430 <prvResetNextTaskUnblockTime+0x3c>)
 800f406:	f04f 32ff 	mov.w	r2, #4294967295
 800f40a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f40c:	e008      	b.n	800f420 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f40e:	4b07      	ldr	r3, [pc, #28]	; (800f42c <prvResetNextTaskUnblockTime+0x38>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	68db      	ldr	r3, [r3, #12]
 800f414:	68db      	ldr	r3, [r3, #12]
 800f416:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	685b      	ldr	r3, [r3, #4]
 800f41c:	4a04      	ldr	r2, [pc, #16]	; (800f430 <prvResetNextTaskUnblockTime+0x3c>)
 800f41e:	6013      	str	r3, [r2, #0]
}
 800f420:	bf00      	nop
 800f422:	370c      	adds	r7, #12
 800f424:	46bd      	mov	sp, r7
 800f426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42a:	4770      	bx	lr
 800f42c:	200018ec 	.word	0x200018ec
 800f430:	20001954 	.word	0x20001954

0800f434 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f434:	b480      	push	{r7}
 800f436:	b083      	sub	sp, #12
 800f438:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f43a:	4b0b      	ldr	r3, [pc, #44]	; (800f468 <xTaskGetSchedulerState+0x34>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d102      	bne.n	800f448 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f442:	2301      	movs	r3, #1
 800f444:	607b      	str	r3, [r7, #4]
 800f446:	e008      	b.n	800f45a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f448:	4b08      	ldr	r3, [pc, #32]	; (800f46c <xTaskGetSchedulerState+0x38>)
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d102      	bne.n	800f456 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f450:	2302      	movs	r3, #2
 800f452:	607b      	str	r3, [r7, #4]
 800f454:	e001      	b.n	800f45a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f456:	2300      	movs	r3, #0
 800f458:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f45a:	687b      	ldr	r3, [r7, #4]
	}
 800f45c:	4618      	mov	r0, r3
 800f45e:	370c      	adds	r7, #12
 800f460:	46bd      	mov	sp, r7
 800f462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f466:	4770      	bx	lr
 800f468:	20001940 	.word	0x20001940
 800f46c:	2000195c 	.word	0x2000195c

0800f470 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f470:	b580      	push	{r7, lr}
 800f472:	b084      	sub	sp, #16
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f47c:	2300      	movs	r3, #0
 800f47e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d051      	beq.n	800f52a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f48a:	4b2a      	ldr	r3, [pc, #168]	; (800f534 <xTaskPriorityInherit+0xc4>)
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f490:	429a      	cmp	r2, r3
 800f492:	d241      	bcs.n	800f518 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	699b      	ldr	r3, [r3, #24]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	db06      	blt.n	800f4aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f49c:	4b25      	ldr	r3, [pc, #148]	; (800f534 <xTaskPriorityInherit+0xc4>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f4aa:	68bb      	ldr	r3, [r7, #8]
 800f4ac:	6959      	ldr	r1, [r3, #20]
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4b2:	4613      	mov	r3, r2
 800f4b4:	009b      	lsls	r3, r3, #2
 800f4b6:	4413      	add	r3, r2
 800f4b8:	009b      	lsls	r3, r3, #2
 800f4ba:	4a1f      	ldr	r2, [pc, #124]	; (800f538 <xTaskPriorityInherit+0xc8>)
 800f4bc:	4413      	add	r3, r2
 800f4be:	4299      	cmp	r1, r3
 800f4c0:	d122      	bne.n	800f508 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	3304      	adds	r3, #4
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f7fe f8e0 	bl	800d68c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f4cc:	4b19      	ldr	r3, [pc, #100]	; (800f534 <xTaskPriorityInherit+0xc4>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4d2:	68bb      	ldr	r3, [r7, #8]
 800f4d4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4da:	4b18      	ldr	r3, [pc, #96]	; (800f53c <xTaskPriorityInherit+0xcc>)
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d903      	bls.n	800f4ea <xTaskPriorityInherit+0x7a>
 800f4e2:	68bb      	ldr	r3, [r7, #8]
 800f4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4e6:	4a15      	ldr	r2, [pc, #84]	; (800f53c <xTaskPriorityInherit+0xcc>)
 800f4e8:	6013      	str	r3, [r2, #0]
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4ee:	4613      	mov	r3, r2
 800f4f0:	009b      	lsls	r3, r3, #2
 800f4f2:	4413      	add	r3, r2
 800f4f4:	009b      	lsls	r3, r3, #2
 800f4f6:	4a10      	ldr	r2, [pc, #64]	; (800f538 <xTaskPriorityInherit+0xc8>)
 800f4f8:	441a      	add	r2, r3
 800f4fa:	68bb      	ldr	r3, [r7, #8]
 800f4fc:	3304      	adds	r3, #4
 800f4fe:	4619      	mov	r1, r3
 800f500:	4610      	mov	r0, r2
 800f502:	f7fe f866 	bl	800d5d2 <vListInsertEnd>
 800f506:	e004      	b.n	800f512 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f508:	4b0a      	ldr	r3, [pc, #40]	; (800f534 <xTaskPriorityInherit+0xc4>)
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f512:	2301      	movs	r3, #1
 800f514:	60fb      	str	r3, [r7, #12]
 800f516:	e008      	b.n	800f52a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f51c:	4b05      	ldr	r3, [pc, #20]	; (800f534 <xTaskPriorityInherit+0xc4>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f522:	429a      	cmp	r2, r3
 800f524:	d201      	bcs.n	800f52a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f526:	2301      	movs	r3, #1
 800f528:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f52a:	68fb      	ldr	r3, [r7, #12]
	}
 800f52c:	4618      	mov	r0, r3
 800f52e:	3710      	adds	r7, #16
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}
 800f534:	20001460 	.word	0x20001460
 800f538:	20001464 	.word	0x20001464
 800f53c:	2000193c 	.word	0x2000193c

0800f540 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f540:	b580      	push	{r7, lr}
 800f542:	b086      	sub	sp, #24
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f54c:	2300      	movs	r3, #0
 800f54e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d056      	beq.n	800f604 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f556:	4b2e      	ldr	r3, [pc, #184]	; (800f610 <xTaskPriorityDisinherit+0xd0>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	693a      	ldr	r2, [r7, #16]
 800f55c:	429a      	cmp	r2, r3
 800f55e:	d00a      	beq.n	800f576 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f564:	f383 8811 	msr	BASEPRI, r3
 800f568:	f3bf 8f6f 	isb	sy
 800f56c:	f3bf 8f4f 	dsb	sy
 800f570:	60fb      	str	r3, [r7, #12]
}
 800f572:	bf00      	nop
 800f574:	e7fe      	b.n	800f574 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f576:	693b      	ldr	r3, [r7, #16]
 800f578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d10a      	bne.n	800f594 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f582:	f383 8811 	msr	BASEPRI, r3
 800f586:	f3bf 8f6f 	isb	sy
 800f58a:	f3bf 8f4f 	dsb	sy
 800f58e:	60bb      	str	r3, [r7, #8]
}
 800f590:	bf00      	nop
 800f592:	e7fe      	b.n	800f592 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f594:	693b      	ldr	r3, [r7, #16]
 800f596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f598:	1e5a      	subs	r2, r3, #1
 800f59a:	693b      	ldr	r3, [r7, #16]
 800f59c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f59e:	693b      	ldr	r3, [r7, #16]
 800f5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5a2:	693b      	ldr	r3, [r7, #16]
 800f5a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d02c      	beq.n	800f604 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f5aa:	693b      	ldr	r3, [r7, #16]
 800f5ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d128      	bne.n	800f604 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f5b2:	693b      	ldr	r3, [r7, #16]
 800f5b4:	3304      	adds	r3, #4
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f7fe f868 	bl	800d68c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f5bc:	693b      	ldr	r3, [r7, #16]
 800f5be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f5c0:	693b      	ldr	r3, [r7, #16]
 800f5c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f5c4:	693b      	ldr	r3, [r7, #16]
 800f5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f5cc:	693b      	ldr	r3, [r7, #16]
 800f5ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f5d0:	693b      	ldr	r3, [r7, #16]
 800f5d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5d4:	4b0f      	ldr	r3, [pc, #60]	; (800f614 <xTaskPriorityDisinherit+0xd4>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	429a      	cmp	r2, r3
 800f5da:	d903      	bls.n	800f5e4 <xTaskPriorityDisinherit+0xa4>
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5e0:	4a0c      	ldr	r2, [pc, #48]	; (800f614 <xTaskPriorityDisinherit+0xd4>)
 800f5e2:	6013      	str	r3, [r2, #0]
 800f5e4:	693b      	ldr	r3, [r7, #16]
 800f5e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5e8:	4613      	mov	r3, r2
 800f5ea:	009b      	lsls	r3, r3, #2
 800f5ec:	4413      	add	r3, r2
 800f5ee:	009b      	lsls	r3, r3, #2
 800f5f0:	4a09      	ldr	r2, [pc, #36]	; (800f618 <xTaskPriorityDisinherit+0xd8>)
 800f5f2:	441a      	add	r2, r3
 800f5f4:	693b      	ldr	r3, [r7, #16]
 800f5f6:	3304      	adds	r3, #4
 800f5f8:	4619      	mov	r1, r3
 800f5fa:	4610      	mov	r0, r2
 800f5fc:	f7fd ffe9 	bl	800d5d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f600:	2301      	movs	r3, #1
 800f602:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f604:	697b      	ldr	r3, [r7, #20]
	}
 800f606:	4618      	mov	r0, r3
 800f608:	3718      	adds	r7, #24
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}
 800f60e:	bf00      	nop
 800f610:	20001460 	.word	0x20001460
 800f614:	2000193c 	.word	0x2000193c
 800f618:	20001464 	.word	0x20001464

0800f61c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b088      	sub	sp, #32
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
 800f624:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f62a:	2301      	movs	r3, #1
 800f62c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d06a      	beq.n	800f70a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f634:	69bb      	ldr	r3, [r7, #24]
 800f636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d10a      	bne.n	800f652 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800f63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f640:	f383 8811 	msr	BASEPRI, r3
 800f644:	f3bf 8f6f 	isb	sy
 800f648:	f3bf 8f4f 	dsb	sy
 800f64c:	60fb      	str	r3, [r7, #12]
}
 800f64e:	bf00      	nop
 800f650:	e7fe      	b.n	800f650 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f652:	69bb      	ldr	r3, [r7, #24]
 800f654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f656:	683a      	ldr	r2, [r7, #0]
 800f658:	429a      	cmp	r2, r3
 800f65a:	d902      	bls.n	800f662 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f65c:	683b      	ldr	r3, [r7, #0]
 800f65e:	61fb      	str	r3, [r7, #28]
 800f660:	e002      	b.n	800f668 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f662:	69bb      	ldr	r3, [r7, #24]
 800f664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f666:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f668:	69bb      	ldr	r3, [r7, #24]
 800f66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f66c:	69fa      	ldr	r2, [r7, #28]
 800f66e:	429a      	cmp	r2, r3
 800f670:	d04b      	beq.n	800f70a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f672:	69bb      	ldr	r3, [r7, #24]
 800f674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f676:	697a      	ldr	r2, [r7, #20]
 800f678:	429a      	cmp	r2, r3
 800f67a:	d146      	bne.n	800f70a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f67c:	4b25      	ldr	r3, [pc, #148]	; (800f714 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	69ba      	ldr	r2, [r7, #24]
 800f682:	429a      	cmp	r2, r3
 800f684:	d10a      	bne.n	800f69c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800f686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f68a:	f383 8811 	msr	BASEPRI, r3
 800f68e:	f3bf 8f6f 	isb	sy
 800f692:	f3bf 8f4f 	dsb	sy
 800f696:	60bb      	str	r3, [r7, #8]
}
 800f698:	bf00      	nop
 800f69a:	e7fe      	b.n	800f69a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f69c:	69bb      	ldr	r3, [r7, #24]
 800f69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f6a2:	69bb      	ldr	r3, [r7, #24]
 800f6a4:	69fa      	ldr	r2, [r7, #28]
 800f6a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f6a8:	69bb      	ldr	r3, [r7, #24]
 800f6aa:	699b      	ldr	r3, [r3, #24]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	db04      	blt.n	800f6ba <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6b0:	69fb      	ldr	r3, [r7, #28]
 800f6b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f6b6:	69bb      	ldr	r3, [r7, #24]
 800f6b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f6ba:	69bb      	ldr	r3, [r7, #24]
 800f6bc:	6959      	ldr	r1, [r3, #20]
 800f6be:	693a      	ldr	r2, [r7, #16]
 800f6c0:	4613      	mov	r3, r2
 800f6c2:	009b      	lsls	r3, r3, #2
 800f6c4:	4413      	add	r3, r2
 800f6c6:	009b      	lsls	r3, r3, #2
 800f6c8:	4a13      	ldr	r2, [pc, #76]	; (800f718 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f6ca:	4413      	add	r3, r2
 800f6cc:	4299      	cmp	r1, r3
 800f6ce:	d11c      	bne.n	800f70a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f6d0:	69bb      	ldr	r3, [r7, #24]
 800f6d2:	3304      	adds	r3, #4
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f7fd ffd9 	bl	800d68c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f6da:	69bb      	ldr	r3, [r7, #24]
 800f6dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6de:	4b0f      	ldr	r3, [pc, #60]	; (800f71c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	429a      	cmp	r2, r3
 800f6e4:	d903      	bls.n	800f6ee <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800f6e6:	69bb      	ldr	r3, [r7, #24]
 800f6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6ea:	4a0c      	ldr	r2, [pc, #48]	; (800f71c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f6ec:	6013      	str	r3, [r2, #0]
 800f6ee:	69bb      	ldr	r3, [r7, #24]
 800f6f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6f2:	4613      	mov	r3, r2
 800f6f4:	009b      	lsls	r3, r3, #2
 800f6f6:	4413      	add	r3, r2
 800f6f8:	009b      	lsls	r3, r3, #2
 800f6fa:	4a07      	ldr	r2, [pc, #28]	; (800f718 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f6fc:	441a      	add	r2, r3
 800f6fe:	69bb      	ldr	r3, [r7, #24]
 800f700:	3304      	adds	r3, #4
 800f702:	4619      	mov	r1, r3
 800f704:	4610      	mov	r0, r2
 800f706:	f7fd ff64 	bl	800d5d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f70a:	bf00      	nop
 800f70c:	3720      	adds	r7, #32
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}
 800f712:	bf00      	nop
 800f714:	20001460 	.word	0x20001460
 800f718:	20001464 	.word	0x20001464
 800f71c:	2000193c 	.word	0x2000193c

0800f720 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f720:	b480      	push	{r7}
 800f722:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f724:	4b07      	ldr	r3, [pc, #28]	; (800f744 <pvTaskIncrementMutexHeldCount+0x24>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d004      	beq.n	800f736 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f72c:	4b05      	ldr	r3, [pc, #20]	; (800f744 <pvTaskIncrementMutexHeldCount+0x24>)
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f732:	3201      	adds	r2, #1
 800f734:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800f736:	4b03      	ldr	r3, [pc, #12]	; (800f744 <pvTaskIncrementMutexHeldCount+0x24>)
 800f738:	681b      	ldr	r3, [r3, #0]
	}
 800f73a:	4618      	mov	r0, r3
 800f73c:	46bd      	mov	sp, r7
 800f73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f742:	4770      	bx	lr
 800f744:	20001460 	.word	0x20001460

0800f748 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b084      	sub	sp, #16
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f752:	4b21      	ldr	r3, [pc, #132]	; (800f7d8 <prvAddCurrentTaskToDelayedList+0x90>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f758:	4b20      	ldr	r3, [pc, #128]	; (800f7dc <prvAddCurrentTaskToDelayedList+0x94>)
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	3304      	adds	r3, #4
 800f75e:	4618      	mov	r0, r3
 800f760:	f7fd ff94 	bl	800d68c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f76a:	d10a      	bne.n	800f782 <prvAddCurrentTaskToDelayedList+0x3a>
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d007      	beq.n	800f782 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f772:	4b1a      	ldr	r3, [pc, #104]	; (800f7dc <prvAddCurrentTaskToDelayedList+0x94>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	3304      	adds	r3, #4
 800f778:	4619      	mov	r1, r3
 800f77a:	4819      	ldr	r0, [pc, #100]	; (800f7e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800f77c:	f7fd ff29 	bl	800d5d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f780:	e026      	b.n	800f7d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f782:	68fa      	ldr	r2, [r7, #12]
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	4413      	add	r3, r2
 800f788:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f78a:	4b14      	ldr	r3, [pc, #80]	; (800f7dc <prvAddCurrentTaskToDelayedList+0x94>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	68ba      	ldr	r2, [r7, #8]
 800f790:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f792:	68ba      	ldr	r2, [r7, #8]
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	429a      	cmp	r2, r3
 800f798:	d209      	bcs.n	800f7ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f79a:	4b12      	ldr	r3, [pc, #72]	; (800f7e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f79c:	681a      	ldr	r2, [r3, #0]
 800f79e:	4b0f      	ldr	r3, [pc, #60]	; (800f7dc <prvAddCurrentTaskToDelayedList+0x94>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	3304      	adds	r3, #4
 800f7a4:	4619      	mov	r1, r3
 800f7a6:	4610      	mov	r0, r2
 800f7a8:	f7fd ff37 	bl	800d61a <vListInsert>
}
 800f7ac:	e010      	b.n	800f7d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f7ae:	4b0e      	ldr	r3, [pc, #56]	; (800f7e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f7b0:	681a      	ldr	r2, [r3, #0]
 800f7b2:	4b0a      	ldr	r3, [pc, #40]	; (800f7dc <prvAddCurrentTaskToDelayedList+0x94>)
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	3304      	adds	r3, #4
 800f7b8:	4619      	mov	r1, r3
 800f7ba:	4610      	mov	r0, r2
 800f7bc:	f7fd ff2d 	bl	800d61a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f7c0:	4b0a      	ldr	r3, [pc, #40]	; (800f7ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	68ba      	ldr	r2, [r7, #8]
 800f7c6:	429a      	cmp	r2, r3
 800f7c8:	d202      	bcs.n	800f7d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f7ca:	4a08      	ldr	r2, [pc, #32]	; (800f7ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800f7cc:	68bb      	ldr	r3, [r7, #8]
 800f7ce:	6013      	str	r3, [r2, #0]
}
 800f7d0:	bf00      	nop
 800f7d2:	3710      	adds	r7, #16
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}
 800f7d8:	20001938 	.word	0x20001938
 800f7dc:	20001460 	.word	0x20001460
 800f7e0:	20001920 	.word	0x20001920
 800f7e4:	200018f0 	.word	0x200018f0
 800f7e8:	200018ec 	.word	0x200018ec
 800f7ec:	20001954 	.word	0x20001954

0800f7f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b08a      	sub	sp, #40	; 0x28
 800f7f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f7fa:	f000 fb07 	bl	800fe0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f7fe:	4b1c      	ldr	r3, [pc, #112]	; (800f870 <xTimerCreateTimerTask+0x80>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d021      	beq.n	800f84a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f806:	2300      	movs	r3, #0
 800f808:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f80a:	2300      	movs	r3, #0
 800f80c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f80e:	1d3a      	adds	r2, r7, #4
 800f810:	f107 0108 	add.w	r1, r7, #8
 800f814:	f107 030c 	add.w	r3, r7, #12
 800f818:	4618      	mov	r0, r3
 800f81a:	f7fd fe93 	bl	800d544 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f81e:	6879      	ldr	r1, [r7, #4]
 800f820:	68bb      	ldr	r3, [r7, #8]
 800f822:	68fa      	ldr	r2, [r7, #12]
 800f824:	9202      	str	r2, [sp, #8]
 800f826:	9301      	str	r3, [sp, #4]
 800f828:	2302      	movs	r3, #2
 800f82a:	9300      	str	r3, [sp, #0]
 800f82c:	2300      	movs	r3, #0
 800f82e:	460a      	mov	r2, r1
 800f830:	4910      	ldr	r1, [pc, #64]	; (800f874 <xTimerCreateTimerTask+0x84>)
 800f832:	4811      	ldr	r0, [pc, #68]	; (800f878 <xTimerCreateTimerTask+0x88>)
 800f834:	f7fe ff62 	bl	800e6fc <xTaskCreateStatic>
 800f838:	4603      	mov	r3, r0
 800f83a:	4a10      	ldr	r2, [pc, #64]	; (800f87c <xTimerCreateTimerTask+0x8c>)
 800f83c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f83e:	4b0f      	ldr	r3, [pc, #60]	; (800f87c <xTimerCreateTimerTask+0x8c>)
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d001      	beq.n	800f84a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f846:	2301      	movs	r3, #1
 800f848:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f84a:	697b      	ldr	r3, [r7, #20]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d10a      	bne.n	800f866 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f854:	f383 8811 	msr	BASEPRI, r3
 800f858:	f3bf 8f6f 	isb	sy
 800f85c:	f3bf 8f4f 	dsb	sy
 800f860:	613b      	str	r3, [r7, #16]
}
 800f862:	bf00      	nop
 800f864:	e7fe      	b.n	800f864 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f866:	697b      	ldr	r3, [r7, #20]
}
 800f868:	4618      	mov	r0, r3
 800f86a:	3718      	adds	r7, #24
 800f86c:	46bd      	mov	sp, r7
 800f86e:	bd80      	pop	{r7, pc}
 800f870:	20001990 	.word	0x20001990
 800f874:	0801452c 	.word	0x0801452c
 800f878:	0800f9b5 	.word	0x0800f9b5
 800f87c:	20001994 	.word	0x20001994

0800f880 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b08a      	sub	sp, #40	; 0x28
 800f884:	af00      	add	r7, sp, #0
 800f886:	60f8      	str	r0, [r7, #12]
 800f888:	60b9      	str	r1, [r7, #8]
 800f88a:	607a      	str	r2, [r7, #4]
 800f88c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f88e:	2300      	movs	r3, #0
 800f890:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d10a      	bne.n	800f8ae <xTimerGenericCommand+0x2e>
	__asm volatile
 800f898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f89c:	f383 8811 	msr	BASEPRI, r3
 800f8a0:	f3bf 8f6f 	isb	sy
 800f8a4:	f3bf 8f4f 	dsb	sy
 800f8a8:	623b      	str	r3, [r7, #32]
}
 800f8aa:	bf00      	nop
 800f8ac:	e7fe      	b.n	800f8ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f8ae:	4b1a      	ldr	r3, [pc, #104]	; (800f918 <xTimerGenericCommand+0x98>)
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d02a      	beq.n	800f90c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	2b05      	cmp	r3, #5
 800f8c6:	dc18      	bgt.n	800f8fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f8c8:	f7ff fdb4 	bl	800f434 <xTaskGetSchedulerState>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	2b02      	cmp	r3, #2
 800f8d0:	d109      	bne.n	800f8e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f8d2:	4b11      	ldr	r3, [pc, #68]	; (800f918 <xTimerGenericCommand+0x98>)
 800f8d4:	6818      	ldr	r0, [r3, #0]
 800f8d6:	f107 0110 	add.w	r1, r7, #16
 800f8da:	2300      	movs	r3, #0
 800f8dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8de:	f7fe f8a7 	bl	800da30 <xQueueGenericSend>
 800f8e2:	6278      	str	r0, [r7, #36]	; 0x24
 800f8e4:	e012      	b.n	800f90c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f8e6:	4b0c      	ldr	r3, [pc, #48]	; (800f918 <xTimerGenericCommand+0x98>)
 800f8e8:	6818      	ldr	r0, [r3, #0]
 800f8ea:	f107 0110 	add.w	r1, r7, #16
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	f7fe f89d 	bl	800da30 <xQueueGenericSend>
 800f8f6:	6278      	str	r0, [r7, #36]	; 0x24
 800f8f8:	e008      	b.n	800f90c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f8fa:	4b07      	ldr	r3, [pc, #28]	; (800f918 <xTimerGenericCommand+0x98>)
 800f8fc:	6818      	ldr	r0, [r3, #0]
 800f8fe:	f107 0110 	add.w	r1, r7, #16
 800f902:	2300      	movs	r3, #0
 800f904:	683a      	ldr	r2, [r7, #0]
 800f906:	f7fe f991 	bl	800dc2c <xQueueGenericSendFromISR>
 800f90a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f90e:	4618      	mov	r0, r3
 800f910:	3728      	adds	r7, #40	; 0x28
 800f912:	46bd      	mov	sp, r7
 800f914:	bd80      	pop	{r7, pc}
 800f916:	bf00      	nop
 800f918:	20001990 	.word	0x20001990

0800f91c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b088      	sub	sp, #32
 800f920:	af02      	add	r7, sp, #8
 800f922:	6078      	str	r0, [r7, #4]
 800f924:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f926:	4b22      	ldr	r3, [pc, #136]	; (800f9b0 <prvProcessExpiredTimer+0x94>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	68db      	ldr	r3, [r3, #12]
 800f92c:	68db      	ldr	r3, [r3, #12]
 800f92e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f930:	697b      	ldr	r3, [r7, #20]
 800f932:	3304      	adds	r3, #4
 800f934:	4618      	mov	r0, r3
 800f936:	f7fd fea9 	bl	800d68c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f940:	f003 0304 	and.w	r3, r3, #4
 800f944:	2b00      	cmp	r3, #0
 800f946:	d022      	beq.n	800f98e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f948:	697b      	ldr	r3, [r7, #20]
 800f94a:	699a      	ldr	r2, [r3, #24]
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	18d1      	adds	r1, r2, r3
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	683a      	ldr	r2, [r7, #0]
 800f954:	6978      	ldr	r0, [r7, #20]
 800f956:	f000 f8d1 	bl	800fafc <prvInsertTimerInActiveList>
 800f95a:	4603      	mov	r3, r0
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d01f      	beq.n	800f9a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f960:	2300      	movs	r3, #0
 800f962:	9300      	str	r3, [sp, #0]
 800f964:	2300      	movs	r3, #0
 800f966:	687a      	ldr	r2, [r7, #4]
 800f968:	2100      	movs	r1, #0
 800f96a:	6978      	ldr	r0, [r7, #20]
 800f96c:	f7ff ff88 	bl	800f880 <xTimerGenericCommand>
 800f970:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f972:	693b      	ldr	r3, [r7, #16]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d113      	bne.n	800f9a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f97c:	f383 8811 	msr	BASEPRI, r3
 800f980:	f3bf 8f6f 	isb	sy
 800f984:	f3bf 8f4f 	dsb	sy
 800f988:	60fb      	str	r3, [r7, #12]
}
 800f98a:	bf00      	nop
 800f98c:	e7fe      	b.n	800f98c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f994:	f023 0301 	bic.w	r3, r3, #1
 800f998:	b2da      	uxtb	r2, r3
 800f99a:	697b      	ldr	r3, [r7, #20]
 800f99c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	6a1b      	ldr	r3, [r3, #32]
 800f9a4:	6978      	ldr	r0, [r7, #20]
 800f9a6:	4798      	blx	r3
}
 800f9a8:	bf00      	nop
 800f9aa:	3718      	adds	r7, #24
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd80      	pop	{r7, pc}
 800f9b0:	20001988 	.word	0x20001988

0800f9b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b084      	sub	sp, #16
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f9bc:	f107 0308 	add.w	r3, r7, #8
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f000 f857 	bl	800fa74 <prvGetNextExpireTime>
 800f9c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	68f8      	ldr	r0, [r7, #12]
 800f9ce:	f000 f803 	bl	800f9d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f9d2:	f000 f8d5 	bl	800fb80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f9d6:	e7f1      	b.n	800f9bc <prvTimerTask+0x8>

0800f9d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b084      	sub	sp, #16
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
 800f9e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f9e2:	f7ff f945 	bl	800ec70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f9e6:	f107 0308 	add.w	r3, r7, #8
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f000 f866 	bl	800fabc <prvSampleTimeNow>
 800f9f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f9f2:	68bb      	ldr	r3, [r7, #8]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d130      	bne.n	800fa5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d10a      	bne.n	800fa14 <prvProcessTimerOrBlockTask+0x3c>
 800f9fe:	687a      	ldr	r2, [r7, #4]
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	429a      	cmp	r2, r3
 800fa04:	d806      	bhi.n	800fa14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fa06:	f7ff f941 	bl	800ec8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fa0a:	68f9      	ldr	r1, [r7, #12]
 800fa0c:	6878      	ldr	r0, [r7, #4]
 800fa0e:	f7ff ff85 	bl	800f91c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fa12:	e024      	b.n	800fa5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d008      	beq.n	800fa2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fa1a:	4b13      	ldr	r3, [pc, #76]	; (800fa68 <prvProcessTimerOrBlockTask+0x90>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d101      	bne.n	800fa28 <prvProcessTimerOrBlockTask+0x50>
 800fa24:	2301      	movs	r3, #1
 800fa26:	e000      	b.n	800fa2a <prvProcessTimerOrBlockTask+0x52>
 800fa28:	2300      	movs	r3, #0
 800fa2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fa2c:	4b0f      	ldr	r3, [pc, #60]	; (800fa6c <prvProcessTimerOrBlockTask+0x94>)
 800fa2e:	6818      	ldr	r0, [r3, #0]
 800fa30:	687a      	ldr	r2, [r7, #4]
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	1ad3      	subs	r3, r2, r3
 800fa36:	683a      	ldr	r2, [r7, #0]
 800fa38:	4619      	mov	r1, r3
 800fa3a:	f7fe fe2b 	bl	800e694 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fa3e:	f7ff f925 	bl	800ec8c <xTaskResumeAll>
 800fa42:	4603      	mov	r3, r0
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d10a      	bne.n	800fa5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fa48:	4b09      	ldr	r3, [pc, #36]	; (800fa70 <prvProcessTimerOrBlockTask+0x98>)
 800fa4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa4e:	601a      	str	r2, [r3, #0]
 800fa50:	f3bf 8f4f 	dsb	sy
 800fa54:	f3bf 8f6f 	isb	sy
}
 800fa58:	e001      	b.n	800fa5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fa5a:	f7ff f917 	bl	800ec8c <xTaskResumeAll>
}
 800fa5e:	bf00      	nop
 800fa60:	3710      	adds	r7, #16
 800fa62:	46bd      	mov	sp, r7
 800fa64:	bd80      	pop	{r7, pc}
 800fa66:	bf00      	nop
 800fa68:	2000198c 	.word	0x2000198c
 800fa6c:	20001990 	.word	0x20001990
 800fa70:	e000ed04 	.word	0xe000ed04

0800fa74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fa74:	b480      	push	{r7}
 800fa76:	b085      	sub	sp, #20
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fa7c:	4b0e      	ldr	r3, [pc, #56]	; (800fab8 <prvGetNextExpireTime+0x44>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d101      	bne.n	800fa8a <prvGetNextExpireTime+0x16>
 800fa86:	2201      	movs	r2, #1
 800fa88:	e000      	b.n	800fa8c <prvGetNextExpireTime+0x18>
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d105      	bne.n	800faa4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fa98:	4b07      	ldr	r3, [pc, #28]	; (800fab8 <prvGetNextExpireTime+0x44>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	68db      	ldr	r3, [r3, #12]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	60fb      	str	r3, [r7, #12]
 800faa2:	e001      	b.n	800faa8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800faa4:	2300      	movs	r3, #0
 800faa6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800faa8:	68fb      	ldr	r3, [r7, #12]
}
 800faaa:	4618      	mov	r0, r3
 800faac:	3714      	adds	r7, #20
 800faae:	46bd      	mov	sp, r7
 800fab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab4:	4770      	bx	lr
 800fab6:	bf00      	nop
 800fab8:	20001988 	.word	0x20001988

0800fabc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b084      	sub	sp, #16
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fac4:	f7ff f980 	bl	800edc8 <xTaskGetTickCount>
 800fac8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800faca:	4b0b      	ldr	r3, [pc, #44]	; (800faf8 <prvSampleTimeNow+0x3c>)
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	68fa      	ldr	r2, [r7, #12]
 800fad0:	429a      	cmp	r2, r3
 800fad2:	d205      	bcs.n	800fae0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fad4:	f000 f936 	bl	800fd44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2201      	movs	r2, #1
 800fadc:	601a      	str	r2, [r3, #0]
 800fade:	e002      	b.n	800fae6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	2200      	movs	r2, #0
 800fae4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fae6:	4a04      	ldr	r2, [pc, #16]	; (800faf8 <prvSampleTimeNow+0x3c>)
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800faec:	68fb      	ldr	r3, [r7, #12]
}
 800faee:	4618      	mov	r0, r3
 800faf0:	3710      	adds	r7, #16
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}
 800faf6:	bf00      	nop
 800faf8:	20001998 	.word	0x20001998

0800fafc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b086      	sub	sp, #24
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	60f8      	str	r0, [r7, #12]
 800fb04:	60b9      	str	r1, [r7, #8]
 800fb06:	607a      	str	r2, [r7, #4]
 800fb08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	68ba      	ldr	r2, [r7, #8]
 800fb12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	68fa      	ldr	r2, [r7, #12]
 800fb18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fb1a:	68ba      	ldr	r2, [r7, #8]
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	429a      	cmp	r2, r3
 800fb20:	d812      	bhi.n	800fb48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb22:	687a      	ldr	r2, [r7, #4]
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	1ad2      	subs	r2, r2, r3
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	699b      	ldr	r3, [r3, #24]
 800fb2c:	429a      	cmp	r2, r3
 800fb2e:	d302      	bcc.n	800fb36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fb30:	2301      	movs	r3, #1
 800fb32:	617b      	str	r3, [r7, #20]
 800fb34:	e01b      	b.n	800fb6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fb36:	4b10      	ldr	r3, [pc, #64]	; (800fb78 <prvInsertTimerInActiveList+0x7c>)
 800fb38:	681a      	ldr	r2, [r3, #0]
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	3304      	adds	r3, #4
 800fb3e:	4619      	mov	r1, r3
 800fb40:	4610      	mov	r0, r2
 800fb42:	f7fd fd6a 	bl	800d61a <vListInsert>
 800fb46:	e012      	b.n	800fb6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fb48:	687a      	ldr	r2, [r7, #4]
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	429a      	cmp	r2, r3
 800fb4e:	d206      	bcs.n	800fb5e <prvInsertTimerInActiveList+0x62>
 800fb50:	68ba      	ldr	r2, [r7, #8]
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	429a      	cmp	r2, r3
 800fb56:	d302      	bcc.n	800fb5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fb58:	2301      	movs	r3, #1
 800fb5a:	617b      	str	r3, [r7, #20]
 800fb5c:	e007      	b.n	800fb6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fb5e:	4b07      	ldr	r3, [pc, #28]	; (800fb7c <prvInsertTimerInActiveList+0x80>)
 800fb60:	681a      	ldr	r2, [r3, #0]
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	3304      	adds	r3, #4
 800fb66:	4619      	mov	r1, r3
 800fb68:	4610      	mov	r0, r2
 800fb6a:	f7fd fd56 	bl	800d61a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fb6e:	697b      	ldr	r3, [r7, #20]
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	3718      	adds	r7, #24
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}
 800fb78:	2000198c 	.word	0x2000198c
 800fb7c:	20001988 	.word	0x20001988

0800fb80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b08e      	sub	sp, #56	; 0x38
 800fb84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fb86:	e0ca      	b.n	800fd1e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	da18      	bge.n	800fbc0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fb8e:	1d3b      	adds	r3, r7, #4
 800fb90:	3304      	adds	r3, #4
 800fb92:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d10a      	bne.n	800fbb0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800fb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb9e:	f383 8811 	msr	BASEPRI, r3
 800fba2:	f3bf 8f6f 	isb	sy
 800fba6:	f3bf 8f4f 	dsb	sy
 800fbaa:	61fb      	str	r3, [r7, #28]
}
 800fbac:	bf00      	nop
 800fbae:	e7fe      	b.n	800fbae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbb6:	6850      	ldr	r0, [r2, #4]
 800fbb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbba:	6892      	ldr	r2, [r2, #8]
 800fbbc:	4611      	mov	r1, r2
 800fbbe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	f2c0 80aa 	blt.w	800fd1c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbce:	695b      	ldr	r3, [r3, #20]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d004      	beq.n	800fbde <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbd6:	3304      	adds	r3, #4
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f7fd fd57 	bl	800d68c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fbde:	463b      	mov	r3, r7
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f7ff ff6b 	bl	800fabc <prvSampleTimeNow>
 800fbe6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2b09      	cmp	r3, #9
 800fbec:	f200 8097 	bhi.w	800fd1e <prvProcessReceivedCommands+0x19e>
 800fbf0:	a201      	add	r2, pc, #4	; (adr r2, 800fbf8 <prvProcessReceivedCommands+0x78>)
 800fbf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbf6:	bf00      	nop
 800fbf8:	0800fc21 	.word	0x0800fc21
 800fbfc:	0800fc21 	.word	0x0800fc21
 800fc00:	0800fc21 	.word	0x0800fc21
 800fc04:	0800fc95 	.word	0x0800fc95
 800fc08:	0800fca9 	.word	0x0800fca9
 800fc0c:	0800fcf3 	.word	0x0800fcf3
 800fc10:	0800fc21 	.word	0x0800fc21
 800fc14:	0800fc21 	.word	0x0800fc21
 800fc18:	0800fc95 	.word	0x0800fc95
 800fc1c:	0800fca9 	.word	0x0800fca9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc26:	f043 0301 	orr.w	r3, r3, #1
 800fc2a:	b2da      	uxtb	r2, r3
 800fc2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fc32:	68ba      	ldr	r2, [r7, #8]
 800fc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc36:	699b      	ldr	r3, [r3, #24]
 800fc38:	18d1      	adds	r1, r2, r3
 800fc3a:	68bb      	ldr	r3, [r7, #8]
 800fc3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc40:	f7ff ff5c 	bl	800fafc <prvInsertTimerInActiveList>
 800fc44:	4603      	mov	r3, r0
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d069      	beq.n	800fd1e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fc4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc4c:	6a1b      	ldr	r3, [r3, #32]
 800fc4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fc52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc58:	f003 0304 	and.w	r3, r3, #4
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d05e      	beq.n	800fd1e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fc60:	68ba      	ldr	r2, [r7, #8]
 800fc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc64:	699b      	ldr	r3, [r3, #24]
 800fc66:	441a      	add	r2, r3
 800fc68:	2300      	movs	r3, #0
 800fc6a:	9300      	str	r3, [sp, #0]
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	2100      	movs	r1, #0
 800fc70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc72:	f7ff fe05 	bl	800f880 <xTimerGenericCommand>
 800fc76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fc78:	6a3b      	ldr	r3, [r7, #32]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d14f      	bne.n	800fd1e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800fc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc82:	f383 8811 	msr	BASEPRI, r3
 800fc86:	f3bf 8f6f 	isb	sy
 800fc8a:	f3bf 8f4f 	dsb	sy
 800fc8e:	61bb      	str	r3, [r7, #24]
}
 800fc90:	bf00      	nop
 800fc92:	e7fe      	b.n	800fc92 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc9a:	f023 0301 	bic.w	r3, r3, #1
 800fc9e:	b2da      	uxtb	r2, r3
 800fca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fca2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fca6:	e03a      	b.n	800fd1e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fcae:	f043 0301 	orr.w	r3, r3, #1
 800fcb2:	b2da      	uxtb	r2, r3
 800fcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fcba:	68ba      	ldr	r2, [r7, #8]
 800fcbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcbe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fcc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcc2:	699b      	ldr	r3, [r3, #24]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d10a      	bne.n	800fcde <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800fcc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fccc:	f383 8811 	msr	BASEPRI, r3
 800fcd0:	f3bf 8f6f 	isb	sy
 800fcd4:	f3bf 8f4f 	dsb	sy
 800fcd8:	617b      	str	r3, [r7, #20]
}
 800fcda:	bf00      	nop
 800fcdc:	e7fe      	b.n	800fcdc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fcde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fce0:	699a      	ldr	r2, [r3, #24]
 800fce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce4:	18d1      	adds	r1, r2, r3
 800fce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fcec:	f7ff ff06 	bl	800fafc <prvInsertTimerInActiveList>
					break;
 800fcf0:	e015      	b.n	800fd1e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fcf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fcf8:	f003 0302 	and.w	r3, r3, #2
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d103      	bne.n	800fd08 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800fd00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd02:	f000 fbdd 	bl	80104c0 <vPortFree>
 800fd06:	e00a      	b.n	800fd1e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd0e:	f023 0301 	bic.w	r3, r3, #1
 800fd12:	b2da      	uxtb	r2, r3
 800fd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fd1a:	e000      	b.n	800fd1e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800fd1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fd1e:	4b08      	ldr	r3, [pc, #32]	; (800fd40 <prvProcessReceivedCommands+0x1c0>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	1d39      	adds	r1, r7, #4
 800fd24:	2200      	movs	r2, #0
 800fd26:	4618      	mov	r0, r3
 800fd28:	f7fe f8a8 	bl	800de7c <xQueueReceive>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	f47f af2a 	bne.w	800fb88 <prvProcessReceivedCommands+0x8>
	}
}
 800fd34:	bf00      	nop
 800fd36:	bf00      	nop
 800fd38:	3730      	adds	r7, #48	; 0x30
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}
 800fd3e:	bf00      	nop
 800fd40:	20001990 	.word	0x20001990

0800fd44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b088      	sub	sp, #32
 800fd48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fd4a:	e048      	b.n	800fdde <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fd4c:	4b2d      	ldr	r3, [pc, #180]	; (800fe04 <prvSwitchTimerLists+0xc0>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	68db      	ldr	r3, [r3, #12]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd56:	4b2b      	ldr	r3, [pc, #172]	; (800fe04 <prvSwitchTimerLists+0xc0>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	68db      	ldr	r3, [r3, #12]
 800fd5c:	68db      	ldr	r3, [r3, #12]
 800fd5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	3304      	adds	r3, #4
 800fd64:	4618      	mov	r0, r3
 800fd66:	f7fd fc91 	bl	800d68c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	6a1b      	ldr	r3, [r3, #32]
 800fd6e:	68f8      	ldr	r0, [r7, #12]
 800fd70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd78:	f003 0304 	and.w	r3, r3, #4
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d02e      	beq.n	800fdde <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	699b      	ldr	r3, [r3, #24]
 800fd84:	693a      	ldr	r2, [r7, #16]
 800fd86:	4413      	add	r3, r2
 800fd88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fd8a:	68ba      	ldr	r2, [r7, #8]
 800fd8c:	693b      	ldr	r3, [r7, #16]
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	d90e      	bls.n	800fdb0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	68ba      	ldr	r2, [r7, #8]
 800fd96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	68fa      	ldr	r2, [r7, #12]
 800fd9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fd9e:	4b19      	ldr	r3, [pc, #100]	; (800fe04 <prvSwitchTimerLists+0xc0>)
 800fda0:	681a      	ldr	r2, [r3, #0]
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	3304      	adds	r3, #4
 800fda6:	4619      	mov	r1, r3
 800fda8:	4610      	mov	r0, r2
 800fdaa:	f7fd fc36 	bl	800d61a <vListInsert>
 800fdae:	e016      	b.n	800fdde <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	9300      	str	r3, [sp, #0]
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	693a      	ldr	r2, [r7, #16]
 800fdb8:	2100      	movs	r1, #0
 800fdba:	68f8      	ldr	r0, [r7, #12]
 800fdbc:	f7ff fd60 	bl	800f880 <xTimerGenericCommand>
 800fdc0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d10a      	bne.n	800fdde <prvSwitchTimerLists+0x9a>
	__asm volatile
 800fdc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdcc:	f383 8811 	msr	BASEPRI, r3
 800fdd0:	f3bf 8f6f 	isb	sy
 800fdd4:	f3bf 8f4f 	dsb	sy
 800fdd8:	603b      	str	r3, [r7, #0]
}
 800fdda:	bf00      	nop
 800fddc:	e7fe      	b.n	800fddc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fdde:	4b09      	ldr	r3, [pc, #36]	; (800fe04 <prvSwitchTimerLists+0xc0>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d1b1      	bne.n	800fd4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fde8:	4b06      	ldr	r3, [pc, #24]	; (800fe04 <prvSwitchTimerLists+0xc0>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fdee:	4b06      	ldr	r3, [pc, #24]	; (800fe08 <prvSwitchTimerLists+0xc4>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	4a04      	ldr	r2, [pc, #16]	; (800fe04 <prvSwitchTimerLists+0xc0>)
 800fdf4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fdf6:	4a04      	ldr	r2, [pc, #16]	; (800fe08 <prvSwitchTimerLists+0xc4>)
 800fdf8:	697b      	ldr	r3, [r7, #20]
 800fdfa:	6013      	str	r3, [r2, #0]
}
 800fdfc:	bf00      	nop
 800fdfe:	3718      	adds	r7, #24
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}
 800fe04:	20001988 	.word	0x20001988
 800fe08:	2000198c 	.word	0x2000198c

0800fe0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b082      	sub	sp, #8
 800fe10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fe12:	f000 f967 	bl	80100e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fe16:	4b15      	ldr	r3, [pc, #84]	; (800fe6c <prvCheckForValidListAndQueue+0x60>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d120      	bne.n	800fe60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fe1e:	4814      	ldr	r0, [pc, #80]	; (800fe70 <prvCheckForValidListAndQueue+0x64>)
 800fe20:	f7fd fbaa 	bl	800d578 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fe24:	4813      	ldr	r0, [pc, #76]	; (800fe74 <prvCheckForValidListAndQueue+0x68>)
 800fe26:	f7fd fba7 	bl	800d578 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fe2a:	4b13      	ldr	r3, [pc, #76]	; (800fe78 <prvCheckForValidListAndQueue+0x6c>)
 800fe2c:	4a10      	ldr	r2, [pc, #64]	; (800fe70 <prvCheckForValidListAndQueue+0x64>)
 800fe2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fe30:	4b12      	ldr	r3, [pc, #72]	; (800fe7c <prvCheckForValidListAndQueue+0x70>)
 800fe32:	4a10      	ldr	r2, [pc, #64]	; (800fe74 <prvCheckForValidListAndQueue+0x68>)
 800fe34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fe36:	2300      	movs	r3, #0
 800fe38:	9300      	str	r3, [sp, #0]
 800fe3a:	4b11      	ldr	r3, [pc, #68]	; (800fe80 <prvCheckForValidListAndQueue+0x74>)
 800fe3c:	4a11      	ldr	r2, [pc, #68]	; (800fe84 <prvCheckForValidListAndQueue+0x78>)
 800fe3e:	2110      	movs	r1, #16
 800fe40:	200a      	movs	r0, #10
 800fe42:	f7fd fcb5 	bl	800d7b0 <xQueueGenericCreateStatic>
 800fe46:	4603      	mov	r3, r0
 800fe48:	4a08      	ldr	r2, [pc, #32]	; (800fe6c <prvCheckForValidListAndQueue+0x60>)
 800fe4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fe4c:	4b07      	ldr	r3, [pc, #28]	; (800fe6c <prvCheckForValidListAndQueue+0x60>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d005      	beq.n	800fe60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fe54:	4b05      	ldr	r3, [pc, #20]	; (800fe6c <prvCheckForValidListAndQueue+0x60>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	490b      	ldr	r1, [pc, #44]	; (800fe88 <prvCheckForValidListAndQueue+0x7c>)
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f7fe fbc6 	bl	800e5ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fe60:	f000 f970 	bl	8010144 <vPortExitCritical>
}
 800fe64:	bf00      	nop
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}
 800fe6a:	bf00      	nop
 800fe6c:	20001990 	.word	0x20001990
 800fe70:	20001960 	.word	0x20001960
 800fe74:	20001974 	.word	0x20001974
 800fe78:	20001988 	.word	0x20001988
 800fe7c:	2000198c 	.word	0x2000198c
 800fe80:	20001a3c 	.word	0x20001a3c
 800fe84:	2000199c 	.word	0x2000199c
 800fe88:	08014534 	.word	0x08014534

0800fe8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fe8c:	b480      	push	{r7}
 800fe8e:	b085      	sub	sp, #20
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	60f8      	str	r0, [r7, #12]
 800fe94:	60b9      	str	r1, [r7, #8]
 800fe96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	3b04      	subs	r3, #4
 800fe9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fea4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	3b04      	subs	r3, #4
 800feaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800feac:	68bb      	ldr	r3, [r7, #8]
 800feae:	f023 0201 	bic.w	r2, r3, #1
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	3b04      	subs	r3, #4
 800feba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800febc:	4a0c      	ldr	r2, [pc, #48]	; (800fef0 <pxPortInitialiseStack+0x64>)
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	3b14      	subs	r3, #20
 800fec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fec8:	687a      	ldr	r2, [r7, #4]
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	3b04      	subs	r3, #4
 800fed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	f06f 0202 	mvn.w	r2, #2
 800feda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	3b20      	subs	r3, #32
 800fee0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fee2:	68fb      	ldr	r3, [r7, #12]
}
 800fee4:	4618      	mov	r0, r3
 800fee6:	3714      	adds	r7, #20
 800fee8:	46bd      	mov	sp, r7
 800feea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feee:	4770      	bx	lr
 800fef0:	0800fef5 	.word	0x0800fef5

0800fef4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fef4:	b480      	push	{r7}
 800fef6:	b085      	sub	sp, #20
 800fef8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fefa:	2300      	movs	r3, #0
 800fefc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fefe:	4b12      	ldr	r3, [pc, #72]	; (800ff48 <prvTaskExitError+0x54>)
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff06:	d00a      	beq.n	800ff1e <prvTaskExitError+0x2a>
	__asm volatile
 800ff08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff0c:	f383 8811 	msr	BASEPRI, r3
 800ff10:	f3bf 8f6f 	isb	sy
 800ff14:	f3bf 8f4f 	dsb	sy
 800ff18:	60fb      	str	r3, [r7, #12]
}
 800ff1a:	bf00      	nop
 800ff1c:	e7fe      	b.n	800ff1c <prvTaskExitError+0x28>
	__asm volatile
 800ff1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff22:	f383 8811 	msr	BASEPRI, r3
 800ff26:	f3bf 8f6f 	isb	sy
 800ff2a:	f3bf 8f4f 	dsb	sy
 800ff2e:	60bb      	str	r3, [r7, #8]
}
 800ff30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ff32:	bf00      	nop
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d0fc      	beq.n	800ff34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ff3a:	bf00      	nop
 800ff3c:	bf00      	nop
 800ff3e:	3714      	adds	r7, #20
 800ff40:	46bd      	mov	sp, r7
 800ff42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff46:	4770      	bx	lr
 800ff48:	2000004c 	.word	0x2000004c
 800ff4c:	00000000 	.word	0x00000000

0800ff50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ff50:	4b07      	ldr	r3, [pc, #28]	; (800ff70 <pxCurrentTCBConst2>)
 800ff52:	6819      	ldr	r1, [r3, #0]
 800ff54:	6808      	ldr	r0, [r1, #0]
 800ff56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff5a:	f380 8809 	msr	PSP, r0
 800ff5e:	f3bf 8f6f 	isb	sy
 800ff62:	f04f 0000 	mov.w	r0, #0
 800ff66:	f380 8811 	msr	BASEPRI, r0
 800ff6a:	4770      	bx	lr
 800ff6c:	f3af 8000 	nop.w

0800ff70 <pxCurrentTCBConst2>:
 800ff70:	20001460 	.word	0x20001460
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ff74:	bf00      	nop
 800ff76:	bf00      	nop

0800ff78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ff78:	4808      	ldr	r0, [pc, #32]	; (800ff9c <prvPortStartFirstTask+0x24>)
 800ff7a:	6800      	ldr	r0, [r0, #0]
 800ff7c:	6800      	ldr	r0, [r0, #0]
 800ff7e:	f380 8808 	msr	MSP, r0
 800ff82:	f04f 0000 	mov.w	r0, #0
 800ff86:	f380 8814 	msr	CONTROL, r0
 800ff8a:	b662      	cpsie	i
 800ff8c:	b661      	cpsie	f
 800ff8e:	f3bf 8f4f 	dsb	sy
 800ff92:	f3bf 8f6f 	isb	sy
 800ff96:	df00      	svc	0
 800ff98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ff9a:	bf00      	nop
 800ff9c:	e000ed08 	.word	0xe000ed08

0800ffa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b086      	sub	sp, #24
 800ffa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ffa6:	4b46      	ldr	r3, [pc, #280]	; (80100c0 <xPortStartScheduler+0x120>)
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	4a46      	ldr	r2, [pc, #280]	; (80100c4 <xPortStartScheduler+0x124>)
 800ffac:	4293      	cmp	r3, r2
 800ffae:	d10a      	bne.n	800ffc6 <xPortStartScheduler+0x26>
	__asm volatile
 800ffb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffb4:	f383 8811 	msr	BASEPRI, r3
 800ffb8:	f3bf 8f6f 	isb	sy
 800ffbc:	f3bf 8f4f 	dsb	sy
 800ffc0:	613b      	str	r3, [r7, #16]
}
 800ffc2:	bf00      	nop
 800ffc4:	e7fe      	b.n	800ffc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ffc6:	4b3e      	ldr	r3, [pc, #248]	; (80100c0 <xPortStartScheduler+0x120>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	4a3f      	ldr	r2, [pc, #252]	; (80100c8 <xPortStartScheduler+0x128>)
 800ffcc:	4293      	cmp	r3, r2
 800ffce:	d10a      	bne.n	800ffe6 <xPortStartScheduler+0x46>
	__asm volatile
 800ffd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffd4:	f383 8811 	msr	BASEPRI, r3
 800ffd8:	f3bf 8f6f 	isb	sy
 800ffdc:	f3bf 8f4f 	dsb	sy
 800ffe0:	60fb      	str	r3, [r7, #12]
}
 800ffe2:	bf00      	nop
 800ffe4:	e7fe      	b.n	800ffe4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ffe6:	4b39      	ldr	r3, [pc, #228]	; (80100cc <xPortStartScheduler+0x12c>)
 800ffe8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ffea:	697b      	ldr	r3, [r7, #20]
 800ffec:	781b      	ldrb	r3, [r3, #0]
 800ffee:	b2db      	uxtb	r3, r3
 800fff0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fff2:	697b      	ldr	r3, [r7, #20]
 800fff4:	22ff      	movs	r2, #255	; 0xff
 800fff6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fff8:	697b      	ldr	r3, [r7, #20]
 800fffa:	781b      	ldrb	r3, [r3, #0]
 800fffc:	b2db      	uxtb	r3, r3
 800fffe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010000:	78fb      	ldrb	r3, [r7, #3]
 8010002:	b2db      	uxtb	r3, r3
 8010004:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010008:	b2da      	uxtb	r2, r3
 801000a:	4b31      	ldr	r3, [pc, #196]	; (80100d0 <xPortStartScheduler+0x130>)
 801000c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801000e:	4b31      	ldr	r3, [pc, #196]	; (80100d4 <xPortStartScheduler+0x134>)
 8010010:	2207      	movs	r2, #7
 8010012:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010014:	e009      	b.n	801002a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010016:	4b2f      	ldr	r3, [pc, #188]	; (80100d4 <xPortStartScheduler+0x134>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	3b01      	subs	r3, #1
 801001c:	4a2d      	ldr	r2, [pc, #180]	; (80100d4 <xPortStartScheduler+0x134>)
 801001e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010020:	78fb      	ldrb	r3, [r7, #3]
 8010022:	b2db      	uxtb	r3, r3
 8010024:	005b      	lsls	r3, r3, #1
 8010026:	b2db      	uxtb	r3, r3
 8010028:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801002a:	78fb      	ldrb	r3, [r7, #3]
 801002c:	b2db      	uxtb	r3, r3
 801002e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010032:	2b80      	cmp	r3, #128	; 0x80
 8010034:	d0ef      	beq.n	8010016 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010036:	4b27      	ldr	r3, [pc, #156]	; (80100d4 <xPortStartScheduler+0x134>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	f1c3 0307 	rsb	r3, r3, #7
 801003e:	2b04      	cmp	r3, #4
 8010040:	d00a      	beq.n	8010058 <xPortStartScheduler+0xb8>
	__asm volatile
 8010042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010046:	f383 8811 	msr	BASEPRI, r3
 801004a:	f3bf 8f6f 	isb	sy
 801004e:	f3bf 8f4f 	dsb	sy
 8010052:	60bb      	str	r3, [r7, #8]
}
 8010054:	bf00      	nop
 8010056:	e7fe      	b.n	8010056 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010058:	4b1e      	ldr	r3, [pc, #120]	; (80100d4 <xPortStartScheduler+0x134>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	021b      	lsls	r3, r3, #8
 801005e:	4a1d      	ldr	r2, [pc, #116]	; (80100d4 <xPortStartScheduler+0x134>)
 8010060:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010062:	4b1c      	ldr	r3, [pc, #112]	; (80100d4 <xPortStartScheduler+0x134>)
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801006a:	4a1a      	ldr	r2, [pc, #104]	; (80100d4 <xPortStartScheduler+0x134>)
 801006c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	b2da      	uxtb	r2, r3
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010076:	4b18      	ldr	r3, [pc, #96]	; (80100d8 <xPortStartScheduler+0x138>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	4a17      	ldr	r2, [pc, #92]	; (80100d8 <xPortStartScheduler+0x138>)
 801007c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010080:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010082:	4b15      	ldr	r3, [pc, #84]	; (80100d8 <xPortStartScheduler+0x138>)
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	4a14      	ldr	r2, [pc, #80]	; (80100d8 <xPortStartScheduler+0x138>)
 8010088:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801008c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801008e:	f000 f8dd 	bl	801024c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010092:	4b12      	ldr	r3, [pc, #72]	; (80100dc <xPortStartScheduler+0x13c>)
 8010094:	2200      	movs	r2, #0
 8010096:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010098:	f000 f8fc 	bl	8010294 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801009c:	4b10      	ldr	r3, [pc, #64]	; (80100e0 <xPortStartScheduler+0x140>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	4a0f      	ldr	r2, [pc, #60]	; (80100e0 <xPortStartScheduler+0x140>)
 80100a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80100a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80100a8:	f7ff ff66 	bl	800ff78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80100ac:	f7fe ff56 	bl	800ef5c <vTaskSwitchContext>
	prvTaskExitError();
 80100b0:	f7ff ff20 	bl	800fef4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80100b4:	2300      	movs	r3, #0
}
 80100b6:	4618      	mov	r0, r3
 80100b8:	3718      	adds	r7, #24
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bd80      	pop	{r7, pc}
 80100be:	bf00      	nop
 80100c0:	e000ed00 	.word	0xe000ed00
 80100c4:	410fc271 	.word	0x410fc271
 80100c8:	410fc270 	.word	0x410fc270
 80100cc:	e000e400 	.word	0xe000e400
 80100d0:	20001a8c 	.word	0x20001a8c
 80100d4:	20001a90 	.word	0x20001a90
 80100d8:	e000ed20 	.word	0xe000ed20
 80100dc:	2000004c 	.word	0x2000004c
 80100e0:	e000ef34 	.word	0xe000ef34

080100e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80100e4:	b480      	push	{r7}
 80100e6:	b083      	sub	sp, #12
 80100e8:	af00      	add	r7, sp, #0
	__asm volatile
 80100ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ee:	f383 8811 	msr	BASEPRI, r3
 80100f2:	f3bf 8f6f 	isb	sy
 80100f6:	f3bf 8f4f 	dsb	sy
 80100fa:	607b      	str	r3, [r7, #4]
}
 80100fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80100fe:	4b0f      	ldr	r3, [pc, #60]	; (801013c <vPortEnterCritical+0x58>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	3301      	adds	r3, #1
 8010104:	4a0d      	ldr	r2, [pc, #52]	; (801013c <vPortEnterCritical+0x58>)
 8010106:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010108:	4b0c      	ldr	r3, [pc, #48]	; (801013c <vPortEnterCritical+0x58>)
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	2b01      	cmp	r3, #1
 801010e:	d10f      	bne.n	8010130 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010110:	4b0b      	ldr	r3, [pc, #44]	; (8010140 <vPortEnterCritical+0x5c>)
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	b2db      	uxtb	r3, r3
 8010116:	2b00      	cmp	r3, #0
 8010118:	d00a      	beq.n	8010130 <vPortEnterCritical+0x4c>
	__asm volatile
 801011a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801011e:	f383 8811 	msr	BASEPRI, r3
 8010122:	f3bf 8f6f 	isb	sy
 8010126:	f3bf 8f4f 	dsb	sy
 801012a:	603b      	str	r3, [r7, #0]
}
 801012c:	bf00      	nop
 801012e:	e7fe      	b.n	801012e <vPortEnterCritical+0x4a>
	}
}
 8010130:	bf00      	nop
 8010132:	370c      	adds	r7, #12
 8010134:	46bd      	mov	sp, r7
 8010136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013a:	4770      	bx	lr
 801013c:	2000004c 	.word	0x2000004c
 8010140:	e000ed04 	.word	0xe000ed04

08010144 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010144:	b480      	push	{r7}
 8010146:	b083      	sub	sp, #12
 8010148:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801014a:	4b12      	ldr	r3, [pc, #72]	; (8010194 <vPortExitCritical+0x50>)
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d10a      	bne.n	8010168 <vPortExitCritical+0x24>
	__asm volatile
 8010152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010156:	f383 8811 	msr	BASEPRI, r3
 801015a:	f3bf 8f6f 	isb	sy
 801015e:	f3bf 8f4f 	dsb	sy
 8010162:	607b      	str	r3, [r7, #4]
}
 8010164:	bf00      	nop
 8010166:	e7fe      	b.n	8010166 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010168:	4b0a      	ldr	r3, [pc, #40]	; (8010194 <vPortExitCritical+0x50>)
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	3b01      	subs	r3, #1
 801016e:	4a09      	ldr	r2, [pc, #36]	; (8010194 <vPortExitCritical+0x50>)
 8010170:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010172:	4b08      	ldr	r3, [pc, #32]	; (8010194 <vPortExitCritical+0x50>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d105      	bne.n	8010186 <vPortExitCritical+0x42>
 801017a:	2300      	movs	r3, #0
 801017c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	f383 8811 	msr	BASEPRI, r3
}
 8010184:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010186:	bf00      	nop
 8010188:	370c      	adds	r7, #12
 801018a:	46bd      	mov	sp, r7
 801018c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010190:	4770      	bx	lr
 8010192:	bf00      	nop
 8010194:	2000004c 	.word	0x2000004c
	...

080101a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80101a0:	f3ef 8009 	mrs	r0, PSP
 80101a4:	f3bf 8f6f 	isb	sy
 80101a8:	4b15      	ldr	r3, [pc, #84]	; (8010200 <pxCurrentTCBConst>)
 80101aa:	681a      	ldr	r2, [r3, #0]
 80101ac:	f01e 0f10 	tst.w	lr, #16
 80101b0:	bf08      	it	eq
 80101b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80101b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101ba:	6010      	str	r0, [r2, #0]
 80101bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80101c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80101c4:	f380 8811 	msr	BASEPRI, r0
 80101c8:	f3bf 8f4f 	dsb	sy
 80101cc:	f3bf 8f6f 	isb	sy
 80101d0:	f7fe fec4 	bl	800ef5c <vTaskSwitchContext>
 80101d4:	f04f 0000 	mov.w	r0, #0
 80101d8:	f380 8811 	msr	BASEPRI, r0
 80101dc:	bc09      	pop	{r0, r3}
 80101de:	6819      	ldr	r1, [r3, #0]
 80101e0:	6808      	ldr	r0, [r1, #0]
 80101e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101e6:	f01e 0f10 	tst.w	lr, #16
 80101ea:	bf08      	it	eq
 80101ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80101f0:	f380 8809 	msr	PSP, r0
 80101f4:	f3bf 8f6f 	isb	sy
 80101f8:	4770      	bx	lr
 80101fa:	bf00      	nop
 80101fc:	f3af 8000 	nop.w

08010200 <pxCurrentTCBConst>:
 8010200:	20001460 	.word	0x20001460
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010204:	bf00      	nop
 8010206:	bf00      	nop

08010208 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b082      	sub	sp, #8
 801020c:	af00      	add	r7, sp, #0
	__asm volatile
 801020e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010212:	f383 8811 	msr	BASEPRI, r3
 8010216:	f3bf 8f6f 	isb	sy
 801021a:	f3bf 8f4f 	dsb	sy
 801021e:	607b      	str	r3, [r7, #4]
}
 8010220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010222:	f7fe fde1 	bl	800ede8 <xTaskIncrementTick>
 8010226:	4603      	mov	r3, r0
 8010228:	2b00      	cmp	r3, #0
 801022a:	d003      	beq.n	8010234 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801022c:	4b06      	ldr	r3, [pc, #24]	; (8010248 <xPortSysTickHandler+0x40>)
 801022e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010232:	601a      	str	r2, [r3, #0]
 8010234:	2300      	movs	r3, #0
 8010236:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	f383 8811 	msr	BASEPRI, r3
}
 801023e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010240:	bf00      	nop
 8010242:	3708      	adds	r7, #8
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}
 8010248:	e000ed04 	.word	0xe000ed04

0801024c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801024c:	b480      	push	{r7}
 801024e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010250:	4b0b      	ldr	r3, [pc, #44]	; (8010280 <vPortSetupTimerInterrupt+0x34>)
 8010252:	2200      	movs	r2, #0
 8010254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010256:	4b0b      	ldr	r3, [pc, #44]	; (8010284 <vPortSetupTimerInterrupt+0x38>)
 8010258:	2200      	movs	r2, #0
 801025a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801025c:	4b0a      	ldr	r3, [pc, #40]	; (8010288 <vPortSetupTimerInterrupt+0x3c>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	4a0a      	ldr	r2, [pc, #40]	; (801028c <vPortSetupTimerInterrupt+0x40>)
 8010262:	fba2 2303 	umull	r2, r3, r2, r3
 8010266:	099b      	lsrs	r3, r3, #6
 8010268:	4a09      	ldr	r2, [pc, #36]	; (8010290 <vPortSetupTimerInterrupt+0x44>)
 801026a:	3b01      	subs	r3, #1
 801026c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801026e:	4b04      	ldr	r3, [pc, #16]	; (8010280 <vPortSetupTimerInterrupt+0x34>)
 8010270:	2207      	movs	r2, #7
 8010272:	601a      	str	r2, [r3, #0]
}
 8010274:	bf00      	nop
 8010276:	46bd      	mov	sp, r7
 8010278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027c:	4770      	bx	lr
 801027e:	bf00      	nop
 8010280:	e000e010 	.word	0xe000e010
 8010284:	e000e018 	.word	0xe000e018
 8010288:	20000008 	.word	0x20000008
 801028c:	10624dd3 	.word	0x10624dd3
 8010290:	e000e014 	.word	0xe000e014

08010294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010294:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80102a4 <vPortEnableVFP+0x10>
 8010298:	6801      	ldr	r1, [r0, #0]
 801029a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801029e:	6001      	str	r1, [r0, #0]
 80102a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80102a2:	bf00      	nop
 80102a4:	e000ed88 	.word	0xe000ed88

080102a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80102a8:	b480      	push	{r7}
 80102aa:	b085      	sub	sp, #20
 80102ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80102ae:	f3ef 8305 	mrs	r3, IPSR
 80102b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	2b0f      	cmp	r3, #15
 80102b8:	d914      	bls.n	80102e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80102ba:	4a17      	ldr	r2, [pc, #92]	; (8010318 <vPortValidateInterruptPriority+0x70>)
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	4413      	add	r3, r2
 80102c0:	781b      	ldrb	r3, [r3, #0]
 80102c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80102c4:	4b15      	ldr	r3, [pc, #84]	; (801031c <vPortValidateInterruptPriority+0x74>)
 80102c6:	781b      	ldrb	r3, [r3, #0]
 80102c8:	7afa      	ldrb	r2, [r7, #11]
 80102ca:	429a      	cmp	r2, r3
 80102cc:	d20a      	bcs.n	80102e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80102ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d2:	f383 8811 	msr	BASEPRI, r3
 80102d6:	f3bf 8f6f 	isb	sy
 80102da:	f3bf 8f4f 	dsb	sy
 80102de:	607b      	str	r3, [r7, #4]
}
 80102e0:	bf00      	nop
 80102e2:	e7fe      	b.n	80102e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80102e4:	4b0e      	ldr	r3, [pc, #56]	; (8010320 <vPortValidateInterruptPriority+0x78>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80102ec:	4b0d      	ldr	r3, [pc, #52]	; (8010324 <vPortValidateInterruptPriority+0x7c>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	429a      	cmp	r2, r3
 80102f2:	d90a      	bls.n	801030a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80102f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102f8:	f383 8811 	msr	BASEPRI, r3
 80102fc:	f3bf 8f6f 	isb	sy
 8010300:	f3bf 8f4f 	dsb	sy
 8010304:	603b      	str	r3, [r7, #0]
}
 8010306:	bf00      	nop
 8010308:	e7fe      	b.n	8010308 <vPortValidateInterruptPriority+0x60>
	}
 801030a:	bf00      	nop
 801030c:	3714      	adds	r7, #20
 801030e:	46bd      	mov	sp, r7
 8010310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010314:	4770      	bx	lr
 8010316:	bf00      	nop
 8010318:	e000e3f0 	.word	0xe000e3f0
 801031c:	20001a8c 	.word	0x20001a8c
 8010320:	e000ed0c 	.word	0xe000ed0c
 8010324:	20001a90 	.word	0x20001a90

08010328 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b08a      	sub	sp, #40	; 0x28
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010330:	2300      	movs	r3, #0
 8010332:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010334:	f7fe fc9c 	bl	800ec70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010338:	4b5b      	ldr	r3, [pc, #364]	; (80104a8 <pvPortMalloc+0x180>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d101      	bne.n	8010344 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010340:	f000 f920 	bl	8010584 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010344:	4b59      	ldr	r3, [pc, #356]	; (80104ac <pvPortMalloc+0x184>)
 8010346:	681a      	ldr	r2, [r3, #0]
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	4013      	ands	r3, r2
 801034c:	2b00      	cmp	r3, #0
 801034e:	f040 8093 	bne.w	8010478 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d01d      	beq.n	8010394 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010358:	2208      	movs	r2, #8
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	4413      	add	r3, r2
 801035e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	f003 0307 	and.w	r3, r3, #7
 8010366:	2b00      	cmp	r3, #0
 8010368:	d014      	beq.n	8010394 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	f023 0307 	bic.w	r3, r3, #7
 8010370:	3308      	adds	r3, #8
 8010372:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f003 0307 	and.w	r3, r3, #7
 801037a:	2b00      	cmp	r3, #0
 801037c:	d00a      	beq.n	8010394 <pvPortMalloc+0x6c>
	__asm volatile
 801037e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010382:	f383 8811 	msr	BASEPRI, r3
 8010386:	f3bf 8f6f 	isb	sy
 801038a:	f3bf 8f4f 	dsb	sy
 801038e:	617b      	str	r3, [r7, #20]
}
 8010390:	bf00      	nop
 8010392:	e7fe      	b.n	8010392 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d06e      	beq.n	8010478 <pvPortMalloc+0x150>
 801039a:	4b45      	ldr	r3, [pc, #276]	; (80104b0 <pvPortMalloc+0x188>)
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	687a      	ldr	r2, [r7, #4]
 80103a0:	429a      	cmp	r2, r3
 80103a2:	d869      	bhi.n	8010478 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80103a4:	4b43      	ldr	r3, [pc, #268]	; (80104b4 <pvPortMalloc+0x18c>)
 80103a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80103a8:	4b42      	ldr	r3, [pc, #264]	; (80104b4 <pvPortMalloc+0x18c>)
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80103ae:	e004      	b.n	80103ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80103b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80103b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80103ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103bc:	685b      	ldr	r3, [r3, #4]
 80103be:	687a      	ldr	r2, [r7, #4]
 80103c0:	429a      	cmp	r2, r3
 80103c2:	d903      	bls.n	80103cc <pvPortMalloc+0xa4>
 80103c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d1f1      	bne.n	80103b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80103cc:	4b36      	ldr	r3, [pc, #216]	; (80104a8 <pvPortMalloc+0x180>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103d2:	429a      	cmp	r2, r3
 80103d4:	d050      	beq.n	8010478 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80103d6:	6a3b      	ldr	r3, [r7, #32]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	2208      	movs	r2, #8
 80103dc:	4413      	add	r3, r2
 80103de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80103e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103e2:	681a      	ldr	r2, [r3, #0]
 80103e4:	6a3b      	ldr	r3, [r7, #32]
 80103e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80103e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ea:	685a      	ldr	r2, [r3, #4]
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	1ad2      	subs	r2, r2, r3
 80103f0:	2308      	movs	r3, #8
 80103f2:	005b      	lsls	r3, r3, #1
 80103f4:	429a      	cmp	r2, r3
 80103f6:	d91f      	bls.n	8010438 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80103f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	4413      	add	r3, r2
 80103fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010400:	69bb      	ldr	r3, [r7, #24]
 8010402:	f003 0307 	and.w	r3, r3, #7
 8010406:	2b00      	cmp	r3, #0
 8010408:	d00a      	beq.n	8010420 <pvPortMalloc+0xf8>
	__asm volatile
 801040a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801040e:	f383 8811 	msr	BASEPRI, r3
 8010412:	f3bf 8f6f 	isb	sy
 8010416:	f3bf 8f4f 	dsb	sy
 801041a:	613b      	str	r3, [r7, #16]
}
 801041c:	bf00      	nop
 801041e:	e7fe      	b.n	801041e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010422:	685a      	ldr	r2, [r3, #4]
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	1ad2      	subs	r2, r2, r3
 8010428:	69bb      	ldr	r3, [r7, #24]
 801042a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801042c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801042e:	687a      	ldr	r2, [r7, #4]
 8010430:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010432:	69b8      	ldr	r0, [r7, #24]
 8010434:	f000 f908 	bl	8010648 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010438:	4b1d      	ldr	r3, [pc, #116]	; (80104b0 <pvPortMalloc+0x188>)
 801043a:	681a      	ldr	r2, [r3, #0]
 801043c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801043e:	685b      	ldr	r3, [r3, #4]
 8010440:	1ad3      	subs	r3, r2, r3
 8010442:	4a1b      	ldr	r2, [pc, #108]	; (80104b0 <pvPortMalloc+0x188>)
 8010444:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010446:	4b1a      	ldr	r3, [pc, #104]	; (80104b0 <pvPortMalloc+0x188>)
 8010448:	681a      	ldr	r2, [r3, #0]
 801044a:	4b1b      	ldr	r3, [pc, #108]	; (80104b8 <pvPortMalloc+0x190>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	429a      	cmp	r2, r3
 8010450:	d203      	bcs.n	801045a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010452:	4b17      	ldr	r3, [pc, #92]	; (80104b0 <pvPortMalloc+0x188>)
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	4a18      	ldr	r2, [pc, #96]	; (80104b8 <pvPortMalloc+0x190>)
 8010458:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801045a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801045c:	685a      	ldr	r2, [r3, #4]
 801045e:	4b13      	ldr	r3, [pc, #76]	; (80104ac <pvPortMalloc+0x184>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	431a      	orrs	r2, r3
 8010464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010466:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801046a:	2200      	movs	r2, #0
 801046c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801046e:	4b13      	ldr	r3, [pc, #76]	; (80104bc <pvPortMalloc+0x194>)
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	3301      	adds	r3, #1
 8010474:	4a11      	ldr	r2, [pc, #68]	; (80104bc <pvPortMalloc+0x194>)
 8010476:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010478:	f7fe fc08 	bl	800ec8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801047c:	69fb      	ldr	r3, [r7, #28]
 801047e:	f003 0307 	and.w	r3, r3, #7
 8010482:	2b00      	cmp	r3, #0
 8010484:	d00a      	beq.n	801049c <pvPortMalloc+0x174>
	__asm volatile
 8010486:	f04f 0350 	mov.w	r3, #80	; 0x50
 801048a:	f383 8811 	msr	BASEPRI, r3
 801048e:	f3bf 8f6f 	isb	sy
 8010492:	f3bf 8f4f 	dsb	sy
 8010496:	60fb      	str	r3, [r7, #12]
}
 8010498:	bf00      	nop
 801049a:	e7fe      	b.n	801049a <pvPortMalloc+0x172>
	return pvReturn;
 801049c:	69fb      	ldr	r3, [r7, #28]
}
 801049e:	4618      	mov	r0, r3
 80104a0:	3728      	adds	r7, #40	; 0x28
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}
 80104a6:	bf00      	nop
 80104a8:	2000320c 	.word	0x2000320c
 80104ac:	20003220 	.word	0x20003220
 80104b0:	20003210 	.word	0x20003210
 80104b4:	20003204 	.word	0x20003204
 80104b8:	20003214 	.word	0x20003214
 80104bc:	20003218 	.word	0x20003218

080104c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b086      	sub	sp, #24
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d04d      	beq.n	801056e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80104d2:	2308      	movs	r3, #8
 80104d4:	425b      	negs	r3, r3
 80104d6:	697a      	ldr	r2, [r7, #20]
 80104d8:	4413      	add	r3, r2
 80104da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80104dc:	697b      	ldr	r3, [r7, #20]
 80104de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80104e0:	693b      	ldr	r3, [r7, #16]
 80104e2:	685a      	ldr	r2, [r3, #4]
 80104e4:	4b24      	ldr	r3, [pc, #144]	; (8010578 <vPortFree+0xb8>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	4013      	ands	r3, r2
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d10a      	bne.n	8010504 <vPortFree+0x44>
	__asm volatile
 80104ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104f2:	f383 8811 	msr	BASEPRI, r3
 80104f6:	f3bf 8f6f 	isb	sy
 80104fa:	f3bf 8f4f 	dsb	sy
 80104fe:	60fb      	str	r3, [r7, #12]
}
 8010500:	bf00      	nop
 8010502:	e7fe      	b.n	8010502 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d00a      	beq.n	8010522 <vPortFree+0x62>
	__asm volatile
 801050c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010510:	f383 8811 	msr	BASEPRI, r3
 8010514:	f3bf 8f6f 	isb	sy
 8010518:	f3bf 8f4f 	dsb	sy
 801051c:	60bb      	str	r3, [r7, #8]
}
 801051e:	bf00      	nop
 8010520:	e7fe      	b.n	8010520 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	685a      	ldr	r2, [r3, #4]
 8010526:	4b14      	ldr	r3, [pc, #80]	; (8010578 <vPortFree+0xb8>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	4013      	ands	r3, r2
 801052c:	2b00      	cmp	r3, #0
 801052e:	d01e      	beq.n	801056e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010530:	693b      	ldr	r3, [r7, #16]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d11a      	bne.n	801056e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010538:	693b      	ldr	r3, [r7, #16]
 801053a:	685a      	ldr	r2, [r3, #4]
 801053c:	4b0e      	ldr	r3, [pc, #56]	; (8010578 <vPortFree+0xb8>)
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	43db      	mvns	r3, r3
 8010542:	401a      	ands	r2, r3
 8010544:	693b      	ldr	r3, [r7, #16]
 8010546:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010548:	f7fe fb92 	bl	800ec70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801054c:	693b      	ldr	r3, [r7, #16]
 801054e:	685a      	ldr	r2, [r3, #4]
 8010550:	4b0a      	ldr	r3, [pc, #40]	; (801057c <vPortFree+0xbc>)
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	4413      	add	r3, r2
 8010556:	4a09      	ldr	r2, [pc, #36]	; (801057c <vPortFree+0xbc>)
 8010558:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801055a:	6938      	ldr	r0, [r7, #16]
 801055c:	f000 f874 	bl	8010648 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010560:	4b07      	ldr	r3, [pc, #28]	; (8010580 <vPortFree+0xc0>)
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	3301      	adds	r3, #1
 8010566:	4a06      	ldr	r2, [pc, #24]	; (8010580 <vPortFree+0xc0>)
 8010568:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801056a:	f7fe fb8f 	bl	800ec8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801056e:	bf00      	nop
 8010570:	3718      	adds	r7, #24
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}
 8010576:	bf00      	nop
 8010578:	20003220 	.word	0x20003220
 801057c:	20003210 	.word	0x20003210
 8010580:	2000321c 	.word	0x2000321c

08010584 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010584:	b480      	push	{r7}
 8010586:	b085      	sub	sp, #20
 8010588:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801058a:	f241 7370 	movw	r3, #6000	; 0x1770
 801058e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010590:	4b27      	ldr	r3, [pc, #156]	; (8010630 <prvHeapInit+0xac>)
 8010592:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	f003 0307 	and.w	r3, r3, #7
 801059a:	2b00      	cmp	r3, #0
 801059c:	d00c      	beq.n	80105b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	3307      	adds	r3, #7
 80105a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	f023 0307 	bic.w	r3, r3, #7
 80105aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80105ac:	68ba      	ldr	r2, [r7, #8]
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	1ad3      	subs	r3, r2, r3
 80105b2:	4a1f      	ldr	r2, [pc, #124]	; (8010630 <prvHeapInit+0xac>)
 80105b4:	4413      	add	r3, r2
 80105b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80105bc:	4a1d      	ldr	r2, [pc, #116]	; (8010634 <prvHeapInit+0xb0>)
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80105c2:	4b1c      	ldr	r3, [pc, #112]	; (8010634 <prvHeapInit+0xb0>)
 80105c4:	2200      	movs	r2, #0
 80105c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	68ba      	ldr	r2, [r7, #8]
 80105cc:	4413      	add	r3, r2
 80105ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80105d0:	2208      	movs	r2, #8
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	1a9b      	subs	r3, r3, r2
 80105d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	f023 0307 	bic.w	r3, r3, #7
 80105de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	4a15      	ldr	r2, [pc, #84]	; (8010638 <prvHeapInit+0xb4>)
 80105e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80105e6:	4b14      	ldr	r3, [pc, #80]	; (8010638 <prvHeapInit+0xb4>)
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	2200      	movs	r2, #0
 80105ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80105ee:	4b12      	ldr	r3, [pc, #72]	; (8010638 <prvHeapInit+0xb4>)
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	2200      	movs	r2, #0
 80105f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	68fa      	ldr	r2, [r7, #12]
 80105fe:	1ad2      	subs	r2, r2, r3
 8010600:	683b      	ldr	r3, [r7, #0]
 8010602:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010604:	4b0c      	ldr	r3, [pc, #48]	; (8010638 <prvHeapInit+0xb4>)
 8010606:	681a      	ldr	r2, [r3, #0]
 8010608:	683b      	ldr	r3, [r7, #0]
 801060a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	685b      	ldr	r3, [r3, #4]
 8010610:	4a0a      	ldr	r2, [pc, #40]	; (801063c <prvHeapInit+0xb8>)
 8010612:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010614:	683b      	ldr	r3, [r7, #0]
 8010616:	685b      	ldr	r3, [r3, #4]
 8010618:	4a09      	ldr	r2, [pc, #36]	; (8010640 <prvHeapInit+0xbc>)
 801061a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801061c:	4b09      	ldr	r3, [pc, #36]	; (8010644 <prvHeapInit+0xc0>)
 801061e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010622:	601a      	str	r2, [r3, #0]
}
 8010624:	bf00      	nop
 8010626:	3714      	adds	r7, #20
 8010628:	46bd      	mov	sp, r7
 801062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062e:	4770      	bx	lr
 8010630:	20001a94 	.word	0x20001a94
 8010634:	20003204 	.word	0x20003204
 8010638:	2000320c 	.word	0x2000320c
 801063c:	20003214 	.word	0x20003214
 8010640:	20003210 	.word	0x20003210
 8010644:	20003220 	.word	0x20003220

08010648 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010648:	b480      	push	{r7}
 801064a:	b085      	sub	sp, #20
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010650:	4b28      	ldr	r3, [pc, #160]	; (80106f4 <prvInsertBlockIntoFreeList+0xac>)
 8010652:	60fb      	str	r3, [r7, #12]
 8010654:	e002      	b.n	801065c <prvInsertBlockIntoFreeList+0x14>
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	60fb      	str	r3, [r7, #12]
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	687a      	ldr	r2, [r7, #4]
 8010662:	429a      	cmp	r2, r3
 8010664:	d8f7      	bhi.n	8010656 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	685b      	ldr	r3, [r3, #4]
 801066e:	68ba      	ldr	r2, [r7, #8]
 8010670:	4413      	add	r3, r2
 8010672:	687a      	ldr	r2, [r7, #4]
 8010674:	429a      	cmp	r2, r3
 8010676:	d108      	bne.n	801068a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	685a      	ldr	r2, [r3, #4]
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	685b      	ldr	r3, [r3, #4]
 8010680:	441a      	add	r2, r3
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	685b      	ldr	r3, [r3, #4]
 8010692:	68ba      	ldr	r2, [r7, #8]
 8010694:	441a      	add	r2, r3
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	429a      	cmp	r2, r3
 801069c:	d118      	bne.n	80106d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	681a      	ldr	r2, [r3, #0]
 80106a2:	4b15      	ldr	r3, [pc, #84]	; (80106f8 <prvInsertBlockIntoFreeList+0xb0>)
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	429a      	cmp	r2, r3
 80106a8:	d00d      	beq.n	80106c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	685a      	ldr	r2, [r3, #4]
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	685b      	ldr	r3, [r3, #4]
 80106b4:	441a      	add	r2, r3
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	681a      	ldr	r2, [r3, #0]
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	601a      	str	r2, [r3, #0]
 80106c4:	e008      	b.n	80106d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80106c6:	4b0c      	ldr	r3, [pc, #48]	; (80106f8 <prvInsertBlockIntoFreeList+0xb0>)
 80106c8:	681a      	ldr	r2, [r3, #0]
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	601a      	str	r2, [r3, #0]
 80106ce:	e003      	b.n	80106d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	681a      	ldr	r2, [r3, #0]
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80106d8:	68fa      	ldr	r2, [r7, #12]
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	429a      	cmp	r2, r3
 80106de:	d002      	beq.n	80106e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	687a      	ldr	r2, [r7, #4]
 80106e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80106e6:	bf00      	nop
 80106e8:	3714      	adds	r7, #20
 80106ea:	46bd      	mov	sp, r7
 80106ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f0:	4770      	bx	lr
 80106f2:	bf00      	nop
 80106f4:	20003204 	.word	0x20003204
 80106f8:	2000320c 	.word	0x2000320c

080106fc <_ZdlPvj>:
 80106fc:	f000 b814 	b.w	8010728 <_ZdlPv>

08010700 <_Znwj>:
 8010700:	2801      	cmp	r0, #1
 8010702:	bf38      	it	cc
 8010704:	2001      	movcc	r0, #1
 8010706:	b510      	push	{r4, lr}
 8010708:	4604      	mov	r4, r0
 801070a:	4620      	mov	r0, r4
 801070c:	f000 f85e 	bl	80107cc <malloc>
 8010710:	b930      	cbnz	r0, 8010720 <_Znwj+0x20>
 8010712:	f000 f81d 	bl	8010750 <_ZSt15get_new_handlerv>
 8010716:	b908      	cbnz	r0, 801071c <_Znwj+0x1c>
 8010718:	f000 f822 	bl	8010760 <abort>
 801071c:	4780      	blx	r0
 801071e:	e7f4      	b.n	801070a <_Znwj+0xa>
 8010720:	bd10      	pop	{r4, pc}

08010722 <__cxa_pure_virtual>:
 8010722:	b508      	push	{r3, lr}
 8010724:	f000 f80e 	bl	8010744 <_ZSt9terminatev>

08010728 <_ZdlPv>:
 8010728:	f000 b858 	b.w	80107dc <free>

0801072c <_ZN10__cxxabiv111__terminateEPFvvE>:
 801072c:	b508      	push	{r3, lr}
 801072e:	4780      	blx	r0
 8010730:	f000 f816 	bl	8010760 <abort>

08010734 <_ZSt13get_terminatev>:
 8010734:	4b02      	ldr	r3, [pc, #8]	; (8010740 <_ZSt13get_terminatev+0xc>)
 8010736:	6818      	ldr	r0, [r3, #0]
 8010738:	f3bf 8f5b 	dmb	ish
 801073c:	4770      	bx	lr
 801073e:	bf00      	nop
 8010740:	20000050 	.word	0x20000050

08010744 <_ZSt9terminatev>:
 8010744:	b508      	push	{r3, lr}
 8010746:	f7ff fff5 	bl	8010734 <_ZSt13get_terminatev>
 801074a:	f7ff ffef 	bl	801072c <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08010750 <_ZSt15get_new_handlerv>:
 8010750:	4b02      	ldr	r3, [pc, #8]	; (801075c <_ZSt15get_new_handlerv+0xc>)
 8010752:	6818      	ldr	r0, [r3, #0]
 8010754:	f3bf 8f5b 	dmb	ish
 8010758:	4770      	bx	lr
 801075a:	bf00      	nop
 801075c:	20003224 	.word	0x20003224

08010760 <abort>:
 8010760:	b508      	push	{r3, lr}
 8010762:	2006      	movs	r0, #6
 8010764:	f000 fe68 	bl	8011438 <raise>
 8010768:	2001      	movs	r0, #1
 801076a:	f7f3 f825 	bl	80037b8 <_exit>

0801076e <atoi>:
 801076e:	220a      	movs	r2, #10
 8010770:	2100      	movs	r1, #0
 8010772:	f000 bff7 	b.w	8011764 <strtol>
	...

08010778 <__errno>:
 8010778:	4b01      	ldr	r3, [pc, #4]	; (8010780 <__errno+0x8>)
 801077a:	6818      	ldr	r0, [r3, #0]
 801077c:	4770      	bx	lr
 801077e:	bf00      	nop
 8010780:	20000054 	.word	0x20000054

08010784 <__libc_init_array>:
 8010784:	b570      	push	{r4, r5, r6, lr}
 8010786:	4d0d      	ldr	r5, [pc, #52]	; (80107bc <__libc_init_array+0x38>)
 8010788:	4c0d      	ldr	r4, [pc, #52]	; (80107c0 <__libc_init_array+0x3c>)
 801078a:	1b64      	subs	r4, r4, r5
 801078c:	10a4      	asrs	r4, r4, #2
 801078e:	2600      	movs	r6, #0
 8010790:	42a6      	cmp	r6, r4
 8010792:	d109      	bne.n	80107a8 <__libc_init_array+0x24>
 8010794:	4d0b      	ldr	r5, [pc, #44]	; (80107c4 <__libc_init_array+0x40>)
 8010796:	4c0c      	ldr	r4, [pc, #48]	; (80107c8 <__libc_init_array+0x44>)
 8010798:	f003 fcbc 	bl	8014114 <_init>
 801079c:	1b64      	subs	r4, r4, r5
 801079e:	10a4      	asrs	r4, r4, #2
 80107a0:	2600      	movs	r6, #0
 80107a2:	42a6      	cmp	r6, r4
 80107a4:	d105      	bne.n	80107b2 <__libc_init_array+0x2e>
 80107a6:	bd70      	pop	{r4, r5, r6, pc}
 80107a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80107ac:	4798      	blx	r3
 80107ae:	3601      	adds	r6, #1
 80107b0:	e7ee      	b.n	8010790 <__libc_init_array+0xc>
 80107b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80107b6:	4798      	blx	r3
 80107b8:	3601      	adds	r6, #1
 80107ba:	e7f2      	b.n	80107a2 <__libc_init_array+0x1e>
 80107bc:	08014c8c 	.word	0x08014c8c
 80107c0:	08014c8c 	.word	0x08014c8c
 80107c4:	08014c8c 	.word	0x08014c8c
 80107c8:	08014c98 	.word	0x08014c98

080107cc <malloc>:
 80107cc:	4b02      	ldr	r3, [pc, #8]	; (80107d8 <malloc+0xc>)
 80107ce:	4601      	mov	r1, r0
 80107d0:	6818      	ldr	r0, [r3, #0]
 80107d2:	f000 b88d 	b.w	80108f0 <_malloc_r>
 80107d6:	bf00      	nop
 80107d8:	20000054 	.word	0x20000054

080107dc <free>:
 80107dc:	4b02      	ldr	r3, [pc, #8]	; (80107e8 <free+0xc>)
 80107de:	4601      	mov	r1, r0
 80107e0:	6818      	ldr	r0, [r3, #0]
 80107e2:	f000 b819 	b.w	8010818 <_free_r>
 80107e6:	bf00      	nop
 80107e8:	20000054 	.word	0x20000054

080107ec <memcpy>:
 80107ec:	440a      	add	r2, r1
 80107ee:	4291      	cmp	r1, r2
 80107f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80107f4:	d100      	bne.n	80107f8 <memcpy+0xc>
 80107f6:	4770      	bx	lr
 80107f8:	b510      	push	{r4, lr}
 80107fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80107fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010802:	4291      	cmp	r1, r2
 8010804:	d1f9      	bne.n	80107fa <memcpy+0xe>
 8010806:	bd10      	pop	{r4, pc}

08010808 <memset>:
 8010808:	4402      	add	r2, r0
 801080a:	4603      	mov	r3, r0
 801080c:	4293      	cmp	r3, r2
 801080e:	d100      	bne.n	8010812 <memset+0xa>
 8010810:	4770      	bx	lr
 8010812:	f803 1b01 	strb.w	r1, [r3], #1
 8010816:	e7f9      	b.n	801080c <memset+0x4>

08010818 <_free_r>:
 8010818:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801081a:	2900      	cmp	r1, #0
 801081c:	d044      	beq.n	80108a8 <_free_r+0x90>
 801081e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010822:	9001      	str	r0, [sp, #4]
 8010824:	2b00      	cmp	r3, #0
 8010826:	f1a1 0404 	sub.w	r4, r1, #4
 801082a:	bfb8      	it	lt
 801082c:	18e4      	addlt	r4, r4, r3
 801082e:	f002 f967 	bl	8012b00 <__malloc_lock>
 8010832:	4a1e      	ldr	r2, [pc, #120]	; (80108ac <_free_r+0x94>)
 8010834:	9801      	ldr	r0, [sp, #4]
 8010836:	6813      	ldr	r3, [r2, #0]
 8010838:	b933      	cbnz	r3, 8010848 <_free_r+0x30>
 801083a:	6063      	str	r3, [r4, #4]
 801083c:	6014      	str	r4, [r2, #0]
 801083e:	b003      	add	sp, #12
 8010840:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010844:	f002 b962 	b.w	8012b0c <__malloc_unlock>
 8010848:	42a3      	cmp	r3, r4
 801084a:	d908      	bls.n	801085e <_free_r+0x46>
 801084c:	6825      	ldr	r5, [r4, #0]
 801084e:	1961      	adds	r1, r4, r5
 8010850:	428b      	cmp	r3, r1
 8010852:	bf01      	itttt	eq
 8010854:	6819      	ldreq	r1, [r3, #0]
 8010856:	685b      	ldreq	r3, [r3, #4]
 8010858:	1949      	addeq	r1, r1, r5
 801085a:	6021      	streq	r1, [r4, #0]
 801085c:	e7ed      	b.n	801083a <_free_r+0x22>
 801085e:	461a      	mov	r2, r3
 8010860:	685b      	ldr	r3, [r3, #4]
 8010862:	b10b      	cbz	r3, 8010868 <_free_r+0x50>
 8010864:	42a3      	cmp	r3, r4
 8010866:	d9fa      	bls.n	801085e <_free_r+0x46>
 8010868:	6811      	ldr	r1, [r2, #0]
 801086a:	1855      	adds	r5, r2, r1
 801086c:	42a5      	cmp	r5, r4
 801086e:	d10b      	bne.n	8010888 <_free_r+0x70>
 8010870:	6824      	ldr	r4, [r4, #0]
 8010872:	4421      	add	r1, r4
 8010874:	1854      	adds	r4, r2, r1
 8010876:	42a3      	cmp	r3, r4
 8010878:	6011      	str	r1, [r2, #0]
 801087a:	d1e0      	bne.n	801083e <_free_r+0x26>
 801087c:	681c      	ldr	r4, [r3, #0]
 801087e:	685b      	ldr	r3, [r3, #4]
 8010880:	6053      	str	r3, [r2, #4]
 8010882:	4421      	add	r1, r4
 8010884:	6011      	str	r1, [r2, #0]
 8010886:	e7da      	b.n	801083e <_free_r+0x26>
 8010888:	d902      	bls.n	8010890 <_free_r+0x78>
 801088a:	230c      	movs	r3, #12
 801088c:	6003      	str	r3, [r0, #0]
 801088e:	e7d6      	b.n	801083e <_free_r+0x26>
 8010890:	6825      	ldr	r5, [r4, #0]
 8010892:	1961      	adds	r1, r4, r5
 8010894:	428b      	cmp	r3, r1
 8010896:	bf04      	itt	eq
 8010898:	6819      	ldreq	r1, [r3, #0]
 801089a:	685b      	ldreq	r3, [r3, #4]
 801089c:	6063      	str	r3, [r4, #4]
 801089e:	bf04      	itt	eq
 80108a0:	1949      	addeq	r1, r1, r5
 80108a2:	6021      	streq	r1, [r4, #0]
 80108a4:	6054      	str	r4, [r2, #4]
 80108a6:	e7ca      	b.n	801083e <_free_r+0x26>
 80108a8:	b003      	add	sp, #12
 80108aa:	bd30      	pop	{r4, r5, pc}
 80108ac:	20003228 	.word	0x20003228

080108b0 <sbrk_aligned>:
 80108b0:	b570      	push	{r4, r5, r6, lr}
 80108b2:	4e0e      	ldr	r6, [pc, #56]	; (80108ec <sbrk_aligned+0x3c>)
 80108b4:	460c      	mov	r4, r1
 80108b6:	6831      	ldr	r1, [r6, #0]
 80108b8:	4605      	mov	r5, r0
 80108ba:	b911      	cbnz	r1, 80108c2 <sbrk_aligned+0x12>
 80108bc:	f000 fd84 	bl	80113c8 <_sbrk_r>
 80108c0:	6030      	str	r0, [r6, #0]
 80108c2:	4621      	mov	r1, r4
 80108c4:	4628      	mov	r0, r5
 80108c6:	f000 fd7f 	bl	80113c8 <_sbrk_r>
 80108ca:	1c43      	adds	r3, r0, #1
 80108cc:	d00a      	beq.n	80108e4 <sbrk_aligned+0x34>
 80108ce:	1cc4      	adds	r4, r0, #3
 80108d0:	f024 0403 	bic.w	r4, r4, #3
 80108d4:	42a0      	cmp	r0, r4
 80108d6:	d007      	beq.n	80108e8 <sbrk_aligned+0x38>
 80108d8:	1a21      	subs	r1, r4, r0
 80108da:	4628      	mov	r0, r5
 80108dc:	f000 fd74 	bl	80113c8 <_sbrk_r>
 80108e0:	3001      	adds	r0, #1
 80108e2:	d101      	bne.n	80108e8 <sbrk_aligned+0x38>
 80108e4:	f04f 34ff 	mov.w	r4, #4294967295
 80108e8:	4620      	mov	r0, r4
 80108ea:	bd70      	pop	{r4, r5, r6, pc}
 80108ec:	2000322c 	.word	0x2000322c

080108f0 <_malloc_r>:
 80108f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108f4:	1ccd      	adds	r5, r1, #3
 80108f6:	f025 0503 	bic.w	r5, r5, #3
 80108fa:	3508      	adds	r5, #8
 80108fc:	2d0c      	cmp	r5, #12
 80108fe:	bf38      	it	cc
 8010900:	250c      	movcc	r5, #12
 8010902:	2d00      	cmp	r5, #0
 8010904:	4607      	mov	r7, r0
 8010906:	db01      	blt.n	801090c <_malloc_r+0x1c>
 8010908:	42a9      	cmp	r1, r5
 801090a:	d905      	bls.n	8010918 <_malloc_r+0x28>
 801090c:	230c      	movs	r3, #12
 801090e:	603b      	str	r3, [r7, #0]
 8010910:	2600      	movs	r6, #0
 8010912:	4630      	mov	r0, r6
 8010914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010918:	4e2e      	ldr	r6, [pc, #184]	; (80109d4 <_malloc_r+0xe4>)
 801091a:	f002 f8f1 	bl	8012b00 <__malloc_lock>
 801091e:	6833      	ldr	r3, [r6, #0]
 8010920:	461c      	mov	r4, r3
 8010922:	bb34      	cbnz	r4, 8010972 <_malloc_r+0x82>
 8010924:	4629      	mov	r1, r5
 8010926:	4638      	mov	r0, r7
 8010928:	f7ff ffc2 	bl	80108b0 <sbrk_aligned>
 801092c:	1c43      	adds	r3, r0, #1
 801092e:	4604      	mov	r4, r0
 8010930:	d14d      	bne.n	80109ce <_malloc_r+0xde>
 8010932:	6834      	ldr	r4, [r6, #0]
 8010934:	4626      	mov	r6, r4
 8010936:	2e00      	cmp	r6, #0
 8010938:	d140      	bne.n	80109bc <_malloc_r+0xcc>
 801093a:	6823      	ldr	r3, [r4, #0]
 801093c:	4631      	mov	r1, r6
 801093e:	4638      	mov	r0, r7
 8010940:	eb04 0803 	add.w	r8, r4, r3
 8010944:	f000 fd40 	bl	80113c8 <_sbrk_r>
 8010948:	4580      	cmp	r8, r0
 801094a:	d13a      	bne.n	80109c2 <_malloc_r+0xd2>
 801094c:	6821      	ldr	r1, [r4, #0]
 801094e:	3503      	adds	r5, #3
 8010950:	1a6d      	subs	r5, r5, r1
 8010952:	f025 0503 	bic.w	r5, r5, #3
 8010956:	3508      	adds	r5, #8
 8010958:	2d0c      	cmp	r5, #12
 801095a:	bf38      	it	cc
 801095c:	250c      	movcc	r5, #12
 801095e:	4629      	mov	r1, r5
 8010960:	4638      	mov	r0, r7
 8010962:	f7ff ffa5 	bl	80108b0 <sbrk_aligned>
 8010966:	3001      	adds	r0, #1
 8010968:	d02b      	beq.n	80109c2 <_malloc_r+0xd2>
 801096a:	6823      	ldr	r3, [r4, #0]
 801096c:	442b      	add	r3, r5
 801096e:	6023      	str	r3, [r4, #0]
 8010970:	e00e      	b.n	8010990 <_malloc_r+0xa0>
 8010972:	6822      	ldr	r2, [r4, #0]
 8010974:	1b52      	subs	r2, r2, r5
 8010976:	d41e      	bmi.n	80109b6 <_malloc_r+0xc6>
 8010978:	2a0b      	cmp	r2, #11
 801097a:	d916      	bls.n	80109aa <_malloc_r+0xba>
 801097c:	1961      	adds	r1, r4, r5
 801097e:	42a3      	cmp	r3, r4
 8010980:	6025      	str	r5, [r4, #0]
 8010982:	bf18      	it	ne
 8010984:	6059      	strne	r1, [r3, #4]
 8010986:	6863      	ldr	r3, [r4, #4]
 8010988:	bf08      	it	eq
 801098a:	6031      	streq	r1, [r6, #0]
 801098c:	5162      	str	r2, [r4, r5]
 801098e:	604b      	str	r3, [r1, #4]
 8010990:	4638      	mov	r0, r7
 8010992:	f104 060b 	add.w	r6, r4, #11
 8010996:	f002 f8b9 	bl	8012b0c <__malloc_unlock>
 801099a:	f026 0607 	bic.w	r6, r6, #7
 801099e:	1d23      	adds	r3, r4, #4
 80109a0:	1af2      	subs	r2, r6, r3
 80109a2:	d0b6      	beq.n	8010912 <_malloc_r+0x22>
 80109a4:	1b9b      	subs	r3, r3, r6
 80109a6:	50a3      	str	r3, [r4, r2]
 80109a8:	e7b3      	b.n	8010912 <_malloc_r+0x22>
 80109aa:	6862      	ldr	r2, [r4, #4]
 80109ac:	42a3      	cmp	r3, r4
 80109ae:	bf0c      	ite	eq
 80109b0:	6032      	streq	r2, [r6, #0]
 80109b2:	605a      	strne	r2, [r3, #4]
 80109b4:	e7ec      	b.n	8010990 <_malloc_r+0xa0>
 80109b6:	4623      	mov	r3, r4
 80109b8:	6864      	ldr	r4, [r4, #4]
 80109ba:	e7b2      	b.n	8010922 <_malloc_r+0x32>
 80109bc:	4634      	mov	r4, r6
 80109be:	6876      	ldr	r6, [r6, #4]
 80109c0:	e7b9      	b.n	8010936 <_malloc_r+0x46>
 80109c2:	230c      	movs	r3, #12
 80109c4:	603b      	str	r3, [r7, #0]
 80109c6:	4638      	mov	r0, r7
 80109c8:	f002 f8a0 	bl	8012b0c <__malloc_unlock>
 80109cc:	e7a1      	b.n	8010912 <_malloc_r+0x22>
 80109ce:	6025      	str	r5, [r4, #0]
 80109d0:	e7de      	b.n	8010990 <_malloc_r+0xa0>
 80109d2:	bf00      	nop
 80109d4:	20003228 	.word	0x20003228

080109d8 <__cvt>:
 80109d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80109dc:	ec55 4b10 	vmov	r4, r5, d0
 80109e0:	2d00      	cmp	r5, #0
 80109e2:	460e      	mov	r6, r1
 80109e4:	4619      	mov	r1, r3
 80109e6:	462b      	mov	r3, r5
 80109e8:	bfbb      	ittet	lt
 80109ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80109ee:	461d      	movlt	r5, r3
 80109f0:	2300      	movge	r3, #0
 80109f2:	232d      	movlt	r3, #45	; 0x2d
 80109f4:	700b      	strb	r3, [r1, #0]
 80109f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80109fc:	4691      	mov	r9, r2
 80109fe:	f023 0820 	bic.w	r8, r3, #32
 8010a02:	bfbc      	itt	lt
 8010a04:	4622      	movlt	r2, r4
 8010a06:	4614      	movlt	r4, r2
 8010a08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010a0c:	d005      	beq.n	8010a1a <__cvt+0x42>
 8010a0e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010a12:	d100      	bne.n	8010a16 <__cvt+0x3e>
 8010a14:	3601      	adds	r6, #1
 8010a16:	2102      	movs	r1, #2
 8010a18:	e000      	b.n	8010a1c <__cvt+0x44>
 8010a1a:	2103      	movs	r1, #3
 8010a1c:	ab03      	add	r3, sp, #12
 8010a1e:	9301      	str	r3, [sp, #4]
 8010a20:	ab02      	add	r3, sp, #8
 8010a22:	9300      	str	r3, [sp, #0]
 8010a24:	ec45 4b10 	vmov	d0, r4, r5
 8010a28:	4653      	mov	r3, sl
 8010a2a:	4632      	mov	r2, r6
 8010a2c:	f001 f830 	bl	8011a90 <_dtoa_r>
 8010a30:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010a34:	4607      	mov	r7, r0
 8010a36:	d102      	bne.n	8010a3e <__cvt+0x66>
 8010a38:	f019 0f01 	tst.w	r9, #1
 8010a3c:	d022      	beq.n	8010a84 <__cvt+0xac>
 8010a3e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010a42:	eb07 0906 	add.w	r9, r7, r6
 8010a46:	d110      	bne.n	8010a6a <__cvt+0x92>
 8010a48:	783b      	ldrb	r3, [r7, #0]
 8010a4a:	2b30      	cmp	r3, #48	; 0x30
 8010a4c:	d10a      	bne.n	8010a64 <__cvt+0x8c>
 8010a4e:	2200      	movs	r2, #0
 8010a50:	2300      	movs	r3, #0
 8010a52:	4620      	mov	r0, r4
 8010a54:	4629      	mov	r1, r5
 8010a56:	f7f0 f847 	bl	8000ae8 <__aeabi_dcmpeq>
 8010a5a:	b918      	cbnz	r0, 8010a64 <__cvt+0x8c>
 8010a5c:	f1c6 0601 	rsb	r6, r6, #1
 8010a60:	f8ca 6000 	str.w	r6, [sl]
 8010a64:	f8da 3000 	ldr.w	r3, [sl]
 8010a68:	4499      	add	r9, r3
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	4620      	mov	r0, r4
 8010a70:	4629      	mov	r1, r5
 8010a72:	f7f0 f839 	bl	8000ae8 <__aeabi_dcmpeq>
 8010a76:	b108      	cbz	r0, 8010a7c <__cvt+0xa4>
 8010a78:	f8cd 900c 	str.w	r9, [sp, #12]
 8010a7c:	2230      	movs	r2, #48	; 0x30
 8010a7e:	9b03      	ldr	r3, [sp, #12]
 8010a80:	454b      	cmp	r3, r9
 8010a82:	d307      	bcc.n	8010a94 <__cvt+0xbc>
 8010a84:	9b03      	ldr	r3, [sp, #12]
 8010a86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010a88:	1bdb      	subs	r3, r3, r7
 8010a8a:	4638      	mov	r0, r7
 8010a8c:	6013      	str	r3, [r2, #0]
 8010a8e:	b004      	add	sp, #16
 8010a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a94:	1c59      	adds	r1, r3, #1
 8010a96:	9103      	str	r1, [sp, #12]
 8010a98:	701a      	strb	r2, [r3, #0]
 8010a9a:	e7f0      	b.n	8010a7e <__cvt+0xa6>

08010a9c <__exponent>:
 8010a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	2900      	cmp	r1, #0
 8010aa2:	bfb8      	it	lt
 8010aa4:	4249      	neglt	r1, r1
 8010aa6:	f803 2b02 	strb.w	r2, [r3], #2
 8010aaa:	bfb4      	ite	lt
 8010aac:	222d      	movlt	r2, #45	; 0x2d
 8010aae:	222b      	movge	r2, #43	; 0x2b
 8010ab0:	2909      	cmp	r1, #9
 8010ab2:	7042      	strb	r2, [r0, #1]
 8010ab4:	dd2a      	ble.n	8010b0c <__exponent+0x70>
 8010ab6:	f10d 0407 	add.w	r4, sp, #7
 8010aba:	46a4      	mov	ip, r4
 8010abc:	270a      	movs	r7, #10
 8010abe:	46a6      	mov	lr, r4
 8010ac0:	460a      	mov	r2, r1
 8010ac2:	fb91 f6f7 	sdiv	r6, r1, r7
 8010ac6:	fb07 1516 	mls	r5, r7, r6, r1
 8010aca:	3530      	adds	r5, #48	; 0x30
 8010acc:	2a63      	cmp	r2, #99	; 0x63
 8010ace:	f104 34ff 	add.w	r4, r4, #4294967295
 8010ad2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010ad6:	4631      	mov	r1, r6
 8010ad8:	dcf1      	bgt.n	8010abe <__exponent+0x22>
 8010ada:	3130      	adds	r1, #48	; 0x30
 8010adc:	f1ae 0502 	sub.w	r5, lr, #2
 8010ae0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010ae4:	1c44      	adds	r4, r0, #1
 8010ae6:	4629      	mov	r1, r5
 8010ae8:	4561      	cmp	r1, ip
 8010aea:	d30a      	bcc.n	8010b02 <__exponent+0x66>
 8010aec:	f10d 0209 	add.w	r2, sp, #9
 8010af0:	eba2 020e 	sub.w	r2, r2, lr
 8010af4:	4565      	cmp	r5, ip
 8010af6:	bf88      	it	hi
 8010af8:	2200      	movhi	r2, #0
 8010afa:	4413      	add	r3, r2
 8010afc:	1a18      	subs	r0, r3, r0
 8010afe:	b003      	add	sp, #12
 8010b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010b06:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010b0a:	e7ed      	b.n	8010ae8 <__exponent+0x4c>
 8010b0c:	2330      	movs	r3, #48	; 0x30
 8010b0e:	3130      	adds	r1, #48	; 0x30
 8010b10:	7083      	strb	r3, [r0, #2]
 8010b12:	70c1      	strb	r1, [r0, #3]
 8010b14:	1d03      	adds	r3, r0, #4
 8010b16:	e7f1      	b.n	8010afc <__exponent+0x60>

08010b18 <_printf_float>:
 8010b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b1c:	ed2d 8b02 	vpush	{d8}
 8010b20:	b08d      	sub	sp, #52	; 0x34
 8010b22:	460c      	mov	r4, r1
 8010b24:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010b28:	4616      	mov	r6, r2
 8010b2a:	461f      	mov	r7, r3
 8010b2c:	4605      	mov	r5, r0
 8010b2e:	f001 ff67 	bl	8012a00 <_localeconv_r>
 8010b32:	f8d0 a000 	ldr.w	sl, [r0]
 8010b36:	4650      	mov	r0, sl
 8010b38:	f7ef fb54 	bl	80001e4 <strlen>
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	930a      	str	r3, [sp, #40]	; 0x28
 8010b40:	6823      	ldr	r3, [r4, #0]
 8010b42:	9305      	str	r3, [sp, #20]
 8010b44:	f8d8 3000 	ldr.w	r3, [r8]
 8010b48:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010b4c:	3307      	adds	r3, #7
 8010b4e:	f023 0307 	bic.w	r3, r3, #7
 8010b52:	f103 0208 	add.w	r2, r3, #8
 8010b56:	f8c8 2000 	str.w	r2, [r8]
 8010b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b5e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010b62:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010b66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010b6a:	9307      	str	r3, [sp, #28]
 8010b6c:	f8cd 8018 	str.w	r8, [sp, #24]
 8010b70:	ee08 0a10 	vmov	s16, r0
 8010b74:	4b9f      	ldr	r3, [pc, #636]	; (8010df4 <_printf_float+0x2dc>)
 8010b76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8010b7e:	f7ef ffe5 	bl	8000b4c <__aeabi_dcmpun>
 8010b82:	bb88      	cbnz	r0, 8010be8 <_printf_float+0xd0>
 8010b84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010b88:	4b9a      	ldr	r3, [pc, #616]	; (8010df4 <_printf_float+0x2dc>)
 8010b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8010b8e:	f7ef ffbf 	bl	8000b10 <__aeabi_dcmple>
 8010b92:	bb48      	cbnz	r0, 8010be8 <_printf_float+0xd0>
 8010b94:	2200      	movs	r2, #0
 8010b96:	2300      	movs	r3, #0
 8010b98:	4640      	mov	r0, r8
 8010b9a:	4649      	mov	r1, r9
 8010b9c:	f7ef ffae 	bl	8000afc <__aeabi_dcmplt>
 8010ba0:	b110      	cbz	r0, 8010ba8 <_printf_float+0x90>
 8010ba2:	232d      	movs	r3, #45	; 0x2d
 8010ba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ba8:	4b93      	ldr	r3, [pc, #588]	; (8010df8 <_printf_float+0x2e0>)
 8010baa:	4894      	ldr	r0, [pc, #592]	; (8010dfc <_printf_float+0x2e4>)
 8010bac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010bb0:	bf94      	ite	ls
 8010bb2:	4698      	movls	r8, r3
 8010bb4:	4680      	movhi	r8, r0
 8010bb6:	2303      	movs	r3, #3
 8010bb8:	6123      	str	r3, [r4, #16]
 8010bba:	9b05      	ldr	r3, [sp, #20]
 8010bbc:	f023 0204 	bic.w	r2, r3, #4
 8010bc0:	6022      	str	r2, [r4, #0]
 8010bc2:	f04f 0900 	mov.w	r9, #0
 8010bc6:	9700      	str	r7, [sp, #0]
 8010bc8:	4633      	mov	r3, r6
 8010bca:	aa0b      	add	r2, sp, #44	; 0x2c
 8010bcc:	4621      	mov	r1, r4
 8010bce:	4628      	mov	r0, r5
 8010bd0:	f000 f9d8 	bl	8010f84 <_printf_common>
 8010bd4:	3001      	adds	r0, #1
 8010bd6:	f040 8090 	bne.w	8010cfa <_printf_float+0x1e2>
 8010bda:	f04f 30ff 	mov.w	r0, #4294967295
 8010bde:	b00d      	add	sp, #52	; 0x34
 8010be0:	ecbd 8b02 	vpop	{d8}
 8010be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010be8:	4642      	mov	r2, r8
 8010bea:	464b      	mov	r3, r9
 8010bec:	4640      	mov	r0, r8
 8010bee:	4649      	mov	r1, r9
 8010bf0:	f7ef ffac 	bl	8000b4c <__aeabi_dcmpun>
 8010bf4:	b140      	cbz	r0, 8010c08 <_printf_float+0xf0>
 8010bf6:	464b      	mov	r3, r9
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	bfbc      	itt	lt
 8010bfc:	232d      	movlt	r3, #45	; 0x2d
 8010bfe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010c02:	487f      	ldr	r0, [pc, #508]	; (8010e00 <_printf_float+0x2e8>)
 8010c04:	4b7f      	ldr	r3, [pc, #508]	; (8010e04 <_printf_float+0x2ec>)
 8010c06:	e7d1      	b.n	8010bac <_printf_float+0x94>
 8010c08:	6863      	ldr	r3, [r4, #4]
 8010c0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010c0e:	9206      	str	r2, [sp, #24]
 8010c10:	1c5a      	adds	r2, r3, #1
 8010c12:	d13f      	bne.n	8010c94 <_printf_float+0x17c>
 8010c14:	2306      	movs	r3, #6
 8010c16:	6063      	str	r3, [r4, #4]
 8010c18:	9b05      	ldr	r3, [sp, #20]
 8010c1a:	6861      	ldr	r1, [r4, #4]
 8010c1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010c20:	2300      	movs	r3, #0
 8010c22:	9303      	str	r3, [sp, #12]
 8010c24:	ab0a      	add	r3, sp, #40	; 0x28
 8010c26:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010c2a:	ab09      	add	r3, sp, #36	; 0x24
 8010c2c:	ec49 8b10 	vmov	d0, r8, r9
 8010c30:	9300      	str	r3, [sp, #0]
 8010c32:	6022      	str	r2, [r4, #0]
 8010c34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010c38:	4628      	mov	r0, r5
 8010c3a:	f7ff fecd 	bl	80109d8 <__cvt>
 8010c3e:	9b06      	ldr	r3, [sp, #24]
 8010c40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010c42:	2b47      	cmp	r3, #71	; 0x47
 8010c44:	4680      	mov	r8, r0
 8010c46:	d108      	bne.n	8010c5a <_printf_float+0x142>
 8010c48:	1cc8      	adds	r0, r1, #3
 8010c4a:	db02      	blt.n	8010c52 <_printf_float+0x13a>
 8010c4c:	6863      	ldr	r3, [r4, #4]
 8010c4e:	4299      	cmp	r1, r3
 8010c50:	dd41      	ble.n	8010cd6 <_printf_float+0x1be>
 8010c52:	f1ab 0b02 	sub.w	fp, fp, #2
 8010c56:	fa5f fb8b 	uxtb.w	fp, fp
 8010c5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010c5e:	d820      	bhi.n	8010ca2 <_printf_float+0x18a>
 8010c60:	3901      	subs	r1, #1
 8010c62:	465a      	mov	r2, fp
 8010c64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010c68:	9109      	str	r1, [sp, #36]	; 0x24
 8010c6a:	f7ff ff17 	bl	8010a9c <__exponent>
 8010c6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010c70:	1813      	adds	r3, r2, r0
 8010c72:	2a01      	cmp	r2, #1
 8010c74:	4681      	mov	r9, r0
 8010c76:	6123      	str	r3, [r4, #16]
 8010c78:	dc02      	bgt.n	8010c80 <_printf_float+0x168>
 8010c7a:	6822      	ldr	r2, [r4, #0]
 8010c7c:	07d2      	lsls	r2, r2, #31
 8010c7e:	d501      	bpl.n	8010c84 <_printf_float+0x16c>
 8010c80:	3301      	adds	r3, #1
 8010c82:	6123      	str	r3, [r4, #16]
 8010c84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d09c      	beq.n	8010bc6 <_printf_float+0xae>
 8010c8c:	232d      	movs	r3, #45	; 0x2d
 8010c8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c92:	e798      	b.n	8010bc6 <_printf_float+0xae>
 8010c94:	9a06      	ldr	r2, [sp, #24]
 8010c96:	2a47      	cmp	r2, #71	; 0x47
 8010c98:	d1be      	bne.n	8010c18 <_printf_float+0x100>
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d1bc      	bne.n	8010c18 <_printf_float+0x100>
 8010c9e:	2301      	movs	r3, #1
 8010ca0:	e7b9      	b.n	8010c16 <_printf_float+0xfe>
 8010ca2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010ca6:	d118      	bne.n	8010cda <_printf_float+0x1c2>
 8010ca8:	2900      	cmp	r1, #0
 8010caa:	6863      	ldr	r3, [r4, #4]
 8010cac:	dd0b      	ble.n	8010cc6 <_printf_float+0x1ae>
 8010cae:	6121      	str	r1, [r4, #16]
 8010cb0:	b913      	cbnz	r3, 8010cb8 <_printf_float+0x1a0>
 8010cb2:	6822      	ldr	r2, [r4, #0]
 8010cb4:	07d0      	lsls	r0, r2, #31
 8010cb6:	d502      	bpl.n	8010cbe <_printf_float+0x1a6>
 8010cb8:	3301      	adds	r3, #1
 8010cba:	440b      	add	r3, r1
 8010cbc:	6123      	str	r3, [r4, #16]
 8010cbe:	65a1      	str	r1, [r4, #88]	; 0x58
 8010cc0:	f04f 0900 	mov.w	r9, #0
 8010cc4:	e7de      	b.n	8010c84 <_printf_float+0x16c>
 8010cc6:	b913      	cbnz	r3, 8010cce <_printf_float+0x1b6>
 8010cc8:	6822      	ldr	r2, [r4, #0]
 8010cca:	07d2      	lsls	r2, r2, #31
 8010ccc:	d501      	bpl.n	8010cd2 <_printf_float+0x1ba>
 8010cce:	3302      	adds	r3, #2
 8010cd0:	e7f4      	b.n	8010cbc <_printf_float+0x1a4>
 8010cd2:	2301      	movs	r3, #1
 8010cd4:	e7f2      	b.n	8010cbc <_printf_float+0x1a4>
 8010cd6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010cdc:	4299      	cmp	r1, r3
 8010cde:	db05      	blt.n	8010cec <_printf_float+0x1d4>
 8010ce0:	6823      	ldr	r3, [r4, #0]
 8010ce2:	6121      	str	r1, [r4, #16]
 8010ce4:	07d8      	lsls	r0, r3, #31
 8010ce6:	d5ea      	bpl.n	8010cbe <_printf_float+0x1a6>
 8010ce8:	1c4b      	adds	r3, r1, #1
 8010cea:	e7e7      	b.n	8010cbc <_printf_float+0x1a4>
 8010cec:	2900      	cmp	r1, #0
 8010cee:	bfd4      	ite	le
 8010cf0:	f1c1 0202 	rsble	r2, r1, #2
 8010cf4:	2201      	movgt	r2, #1
 8010cf6:	4413      	add	r3, r2
 8010cf8:	e7e0      	b.n	8010cbc <_printf_float+0x1a4>
 8010cfa:	6823      	ldr	r3, [r4, #0]
 8010cfc:	055a      	lsls	r2, r3, #21
 8010cfe:	d407      	bmi.n	8010d10 <_printf_float+0x1f8>
 8010d00:	6923      	ldr	r3, [r4, #16]
 8010d02:	4642      	mov	r2, r8
 8010d04:	4631      	mov	r1, r6
 8010d06:	4628      	mov	r0, r5
 8010d08:	47b8      	blx	r7
 8010d0a:	3001      	adds	r0, #1
 8010d0c:	d12c      	bne.n	8010d68 <_printf_float+0x250>
 8010d0e:	e764      	b.n	8010bda <_printf_float+0xc2>
 8010d10:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010d14:	f240 80e0 	bls.w	8010ed8 <_printf_float+0x3c0>
 8010d18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	2300      	movs	r3, #0
 8010d20:	f7ef fee2 	bl	8000ae8 <__aeabi_dcmpeq>
 8010d24:	2800      	cmp	r0, #0
 8010d26:	d034      	beq.n	8010d92 <_printf_float+0x27a>
 8010d28:	4a37      	ldr	r2, [pc, #220]	; (8010e08 <_printf_float+0x2f0>)
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	4631      	mov	r1, r6
 8010d2e:	4628      	mov	r0, r5
 8010d30:	47b8      	blx	r7
 8010d32:	3001      	adds	r0, #1
 8010d34:	f43f af51 	beq.w	8010bda <_printf_float+0xc2>
 8010d38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010d3c:	429a      	cmp	r2, r3
 8010d3e:	db02      	blt.n	8010d46 <_printf_float+0x22e>
 8010d40:	6823      	ldr	r3, [r4, #0]
 8010d42:	07d8      	lsls	r0, r3, #31
 8010d44:	d510      	bpl.n	8010d68 <_printf_float+0x250>
 8010d46:	ee18 3a10 	vmov	r3, s16
 8010d4a:	4652      	mov	r2, sl
 8010d4c:	4631      	mov	r1, r6
 8010d4e:	4628      	mov	r0, r5
 8010d50:	47b8      	blx	r7
 8010d52:	3001      	adds	r0, #1
 8010d54:	f43f af41 	beq.w	8010bda <_printf_float+0xc2>
 8010d58:	f04f 0800 	mov.w	r8, #0
 8010d5c:	f104 091a 	add.w	r9, r4, #26
 8010d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d62:	3b01      	subs	r3, #1
 8010d64:	4543      	cmp	r3, r8
 8010d66:	dc09      	bgt.n	8010d7c <_printf_float+0x264>
 8010d68:	6823      	ldr	r3, [r4, #0]
 8010d6a:	079b      	lsls	r3, r3, #30
 8010d6c:	f100 8105 	bmi.w	8010f7a <_printf_float+0x462>
 8010d70:	68e0      	ldr	r0, [r4, #12]
 8010d72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d74:	4298      	cmp	r0, r3
 8010d76:	bfb8      	it	lt
 8010d78:	4618      	movlt	r0, r3
 8010d7a:	e730      	b.n	8010bde <_printf_float+0xc6>
 8010d7c:	2301      	movs	r3, #1
 8010d7e:	464a      	mov	r2, r9
 8010d80:	4631      	mov	r1, r6
 8010d82:	4628      	mov	r0, r5
 8010d84:	47b8      	blx	r7
 8010d86:	3001      	adds	r0, #1
 8010d88:	f43f af27 	beq.w	8010bda <_printf_float+0xc2>
 8010d8c:	f108 0801 	add.w	r8, r8, #1
 8010d90:	e7e6      	b.n	8010d60 <_printf_float+0x248>
 8010d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	dc39      	bgt.n	8010e0c <_printf_float+0x2f4>
 8010d98:	4a1b      	ldr	r2, [pc, #108]	; (8010e08 <_printf_float+0x2f0>)
 8010d9a:	2301      	movs	r3, #1
 8010d9c:	4631      	mov	r1, r6
 8010d9e:	4628      	mov	r0, r5
 8010da0:	47b8      	blx	r7
 8010da2:	3001      	adds	r0, #1
 8010da4:	f43f af19 	beq.w	8010bda <_printf_float+0xc2>
 8010da8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010dac:	4313      	orrs	r3, r2
 8010dae:	d102      	bne.n	8010db6 <_printf_float+0x29e>
 8010db0:	6823      	ldr	r3, [r4, #0]
 8010db2:	07d9      	lsls	r1, r3, #31
 8010db4:	d5d8      	bpl.n	8010d68 <_printf_float+0x250>
 8010db6:	ee18 3a10 	vmov	r3, s16
 8010dba:	4652      	mov	r2, sl
 8010dbc:	4631      	mov	r1, r6
 8010dbe:	4628      	mov	r0, r5
 8010dc0:	47b8      	blx	r7
 8010dc2:	3001      	adds	r0, #1
 8010dc4:	f43f af09 	beq.w	8010bda <_printf_float+0xc2>
 8010dc8:	f04f 0900 	mov.w	r9, #0
 8010dcc:	f104 0a1a 	add.w	sl, r4, #26
 8010dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dd2:	425b      	negs	r3, r3
 8010dd4:	454b      	cmp	r3, r9
 8010dd6:	dc01      	bgt.n	8010ddc <_printf_float+0x2c4>
 8010dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010dda:	e792      	b.n	8010d02 <_printf_float+0x1ea>
 8010ddc:	2301      	movs	r3, #1
 8010dde:	4652      	mov	r2, sl
 8010de0:	4631      	mov	r1, r6
 8010de2:	4628      	mov	r0, r5
 8010de4:	47b8      	blx	r7
 8010de6:	3001      	adds	r0, #1
 8010de8:	f43f aef7 	beq.w	8010bda <_printf_float+0xc2>
 8010dec:	f109 0901 	add.w	r9, r9, #1
 8010df0:	e7ee      	b.n	8010dd0 <_printf_float+0x2b8>
 8010df2:	bf00      	nop
 8010df4:	7fefffff 	.word	0x7fefffff
 8010df8:	08014838 	.word	0x08014838
 8010dfc:	0801483c 	.word	0x0801483c
 8010e00:	08014844 	.word	0x08014844
 8010e04:	08014840 	.word	0x08014840
 8010e08:	08014c61 	.word	0x08014c61
 8010e0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010e10:	429a      	cmp	r2, r3
 8010e12:	bfa8      	it	ge
 8010e14:	461a      	movge	r2, r3
 8010e16:	2a00      	cmp	r2, #0
 8010e18:	4691      	mov	r9, r2
 8010e1a:	dc37      	bgt.n	8010e8c <_printf_float+0x374>
 8010e1c:	f04f 0b00 	mov.w	fp, #0
 8010e20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010e24:	f104 021a 	add.w	r2, r4, #26
 8010e28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010e2a:	9305      	str	r3, [sp, #20]
 8010e2c:	eba3 0309 	sub.w	r3, r3, r9
 8010e30:	455b      	cmp	r3, fp
 8010e32:	dc33      	bgt.n	8010e9c <_printf_float+0x384>
 8010e34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010e38:	429a      	cmp	r2, r3
 8010e3a:	db3b      	blt.n	8010eb4 <_printf_float+0x39c>
 8010e3c:	6823      	ldr	r3, [r4, #0]
 8010e3e:	07da      	lsls	r2, r3, #31
 8010e40:	d438      	bmi.n	8010eb4 <_printf_float+0x39c>
 8010e42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e44:	9a05      	ldr	r2, [sp, #20]
 8010e46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010e48:	1a9a      	subs	r2, r3, r2
 8010e4a:	eba3 0901 	sub.w	r9, r3, r1
 8010e4e:	4591      	cmp	r9, r2
 8010e50:	bfa8      	it	ge
 8010e52:	4691      	movge	r9, r2
 8010e54:	f1b9 0f00 	cmp.w	r9, #0
 8010e58:	dc35      	bgt.n	8010ec6 <_printf_float+0x3ae>
 8010e5a:	f04f 0800 	mov.w	r8, #0
 8010e5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010e62:	f104 0a1a 	add.w	sl, r4, #26
 8010e66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010e6a:	1a9b      	subs	r3, r3, r2
 8010e6c:	eba3 0309 	sub.w	r3, r3, r9
 8010e70:	4543      	cmp	r3, r8
 8010e72:	f77f af79 	ble.w	8010d68 <_printf_float+0x250>
 8010e76:	2301      	movs	r3, #1
 8010e78:	4652      	mov	r2, sl
 8010e7a:	4631      	mov	r1, r6
 8010e7c:	4628      	mov	r0, r5
 8010e7e:	47b8      	blx	r7
 8010e80:	3001      	adds	r0, #1
 8010e82:	f43f aeaa 	beq.w	8010bda <_printf_float+0xc2>
 8010e86:	f108 0801 	add.w	r8, r8, #1
 8010e8a:	e7ec      	b.n	8010e66 <_printf_float+0x34e>
 8010e8c:	4613      	mov	r3, r2
 8010e8e:	4631      	mov	r1, r6
 8010e90:	4642      	mov	r2, r8
 8010e92:	4628      	mov	r0, r5
 8010e94:	47b8      	blx	r7
 8010e96:	3001      	adds	r0, #1
 8010e98:	d1c0      	bne.n	8010e1c <_printf_float+0x304>
 8010e9a:	e69e      	b.n	8010bda <_printf_float+0xc2>
 8010e9c:	2301      	movs	r3, #1
 8010e9e:	4631      	mov	r1, r6
 8010ea0:	4628      	mov	r0, r5
 8010ea2:	9205      	str	r2, [sp, #20]
 8010ea4:	47b8      	blx	r7
 8010ea6:	3001      	adds	r0, #1
 8010ea8:	f43f ae97 	beq.w	8010bda <_printf_float+0xc2>
 8010eac:	9a05      	ldr	r2, [sp, #20]
 8010eae:	f10b 0b01 	add.w	fp, fp, #1
 8010eb2:	e7b9      	b.n	8010e28 <_printf_float+0x310>
 8010eb4:	ee18 3a10 	vmov	r3, s16
 8010eb8:	4652      	mov	r2, sl
 8010eba:	4631      	mov	r1, r6
 8010ebc:	4628      	mov	r0, r5
 8010ebe:	47b8      	blx	r7
 8010ec0:	3001      	adds	r0, #1
 8010ec2:	d1be      	bne.n	8010e42 <_printf_float+0x32a>
 8010ec4:	e689      	b.n	8010bda <_printf_float+0xc2>
 8010ec6:	9a05      	ldr	r2, [sp, #20]
 8010ec8:	464b      	mov	r3, r9
 8010eca:	4442      	add	r2, r8
 8010ecc:	4631      	mov	r1, r6
 8010ece:	4628      	mov	r0, r5
 8010ed0:	47b8      	blx	r7
 8010ed2:	3001      	adds	r0, #1
 8010ed4:	d1c1      	bne.n	8010e5a <_printf_float+0x342>
 8010ed6:	e680      	b.n	8010bda <_printf_float+0xc2>
 8010ed8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010eda:	2a01      	cmp	r2, #1
 8010edc:	dc01      	bgt.n	8010ee2 <_printf_float+0x3ca>
 8010ede:	07db      	lsls	r3, r3, #31
 8010ee0:	d538      	bpl.n	8010f54 <_printf_float+0x43c>
 8010ee2:	2301      	movs	r3, #1
 8010ee4:	4642      	mov	r2, r8
 8010ee6:	4631      	mov	r1, r6
 8010ee8:	4628      	mov	r0, r5
 8010eea:	47b8      	blx	r7
 8010eec:	3001      	adds	r0, #1
 8010eee:	f43f ae74 	beq.w	8010bda <_printf_float+0xc2>
 8010ef2:	ee18 3a10 	vmov	r3, s16
 8010ef6:	4652      	mov	r2, sl
 8010ef8:	4631      	mov	r1, r6
 8010efa:	4628      	mov	r0, r5
 8010efc:	47b8      	blx	r7
 8010efe:	3001      	adds	r0, #1
 8010f00:	f43f ae6b 	beq.w	8010bda <_printf_float+0xc2>
 8010f04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010f08:	2200      	movs	r2, #0
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	f7ef fdec 	bl	8000ae8 <__aeabi_dcmpeq>
 8010f10:	b9d8      	cbnz	r0, 8010f4a <_printf_float+0x432>
 8010f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f14:	f108 0201 	add.w	r2, r8, #1
 8010f18:	3b01      	subs	r3, #1
 8010f1a:	4631      	mov	r1, r6
 8010f1c:	4628      	mov	r0, r5
 8010f1e:	47b8      	blx	r7
 8010f20:	3001      	adds	r0, #1
 8010f22:	d10e      	bne.n	8010f42 <_printf_float+0x42a>
 8010f24:	e659      	b.n	8010bda <_printf_float+0xc2>
 8010f26:	2301      	movs	r3, #1
 8010f28:	4652      	mov	r2, sl
 8010f2a:	4631      	mov	r1, r6
 8010f2c:	4628      	mov	r0, r5
 8010f2e:	47b8      	blx	r7
 8010f30:	3001      	adds	r0, #1
 8010f32:	f43f ae52 	beq.w	8010bda <_printf_float+0xc2>
 8010f36:	f108 0801 	add.w	r8, r8, #1
 8010f3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f3c:	3b01      	subs	r3, #1
 8010f3e:	4543      	cmp	r3, r8
 8010f40:	dcf1      	bgt.n	8010f26 <_printf_float+0x40e>
 8010f42:	464b      	mov	r3, r9
 8010f44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010f48:	e6dc      	b.n	8010d04 <_printf_float+0x1ec>
 8010f4a:	f04f 0800 	mov.w	r8, #0
 8010f4e:	f104 0a1a 	add.w	sl, r4, #26
 8010f52:	e7f2      	b.n	8010f3a <_printf_float+0x422>
 8010f54:	2301      	movs	r3, #1
 8010f56:	4642      	mov	r2, r8
 8010f58:	e7df      	b.n	8010f1a <_printf_float+0x402>
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	464a      	mov	r2, r9
 8010f5e:	4631      	mov	r1, r6
 8010f60:	4628      	mov	r0, r5
 8010f62:	47b8      	blx	r7
 8010f64:	3001      	adds	r0, #1
 8010f66:	f43f ae38 	beq.w	8010bda <_printf_float+0xc2>
 8010f6a:	f108 0801 	add.w	r8, r8, #1
 8010f6e:	68e3      	ldr	r3, [r4, #12]
 8010f70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010f72:	1a5b      	subs	r3, r3, r1
 8010f74:	4543      	cmp	r3, r8
 8010f76:	dcf0      	bgt.n	8010f5a <_printf_float+0x442>
 8010f78:	e6fa      	b.n	8010d70 <_printf_float+0x258>
 8010f7a:	f04f 0800 	mov.w	r8, #0
 8010f7e:	f104 0919 	add.w	r9, r4, #25
 8010f82:	e7f4      	b.n	8010f6e <_printf_float+0x456>

08010f84 <_printf_common>:
 8010f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f88:	4616      	mov	r6, r2
 8010f8a:	4699      	mov	r9, r3
 8010f8c:	688a      	ldr	r2, [r1, #8]
 8010f8e:	690b      	ldr	r3, [r1, #16]
 8010f90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010f94:	4293      	cmp	r3, r2
 8010f96:	bfb8      	it	lt
 8010f98:	4613      	movlt	r3, r2
 8010f9a:	6033      	str	r3, [r6, #0]
 8010f9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010fa0:	4607      	mov	r7, r0
 8010fa2:	460c      	mov	r4, r1
 8010fa4:	b10a      	cbz	r2, 8010faa <_printf_common+0x26>
 8010fa6:	3301      	adds	r3, #1
 8010fa8:	6033      	str	r3, [r6, #0]
 8010faa:	6823      	ldr	r3, [r4, #0]
 8010fac:	0699      	lsls	r1, r3, #26
 8010fae:	bf42      	ittt	mi
 8010fb0:	6833      	ldrmi	r3, [r6, #0]
 8010fb2:	3302      	addmi	r3, #2
 8010fb4:	6033      	strmi	r3, [r6, #0]
 8010fb6:	6825      	ldr	r5, [r4, #0]
 8010fb8:	f015 0506 	ands.w	r5, r5, #6
 8010fbc:	d106      	bne.n	8010fcc <_printf_common+0x48>
 8010fbe:	f104 0a19 	add.w	sl, r4, #25
 8010fc2:	68e3      	ldr	r3, [r4, #12]
 8010fc4:	6832      	ldr	r2, [r6, #0]
 8010fc6:	1a9b      	subs	r3, r3, r2
 8010fc8:	42ab      	cmp	r3, r5
 8010fca:	dc26      	bgt.n	801101a <_printf_common+0x96>
 8010fcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010fd0:	1e13      	subs	r3, r2, #0
 8010fd2:	6822      	ldr	r2, [r4, #0]
 8010fd4:	bf18      	it	ne
 8010fd6:	2301      	movne	r3, #1
 8010fd8:	0692      	lsls	r2, r2, #26
 8010fda:	d42b      	bmi.n	8011034 <_printf_common+0xb0>
 8010fdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010fe0:	4649      	mov	r1, r9
 8010fe2:	4638      	mov	r0, r7
 8010fe4:	47c0      	blx	r8
 8010fe6:	3001      	adds	r0, #1
 8010fe8:	d01e      	beq.n	8011028 <_printf_common+0xa4>
 8010fea:	6823      	ldr	r3, [r4, #0]
 8010fec:	68e5      	ldr	r5, [r4, #12]
 8010fee:	6832      	ldr	r2, [r6, #0]
 8010ff0:	f003 0306 	and.w	r3, r3, #6
 8010ff4:	2b04      	cmp	r3, #4
 8010ff6:	bf08      	it	eq
 8010ff8:	1aad      	subeq	r5, r5, r2
 8010ffa:	68a3      	ldr	r3, [r4, #8]
 8010ffc:	6922      	ldr	r2, [r4, #16]
 8010ffe:	bf0c      	ite	eq
 8011000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011004:	2500      	movne	r5, #0
 8011006:	4293      	cmp	r3, r2
 8011008:	bfc4      	itt	gt
 801100a:	1a9b      	subgt	r3, r3, r2
 801100c:	18ed      	addgt	r5, r5, r3
 801100e:	2600      	movs	r6, #0
 8011010:	341a      	adds	r4, #26
 8011012:	42b5      	cmp	r5, r6
 8011014:	d11a      	bne.n	801104c <_printf_common+0xc8>
 8011016:	2000      	movs	r0, #0
 8011018:	e008      	b.n	801102c <_printf_common+0xa8>
 801101a:	2301      	movs	r3, #1
 801101c:	4652      	mov	r2, sl
 801101e:	4649      	mov	r1, r9
 8011020:	4638      	mov	r0, r7
 8011022:	47c0      	blx	r8
 8011024:	3001      	adds	r0, #1
 8011026:	d103      	bne.n	8011030 <_printf_common+0xac>
 8011028:	f04f 30ff 	mov.w	r0, #4294967295
 801102c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011030:	3501      	adds	r5, #1
 8011032:	e7c6      	b.n	8010fc2 <_printf_common+0x3e>
 8011034:	18e1      	adds	r1, r4, r3
 8011036:	1c5a      	adds	r2, r3, #1
 8011038:	2030      	movs	r0, #48	; 0x30
 801103a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801103e:	4422      	add	r2, r4
 8011040:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011044:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011048:	3302      	adds	r3, #2
 801104a:	e7c7      	b.n	8010fdc <_printf_common+0x58>
 801104c:	2301      	movs	r3, #1
 801104e:	4622      	mov	r2, r4
 8011050:	4649      	mov	r1, r9
 8011052:	4638      	mov	r0, r7
 8011054:	47c0      	blx	r8
 8011056:	3001      	adds	r0, #1
 8011058:	d0e6      	beq.n	8011028 <_printf_common+0xa4>
 801105a:	3601      	adds	r6, #1
 801105c:	e7d9      	b.n	8011012 <_printf_common+0x8e>
	...

08011060 <_printf_i>:
 8011060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011064:	7e0f      	ldrb	r7, [r1, #24]
 8011066:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011068:	2f78      	cmp	r7, #120	; 0x78
 801106a:	4691      	mov	r9, r2
 801106c:	4680      	mov	r8, r0
 801106e:	460c      	mov	r4, r1
 8011070:	469a      	mov	sl, r3
 8011072:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011076:	d807      	bhi.n	8011088 <_printf_i+0x28>
 8011078:	2f62      	cmp	r7, #98	; 0x62
 801107a:	d80a      	bhi.n	8011092 <_printf_i+0x32>
 801107c:	2f00      	cmp	r7, #0
 801107e:	f000 80d8 	beq.w	8011232 <_printf_i+0x1d2>
 8011082:	2f58      	cmp	r7, #88	; 0x58
 8011084:	f000 80a3 	beq.w	80111ce <_printf_i+0x16e>
 8011088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801108c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011090:	e03a      	b.n	8011108 <_printf_i+0xa8>
 8011092:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011096:	2b15      	cmp	r3, #21
 8011098:	d8f6      	bhi.n	8011088 <_printf_i+0x28>
 801109a:	a101      	add	r1, pc, #4	; (adr r1, 80110a0 <_printf_i+0x40>)
 801109c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80110a0:	080110f9 	.word	0x080110f9
 80110a4:	0801110d 	.word	0x0801110d
 80110a8:	08011089 	.word	0x08011089
 80110ac:	08011089 	.word	0x08011089
 80110b0:	08011089 	.word	0x08011089
 80110b4:	08011089 	.word	0x08011089
 80110b8:	0801110d 	.word	0x0801110d
 80110bc:	08011089 	.word	0x08011089
 80110c0:	08011089 	.word	0x08011089
 80110c4:	08011089 	.word	0x08011089
 80110c8:	08011089 	.word	0x08011089
 80110cc:	08011219 	.word	0x08011219
 80110d0:	0801113d 	.word	0x0801113d
 80110d4:	080111fb 	.word	0x080111fb
 80110d8:	08011089 	.word	0x08011089
 80110dc:	08011089 	.word	0x08011089
 80110e0:	0801123b 	.word	0x0801123b
 80110e4:	08011089 	.word	0x08011089
 80110e8:	0801113d 	.word	0x0801113d
 80110ec:	08011089 	.word	0x08011089
 80110f0:	08011089 	.word	0x08011089
 80110f4:	08011203 	.word	0x08011203
 80110f8:	682b      	ldr	r3, [r5, #0]
 80110fa:	1d1a      	adds	r2, r3, #4
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	602a      	str	r2, [r5, #0]
 8011100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011104:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011108:	2301      	movs	r3, #1
 801110a:	e0a3      	b.n	8011254 <_printf_i+0x1f4>
 801110c:	6820      	ldr	r0, [r4, #0]
 801110e:	6829      	ldr	r1, [r5, #0]
 8011110:	0606      	lsls	r6, r0, #24
 8011112:	f101 0304 	add.w	r3, r1, #4
 8011116:	d50a      	bpl.n	801112e <_printf_i+0xce>
 8011118:	680e      	ldr	r6, [r1, #0]
 801111a:	602b      	str	r3, [r5, #0]
 801111c:	2e00      	cmp	r6, #0
 801111e:	da03      	bge.n	8011128 <_printf_i+0xc8>
 8011120:	232d      	movs	r3, #45	; 0x2d
 8011122:	4276      	negs	r6, r6
 8011124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011128:	485e      	ldr	r0, [pc, #376]	; (80112a4 <_printf_i+0x244>)
 801112a:	230a      	movs	r3, #10
 801112c:	e019      	b.n	8011162 <_printf_i+0x102>
 801112e:	680e      	ldr	r6, [r1, #0]
 8011130:	602b      	str	r3, [r5, #0]
 8011132:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011136:	bf18      	it	ne
 8011138:	b236      	sxthne	r6, r6
 801113a:	e7ef      	b.n	801111c <_printf_i+0xbc>
 801113c:	682b      	ldr	r3, [r5, #0]
 801113e:	6820      	ldr	r0, [r4, #0]
 8011140:	1d19      	adds	r1, r3, #4
 8011142:	6029      	str	r1, [r5, #0]
 8011144:	0601      	lsls	r1, r0, #24
 8011146:	d501      	bpl.n	801114c <_printf_i+0xec>
 8011148:	681e      	ldr	r6, [r3, #0]
 801114a:	e002      	b.n	8011152 <_printf_i+0xf2>
 801114c:	0646      	lsls	r6, r0, #25
 801114e:	d5fb      	bpl.n	8011148 <_printf_i+0xe8>
 8011150:	881e      	ldrh	r6, [r3, #0]
 8011152:	4854      	ldr	r0, [pc, #336]	; (80112a4 <_printf_i+0x244>)
 8011154:	2f6f      	cmp	r7, #111	; 0x6f
 8011156:	bf0c      	ite	eq
 8011158:	2308      	moveq	r3, #8
 801115a:	230a      	movne	r3, #10
 801115c:	2100      	movs	r1, #0
 801115e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011162:	6865      	ldr	r5, [r4, #4]
 8011164:	60a5      	str	r5, [r4, #8]
 8011166:	2d00      	cmp	r5, #0
 8011168:	bfa2      	ittt	ge
 801116a:	6821      	ldrge	r1, [r4, #0]
 801116c:	f021 0104 	bicge.w	r1, r1, #4
 8011170:	6021      	strge	r1, [r4, #0]
 8011172:	b90e      	cbnz	r6, 8011178 <_printf_i+0x118>
 8011174:	2d00      	cmp	r5, #0
 8011176:	d04d      	beq.n	8011214 <_printf_i+0x1b4>
 8011178:	4615      	mov	r5, r2
 801117a:	fbb6 f1f3 	udiv	r1, r6, r3
 801117e:	fb03 6711 	mls	r7, r3, r1, r6
 8011182:	5dc7      	ldrb	r7, [r0, r7]
 8011184:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011188:	4637      	mov	r7, r6
 801118a:	42bb      	cmp	r3, r7
 801118c:	460e      	mov	r6, r1
 801118e:	d9f4      	bls.n	801117a <_printf_i+0x11a>
 8011190:	2b08      	cmp	r3, #8
 8011192:	d10b      	bne.n	80111ac <_printf_i+0x14c>
 8011194:	6823      	ldr	r3, [r4, #0]
 8011196:	07de      	lsls	r6, r3, #31
 8011198:	d508      	bpl.n	80111ac <_printf_i+0x14c>
 801119a:	6923      	ldr	r3, [r4, #16]
 801119c:	6861      	ldr	r1, [r4, #4]
 801119e:	4299      	cmp	r1, r3
 80111a0:	bfde      	ittt	le
 80111a2:	2330      	movle	r3, #48	; 0x30
 80111a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80111a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80111ac:	1b52      	subs	r2, r2, r5
 80111ae:	6122      	str	r2, [r4, #16]
 80111b0:	f8cd a000 	str.w	sl, [sp]
 80111b4:	464b      	mov	r3, r9
 80111b6:	aa03      	add	r2, sp, #12
 80111b8:	4621      	mov	r1, r4
 80111ba:	4640      	mov	r0, r8
 80111bc:	f7ff fee2 	bl	8010f84 <_printf_common>
 80111c0:	3001      	adds	r0, #1
 80111c2:	d14c      	bne.n	801125e <_printf_i+0x1fe>
 80111c4:	f04f 30ff 	mov.w	r0, #4294967295
 80111c8:	b004      	add	sp, #16
 80111ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111ce:	4835      	ldr	r0, [pc, #212]	; (80112a4 <_printf_i+0x244>)
 80111d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80111d4:	6829      	ldr	r1, [r5, #0]
 80111d6:	6823      	ldr	r3, [r4, #0]
 80111d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80111dc:	6029      	str	r1, [r5, #0]
 80111de:	061d      	lsls	r5, r3, #24
 80111e0:	d514      	bpl.n	801120c <_printf_i+0x1ac>
 80111e2:	07df      	lsls	r7, r3, #31
 80111e4:	bf44      	itt	mi
 80111e6:	f043 0320 	orrmi.w	r3, r3, #32
 80111ea:	6023      	strmi	r3, [r4, #0]
 80111ec:	b91e      	cbnz	r6, 80111f6 <_printf_i+0x196>
 80111ee:	6823      	ldr	r3, [r4, #0]
 80111f0:	f023 0320 	bic.w	r3, r3, #32
 80111f4:	6023      	str	r3, [r4, #0]
 80111f6:	2310      	movs	r3, #16
 80111f8:	e7b0      	b.n	801115c <_printf_i+0xfc>
 80111fa:	6823      	ldr	r3, [r4, #0]
 80111fc:	f043 0320 	orr.w	r3, r3, #32
 8011200:	6023      	str	r3, [r4, #0]
 8011202:	2378      	movs	r3, #120	; 0x78
 8011204:	4828      	ldr	r0, [pc, #160]	; (80112a8 <_printf_i+0x248>)
 8011206:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801120a:	e7e3      	b.n	80111d4 <_printf_i+0x174>
 801120c:	0659      	lsls	r1, r3, #25
 801120e:	bf48      	it	mi
 8011210:	b2b6      	uxthmi	r6, r6
 8011212:	e7e6      	b.n	80111e2 <_printf_i+0x182>
 8011214:	4615      	mov	r5, r2
 8011216:	e7bb      	b.n	8011190 <_printf_i+0x130>
 8011218:	682b      	ldr	r3, [r5, #0]
 801121a:	6826      	ldr	r6, [r4, #0]
 801121c:	6961      	ldr	r1, [r4, #20]
 801121e:	1d18      	adds	r0, r3, #4
 8011220:	6028      	str	r0, [r5, #0]
 8011222:	0635      	lsls	r5, r6, #24
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	d501      	bpl.n	801122c <_printf_i+0x1cc>
 8011228:	6019      	str	r1, [r3, #0]
 801122a:	e002      	b.n	8011232 <_printf_i+0x1d2>
 801122c:	0670      	lsls	r0, r6, #25
 801122e:	d5fb      	bpl.n	8011228 <_printf_i+0x1c8>
 8011230:	8019      	strh	r1, [r3, #0]
 8011232:	2300      	movs	r3, #0
 8011234:	6123      	str	r3, [r4, #16]
 8011236:	4615      	mov	r5, r2
 8011238:	e7ba      	b.n	80111b0 <_printf_i+0x150>
 801123a:	682b      	ldr	r3, [r5, #0]
 801123c:	1d1a      	adds	r2, r3, #4
 801123e:	602a      	str	r2, [r5, #0]
 8011240:	681d      	ldr	r5, [r3, #0]
 8011242:	6862      	ldr	r2, [r4, #4]
 8011244:	2100      	movs	r1, #0
 8011246:	4628      	mov	r0, r5
 8011248:	f7ee ffda 	bl	8000200 <memchr>
 801124c:	b108      	cbz	r0, 8011252 <_printf_i+0x1f2>
 801124e:	1b40      	subs	r0, r0, r5
 8011250:	6060      	str	r0, [r4, #4]
 8011252:	6863      	ldr	r3, [r4, #4]
 8011254:	6123      	str	r3, [r4, #16]
 8011256:	2300      	movs	r3, #0
 8011258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801125c:	e7a8      	b.n	80111b0 <_printf_i+0x150>
 801125e:	6923      	ldr	r3, [r4, #16]
 8011260:	462a      	mov	r2, r5
 8011262:	4649      	mov	r1, r9
 8011264:	4640      	mov	r0, r8
 8011266:	47d0      	blx	sl
 8011268:	3001      	adds	r0, #1
 801126a:	d0ab      	beq.n	80111c4 <_printf_i+0x164>
 801126c:	6823      	ldr	r3, [r4, #0]
 801126e:	079b      	lsls	r3, r3, #30
 8011270:	d413      	bmi.n	801129a <_printf_i+0x23a>
 8011272:	68e0      	ldr	r0, [r4, #12]
 8011274:	9b03      	ldr	r3, [sp, #12]
 8011276:	4298      	cmp	r0, r3
 8011278:	bfb8      	it	lt
 801127a:	4618      	movlt	r0, r3
 801127c:	e7a4      	b.n	80111c8 <_printf_i+0x168>
 801127e:	2301      	movs	r3, #1
 8011280:	4632      	mov	r2, r6
 8011282:	4649      	mov	r1, r9
 8011284:	4640      	mov	r0, r8
 8011286:	47d0      	blx	sl
 8011288:	3001      	adds	r0, #1
 801128a:	d09b      	beq.n	80111c4 <_printf_i+0x164>
 801128c:	3501      	adds	r5, #1
 801128e:	68e3      	ldr	r3, [r4, #12]
 8011290:	9903      	ldr	r1, [sp, #12]
 8011292:	1a5b      	subs	r3, r3, r1
 8011294:	42ab      	cmp	r3, r5
 8011296:	dcf2      	bgt.n	801127e <_printf_i+0x21e>
 8011298:	e7eb      	b.n	8011272 <_printf_i+0x212>
 801129a:	2500      	movs	r5, #0
 801129c:	f104 0619 	add.w	r6, r4, #25
 80112a0:	e7f5      	b.n	801128e <_printf_i+0x22e>
 80112a2:	bf00      	nop
 80112a4:	08014848 	.word	0x08014848
 80112a8:	08014859 	.word	0x08014859

080112ac <iprintf>:
 80112ac:	b40f      	push	{r0, r1, r2, r3}
 80112ae:	4b0a      	ldr	r3, [pc, #40]	; (80112d8 <iprintf+0x2c>)
 80112b0:	b513      	push	{r0, r1, r4, lr}
 80112b2:	681c      	ldr	r4, [r3, #0]
 80112b4:	b124      	cbz	r4, 80112c0 <iprintf+0x14>
 80112b6:	69a3      	ldr	r3, [r4, #24]
 80112b8:	b913      	cbnz	r3, 80112c0 <iprintf+0x14>
 80112ba:	4620      	mov	r0, r4
 80112bc:	f001 faf0 	bl	80128a0 <__sinit>
 80112c0:	ab05      	add	r3, sp, #20
 80112c2:	9a04      	ldr	r2, [sp, #16]
 80112c4:	68a1      	ldr	r1, [r4, #8]
 80112c6:	9301      	str	r3, [sp, #4]
 80112c8:	4620      	mov	r0, r4
 80112ca:	f002 fb17 	bl	80138fc <_vfiprintf_r>
 80112ce:	b002      	add	sp, #8
 80112d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112d4:	b004      	add	sp, #16
 80112d6:	4770      	bx	lr
 80112d8:	20000054 	.word	0x20000054

080112dc <_puts_r>:
 80112dc:	b570      	push	{r4, r5, r6, lr}
 80112de:	460e      	mov	r6, r1
 80112e0:	4605      	mov	r5, r0
 80112e2:	b118      	cbz	r0, 80112ec <_puts_r+0x10>
 80112e4:	6983      	ldr	r3, [r0, #24]
 80112e6:	b90b      	cbnz	r3, 80112ec <_puts_r+0x10>
 80112e8:	f001 fada 	bl	80128a0 <__sinit>
 80112ec:	69ab      	ldr	r3, [r5, #24]
 80112ee:	68ac      	ldr	r4, [r5, #8]
 80112f0:	b913      	cbnz	r3, 80112f8 <_puts_r+0x1c>
 80112f2:	4628      	mov	r0, r5
 80112f4:	f001 fad4 	bl	80128a0 <__sinit>
 80112f8:	4b2c      	ldr	r3, [pc, #176]	; (80113ac <_puts_r+0xd0>)
 80112fa:	429c      	cmp	r4, r3
 80112fc:	d120      	bne.n	8011340 <_puts_r+0x64>
 80112fe:	686c      	ldr	r4, [r5, #4]
 8011300:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011302:	07db      	lsls	r3, r3, #31
 8011304:	d405      	bmi.n	8011312 <_puts_r+0x36>
 8011306:	89a3      	ldrh	r3, [r4, #12]
 8011308:	0598      	lsls	r0, r3, #22
 801130a:	d402      	bmi.n	8011312 <_puts_r+0x36>
 801130c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801130e:	f001 fb7c 	bl	8012a0a <__retarget_lock_acquire_recursive>
 8011312:	89a3      	ldrh	r3, [r4, #12]
 8011314:	0719      	lsls	r1, r3, #28
 8011316:	d51d      	bpl.n	8011354 <_puts_r+0x78>
 8011318:	6923      	ldr	r3, [r4, #16]
 801131a:	b1db      	cbz	r3, 8011354 <_puts_r+0x78>
 801131c:	3e01      	subs	r6, #1
 801131e:	68a3      	ldr	r3, [r4, #8]
 8011320:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011324:	3b01      	subs	r3, #1
 8011326:	60a3      	str	r3, [r4, #8]
 8011328:	bb39      	cbnz	r1, 801137a <_puts_r+0x9e>
 801132a:	2b00      	cmp	r3, #0
 801132c:	da38      	bge.n	80113a0 <_puts_r+0xc4>
 801132e:	4622      	mov	r2, r4
 8011330:	210a      	movs	r1, #10
 8011332:	4628      	mov	r0, r5
 8011334:	f000 fa20 	bl	8011778 <__swbuf_r>
 8011338:	3001      	adds	r0, #1
 801133a:	d011      	beq.n	8011360 <_puts_r+0x84>
 801133c:	250a      	movs	r5, #10
 801133e:	e011      	b.n	8011364 <_puts_r+0x88>
 8011340:	4b1b      	ldr	r3, [pc, #108]	; (80113b0 <_puts_r+0xd4>)
 8011342:	429c      	cmp	r4, r3
 8011344:	d101      	bne.n	801134a <_puts_r+0x6e>
 8011346:	68ac      	ldr	r4, [r5, #8]
 8011348:	e7da      	b.n	8011300 <_puts_r+0x24>
 801134a:	4b1a      	ldr	r3, [pc, #104]	; (80113b4 <_puts_r+0xd8>)
 801134c:	429c      	cmp	r4, r3
 801134e:	bf08      	it	eq
 8011350:	68ec      	ldreq	r4, [r5, #12]
 8011352:	e7d5      	b.n	8011300 <_puts_r+0x24>
 8011354:	4621      	mov	r1, r4
 8011356:	4628      	mov	r0, r5
 8011358:	f000 fa72 	bl	8011840 <__swsetup_r>
 801135c:	2800      	cmp	r0, #0
 801135e:	d0dd      	beq.n	801131c <_puts_r+0x40>
 8011360:	f04f 35ff 	mov.w	r5, #4294967295
 8011364:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011366:	07da      	lsls	r2, r3, #31
 8011368:	d405      	bmi.n	8011376 <_puts_r+0x9a>
 801136a:	89a3      	ldrh	r3, [r4, #12]
 801136c:	059b      	lsls	r3, r3, #22
 801136e:	d402      	bmi.n	8011376 <_puts_r+0x9a>
 8011370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011372:	f001 fb4b 	bl	8012a0c <__retarget_lock_release_recursive>
 8011376:	4628      	mov	r0, r5
 8011378:	bd70      	pop	{r4, r5, r6, pc}
 801137a:	2b00      	cmp	r3, #0
 801137c:	da04      	bge.n	8011388 <_puts_r+0xac>
 801137e:	69a2      	ldr	r2, [r4, #24]
 8011380:	429a      	cmp	r2, r3
 8011382:	dc06      	bgt.n	8011392 <_puts_r+0xb6>
 8011384:	290a      	cmp	r1, #10
 8011386:	d004      	beq.n	8011392 <_puts_r+0xb6>
 8011388:	6823      	ldr	r3, [r4, #0]
 801138a:	1c5a      	adds	r2, r3, #1
 801138c:	6022      	str	r2, [r4, #0]
 801138e:	7019      	strb	r1, [r3, #0]
 8011390:	e7c5      	b.n	801131e <_puts_r+0x42>
 8011392:	4622      	mov	r2, r4
 8011394:	4628      	mov	r0, r5
 8011396:	f000 f9ef 	bl	8011778 <__swbuf_r>
 801139a:	3001      	adds	r0, #1
 801139c:	d1bf      	bne.n	801131e <_puts_r+0x42>
 801139e:	e7df      	b.n	8011360 <_puts_r+0x84>
 80113a0:	6823      	ldr	r3, [r4, #0]
 80113a2:	250a      	movs	r5, #10
 80113a4:	1c5a      	adds	r2, r3, #1
 80113a6:	6022      	str	r2, [r4, #0]
 80113a8:	701d      	strb	r5, [r3, #0]
 80113aa:	e7db      	b.n	8011364 <_puts_r+0x88>
 80113ac:	08014ab4 	.word	0x08014ab4
 80113b0:	08014ad4 	.word	0x08014ad4
 80113b4:	08014a94 	.word	0x08014a94

080113b8 <puts>:
 80113b8:	4b02      	ldr	r3, [pc, #8]	; (80113c4 <puts+0xc>)
 80113ba:	4601      	mov	r1, r0
 80113bc:	6818      	ldr	r0, [r3, #0]
 80113be:	f7ff bf8d 	b.w	80112dc <_puts_r>
 80113c2:	bf00      	nop
 80113c4:	20000054 	.word	0x20000054

080113c8 <_sbrk_r>:
 80113c8:	b538      	push	{r3, r4, r5, lr}
 80113ca:	4d06      	ldr	r5, [pc, #24]	; (80113e4 <_sbrk_r+0x1c>)
 80113cc:	2300      	movs	r3, #0
 80113ce:	4604      	mov	r4, r0
 80113d0:	4608      	mov	r0, r1
 80113d2:	602b      	str	r3, [r5, #0]
 80113d4:	f7f2 fa4c 	bl	8003870 <_sbrk>
 80113d8:	1c43      	adds	r3, r0, #1
 80113da:	d102      	bne.n	80113e2 <_sbrk_r+0x1a>
 80113dc:	682b      	ldr	r3, [r5, #0]
 80113de:	b103      	cbz	r3, 80113e2 <_sbrk_r+0x1a>
 80113e0:	6023      	str	r3, [r4, #0]
 80113e2:	bd38      	pop	{r3, r4, r5, pc}
 80113e4:	20003234 	.word	0x20003234

080113e8 <_raise_r>:
 80113e8:	291f      	cmp	r1, #31
 80113ea:	b538      	push	{r3, r4, r5, lr}
 80113ec:	4604      	mov	r4, r0
 80113ee:	460d      	mov	r5, r1
 80113f0:	d904      	bls.n	80113fc <_raise_r+0x14>
 80113f2:	2316      	movs	r3, #22
 80113f4:	6003      	str	r3, [r0, #0]
 80113f6:	f04f 30ff 	mov.w	r0, #4294967295
 80113fa:	bd38      	pop	{r3, r4, r5, pc}
 80113fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80113fe:	b112      	cbz	r2, 8011406 <_raise_r+0x1e>
 8011400:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011404:	b94b      	cbnz	r3, 801141a <_raise_r+0x32>
 8011406:	4620      	mov	r0, r4
 8011408:	f000 f830 	bl	801146c <_getpid_r>
 801140c:	462a      	mov	r2, r5
 801140e:	4601      	mov	r1, r0
 8011410:	4620      	mov	r0, r4
 8011412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011416:	f000 b817 	b.w	8011448 <_kill_r>
 801141a:	2b01      	cmp	r3, #1
 801141c:	d00a      	beq.n	8011434 <_raise_r+0x4c>
 801141e:	1c59      	adds	r1, r3, #1
 8011420:	d103      	bne.n	801142a <_raise_r+0x42>
 8011422:	2316      	movs	r3, #22
 8011424:	6003      	str	r3, [r0, #0]
 8011426:	2001      	movs	r0, #1
 8011428:	e7e7      	b.n	80113fa <_raise_r+0x12>
 801142a:	2400      	movs	r4, #0
 801142c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011430:	4628      	mov	r0, r5
 8011432:	4798      	blx	r3
 8011434:	2000      	movs	r0, #0
 8011436:	e7e0      	b.n	80113fa <_raise_r+0x12>

08011438 <raise>:
 8011438:	4b02      	ldr	r3, [pc, #8]	; (8011444 <raise+0xc>)
 801143a:	4601      	mov	r1, r0
 801143c:	6818      	ldr	r0, [r3, #0]
 801143e:	f7ff bfd3 	b.w	80113e8 <_raise_r>
 8011442:	bf00      	nop
 8011444:	20000054 	.word	0x20000054

08011448 <_kill_r>:
 8011448:	b538      	push	{r3, r4, r5, lr}
 801144a:	4d07      	ldr	r5, [pc, #28]	; (8011468 <_kill_r+0x20>)
 801144c:	2300      	movs	r3, #0
 801144e:	4604      	mov	r4, r0
 8011450:	4608      	mov	r0, r1
 8011452:	4611      	mov	r1, r2
 8011454:	602b      	str	r3, [r5, #0]
 8011456:	f7f2 f99f 	bl	8003798 <_kill>
 801145a:	1c43      	adds	r3, r0, #1
 801145c:	d102      	bne.n	8011464 <_kill_r+0x1c>
 801145e:	682b      	ldr	r3, [r5, #0]
 8011460:	b103      	cbz	r3, 8011464 <_kill_r+0x1c>
 8011462:	6023      	str	r3, [r4, #0]
 8011464:	bd38      	pop	{r3, r4, r5, pc}
 8011466:	bf00      	nop
 8011468:	20003234 	.word	0x20003234

0801146c <_getpid_r>:
 801146c:	f7f2 b98c 	b.w	8003788 <_getpid>

08011470 <siprintf>:
 8011470:	b40e      	push	{r1, r2, r3}
 8011472:	b500      	push	{lr}
 8011474:	b09c      	sub	sp, #112	; 0x70
 8011476:	ab1d      	add	r3, sp, #116	; 0x74
 8011478:	9002      	str	r0, [sp, #8]
 801147a:	9006      	str	r0, [sp, #24]
 801147c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011480:	4809      	ldr	r0, [pc, #36]	; (80114a8 <siprintf+0x38>)
 8011482:	9107      	str	r1, [sp, #28]
 8011484:	9104      	str	r1, [sp, #16]
 8011486:	4909      	ldr	r1, [pc, #36]	; (80114ac <siprintf+0x3c>)
 8011488:	f853 2b04 	ldr.w	r2, [r3], #4
 801148c:	9105      	str	r1, [sp, #20]
 801148e:	6800      	ldr	r0, [r0, #0]
 8011490:	9301      	str	r3, [sp, #4]
 8011492:	a902      	add	r1, sp, #8
 8011494:	f001 ff36 	bl	8013304 <_svfiprintf_r>
 8011498:	9b02      	ldr	r3, [sp, #8]
 801149a:	2200      	movs	r2, #0
 801149c:	701a      	strb	r2, [r3, #0]
 801149e:	b01c      	add	sp, #112	; 0x70
 80114a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80114a4:	b003      	add	sp, #12
 80114a6:	4770      	bx	lr
 80114a8:	20000054 	.word	0x20000054
 80114ac:	ffff0208 	.word	0xffff0208

080114b0 <siscanf>:
 80114b0:	b40e      	push	{r1, r2, r3}
 80114b2:	b510      	push	{r4, lr}
 80114b4:	b09f      	sub	sp, #124	; 0x7c
 80114b6:	ac21      	add	r4, sp, #132	; 0x84
 80114b8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80114bc:	f854 2b04 	ldr.w	r2, [r4], #4
 80114c0:	9201      	str	r2, [sp, #4]
 80114c2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80114c6:	9004      	str	r0, [sp, #16]
 80114c8:	9008      	str	r0, [sp, #32]
 80114ca:	f7ee fe8b 	bl	80001e4 <strlen>
 80114ce:	4b0c      	ldr	r3, [pc, #48]	; (8011500 <siscanf+0x50>)
 80114d0:	9005      	str	r0, [sp, #20]
 80114d2:	9009      	str	r0, [sp, #36]	; 0x24
 80114d4:	930d      	str	r3, [sp, #52]	; 0x34
 80114d6:	480b      	ldr	r0, [pc, #44]	; (8011504 <siscanf+0x54>)
 80114d8:	9a01      	ldr	r2, [sp, #4]
 80114da:	6800      	ldr	r0, [r0, #0]
 80114dc:	9403      	str	r4, [sp, #12]
 80114de:	2300      	movs	r3, #0
 80114e0:	9311      	str	r3, [sp, #68]	; 0x44
 80114e2:	9316      	str	r3, [sp, #88]	; 0x58
 80114e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80114e8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80114ec:	a904      	add	r1, sp, #16
 80114ee:	4623      	mov	r3, r4
 80114f0:	f002 f862 	bl	80135b8 <__ssvfiscanf_r>
 80114f4:	b01f      	add	sp, #124	; 0x7c
 80114f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114fa:	b003      	add	sp, #12
 80114fc:	4770      	bx	lr
 80114fe:	bf00      	nop
 8011500:	0801152b 	.word	0x0801152b
 8011504:	20000054 	.word	0x20000054

08011508 <__sread>:
 8011508:	b510      	push	{r4, lr}
 801150a:	460c      	mov	r4, r1
 801150c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011510:	f002 fc76 	bl	8013e00 <_read_r>
 8011514:	2800      	cmp	r0, #0
 8011516:	bfab      	itete	ge
 8011518:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801151a:	89a3      	ldrhlt	r3, [r4, #12]
 801151c:	181b      	addge	r3, r3, r0
 801151e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011522:	bfac      	ite	ge
 8011524:	6563      	strge	r3, [r4, #84]	; 0x54
 8011526:	81a3      	strhlt	r3, [r4, #12]
 8011528:	bd10      	pop	{r4, pc}

0801152a <__seofread>:
 801152a:	2000      	movs	r0, #0
 801152c:	4770      	bx	lr

0801152e <__swrite>:
 801152e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011532:	461f      	mov	r7, r3
 8011534:	898b      	ldrh	r3, [r1, #12]
 8011536:	05db      	lsls	r3, r3, #23
 8011538:	4605      	mov	r5, r0
 801153a:	460c      	mov	r4, r1
 801153c:	4616      	mov	r6, r2
 801153e:	d505      	bpl.n	801154c <__swrite+0x1e>
 8011540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011544:	2302      	movs	r3, #2
 8011546:	2200      	movs	r2, #0
 8011548:	f001 fa62 	bl	8012a10 <_lseek_r>
 801154c:	89a3      	ldrh	r3, [r4, #12]
 801154e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011552:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011556:	81a3      	strh	r3, [r4, #12]
 8011558:	4632      	mov	r2, r6
 801155a:	463b      	mov	r3, r7
 801155c:	4628      	mov	r0, r5
 801155e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011562:	f000 b95b 	b.w	801181c <_write_r>

08011566 <__sseek>:
 8011566:	b510      	push	{r4, lr}
 8011568:	460c      	mov	r4, r1
 801156a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801156e:	f001 fa4f 	bl	8012a10 <_lseek_r>
 8011572:	1c43      	adds	r3, r0, #1
 8011574:	89a3      	ldrh	r3, [r4, #12]
 8011576:	bf15      	itete	ne
 8011578:	6560      	strne	r0, [r4, #84]	; 0x54
 801157a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801157e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011582:	81a3      	strheq	r3, [r4, #12]
 8011584:	bf18      	it	ne
 8011586:	81a3      	strhne	r3, [r4, #12]
 8011588:	bd10      	pop	{r4, pc}

0801158a <__sclose>:
 801158a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801158e:	f000 b9e3 	b.w	8011958 <_close_r>

08011592 <strcpy>:
 8011592:	4603      	mov	r3, r0
 8011594:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011598:	f803 2b01 	strb.w	r2, [r3], #1
 801159c:	2a00      	cmp	r2, #0
 801159e:	d1f9      	bne.n	8011594 <strcpy+0x2>
 80115a0:	4770      	bx	lr
	...

080115a4 <strtok>:
 80115a4:	4b16      	ldr	r3, [pc, #88]	; (8011600 <strtok+0x5c>)
 80115a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80115a8:	681e      	ldr	r6, [r3, #0]
 80115aa:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80115ac:	4605      	mov	r5, r0
 80115ae:	b9fc      	cbnz	r4, 80115f0 <strtok+0x4c>
 80115b0:	2050      	movs	r0, #80	; 0x50
 80115b2:	9101      	str	r1, [sp, #4]
 80115b4:	f7ff f90a 	bl	80107cc <malloc>
 80115b8:	9901      	ldr	r1, [sp, #4]
 80115ba:	65b0      	str	r0, [r6, #88]	; 0x58
 80115bc:	4602      	mov	r2, r0
 80115be:	b920      	cbnz	r0, 80115ca <strtok+0x26>
 80115c0:	4b10      	ldr	r3, [pc, #64]	; (8011604 <strtok+0x60>)
 80115c2:	4811      	ldr	r0, [pc, #68]	; (8011608 <strtok+0x64>)
 80115c4:	2157      	movs	r1, #87	; 0x57
 80115c6:	f000 f9a9 	bl	801191c <__assert_func>
 80115ca:	e9c0 4400 	strd	r4, r4, [r0]
 80115ce:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80115d2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80115d6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80115da:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80115de:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80115e2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80115e6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80115ea:	6184      	str	r4, [r0, #24]
 80115ec:	7704      	strb	r4, [r0, #28]
 80115ee:	6244      	str	r4, [r0, #36]	; 0x24
 80115f0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80115f2:	2301      	movs	r3, #1
 80115f4:	4628      	mov	r0, r5
 80115f6:	b002      	add	sp, #8
 80115f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80115fc:	f000 b806 	b.w	801160c <__strtok_r>
 8011600:	20000054 	.word	0x20000054
 8011604:	0801486a 	.word	0x0801486a
 8011608:	08014881 	.word	0x08014881

0801160c <__strtok_r>:
 801160c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801160e:	b908      	cbnz	r0, 8011614 <__strtok_r+0x8>
 8011610:	6810      	ldr	r0, [r2, #0]
 8011612:	b188      	cbz	r0, 8011638 <__strtok_r+0x2c>
 8011614:	4604      	mov	r4, r0
 8011616:	4620      	mov	r0, r4
 8011618:	f814 5b01 	ldrb.w	r5, [r4], #1
 801161c:	460f      	mov	r7, r1
 801161e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8011622:	b91e      	cbnz	r6, 801162c <__strtok_r+0x20>
 8011624:	b965      	cbnz	r5, 8011640 <__strtok_r+0x34>
 8011626:	6015      	str	r5, [r2, #0]
 8011628:	4628      	mov	r0, r5
 801162a:	e005      	b.n	8011638 <__strtok_r+0x2c>
 801162c:	42b5      	cmp	r5, r6
 801162e:	d1f6      	bne.n	801161e <__strtok_r+0x12>
 8011630:	2b00      	cmp	r3, #0
 8011632:	d1f0      	bne.n	8011616 <__strtok_r+0xa>
 8011634:	6014      	str	r4, [r2, #0]
 8011636:	7003      	strb	r3, [r0, #0]
 8011638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801163a:	461c      	mov	r4, r3
 801163c:	e00c      	b.n	8011658 <__strtok_r+0x4c>
 801163e:	b915      	cbnz	r5, 8011646 <__strtok_r+0x3a>
 8011640:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011644:	460e      	mov	r6, r1
 8011646:	f816 5b01 	ldrb.w	r5, [r6], #1
 801164a:	42ab      	cmp	r3, r5
 801164c:	d1f7      	bne.n	801163e <__strtok_r+0x32>
 801164e:	2b00      	cmp	r3, #0
 8011650:	d0f3      	beq.n	801163a <__strtok_r+0x2e>
 8011652:	2300      	movs	r3, #0
 8011654:	f804 3c01 	strb.w	r3, [r4, #-1]
 8011658:	6014      	str	r4, [r2, #0]
 801165a:	e7ed      	b.n	8011638 <__strtok_r+0x2c>

0801165c <_strtol_l.constprop.0>:
 801165c:	2b01      	cmp	r3, #1
 801165e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011662:	d001      	beq.n	8011668 <_strtol_l.constprop.0+0xc>
 8011664:	2b24      	cmp	r3, #36	; 0x24
 8011666:	d906      	bls.n	8011676 <_strtol_l.constprop.0+0x1a>
 8011668:	f7ff f886 	bl	8010778 <__errno>
 801166c:	2316      	movs	r3, #22
 801166e:	6003      	str	r3, [r0, #0]
 8011670:	2000      	movs	r0, #0
 8011672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011676:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801175c <_strtol_l.constprop.0+0x100>
 801167a:	460d      	mov	r5, r1
 801167c:	462e      	mov	r6, r5
 801167e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011682:	f814 700c 	ldrb.w	r7, [r4, ip]
 8011686:	f017 0708 	ands.w	r7, r7, #8
 801168a:	d1f7      	bne.n	801167c <_strtol_l.constprop.0+0x20>
 801168c:	2c2d      	cmp	r4, #45	; 0x2d
 801168e:	d132      	bne.n	80116f6 <_strtol_l.constprop.0+0x9a>
 8011690:	782c      	ldrb	r4, [r5, #0]
 8011692:	2701      	movs	r7, #1
 8011694:	1cb5      	adds	r5, r6, #2
 8011696:	2b00      	cmp	r3, #0
 8011698:	d05b      	beq.n	8011752 <_strtol_l.constprop.0+0xf6>
 801169a:	2b10      	cmp	r3, #16
 801169c:	d109      	bne.n	80116b2 <_strtol_l.constprop.0+0x56>
 801169e:	2c30      	cmp	r4, #48	; 0x30
 80116a0:	d107      	bne.n	80116b2 <_strtol_l.constprop.0+0x56>
 80116a2:	782c      	ldrb	r4, [r5, #0]
 80116a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80116a8:	2c58      	cmp	r4, #88	; 0x58
 80116aa:	d14d      	bne.n	8011748 <_strtol_l.constprop.0+0xec>
 80116ac:	786c      	ldrb	r4, [r5, #1]
 80116ae:	2310      	movs	r3, #16
 80116b0:	3502      	adds	r5, #2
 80116b2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80116b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80116ba:	f04f 0c00 	mov.w	ip, #0
 80116be:	fbb8 f9f3 	udiv	r9, r8, r3
 80116c2:	4666      	mov	r6, ip
 80116c4:	fb03 8a19 	mls	sl, r3, r9, r8
 80116c8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80116cc:	f1be 0f09 	cmp.w	lr, #9
 80116d0:	d816      	bhi.n	8011700 <_strtol_l.constprop.0+0xa4>
 80116d2:	4674      	mov	r4, lr
 80116d4:	42a3      	cmp	r3, r4
 80116d6:	dd24      	ble.n	8011722 <_strtol_l.constprop.0+0xc6>
 80116d8:	f1bc 0f00 	cmp.w	ip, #0
 80116dc:	db1e      	blt.n	801171c <_strtol_l.constprop.0+0xc0>
 80116de:	45b1      	cmp	r9, r6
 80116e0:	d31c      	bcc.n	801171c <_strtol_l.constprop.0+0xc0>
 80116e2:	d101      	bne.n	80116e8 <_strtol_l.constprop.0+0x8c>
 80116e4:	45a2      	cmp	sl, r4
 80116e6:	db19      	blt.n	801171c <_strtol_l.constprop.0+0xc0>
 80116e8:	fb06 4603 	mla	r6, r6, r3, r4
 80116ec:	f04f 0c01 	mov.w	ip, #1
 80116f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80116f4:	e7e8      	b.n	80116c8 <_strtol_l.constprop.0+0x6c>
 80116f6:	2c2b      	cmp	r4, #43	; 0x2b
 80116f8:	bf04      	itt	eq
 80116fa:	782c      	ldrbeq	r4, [r5, #0]
 80116fc:	1cb5      	addeq	r5, r6, #2
 80116fe:	e7ca      	b.n	8011696 <_strtol_l.constprop.0+0x3a>
 8011700:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011704:	f1be 0f19 	cmp.w	lr, #25
 8011708:	d801      	bhi.n	801170e <_strtol_l.constprop.0+0xb2>
 801170a:	3c37      	subs	r4, #55	; 0x37
 801170c:	e7e2      	b.n	80116d4 <_strtol_l.constprop.0+0x78>
 801170e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8011712:	f1be 0f19 	cmp.w	lr, #25
 8011716:	d804      	bhi.n	8011722 <_strtol_l.constprop.0+0xc6>
 8011718:	3c57      	subs	r4, #87	; 0x57
 801171a:	e7db      	b.n	80116d4 <_strtol_l.constprop.0+0x78>
 801171c:	f04f 3cff 	mov.w	ip, #4294967295
 8011720:	e7e6      	b.n	80116f0 <_strtol_l.constprop.0+0x94>
 8011722:	f1bc 0f00 	cmp.w	ip, #0
 8011726:	da05      	bge.n	8011734 <_strtol_l.constprop.0+0xd8>
 8011728:	2322      	movs	r3, #34	; 0x22
 801172a:	6003      	str	r3, [r0, #0]
 801172c:	4646      	mov	r6, r8
 801172e:	b942      	cbnz	r2, 8011742 <_strtol_l.constprop.0+0xe6>
 8011730:	4630      	mov	r0, r6
 8011732:	e79e      	b.n	8011672 <_strtol_l.constprop.0+0x16>
 8011734:	b107      	cbz	r7, 8011738 <_strtol_l.constprop.0+0xdc>
 8011736:	4276      	negs	r6, r6
 8011738:	2a00      	cmp	r2, #0
 801173a:	d0f9      	beq.n	8011730 <_strtol_l.constprop.0+0xd4>
 801173c:	f1bc 0f00 	cmp.w	ip, #0
 8011740:	d000      	beq.n	8011744 <_strtol_l.constprop.0+0xe8>
 8011742:	1e69      	subs	r1, r5, #1
 8011744:	6011      	str	r1, [r2, #0]
 8011746:	e7f3      	b.n	8011730 <_strtol_l.constprop.0+0xd4>
 8011748:	2430      	movs	r4, #48	; 0x30
 801174a:	2b00      	cmp	r3, #0
 801174c:	d1b1      	bne.n	80116b2 <_strtol_l.constprop.0+0x56>
 801174e:	2308      	movs	r3, #8
 8011750:	e7af      	b.n	80116b2 <_strtol_l.constprop.0+0x56>
 8011752:	2c30      	cmp	r4, #48	; 0x30
 8011754:	d0a5      	beq.n	80116a2 <_strtol_l.constprop.0+0x46>
 8011756:	230a      	movs	r3, #10
 8011758:	e7ab      	b.n	80116b2 <_strtol_l.constprop.0+0x56>
 801175a:	bf00      	nop
 801175c:	0801491b 	.word	0x0801491b

08011760 <_strtol_r>:
 8011760:	f7ff bf7c 	b.w	801165c <_strtol_l.constprop.0>

08011764 <strtol>:
 8011764:	4613      	mov	r3, r2
 8011766:	460a      	mov	r2, r1
 8011768:	4601      	mov	r1, r0
 801176a:	4802      	ldr	r0, [pc, #8]	; (8011774 <strtol+0x10>)
 801176c:	6800      	ldr	r0, [r0, #0]
 801176e:	f7ff bf75 	b.w	801165c <_strtol_l.constprop.0>
 8011772:	bf00      	nop
 8011774:	20000054 	.word	0x20000054

08011778 <__swbuf_r>:
 8011778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801177a:	460e      	mov	r6, r1
 801177c:	4614      	mov	r4, r2
 801177e:	4605      	mov	r5, r0
 8011780:	b118      	cbz	r0, 801178a <__swbuf_r+0x12>
 8011782:	6983      	ldr	r3, [r0, #24]
 8011784:	b90b      	cbnz	r3, 801178a <__swbuf_r+0x12>
 8011786:	f001 f88b 	bl	80128a0 <__sinit>
 801178a:	4b21      	ldr	r3, [pc, #132]	; (8011810 <__swbuf_r+0x98>)
 801178c:	429c      	cmp	r4, r3
 801178e:	d12b      	bne.n	80117e8 <__swbuf_r+0x70>
 8011790:	686c      	ldr	r4, [r5, #4]
 8011792:	69a3      	ldr	r3, [r4, #24]
 8011794:	60a3      	str	r3, [r4, #8]
 8011796:	89a3      	ldrh	r3, [r4, #12]
 8011798:	071a      	lsls	r2, r3, #28
 801179a:	d52f      	bpl.n	80117fc <__swbuf_r+0x84>
 801179c:	6923      	ldr	r3, [r4, #16]
 801179e:	b36b      	cbz	r3, 80117fc <__swbuf_r+0x84>
 80117a0:	6923      	ldr	r3, [r4, #16]
 80117a2:	6820      	ldr	r0, [r4, #0]
 80117a4:	1ac0      	subs	r0, r0, r3
 80117a6:	6963      	ldr	r3, [r4, #20]
 80117a8:	b2f6      	uxtb	r6, r6
 80117aa:	4283      	cmp	r3, r0
 80117ac:	4637      	mov	r7, r6
 80117ae:	dc04      	bgt.n	80117ba <__swbuf_r+0x42>
 80117b0:	4621      	mov	r1, r4
 80117b2:	4628      	mov	r0, r5
 80117b4:	f000 ffe0 	bl	8012778 <_fflush_r>
 80117b8:	bb30      	cbnz	r0, 8011808 <__swbuf_r+0x90>
 80117ba:	68a3      	ldr	r3, [r4, #8]
 80117bc:	3b01      	subs	r3, #1
 80117be:	60a3      	str	r3, [r4, #8]
 80117c0:	6823      	ldr	r3, [r4, #0]
 80117c2:	1c5a      	adds	r2, r3, #1
 80117c4:	6022      	str	r2, [r4, #0]
 80117c6:	701e      	strb	r6, [r3, #0]
 80117c8:	6963      	ldr	r3, [r4, #20]
 80117ca:	3001      	adds	r0, #1
 80117cc:	4283      	cmp	r3, r0
 80117ce:	d004      	beq.n	80117da <__swbuf_r+0x62>
 80117d0:	89a3      	ldrh	r3, [r4, #12]
 80117d2:	07db      	lsls	r3, r3, #31
 80117d4:	d506      	bpl.n	80117e4 <__swbuf_r+0x6c>
 80117d6:	2e0a      	cmp	r6, #10
 80117d8:	d104      	bne.n	80117e4 <__swbuf_r+0x6c>
 80117da:	4621      	mov	r1, r4
 80117dc:	4628      	mov	r0, r5
 80117de:	f000 ffcb 	bl	8012778 <_fflush_r>
 80117e2:	b988      	cbnz	r0, 8011808 <__swbuf_r+0x90>
 80117e4:	4638      	mov	r0, r7
 80117e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117e8:	4b0a      	ldr	r3, [pc, #40]	; (8011814 <__swbuf_r+0x9c>)
 80117ea:	429c      	cmp	r4, r3
 80117ec:	d101      	bne.n	80117f2 <__swbuf_r+0x7a>
 80117ee:	68ac      	ldr	r4, [r5, #8]
 80117f0:	e7cf      	b.n	8011792 <__swbuf_r+0x1a>
 80117f2:	4b09      	ldr	r3, [pc, #36]	; (8011818 <__swbuf_r+0xa0>)
 80117f4:	429c      	cmp	r4, r3
 80117f6:	bf08      	it	eq
 80117f8:	68ec      	ldreq	r4, [r5, #12]
 80117fa:	e7ca      	b.n	8011792 <__swbuf_r+0x1a>
 80117fc:	4621      	mov	r1, r4
 80117fe:	4628      	mov	r0, r5
 8011800:	f000 f81e 	bl	8011840 <__swsetup_r>
 8011804:	2800      	cmp	r0, #0
 8011806:	d0cb      	beq.n	80117a0 <__swbuf_r+0x28>
 8011808:	f04f 37ff 	mov.w	r7, #4294967295
 801180c:	e7ea      	b.n	80117e4 <__swbuf_r+0x6c>
 801180e:	bf00      	nop
 8011810:	08014ab4 	.word	0x08014ab4
 8011814:	08014ad4 	.word	0x08014ad4
 8011818:	08014a94 	.word	0x08014a94

0801181c <_write_r>:
 801181c:	b538      	push	{r3, r4, r5, lr}
 801181e:	4d07      	ldr	r5, [pc, #28]	; (801183c <_write_r+0x20>)
 8011820:	4604      	mov	r4, r0
 8011822:	4608      	mov	r0, r1
 8011824:	4611      	mov	r1, r2
 8011826:	2200      	movs	r2, #0
 8011828:	602a      	str	r2, [r5, #0]
 801182a:	461a      	mov	r2, r3
 801182c:	f7f0 ffa4 	bl	8002778 <_write>
 8011830:	1c43      	adds	r3, r0, #1
 8011832:	d102      	bne.n	801183a <_write_r+0x1e>
 8011834:	682b      	ldr	r3, [r5, #0]
 8011836:	b103      	cbz	r3, 801183a <_write_r+0x1e>
 8011838:	6023      	str	r3, [r4, #0]
 801183a:	bd38      	pop	{r3, r4, r5, pc}
 801183c:	20003234 	.word	0x20003234

08011840 <__swsetup_r>:
 8011840:	4b32      	ldr	r3, [pc, #200]	; (801190c <__swsetup_r+0xcc>)
 8011842:	b570      	push	{r4, r5, r6, lr}
 8011844:	681d      	ldr	r5, [r3, #0]
 8011846:	4606      	mov	r6, r0
 8011848:	460c      	mov	r4, r1
 801184a:	b125      	cbz	r5, 8011856 <__swsetup_r+0x16>
 801184c:	69ab      	ldr	r3, [r5, #24]
 801184e:	b913      	cbnz	r3, 8011856 <__swsetup_r+0x16>
 8011850:	4628      	mov	r0, r5
 8011852:	f001 f825 	bl	80128a0 <__sinit>
 8011856:	4b2e      	ldr	r3, [pc, #184]	; (8011910 <__swsetup_r+0xd0>)
 8011858:	429c      	cmp	r4, r3
 801185a:	d10f      	bne.n	801187c <__swsetup_r+0x3c>
 801185c:	686c      	ldr	r4, [r5, #4]
 801185e:	89a3      	ldrh	r3, [r4, #12]
 8011860:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011864:	0719      	lsls	r1, r3, #28
 8011866:	d42c      	bmi.n	80118c2 <__swsetup_r+0x82>
 8011868:	06dd      	lsls	r5, r3, #27
 801186a:	d411      	bmi.n	8011890 <__swsetup_r+0x50>
 801186c:	2309      	movs	r3, #9
 801186e:	6033      	str	r3, [r6, #0]
 8011870:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011874:	81a3      	strh	r3, [r4, #12]
 8011876:	f04f 30ff 	mov.w	r0, #4294967295
 801187a:	e03e      	b.n	80118fa <__swsetup_r+0xba>
 801187c:	4b25      	ldr	r3, [pc, #148]	; (8011914 <__swsetup_r+0xd4>)
 801187e:	429c      	cmp	r4, r3
 8011880:	d101      	bne.n	8011886 <__swsetup_r+0x46>
 8011882:	68ac      	ldr	r4, [r5, #8]
 8011884:	e7eb      	b.n	801185e <__swsetup_r+0x1e>
 8011886:	4b24      	ldr	r3, [pc, #144]	; (8011918 <__swsetup_r+0xd8>)
 8011888:	429c      	cmp	r4, r3
 801188a:	bf08      	it	eq
 801188c:	68ec      	ldreq	r4, [r5, #12]
 801188e:	e7e6      	b.n	801185e <__swsetup_r+0x1e>
 8011890:	0758      	lsls	r0, r3, #29
 8011892:	d512      	bpl.n	80118ba <__swsetup_r+0x7a>
 8011894:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011896:	b141      	cbz	r1, 80118aa <__swsetup_r+0x6a>
 8011898:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801189c:	4299      	cmp	r1, r3
 801189e:	d002      	beq.n	80118a6 <__swsetup_r+0x66>
 80118a0:	4630      	mov	r0, r6
 80118a2:	f7fe ffb9 	bl	8010818 <_free_r>
 80118a6:	2300      	movs	r3, #0
 80118a8:	6363      	str	r3, [r4, #52]	; 0x34
 80118aa:	89a3      	ldrh	r3, [r4, #12]
 80118ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80118b0:	81a3      	strh	r3, [r4, #12]
 80118b2:	2300      	movs	r3, #0
 80118b4:	6063      	str	r3, [r4, #4]
 80118b6:	6923      	ldr	r3, [r4, #16]
 80118b8:	6023      	str	r3, [r4, #0]
 80118ba:	89a3      	ldrh	r3, [r4, #12]
 80118bc:	f043 0308 	orr.w	r3, r3, #8
 80118c0:	81a3      	strh	r3, [r4, #12]
 80118c2:	6923      	ldr	r3, [r4, #16]
 80118c4:	b94b      	cbnz	r3, 80118da <__swsetup_r+0x9a>
 80118c6:	89a3      	ldrh	r3, [r4, #12]
 80118c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80118cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80118d0:	d003      	beq.n	80118da <__swsetup_r+0x9a>
 80118d2:	4621      	mov	r1, r4
 80118d4:	4630      	mov	r0, r6
 80118d6:	f001 f8d3 	bl	8012a80 <__smakebuf_r>
 80118da:	89a0      	ldrh	r0, [r4, #12]
 80118dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80118e0:	f010 0301 	ands.w	r3, r0, #1
 80118e4:	d00a      	beq.n	80118fc <__swsetup_r+0xbc>
 80118e6:	2300      	movs	r3, #0
 80118e8:	60a3      	str	r3, [r4, #8]
 80118ea:	6963      	ldr	r3, [r4, #20]
 80118ec:	425b      	negs	r3, r3
 80118ee:	61a3      	str	r3, [r4, #24]
 80118f0:	6923      	ldr	r3, [r4, #16]
 80118f2:	b943      	cbnz	r3, 8011906 <__swsetup_r+0xc6>
 80118f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80118f8:	d1ba      	bne.n	8011870 <__swsetup_r+0x30>
 80118fa:	bd70      	pop	{r4, r5, r6, pc}
 80118fc:	0781      	lsls	r1, r0, #30
 80118fe:	bf58      	it	pl
 8011900:	6963      	ldrpl	r3, [r4, #20]
 8011902:	60a3      	str	r3, [r4, #8]
 8011904:	e7f4      	b.n	80118f0 <__swsetup_r+0xb0>
 8011906:	2000      	movs	r0, #0
 8011908:	e7f7      	b.n	80118fa <__swsetup_r+0xba>
 801190a:	bf00      	nop
 801190c:	20000054 	.word	0x20000054
 8011910:	08014ab4 	.word	0x08014ab4
 8011914:	08014ad4 	.word	0x08014ad4
 8011918:	08014a94 	.word	0x08014a94

0801191c <__assert_func>:
 801191c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801191e:	4614      	mov	r4, r2
 8011920:	461a      	mov	r2, r3
 8011922:	4b09      	ldr	r3, [pc, #36]	; (8011948 <__assert_func+0x2c>)
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	4605      	mov	r5, r0
 8011928:	68d8      	ldr	r0, [r3, #12]
 801192a:	b14c      	cbz	r4, 8011940 <__assert_func+0x24>
 801192c:	4b07      	ldr	r3, [pc, #28]	; (801194c <__assert_func+0x30>)
 801192e:	9100      	str	r1, [sp, #0]
 8011930:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011934:	4906      	ldr	r1, [pc, #24]	; (8011950 <__assert_func+0x34>)
 8011936:	462b      	mov	r3, r5
 8011938:	f001 f830 	bl	801299c <fiprintf>
 801193c:	f7fe ff10 	bl	8010760 <abort>
 8011940:	4b04      	ldr	r3, [pc, #16]	; (8011954 <__assert_func+0x38>)
 8011942:	461c      	mov	r4, r3
 8011944:	e7f3      	b.n	801192e <__assert_func+0x12>
 8011946:	bf00      	nop
 8011948:	20000054 	.word	0x20000054
 801194c:	080148de 	.word	0x080148de
 8011950:	080148eb 	.word	0x080148eb
 8011954:	08014919 	.word	0x08014919

08011958 <_close_r>:
 8011958:	b538      	push	{r3, r4, r5, lr}
 801195a:	4d06      	ldr	r5, [pc, #24]	; (8011974 <_close_r+0x1c>)
 801195c:	2300      	movs	r3, #0
 801195e:	4604      	mov	r4, r0
 8011960:	4608      	mov	r0, r1
 8011962:	602b      	str	r3, [r5, #0]
 8011964:	f7f1 ff4f 	bl	8003806 <_close>
 8011968:	1c43      	adds	r3, r0, #1
 801196a:	d102      	bne.n	8011972 <_close_r+0x1a>
 801196c:	682b      	ldr	r3, [r5, #0]
 801196e:	b103      	cbz	r3, 8011972 <_close_r+0x1a>
 8011970:	6023      	str	r3, [r4, #0]
 8011972:	bd38      	pop	{r3, r4, r5, pc}
 8011974:	20003234 	.word	0x20003234

08011978 <quorem>:
 8011978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801197c:	6903      	ldr	r3, [r0, #16]
 801197e:	690c      	ldr	r4, [r1, #16]
 8011980:	42a3      	cmp	r3, r4
 8011982:	4607      	mov	r7, r0
 8011984:	f2c0 8081 	blt.w	8011a8a <quorem+0x112>
 8011988:	3c01      	subs	r4, #1
 801198a:	f101 0814 	add.w	r8, r1, #20
 801198e:	f100 0514 	add.w	r5, r0, #20
 8011992:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011996:	9301      	str	r3, [sp, #4]
 8011998:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801199c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80119a0:	3301      	adds	r3, #1
 80119a2:	429a      	cmp	r2, r3
 80119a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80119a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80119ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80119b0:	d331      	bcc.n	8011a16 <quorem+0x9e>
 80119b2:	f04f 0e00 	mov.w	lr, #0
 80119b6:	4640      	mov	r0, r8
 80119b8:	46ac      	mov	ip, r5
 80119ba:	46f2      	mov	sl, lr
 80119bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80119c0:	b293      	uxth	r3, r2
 80119c2:	fb06 e303 	mla	r3, r6, r3, lr
 80119c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80119ca:	b29b      	uxth	r3, r3
 80119cc:	ebaa 0303 	sub.w	r3, sl, r3
 80119d0:	f8dc a000 	ldr.w	sl, [ip]
 80119d4:	0c12      	lsrs	r2, r2, #16
 80119d6:	fa13 f38a 	uxtah	r3, r3, sl
 80119da:	fb06 e202 	mla	r2, r6, r2, lr
 80119de:	9300      	str	r3, [sp, #0]
 80119e0:	9b00      	ldr	r3, [sp, #0]
 80119e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80119e6:	b292      	uxth	r2, r2
 80119e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80119ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80119f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80119f4:	4581      	cmp	r9, r0
 80119f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80119fa:	f84c 3b04 	str.w	r3, [ip], #4
 80119fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011a02:	d2db      	bcs.n	80119bc <quorem+0x44>
 8011a04:	f855 300b 	ldr.w	r3, [r5, fp]
 8011a08:	b92b      	cbnz	r3, 8011a16 <quorem+0x9e>
 8011a0a:	9b01      	ldr	r3, [sp, #4]
 8011a0c:	3b04      	subs	r3, #4
 8011a0e:	429d      	cmp	r5, r3
 8011a10:	461a      	mov	r2, r3
 8011a12:	d32e      	bcc.n	8011a72 <quorem+0xfa>
 8011a14:	613c      	str	r4, [r7, #16]
 8011a16:	4638      	mov	r0, r7
 8011a18:	f001 fb00 	bl	801301c <__mcmp>
 8011a1c:	2800      	cmp	r0, #0
 8011a1e:	db24      	blt.n	8011a6a <quorem+0xf2>
 8011a20:	3601      	adds	r6, #1
 8011a22:	4628      	mov	r0, r5
 8011a24:	f04f 0c00 	mov.w	ip, #0
 8011a28:	f858 2b04 	ldr.w	r2, [r8], #4
 8011a2c:	f8d0 e000 	ldr.w	lr, [r0]
 8011a30:	b293      	uxth	r3, r2
 8011a32:	ebac 0303 	sub.w	r3, ip, r3
 8011a36:	0c12      	lsrs	r2, r2, #16
 8011a38:	fa13 f38e 	uxtah	r3, r3, lr
 8011a3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011a40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011a44:	b29b      	uxth	r3, r3
 8011a46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011a4a:	45c1      	cmp	r9, r8
 8011a4c:	f840 3b04 	str.w	r3, [r0], #4
 8011a50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011a54:	d2e8      	bcs.n	8011a28 <quorem+0xb0>
 8011a56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011a5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011a5e:	b922      	cbnz	r2, 8011a6a <quorem+0xf2>
 8011a60:	3b04      	subs	r3, #4
 8011a62:	429d      	cmp	r5, r3
 8011a64:	461a      	mov	r2, r3
 8011a66:	d30a      	bcc.n	8011a7e <quorem+0x106>
 8011a68:	613c      	str	r4, [r7, #16]
 8011a6a:	4630      	mov	r0, r6
 8011a6c:	b003      	add	sp, #12
 8011a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a72:	6812      	ldr	r2, [r2, #0]
 8011a74:	3b04      	subs	r3, #4
 8011a76:	2a00      	cmp	r2, #0
 8011a78:	d1cc      	bne.n	8011a14 <quorem+0x9c>
 8011a7a:	3c01      	subs	r4, #1
 8011a7c:	e7c7      	b.n	8011a0e <quorem+0x96>
 8011a7e:	6812      	ldr	r2, [r2, #0]
 8011a80:	3b04      	subs	r3, #4
 8011a82:	2a00      	cmp	r2, #0
 8011a84:	d1f0      	bne.n	8011a68 <quorem+0xf0>
 8011a86:	3c01      	subs	r4, #1
 8011a88:	e7eb      	b.n	8011a62 <quorem+0xea>
 8011a8a:	2000      	movs	r0, #0
 8011a8c:	e7ee      	b.n	8011a6c <quorem+0xf4>
	...

08011a90 <_dtoa_r>:
 8011a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a94:	ed2d 8b04 	vpush	{d8-d9}
 8011a98:	ec57 6b10 	vmov	r6, r7, d0
 8011a9c:	b093      	sub	sp, #76	; 0x4c
 8011a9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011aa0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011aa4:	9106      	str	r1, [sp, #24]
 8011aa6:	ee10 aa10 	vmov	sl, s0
 8011aaa:	4604      	mov	r4, r0
 8011aac:	9209      	str	r2, [sp, #36]	; 0x24
 8011aae:	930c      	str	r3, [sp, #48]	; 0x30
 8011ab0:	46bb      	mov	fp, r7
 8011ab2:	b975      	cbnz	r5, 8011ad2 <_dtoa_r+0x42>
 8011ab4:	2010      	movs	r0, #16
 8011ab6:	f7fe fe89 	bl	80107cc <malloc>
 8011aba:	4602      	mov	r2, r0
 8011abc:	6260      	str	r0, [r4, #36]	; 0x24
 8011abe:	b920      	cbnz	r0, 8011aca <_dtoa_r+0x3a>
 8011ac0:	4ba7      	ldr	r3, [pc, #668]	; (8011d60 <_dtoa_r+0x2d0>)
 8011ac2:	21ea      	movs	r1, #234	; 0xea
 8011ac4:	48a7      	ldr	r0, [pc, #668]	; (8011d64 <_dtoa_r+0x2d4>)
 8011ac6:	f7ff ff29 	bl	801191c <__assert_func>
 8011aca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011ace:	6005      	str	r5, [r0, #0]
 8011ad0:	60c5      	str	r5, [r0, #12]
 8011ad2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011ad4:	6819      	ldr	r1, [r3, #0]
 8011ad6:	b151      	cbz	r1, 8011aee <_dtoa_r+0x5e>
 8011ad8:	685a      	ldr	r2, [r3, #4]
 8011ada:	604a      	str	r2, [r1, #4]
 8011adc:	2301      	movs	r3, #1
 8011ade:	4093      	lsls	r3, r2
 8011ae0:	608b      	str	r3, [r1, #8]
 8011ae2:	4620      	mov	r0, r4
 8011ae4:	f001 f858 	bl	8012b98 <_Bfree>
 8011ae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011aea:	2200      	movs	r2, #0
 8011aec:	601a      	str	r2, [r3, #0]
 8011aee:	1e3b      	subs	r3, r7, #0
 8011af0:	bfaa      	itet	ge
 8011af2:	2300      	movge	r3, #0
 8011af4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011af8:	f8c8 3000 	strge.w	r3, [r8]
 8011afc:	4b9a      	ldr	r3, [pc, #616]	; (8011d68 <_dtoa_r+0x2d8>)
 8011afe:	bfbc      	itt	lt
 8011b00:	2201      	movlt	r2, #1
 8011b02:	f8c8 2000 	strlt.w	r2, [r8]
 8011b06:	ea33 030b 	bics.w	r3, r3, fp
 8011b0a:	d11b      	bne.n	8011b44 <_dtoa_r+0xb4>
 8011b0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b0e:	f242 730f 	movw	r3, #9999	; 0x270f
 8011b12:	6013      	str	r3, [r2, #0]
 8011b14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011b18:	4333      	orrs	r3, r6
 8011b1a:	f000 8592 	beq.w	8012642 <_dtoa_r+0xbb2>
 8011b1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011b20:	b963      	cbnz	r3, 8011b3c <_dtoa_r+0xac>
 8011b22:	4b92      	ldr	r3, [pc, #584]	; (8011d6c <_dtoa_r+0x2dc>)
 8011b24:	e022      	b.n	8011b6c <_dtoa_r+0xdc>
 8011b26:	4b92      	ldr	r3, [pc, #584]	; (8011d70 <_dtoa_r+0x2e0>)
 8011b28:	9301      	str	r3, [sp, #4]
 8011b2a:	3308      	adds	r3, #8
 8011b2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011b2e:	6013      	str	r3, [r2, #0]
 8011b30:	9801      	ldr	r0, [sp, #4]
 8011b32:	b013      	add	sp, #76	; 0x4c
 8011b34:	ecbd 8b04 	vpop	{d8-d9}
 8011b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b3c:	4b8b      	ldr	r3, [pc, #556]	; (8011d6c <_dtoa_r+0x2dc>)
 8011b3e:	9301      	str	r3, [sp, #4]
 8011b40:	3303      	adds	r3, #3
 8011b42:	e7f3      	b.n	8011b2c <_dtoa_r+0x9c>
 8011b44:	2200      	movs	r2, #0
 8011b46:	2300      	movs	r3, #0
 8011b48:	4650      	mov	r0, sl
 8011b4a:	4659      	mov	r1, fp
 8011b4c:	f7ee ffcc 	bl	8000ae8 <__aeabi_dcmpeq>
 8011b50:	ec4b ab19 	vmov	d9, sl, fp
 8011b54:	4680      	mov	r8, r0
 8011b56:	b158      	cbz	r0, 8011b70 <_dtoa_r+0xe0>
 8011b58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b5a:	2301      	movs	r3, #1
 8011b5c:	6013      	str	r3, [r2, #0]
 8011b5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	f000 856b 	beq.w	801263c <_dtoa_r+0xbac>
 8011b66:	4883      	ldr	r0, [pc, #524]	; (8011d74 <_dtoa_r+0x2e4>)
 8011b68:	6018      	str	r0, [r3, #0]
 8011b6a:	1e43      	subs	r3, r0, #1
 8011b6c:	9301      	str	r3, [sp, #4]
 8011b6e:	e7df      	b.n	8011b30 <_dtoa_r+0xa0>
 8011b70:	ec4b ab10 	vmov	d0, sl, fp
 8011b74:	aa10      	add	r2, sp, #64	; 0x40
 8011b76:	a911      	add	r1, sp, #68	; 0x44
 8011b78:	4620      	mov	r0, r4
 8011b7a:	f001 faf5 	bl	8013168 <__d2b>
 8011b7e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8011b82:	ee08 0a10 	vmov	s16, r0
 8011b86:	2d00      	cmp	r5, #0
 8011b88:	f000 8084 	beq.w	8011c94 <_dtoa_r+0x204>
 8011b8c:	ee19 3a90 	vmov	r3, s19
 8011b90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011b94:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011b98:	4656      	mov	r6, sl
 8011b9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011b9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011ba2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011ba6:	4b74      	ldr	r3, [pc, #464]	; (8011d78 <_dtoa_r+0x2e8>)
 8011ba8:	2200      	movs	r2, #0
 8011baa:	4630      	mov	r0, r6
 8011bac:	4639      	mov	r1, r7
 8011bae:	f7ee fb7b 	bl	80002a8 <__aeabi_dsub>
 8011bb2:	a365      	add	r3, pc, #404	; (adr r3, 8011d48 <_dtoa_r+0x2b8>)
 8011bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bb8:	f7ee fd2e 	bl	8000618 <__aeabi_dmul>
 8011bbc:	a364      	add	r3, pc, #400	; (adr r3, 8011d50 <_dtoa_r+0x2c0>)
 8011bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bc2:	f7ee fb73 	bl	80002ac <__adddf3>
 8011bc6:	4606      	mov	r6, r0
 8011bc8:	4628      	mov	r0, r5
 8011bca:	460f      	mov	r7, r1
 8011bcc:	f7ee fcba 	bl	8000544 <__aeabi_i2d>
 8011bd0:	a361      	add	r3, pc, #388	; (adr r3, 8011d58 <_dtoa_r+0x2c8>)
 8011bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bd6:	f7ee fd1f 	bl	8000618 <__aeabi_dmul>
 8011bda:	4602      	mov	r2, r0
 8011bdc:	460b      	mov	r3, r1
 8011bde:	4630      	mov	r0, r6
 8011be0:	4639      	mov	r1, r7
 8011be2:	f7ee fb63 	bl	80002ac <__adddf3>
 8011be6:	4606      	mov	r6, r0
 8011be8:	460f      	mov	r7, r1
 8011bea:	f7ee ffc5 	bl	8000b78 <__aeabi_d2iz>
 8011bee:	2200      	movs	r2, #0
 8011bf0:	9000      	str	r0, [sp, #0]
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	4630      	mov	r0, r6
 8011bf6:	4639      	mov	r1, r7
 8011bf8:	f7ee ff80 	bl	8000afc <__aeabi_dcmplt>
 8011bfc:	b150      	cbz	r0, 8011c14 <_dtoa_r+0x184>
 8011bfe:	9800      	ldr	r0, [sp, #0]
 8011c00:	f7ee fca0 	bl	8000544 <__aeabi_i2d>
 8011c04:	4632      	mov	r2, r6
 8011c06:	463b      	mov	r3, r7
 8011c08:	f7ee ff6e 	bl	8000ae8 <__aeabi_dcmpeq>
 8011c0c:	b910      	cbnz	r0, 8011c14 <_dtoa_r+0x184>
 8011c0e:	9b00      	ldr	r3, [sp, #0]
 8011c10:	3b01      	subs	r3, #1
 8011c12:	9300      	str	r3, [sp, #0]
 8011c14:	9b00      	ldr	r3, [sp, #0]
 8011c16:	2b16      	cmp	r3, #22
 8011c18:	d85a      	bhi.n	8011cd0 <_dtoa_r+0x240>
 8011c1a:	9a00      	ldr	r2, [sp, #0]
 8011c1c:	4b57      	ldr	r3, [pc, #348]	; (8011d7c <_dtoa_r+0x2ec>)
 8011c1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c26:	ec51 0b19 	vmov	r0, r1, d9
 8011c2a:	f7ee ff67 	bl	8000afc <__aeabi_dcmplt>
 8011c2e:	2800      	cmp	r0, #0
 8011c30:	d050      	beq.n	8011cd4 <_dtoa_r+0x244>
 8011c32:	9b00      	ldr	r3, [sp, #0]
 8011c34:	3b01      	subs	r3, #1
 8011c36:	9300      	str	r3, [sp, #0]
 8011c38:	2300      	movs	r3, #0
 8011c3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8011c3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011c3e:	1b5d      	subs	r5, r3, r5
 8011c40:	1e6b      	subs	r3, r5, #1
 8011c42:	9305      	str	r3, [sp, #20]
 8011c44:	bf45      	ittet	mi
 8011c46:	f1c5 0301 	rsbmi	r3, r5, #1
 8011c4a:	9304      	strmi	r3, [sp, #16]
 8011c4c:	2300      	movpl	r3, #0
 8011c4e:	2300      	movmi	r3, #0
 8011c50:	bf4c      	ite	mi
 8011c52:	9305      	strmi	r3, [sp, #20]
 8011c54:	9304      	strpl	r3, [sp, #16]
 8011c56:	9b00      	ldr	r3, [sp, #0]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	db3d      	blt.n	8011cd8 <_dtoa_r+0x248>
 8011c5c:	9b05      	ldr	r3, [sp, #20]
 8011c5e:	9a00      	ldr	r2, [sp, #0]
 8011c60:	920a      	str	r2, [sp, #40]	; 0x28
 8011c62:	4413      	add	r3, r2
 8011c64:	9305      	str	r3, [sp, #20]
 8011c66:	2300      	movs	r3, #0
 8011c68:	9307      	str	r3, [sp, #28]
 8011c6a:	9b06      	ldr	r3, [sp, #24]
 8011c6c:	2b09      	cmp	r3, #9
 8011c6e:	f200 8089 	bhi.w	8011d84 <_dtoa_r+0x2f4>
 8011c72:	2b05      	cmp	r3, #5
 8011c74:	bfc4      	itt	gt
 8011c76:	3b04      	subgt	r3, #4
 8011c78:	9306      	strgt	r3, [sp, #24]
 8011c7a:	9b06      	ldr	r3, [sp, #24]
 8011c7c:	f1a3 0302 	sub.w	r3, r3, #2
 8011c80:	bfcc      	ite	gt
 8011c82:	2500      	movgt	r5, #0
 8011c84:	2501      	movle	r5, #1
 8011c86:	2b03      	cmp	r3, #3
 8011c88:	f200 8087 	bhi.w	8011d9a <_dtoa_r+0x30a>
 8011c8c:	e8df f003 	tbb	[pc, r3]
 8011c90:	59383a2d 	.word	0x59383a2d
 8011c94:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011c98:	441d      	add	r5, r3
 8011c9a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011c9e:	2b20      	cmp	r3, #32
 8011ca0:	bfc1      	itttt	gt
 8011ca2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011ca6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011caa:	fa0b f303 	lslgt.w	r3, fp, r3
 8011cae:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011cb2:	bfda      	itte	le
 8011cb4:	f1c3 0320 	rsble	r3, r3, #32
 8011cb8:	fa06 f003 	lslle.w	r0, r6, r3
 8011cbc:	4318      	orrgt	r0, r3
 8011cbe:	f7ee fc31 	bl	8000524 <__aeabi_ui2d>
 8011cc2:	2301      	movs	r3, #1
 8011cc4:	4606      	mov	r6, r0
 8011cc6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011cca:	3d01      	subs	r5, #1
 8011ccc:	930e      	str	r3, [sp, #56]	; 0x38
 8011cce:	e76a      	b.n	8011ba6 <_dtoa_r+0x116>
 8011cd0:	2301      	movs	r3, #1
 8011cd2:	e7b2      	b.n	8011c3a <_dtoa_r+0x1aa>
 8011cd4:	900b      	str	r0, [sp, #44]	; 0x2c
 8011cd6:	e7b1      	b.n	8011c3c <_dtoa_r+0x1ac>
 8011cd8:	9b04      	ldr	r3, [sp, #16]
 8011cda:	9a00      	ldr	r2, [sp, #0]
 8011cdc:	1a9b      	subs	r3, r3, r2
 8011cde:	9304      	str	r3, [sp, #16]
 8011ce0:	4253      	negs	r3, r2
 8011ce2:	9307      	str	r3, [sp, #28]
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	930a      	str	r3, [sp, #40]	; 0x28
 8011ce8:	e7bf      	b.n	8011c6a <_dtoa_r+0x1da>
 8011cea:	2300      	movs	r3, #0
 8011cec:	9308      	str	r3, [sp, #32]
 8011cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	dc55      	bgt.n	8011da0 <_dtoa_r+0x310>
 8011cf4:	2301      	movs	r3, #1
 8011cf6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011cfa:	461a      	mov	r2, r3
 8011cfc:	9209      	str	r2, [sp, #36]	; 0x24
 8011cfe:	e00c      	b.n	8011d1a <_dtoa_r+0x28a>
 8011d00:	2301      	movs	r3, #1
 8011d02:	e7f3      	b.n	8011cec <_dtoa_r+0x25c>
 8011d04:	2300      	movs	r3, #0
 8011d06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d08:	9308      	str	r3, [sp, #32]
 8011d0a:	9b00      	ldr	r3, [sp, #0]
 8011d0c:	4413      	add	r3, r2
 8011d0e:	9302      	str	r3, [sp, #8]
 8011d10:	3301      	adds	r3, #1
 8011d12:	2b01      	cmp	r3, #1
 8011d14:	9303      	str	r3, [sp, #12]
 8011d16:	bfb8      	it	lt
 8011d18:	2301      	movlt	r3, #1
 8011d1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011d1c:	2200      	movs	r2, #0
 8011d1e:	6042      	str	r2, [r0, #4]
 8011d20:	2204      	movs	r2, #4
 8011d22:	f102 0614 	add.w	r6, r2, #20
 8011d26:	429e      	cmp	r6, r3
 8011d28:	6841      	ldr	r1, [r0, #4]
 8011d2a:	d93d      	bls.n	8011da8 <_dtoa_r+0x318>
 8011d2c:	4620      	mov	r0, r4
 8011d2e:	f000 fef3 	bl	8012b18 <_Balloc>
 8011d32:	9001      	str	r0, [sp, #4]
 8011d34:	2800      	cmp	r0, #0
 8011d36:	d13b      	bne.n	8011db0 <_dtoa_r+0x320>
 8011d38:	4b11      	ldr	r3, [pc, #68]	; (8011d80 <_dtoa_r+0x2f0>)
 8011d3a:	4602      	mov	r2, r0
 8011d3c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011d40:	e6c0      	b.n	8011ac4 <_dtoa_r+0x34>
 8011d42:	2301      	movs	r3, #1
 8011d44:	e7df      	b.n	8011d06 <_dtoa_r+0x276>
 8011d46:	bf00      	nop
 8011d48:	636f4361 	.word	0x636f4361
 8011d4c:	3fd287a7 	.word	0x3fd287a7
 8011d50:	8b60c8b3 	.word	0x8b60c8b3
 8011d54:	3fc68a28 	.word	0x3fc68a28
 8011d58:	509f79fb 	.word	0x509f79fb
 8011d5c:	3fd34413 	.word	0x3fd34413
 8011d60:	0801486a 	.word	0x0801486a
 8011d64:	08014a28 	.word	0x08014a28
 8011d68:	7ff00000 	.word	0x7ff00000
 8011d6c:	08014a24 	.word	0x08014a24
 8011d70:	08014a1b 	.word	0x08014a1b
 8011d74:	08014c62 	.word	0x08014c62
 8011d78:	3ff80000 	.word	0x3ff80000
 8011d7c:	08014b78 	.word	0x08014b78
 8011d80:	08014a83 	.word	0x08014a83
 8011d84:	2501      	movs	r5, #1
 8011d86:	2300      	movs	r3, #0
 8011d88:	9306      	str	r3, [sp, #24]
 8011d8a:	9508      	str	r5, [sp, #32]
 8011d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8011d90:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011d94:	2200      	movs	r2, #0
 8011d96:	2312      	movs	r3, #18
 8011d98:	e7b0      	b.n	8011cfc <_dtoa_r+0x26c>
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	9308      	str	r3, [sp, #32]
 8011d9e:	e7f5      	b.n	8011d8c <_dtoa_r+0x2fc>
 8011da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011da2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011da6:	e7b8      	b.n	8011d1a <_dtoa_r+0x28a>
 8011da8:	3101      	adds	r1, #1
 8011daa:	6041      	str	r1, [r0, #4]
 8011dac:	0052      	lsls	r2, r2, #1
 8011dae:	e7b8      	b.n	8011d22 <_dtoa_r+0x292>
 8011db0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011db2:	9a01      	ldr	r2, [sp, #4]
 8011db4:	601a      	str	r2, [r3, #0]
 8011db6:	9b03      	ldr	r3, [sp, #12]
 8011db8:	2b0e      	cmp	r3, #14
 8011dba:	f200 809d 	bhi.w	8011ef8 <_dtoa_r+0x468>
 8011dbe:	2d00      	cmp	r5, #0
 8011dc0:	f000 809a 	beq.w	8011ef8 <_dtoa_r+0x468>
 8011dc4:	9b00      	ldr	r3, [sp, #0]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	dd32      	ble.n	8011e30 <_dtoa_r+0x3a0>
 8011dca:	4ab7      	ldr	r2, [pc, #732]	; (80120a8 <_dtoa_r+0x618>)
 8011dcc:	f003 030f 	and.w	r3, r3, #15
 8011dd0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011dd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011dd8:	9b00      	ldr	r3, [sp, #0]
 8011dda:	05d8      	lsls	r0, r3, #23
 8011ddc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011de0:	d516      	bpl.n	8011e10 <_dtoa_r+0x380>
 8011de2:	4bb2      	ldr	r3, [pc, #712]	; (80120ac <_dtoa_r+0x61c>)
 8011de4:	ec51 0b19 	vmov	r0, r1, d9
 8011de8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011dec:	f7ee fd3e 	bl	800086c <__aeabi_ddiv>
 8011df0:	f007 070f 	and.w	r7, r7, #15
 8011df4:	4682      	mov	sl, r0
 8011df6:	468b      	mov	fp, r1
 8011df8:	2503      	movs	r5, #3
 8011dfa:	4eac      	ldr	r6, [pc, #688]	; (80120ac <_dtoa_r+0x61c>)
 8011dfc:	b957      	cbnz	r7, 8011e14 <_dtoa_r+0x384>
 8011dfe:	4642      	mov	r2, r8
 8011e00:	464b      	mov	r3, r9
 8011e02:	4650      	mov	r0, sl
 8011e04:	4659      	mov	r1, fp
 8011e06:	f7ee fd31 	bl	800086c <__aeabi_ddiv>
 8011e0a:	4682      	mov	sl, r0
 8011e0c:	468b      	mov	fp, r1
 8011e0e:	e028      	b.n	8011e62 <_dtoa_r+0x3d2>
 8011e10:	2502      	movs	r5, #2
 8011e12:	e7f2      	b.n	8011dfa <_dtoa_r+0x36a>
 8011e14:	07f9      	lsls	r1, r7, #31
 8011e16:	d508      	bpl.n	8011e2a <_dtoa_r+0x39a>
 8011e18:	4640      	mov	r0, r8
 8011e1a:	4649      	mov	r1, r9
 8011e1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011e20:	f7ee fbfa 	bl	8000618 <__aeabi_dmul>
 8011e24:	3501      	adds	r5, #1
 8011e26:	4680      	mov	r8, r0
 8011e28:	4689      	mov	r9, r1
 8011e2a:	107f      	asrs	r7, r7, #1
 8011e2c:	3608      	adds	r6, #8
 8011e2e:	e7e5      	b.n	8011dfc <_dtoa_r+0x36c>
 8011e30:	f000 809b 	beq.w	8011f6a <_dtoa_r+0x4da>
 8011e34:	9b00      	ldr	r3, [sp, #0]
 8011e36:	4f9d      	ldr	r7, [pc, #628]	; (80120ac <_dtoa_r+0x61c>)
 8011e38:	425e      	negs	r6, r3
 8011e3a:	4b9b      	ldr	r3, [pc, #620]	; (80120a8 <_dtoa_r+0x618>)
 8011e3c:	f006 020f 	and.w	r2, r6, #15
 8011e40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e48:	ec51 0b19 	vmov	r0, r1, d9
 8011e4c:	f7ee fbe4 	bl	8000618 <__aeabi_dmul>
 8011e50:	1136      	asrs	r6, r6, #4
 8011e52:	4682      	mov	sl, r0
 8011e54:	468b      	mov	fp, r1
 8011e56:	2300      	movs	r3, #0
 8011e58:	2502      	movs	r5, #2
 8011e5a:	2e00      	cmp	r6, #0
 8011e5c:	d17a      	bne.n	8011f54 <_dtoa_r+0x4c4>
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d1d3      	bne.n	8011e0a <_dtoa_r+0x37a>
 8011e62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	f000 8082 	beq.w	8011f6e <_dtoa_r+0x4de>
 8011e6a:	4b91      	ldr	r3, [pc, #580]	; (80120b0 <_dtoa_r+0x620>)
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	4650      	mov	r0, sl
 8011e70:	4659      	mov	r1, fp
 8011e72:	f7ee fe43 	bl	8000afc <__aeabi_dcmplt>
 8011e76:	2800      	cmp	r0, #0
 8011e78:	d079      	beq.n	8011f6e <_dtoa_r+0x4de>
 8011e7a:	9b03      	ldr	r3, [sp, #12]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d076      	beq.n	8011f6e <_dtoa_r+0x4de>
 8011e80:	9b02      	ldr	r3, [sp, #8]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	dd36      	ble.n	8011ef4 <_dtoa_r+0x464>
 8011e86:	9b00      	ldr	r3, [sp, #0]
 8011e88:	4650      	mov	r0, sl
 8011e8a:	4659      	mov	r1, fp
 8011e8c:	1e5f      	subs	r7, r3, #1
 8011e8e:	2200      	movs	r2, #0
 8011e90:	4b88      	ldr	r3, [pc, #544]	; (80120b4 <_dtoa_r+0x624>)
 8011e92:	f7ee fbc1 	bl	8000618 <__aeabi_dmul>
 8011e96:	9e02      	ldr	r6, [sp, #8]
 8011e98:	4682      	mov	sl, r0
 8011e9a:	468b      	mov	fp, r1
 8011e9c:	3501      	adds	r5, #1
 8011e9e:	4628      	mov	r0, r5
 8011ea0:	f7ee fb50 	bl	8000544 <__aeabi_i2d>
 8011ea4:	4652      	mov	r2, sl
 8011ea6:	465b      	mov	r3, fp
 8011ea8:	f7ee fbb6 	bl	8000618 <__aeabi_dmul>
 8011eac:	4b82      	ldr	r3, [pc, #520]	; (80120b8 <_dtoa_r+0x628>)
 8011eae:	2200      	movs	r2, #0
 8011eb0:	f7ee f9fc 	bl	80002ac <__adddf3>
 8011eb4:	46d0      	mov	r8, sl
 8011eb6:	46d9      	mov	r9, fp
 8011eb8:	4682      	mov	sl, r0
 8011eba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8011ebe:	2e00      	cmp	r6, #0
 8011ec0:	d158      	bne.n	8011f74 <_dtoa_r+0x4e4>
 8011ec2:	4b7e      	ldr	r3, [pc, #504]	; (80120bc <_dtoa_r+0x62c>)
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	4640      	mov	r0, r8
 8011ec8:	4649      	mov	r1, r9
 8011eca:	f7ee f9ed 	bl	80002a8 <__aeabi_dsub>
 8011ece:	4652      	mov	r2, sl
 8011ed0:	465b      	mov	r3, fp
 8011ed2:	4680      	mov	r8, r0
 8011ed4:	4689      	mov	r9, r1
 8011ed6:	f7ee fe2f 	bl	8000b38 <__aeabi_dcmpgt>
 8011eda:	2800      	cmp	r0, #0
 8011edc:	f040 8295 	bne.w	801240a <_dtoa_r+0x97a>
 8011ee0:	4652      	mov	r2, sl
 8011ee2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011ee6:	4640      	mov	r0, r8
 8011ee8:	4649      	mov	r1, r9
 8011eea:	f7ee fe07 	bl	8000afc <__aeabi_dcmplt>
 8011eee:	2800      	cmp	r0, #0
 8011ef0:	f040 8289 	bne.w	8012406 <_dtoa_r+0x976>
 8011ef4:	ec5b ab19 	vmov	sl, fp, d9
 8011ef8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	f2c0 8148 	blt.w	8012190 <_dtoa_r+0x700>
 8011f00:	9a00      	ldr	r2, [sp, #0]
 8011f02:	2a0e      	cmp	r2, #14
 8011f04:	f300 8144 	bgt.w	8012190 <_dtoa_r+0x700>
 8011f08:	4b67      	ldr	r3, [pc, #412]	; (80120a8 <_dtoa_r+0x618>)
 8011f0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011f0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	f280 80d5 	bge.w	80120c4 <_dtoa_r+0x634>
 8011f1a:	9b03      	ldr	r3, [sp, #12]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	f300 80d1 	bgt.w	80120c4 <_dtoa_r+0x634>
 8011f22:	f040 826f 	bne.w	8012404 <_dtoa_r+0x974>
 8011f26:	4b65      	ldr	r3, [pc, #404]	; (80120bc <_dtoa_r+0x62c>)
 8011f28:	2200      	movs	r2, #0
 8011f2a:	4640      	mov	r0, r8
 8011f2c:	4649      	mov	r1, r9
 8011f2e:	f7ee fb73 	bl	8000618 <__aeabi_dmul>
 8011f32:	4652      	mov	r2, sl
 8011f34:	465b      	mov	r3, fp
 8011f36:	f7ee fdf5 	bl	8000b24 <__aeabi_dcmpge>
 8011f3a:	9e03      	ldr	r6, [sp, #12]
 8011f3c:	4637      	mov	r7, r6
 8011f3e:	2800      	cmp	r0, #0
 8011f40:	f040 8245 	bne.w	80123ce <_dtoa_r+0x93e>
 8011f44:	9d01      	ldr	r5, [sp, #4]
 8011f46:	2331      	movs	r3, #49	; 0x31
 8011f48:	f805 3b01 	strb.w	r3, [r5], #1
 8011f4c:	9b00      	ldr	r3, [sp, #0]
 8011f4e:	3301      	adds	r3, #1
 8011f50:	9300      	str	r3, [sp, #0]
 8011f52:	e240      	b.n	80123d6 <_dtoa_r+0x946>
 8011f54:	07f2      	lsls	r2, r6, #31
 8011f56:	d505      	bpl.n	8011f64 <_dtoa_r+0x4d4>
 8011f58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011f5c:	f7ee fb5c 	bl	8000618 <__aeabi_dmul>
 8011f60:	3501      	adds	r5, #1
 8011f62:	2301      	movs	r3, #1
 8011f64:	1076      	asrs	r6, r6, #1
 8011f66:	3708      	adds	r7, #8
 8011f68:	e777      	b.n	8011e5a <_dtoa_r+0x3ca>
 8011f6a:	2502      	movs	r5, #2
 8011f6c:	e779      	b.n	8011e62 <_dtoa_r+0x3d2>
 8011f6e:	9f00      	ldr	r7, [sp, #0]
 8011f70:	9e03      	ldr	r6, [sp, #12]
 8011f72:	e794      	b.n	8011e9e <_dtoa_r+0x40e>
 8011f74:	9901      	ldr	r1, [sp, #4]
 8011f76:	4b4c      	ldr	r3, [pc, #304]	; (80120a8 <_dtoa_r+0x618>)
 8011f78:	4431      	add	r1, r6
 8011f7a:	910d      	str	r1, [sp, #52]	; 0x34
 8011f7c:	9908      	ldr	r1, [sp, #32]
 8011f7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011f82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011f86:	2900      	cmp	r1, #0
 8011f88:	d043      	beq.n	8012012 <_dtoa_r+0x582>
 8011f8a:	494d      	ldr	r1, [pc, #308]	; (80120c0 <_dtoa_r+0x630>)
 8011f8c:	2000      	movs	r0, #0
 8011f8e:	f7ee fc6d 	bl	800086c <__aeabi_ddiv>
 8011f92:	4652      	mov	r2, sl
 8011f94:	465b      	mov	r3, fp
 8011f96:	f7ee f987 	bl	80002a8 <__aeabi_dsub>
 8011f9a:	9d01      	ldr	r5, [sp, #4]
 8011f9c:	4682      	mov	sl, r0
 8011f9e:	468b      	mov	fp, r1
 8011fa0:	4649      	mov	r1, r9
 8011fa2:	4640      	mov	r0, r8
 8011fa4:	f7ee fde8 	bl	8000b78 <__aeabi_d2iz>
 8011fa8:	4606      	mov	r6, r0
 8011faa:	f7ee facb 	bl	8000544 <__aeabi_i2d>
 8011fae:	4602      	mov	r2, r0
 8011fb0:	460b      	mov	r3, r1
 8011fb2:	4640      	mov	r0, r8
 8011fb4:	4649      	mov	r1, r9
 8011fb6:	f7ee f977 	bl	80002a8 <__aeabi_dsub>
 8011fba:	3630      	adds	r6, #48	; 0x30
 8011fbc:	f805 6b01 	strb.w	r6, [r5], #1
 8011fc0:	4652      	mov	r2, sl
 8011fc2:	465b      	mov	r3, fp
 8011fc4:	4680      	mov	r8, r0
 8011fc6:	4689      	mov	r9, r1
 8011fc8:	f7ee fd98 	bl	8000afc <__aeabi_dcmplt>
 8011fcc:	2800      	cmp	r0, #0
 8011fce:	d163      	bne.n	8012098 <_dtoa_r+0x608>
 8011fd0:	4642      	mov	r2, r8
 8011fd2:	464b      	mov	r3, r9
 8011fd4:	4936      	ldr	r1, [pc, #216]	; (80120b0 <_dtoa_r+0x620>)
 8011fd6:	2000      	movs	r0, #0
 8011fd8:	f7ee f966 	bl	80002a8 <__aeabi_dsub>
 8011fdc:	4652      	mov	r2, sl
 8011fde:	465b      	mov	r3, fp
 8011fe0:	f7ee fd8c 	bl	8000afc <__aeabi_dcmplt>
 8011fe4:	2800      	cmp	r0, #0
 8011fe6:	f040 80b5 	bne.w	8012154 <_dtoa_r+0x6c4>
 8011fea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011fec:	429d      	cmp	r5, r3
 8011fee:	d081      	beq.n	8011ef4 <_dtoa_r+0x464>
 8011ff0:	4b30      	ldr	r3, [pc, #192]	; (80120b4 <_dtoa_r+0x624>)
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	4650      	mov	r0, sl
 8011ff6:	4659      	mov	r1, fp
 8011ff8:	f7ee fb0e 	bl	8000618 <__aeabi_dmul>
 8011ffc:	4b2d      	ldr	r3, [pc, #180]	; (80120b4 <_dtoa_r+0x624>)
 8011ffe:	4682      	mov	sl, r0
 8012000:	468b      	mov	fp, r1
 8012002:	4640      	mov	r0, r8
 8012004:	4649      	mov	r1, r9
 8012006:	2200      	movs	r2, #0
 8012008:	f7ee fb06 	bl	8000618 <__aeabi_dmul>
 801200c:	4680      	mov	r8, r0
 801200e:	4689      	mov	r9, r1
 8012010:	e7c6      	b.n	8011fa0 <_dtoa_r+0x510>
 8012012:	4650      	mov	r0, sl
 8012014:	4659      	mov	r1, fp
 8012016:	f7ee faff 	bl	8000618 <__aeabi_dmul>
 801201a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801201c:	9d01      	ldr	r5, [sp, #4]
 801201e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012020:	4682      	mov	sl, r0
 8012022:	468b      	mov	fp, r1
 8012024:	4649      	mov	r1, r9
 8012026:	4640      	mov	r0, r8
 8012028:	f7ee fda6 	bl	8000b78 <__aeabi_d2iz>
 801202c:	4606      	mov	r6, r0
 801202e:	f7ee fa89 	bl	8000544 <__aeabi_i2d>
 8012032:	3630      	adds	r6, #48	; 0x30
 8012034:	4602      	mov	r2, r0
 8012036:	460b      	mov	r3, r1
 8012038:	4640      	mov	r0, r8
 801203a:	4649      	mov	r1, r9
 801203c:	f7ee f934 	bl	80002a8 <__aeabi_dsub>
 8012040:	f805 6b01 	strb.w	r6, [r5], #1
 8012044:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012046:	429d      	cmp	r5, r3
 8012048:	4680      	mov	r8, r0
 801204a:	4689      	mov	r9, r1
 801204c:	f04f 0200 	mov.w	r2, #0
 8012050:	d124      	bne.n	801209c <_dtoa_r+0x60c>
 8012052:	4b1b      	ldr	r3, [pc, #108]	; (80120c0 <_dtoa_r+0x630>)
 8012054:	4650      	mov	r0, sl
 8012056:	4659      	mov	r1, fp
 8012058:	f7ee f928 	bl	80002ac <__adddf3>
 801205c:	4602      	mov	r2, r0
 801205e:	460b      	mov	r3, r1
 8012060:	4640      	mov	r0, r8
 8012062:	4649      	mov	r1, r9
 8012064:	f7ee fd68 	bl	8000b38 <__aeabi_dcmpgt>
 8012068:	2800      	cmp	r0, #0
 801206a:	d173      	bne.n	8012154 <_dtoa_r+0x6c4>
 801206c:	4652      	mov	r2, sl
 801206e:	465b      	mov	r3, fp
 8012070:	4913      	ldr	r1, [pc, #76]	; (80120c0 <_dtoa_r+0x630>)
 8012072:	2000      	movs	r0, #0
 8012074:	f7ee f918 	bl	80002a8 <__aeabi_dsub>
 8012078:	4602      	mov	r2, r0
 801207a:	460b      	mov	r3, r1
 801207c:	4640      	mov	r0, r8
 801207e:	4649      	mov	r1, r9
 8012080:	f7ee fd3c 	bl	8000afc <__aeabi_dcmplt>
 8012084:	2800      	cmp	r0, #0
 8012086:	f43f af35 	beq.w	8011ef4 <_dtoa_r+0x464>
 801208a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801208c:	1e6b      	subs	r3, r5, #1
 801208e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012090:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012094:	2b30      	cmp	r3, #48	; 0x30
 8012096:	d0f8      	beq.n	801208a <_dtoa_r+0x5fa>
 8012098:	9700      	str	r7, [sp, #0]
 801209a:	e049      	b.n	8012130 <_dtoa_r+0x6a0>
 801209c:	4b05      	ldr	r3, [pc, #20]	; (80120b4 <_dtoa_r+0x624>)
 801209e:	f7ee fabb 	bl	8000618 <__aeabi_dmul>
 80120a2:	4680      	mov	r8, r0
 80120a4:	4689      	mov	r9, r1
 80120a6:	e7bd      	b.n	8012024 <_dtoa_r+0x594>
 80120a8:	08014b78 	.word	0x08014b78
 80120ac:	08014b50 	.word	0x08014b50
 80120b0:	3ff00000 	.word	0x3ff00000
 80120b4:	40240000 	.word	0x40240000
 80120b8:	401c0000 	.word	0x401c0000
 80120bc:	40140000 	.word	0x40140000
 80120c0:	3fe00000 	.word	0x3fe00000
 80120c4:	9d01      	ldr	r5, [sp, #4]
 80120c6:	4656      	mov	r6, sl
 80120c8:	465f      	mov	r7, fp
 80120ca:	4642      	mov	r2, r8
 80120cc:	464b      	mov	r3, r9
 80120ce:	4630      	mov	r0, r6
 80120d0:	4639      	mov	r1, r7
 80120d2:	f7ee fbcb 	bl	800086c <__aeabi_ddiv>
 80120d6:	f7ee fd4f 	bl	8000b78 <__aeabi_d2iz>
 80120da:	4682      	mov	sl, r0
 80120dc:	f7ee fa32 	bl	8000544 <__aeabi_i2d>
 80120e0:	4642      	mov	r2, r8
 80120e2:	464b      	mov	r3, r9
 80120e4:	f7ee fa98 	bl	8000618 <__aeabi_dmul>
 80120e8:	4602      	mov	r2, r0
 80120ea:	460b      	mov	r3, r1
 80120ec:	4630      	mov	r0, r6
 80120ee:	4639      	mov	r1, r7
 80120f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80120f4:	f7ee f8d8 	bl	80002a8 <__aeabi_dsub>
 80120f8:	f805 6b01 	strb.w	r6, [r5], #1
 80120fc:	9e01      	ldr	r6, [sp, #4]
 80120fe:	9f03      	ldr	r7, [sp, #12]
 8012100:	1bae      	subs	r6, r5, r6
 8012102:	42b7      	cmp	r7, r6
 8012104:	4602      	mov	r2, r0
 8012106:	460b      	mov	r3, r1
 8012108:	d135      	bne.n	8012176 <_dtoa_r+0x6e6>
 801210a:	f7ee f8cf 	bl	80002ac <__adddf3>
 801210e:	4642      	mov	r2, r8
 8012110:	464b      	mov	r3, r9
 8012112:	4606      	mov	r6, r0
 8012114:	460f      	mov	r7, r1
 8012116:	f7ee fd0f 	bl	8000b38 <__aeabi_dcmpgt>
 801211a:	b9d0      	cbnz	r0, 8012152 <_dtoa_r+0x6c2>
 801211c:	4642      	mov	r2, r8
 801211e:	464b      	mov	r3, r9
 8012120:	4630      	mov	r0, r6
 8012122:	4639      	mov	r1, r7
 8012124:	f7ee fce0 	bl	8000ae8 <__aeabi_dcmpeq>
 8012128:	b110      	cbz	r0, 8012130 <_dtoa_r+0x6a0>
 801212a:	f01a 0f01 	tst.w	sl, #1
 801212e:	d110      	bne.n	8012152 <_dtoa_r+0x6c2>
 8012130:	4620      	mov	r0, r4
 8012132:	ee18 1a10 	vmov	r1, s16
 8012136:	f000 fd2f 	bl	8012b98 <_Bfree>
 801213a:	2300      	movs	r3, #0
 801213c:	9800      	ldr	r0, [sp, #0]
 801213e:	702b      	strb	r3, [r5, #0]
 8012140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012142:	3001      	adds	r0, #1
 8012144:	6018      	str	r0, [r3, #0]
 8012146:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012148:	2b00      	cmp	r3, #0
 801214a:	f43f acf1 	beq.w	8011b30 <_dtoa_r+0xa0>
 801214e:	601d      	str	r5, [r3, #0]
 8012150:	e4ee      	b.n	8011b30 <_dtoa_r+0xa0>
 8012152:	9f00      	ldr	r7, [sp, #0]
 8012154:	462b      	mov	r3, r5
 8012156:	461d      	mov	r5, r3
 8012158:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801215c:	2a39      	cmp	r2, #57	; 0x39
 801215e:	d106      	bne.n	801216e <_dtoa_r+0x6de>
 8012160:	9a01      	ldr	r2, [sp, #4]
 8012162:	429a      	cmp	r2, r3
 8012164:	d1f7      	bne.n	8012156 <_dtoa_r+0x6c6>
 8012166:	9901      	ldr	r1, [sp, #4]
 8012168:	2230      	movs	r2, #48	; 0x30
 801216a:	3701      	adds	r7, #1
 801216c:	700a      	strb	r2, [r1, #0]
 801216e:	781a      	ldrb	r2, [r3, #0]
 8012170:	3201      	adds	r2, #1
 8012172:	701a      	strb	r2, [r3, #0]
 8012174:	e790      	b.n	8012098 <_dtoa_r+0x608>
 8012176:	4ba6      	ldr	r3, [pc, #664]	; (8012410 <_dtoa_r+0x980>)
 8012178:	2200      	movs	r2, #0
 801217a:	f7ee fa4d 	bl	8000618 <__aeabi_dmul>
 801217e:	2200      	movs	r2, #0
 8012180:	2300      	movs	r3, #0
 8012182:	4606      	mov	r6, r0
 8012184:	460f      	mov	r7, r1
 8012186:	f7ee fcaf 	bl	8000ae8 <__aeabi_dcmpeq>
 801218a:	2800      	cmp	r0, #0
 801218c:	d09d      	beq.n	80120ca <_dtoa_r+0x63a>
 801218e:	e7cf      	b.n	8012130 <_dtoa_r+0x6a0>
 8012190:	9a08      	ldr	r2, [sp, #32]
 8012192:	2a00      	cmp	r2, #0
 8012194:	f000 80d7 	beq.w	8012346 <_dtoa_r+0x8b6>
 8012198:	9a06      	ldr	r2, [sp, #24]
 801219a:	2a01      	cmp	r2, #1
 801219c:	f300 80ba 	bgt.w	8012314 <_dtoa_r+0x884>
 80121a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80121a2:	2a00      	cmp	r2, #0
 80121a4:	f000 80b2 	beq.w	801230c <_dtoa_r+0x87c>
 80121a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80121ac:	9e07      	ldr	r6, [sp, #28]
 80121ae:	9d04      	ldr	r5, [sp, #16]
 80121b0:	9a04      	ldr	r2, [sp, #16]
 80121b2:	441a      	add	r2, r3
 80121b4:	9204      	str	r2, [sp, #16]
 80121b6:	9a05      	ldr	r2, [sp, #20]
 80121b8:	2101      	movs	r1, #1
 80121ba:	441a      	add	r2, r3
 80121bc:	4620      	mov	r0, r4
 80121be:	9205      	str	r2, [sp, #20]
 80121c0:	f000 fda2 	bl	8012d08 <__i2b>
 80121c4:	4607      	mov	r7, r0
 80121c6:	2d00      	cmp	r5, #0
 80121c8:	dd0c      	ble.n	80121e4 <_dtoa_r+0x754>
 80121ca:	9b05      	ldr	r3, [sp, #20]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	dd09      	ble.n	80121e4 <_dtoa_r+0x754>
 80121d0:	42ab      	cmp	r3, r5
 80121d2:	9a04      	ldr	r2, [sp, #16]
 80121d4:	bfa8      	it	ge
 80121d6:	462b      	movge	r3, r5
 80121d8:	1ad2      	subs	r2, r2, r3
 80121da:	9204      	str	r2, [sp, #16]
 80121dc:	9a05      	ldr	r2, [sp, #20]
 80121de:	1aed      	subs	r5, r5, r3
 80121e0:	1ad3      	subs	r3, r2, r3
 80121e2:	9305      	str	r3, [sp, #20]
 80121e4:	9b07      	ldr	r3, [sp, #28]
 80121e6:	b31b      	cbz	r3, 8012230 <_dtoa_r+0x7a0>
 80121e8:	9b08      	ldr	r3, [sp, #32]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	f000 80af 	beq.w	801234e <_dtoa_r+0x8be>
 80121f0:	2e00      	cmp	r6, #0
 80121f2:	dd13      	ble.n	801221c <_dtoa_r+0x78c>
 80121f4:	4639      	mov	r1, r7
 80121f6:	4632      	mov	r2, r6
 80121f8:	4620      	mov	r0, r4
 80121fa:	f000 fe45 	bl	8012e88 <__pow5mult>
 80121fe:	ee18 2a10 	vmov	r2, s16
 8012202:	4601      	mov	r1, r0
 8012204:	4607      	mov	r7, r0
 8012206:	4620      	mov	r0, r4
 8012208:	f000 fd94 	bl	8012d34 <__multiply>
 801220c:	ee18 1a10 	vmov	r1, s16
 8012210:	4680      	mov	r8, r0
 8012212:	4620      	mov	r0, r4
 8012214:	f000 fcc0 	bl	8012b98 <_Bfree>
 8012218:	ee08 8a10 	vmov	s16, r8
 801221c:	9b07      	ldr	r3, [sp, #28]
 801221e:	1b9a      	subs	r2, r3, r6
 8012220:	d006      	beq.n	8012230 <_dtoa_r+0x7a0>
 8012222:	ee18 1a10 	vmov	r1, s16
 8012226:	4620      	mov	r0, r4
 8012228:	f000 fe2e 	bl	8012e88 <__pow5mult>
 801222c:	ee08 0a10 	vmov	s16, r0
 8012230:	2101      	movs	r1, #1
 8012232:	4620      	mov	r0, r4
 8012234:	f000 fd68 	bl	8012d08 <__i2b>
 8012238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801223a:	2b00      	cmp	r3, #0
 801223c:	4606      	mov	r6, r0
 801223e:	f340 8088 	ble.w	8012352 <_dtoa_r+0x8c2>
 8012242:	461a      	mov	r2, r3
 8012244:	4601      	mov	r1, r0
 8012246:	4620      	mov	r0, r4
 8012248:	f000 fe1e 	bl	8012e88 <__pow5mult>
 801224c:	9b06      	ldr	r3, [sp, #24]
 801224e:	2b01      	cmp	r3, #1
 8012250:	4606      	mov	r6, r0
 8012252:	f340 8081 	ble.w	8012358 <_dtoa_r+0x8c8>
 8012256:	f04f 0800 	mov.w	r8, #0
 801225a:	6933      	ldr	r3, [r6, #16]
 801225c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012260:	6918      	ldr	r0, [r3, #16]
 8012262:	f000 fd01 	bl	8012c68 <__hi0bits>
 8012266:	f1c0 0020 	rsb	r0, r0, #32
 801226a:	9b05      	ldr	r3, [sp, #20]
 801226c:	4418      	add	r0, r3
 801226e:	f010 001f 	ands.w	r0, r0, #31
 8012272:	f000 8092 	beq.w	801239a <_dtoa_r+0x90a>
 8012276:	f1c0 0320 	rsb	r3, r0, #32
 801227a:	2b04      	cmp	r3, #4
 801227c:	f340 808a 	ble.w	8012394 <_dtoa_r+0x904>
 8012280:	f1c0 001c 	rsb	r0, r0, #28
 8012284:	9b04      	ldr	r3, [sp, #16]
 8012286:	4403      	add	r3, r0
 8012288:	9304      	str	r3, [sp, #16]
 801228a:	9b05      	ldr	r3, [sp, #20]
 801228c:	4403      	add	r3, r0
 801228e:	4405      	add	r5, r0
 8012290:	9305      	str	r3, [sp, #20]
 8012292:	9b04      	ldr	r3, [sp, #16]
 8012294:	2b00      	cmp	r3, #0
 8012296:	dd07      	ble.n	80122a8 <_dtoa_r+0x818>
 8012298:	ee18 1a10 	vmov	r1, s16
 801229c:	461a      	mov	r2, r3
 801229e:	4620      	mov	r0, r4
 80122a0:	f000 fe4c 	bl	8012f3c <__lshift>
 80122a4:	ee08 0a10 	vmov	s16, r0
 80122a8:	9b05      	ldr	r3, [sp, #20]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	dd05      	ble.n	80122ba <_dtoa_r+0x82a>
 80122ae:	4631      	mov	r1, r6
 80122b0:	461a      	mov	r2, r3
 80122b2:	4620      	mov	r0, r4
 80122b4:	f000 fe42 	bl	8012f3c <__lshift>
 80122b8:	4606      	mov	r6, r0
 80122ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d06e      	beq.n	801239e <_dtoa_r+0x90e>
 80122c0:	ee18 0a10 	vmov	r0, s16
 80122c4:	4631      	mov	r1, r6
 80122c6:	f000 fea9 	bl	801301c <__mcmp>
 80122ca:	2800      	cmp	r0, #0
 80122cc:	da67      	bge.n	801239e <_dtoa_r+0x90e>
 80122ce:	9b00      	ldr	r3, [sp, #0]
 80122d0:	3b01      	subs	r3, #1
 80122d2:	ee18 1a10 	vmov	r1, s16
 80122d6:	9300      	str	r3, [sp, #0]
 80122d8:	220a      	movs	r2, #10
 80122da:	2300      	movs	r3, #0
 80122dc:	4620      	mov	r0, r4
 80122de:	f000 fc7d 	bl	8012bdc <__multadd>
 80122e2:	9b08      	ldr	r3, [sp, #32]
 80122e4:	ee08 0a10 	vmov	s16, r0
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	f000 81b1 	beq.w	8012650 <_dtoa_r+0xbc0>
 80122ee:	2300      	movs	r3, #0
 80122f0:	4639      	mov	r1, r7
 80122f2:	220a      	movs	r2, #10
 80122f4:	4620      	mov	r0, r4
 80122f6:	f000 fc71 	bl	8012bdc <__multadd>
 80122fa:	9b02      	ldr	r3, [sp, #8]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	4607      	mov	r7, r0
 8012300:	f300 808e 	bgt.w	8012420 <_dtoa_r+0x990>
 8012304:	9b06      	ldr	r3, [sp, #24]
 8012306:	2b02      	cmp	r3, #2
 8012308:	dc51      	bgt.n	80123ae <_dtoa_r+0x91e>
 801230a:	e089      	b.n	8012420 <_dtoa_r+0x990>
 801230c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801230e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012312:	e74b      	b.n	80121ac <_dtoa_r+0x71c>
 8012314:	9b03      	ldr	r3, [sp, #12]
 8012316:	1e5e      	subs	r6, r3, #1
 8012318:	9b07      	ldr	r3, [sp, #28]
 801231a:	42b3      	cmp	r3, r6
 801231c:	bfbf      	itttt	lt
 801231e:	9b07      	ldrlt	r3, [sp, #28]
 8012320:	9607      	strlt	r6, [sp, #28]
 8012322:	1af2      	sublt	r2, r6, r3
 8012324:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012326:	bfb6      	itet	lt
 8012328:	189b      	addlt	r3, r3, r2
 801232a:	1b9e      	subge	r6, r3, r6
 801232c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801232e:	9b03      	ldr	r3, [sp, #12]
 8012330:	bfb8      	it	lt
 8012332:	2600      	movlt	r6, #0
 8012334:	2b00      	cmp	r3, #0
 8012336:	bfb7      	itett	lt
 8012338:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801233c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8012340:	1a9d      	sublt	r5, r3, r2
 8012342:	2300      	movlt	r3, #0
 8012344:	e734      	b.n	80121b0 <_dtoa_r+0x720>
 8012346:	9e07      	ldr	r6, [sp, #28]
 8012348:	9d04      	ldr	r5, [sp, #16]
 801234a:	9f08      	ldr	r7, [sp, #32]
 801234c:	e73b      	b.n	80121c6 <_dtoa_r+0x736>
 801234e:	9a07      	ldr	r2, [sp, #28]
 8012350:	e767      	b.n	8012222 <_dtoa_r+0x792>
 8012352:	9b06      	ldr	r3, [sp, #24]
 8012354:	2b01      	cmp	r3, #1
 8012356:	dc18      	bgt.n	801238a <_dtoa_r+0x8fa>
 8012358:	f1ba 0f00 	cmp.w	sl, #0
 801235c:	d115      	bne.n	801238a <_dtoa_r+0x8fa>
 801235e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012362:	b993      	cbnz	r3, 801238a <_dtoa_r+0x8fa>
 8012364:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012368:	0d1b      	lsrs	r3, r3, #20
 801236a:	051b      	lsls	r3, r3, #20
 801236c:	b183      	cbz	r3, 8012390 <_dtoa_r+0x900>
 801236e:	9b04      	ldr	r3, [sp, #16]
 8012370:	3301      	adds	r3, #1
 8012372:	9304      	str	r3, [sp, #16]
 8012374:	9b05      	ldr	r3, [sp, #20]
 8012376:	3301      	adds	r3, #1
 8012378:	9305      	str	r3, [sp, #20]
 801237a:	f04f 0801 	mov.w	r8, #1
 801237e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012380:	2b00      	cmp	r3, #0
 8012382:	f47f af6a 	bne.w	801225a <_dtoa_r+0x7ca>
 8012386:	2001      	movs	r0, #1
 8012388:	e76f      	b.n	801226a <_dtoa_r+0x7da>
 801238a:	f04f 0800 	mov.w	r8, #0
 801238e:	e7f6      	b.n	801237e <_dtoa_r+0x8ee>
 8012390:	4698      	mov	r8, r3
 8012392:	e7f4      	b.n	801237e <_dtoa_r+0x8ee>
 8012394:	f43f af7d 	beq.w	8012292 <_dtoa_r+0x802>
 8012398:	4618      	mov	r0, r3
 801239a:	301c      	adds	r0, #28
 801239c:	e772      	b.n	8012284 <_dtoa_r+0x7f4>
 801239e:	9b03      	ldr	r3, [sp, #12]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	dc37      	bgt.n	8012414 <_dtoa_r+0x984>
 80123a4:	9b06      	ldr	r3, [sp, #24]
 80123a6:	2b02      	cmp	r3, #2
 80123a8:	dd34      	ble.n	8012414 <_dtoa_r+0x984>
 80123aa:	9b03      	ldr	r3, [sp, #12]
 80123ac:	9302      	str	r3, [sp, #8]
 80123ae:	9b02      	ldr	r3, [sp, #8]
 80123b0:	b96b      	cbnz	r3, 80123ce <_dtoa_r+0x93e>
 80123b2:	4631      	mov	r1, r6
 80123b4:	2205      	movs	r2, #5
 80123b6:	4620      	mov	r0, r4
 80123b8:	f000 fc10 	bl	8012bdc <__multadd>
 80123bc:	4601      	mov	r1, r0
 80123be:	4606      	mov	r6, r0
 80123c0:	ee18 0a10 	vmov	r0, s16
 80123c4:	f000 fe2a 	bl	801301c <__mcmp>
 80123c8:	2800      	cmp	r0, #0
 80123ca:	f73f adbb 	bgt.w	8011f44 <_dtoa_r+0x4b4>
 80123ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123d0:	9d01      	ldr	r5, [sp, #4]
 80123d2:	43db      	mvns	r3, r3
 80123d4:	9300      	str	r3, [sp, #0]
 80123d6:	f04f 0800 	mov.w	r8, #0
 80123da:	4631      	mov	r1, r6
 80123dc:	4620      	mov	r0, r4
 80123de:	f000 fbdb 	bl	8012b98 <_Bfree>
 80123e2:	2f00      	cmp	r7, #0
 80123e4:	f43f aea4 	beq.w	8012130 <_dtoa_r+0x6a0>
 80123e8:	f1b8 0f00 	cmp.w	r8, #0
 80123ec:	d005      	beq.n	80123fa <_dtoa_r+0x96a>
 80123ee:	45b8      	cmp	r8, r7
 80123f0:	d003      	beq.n	80123fa <_dtoa_r+0x96a>
 80123f2:	4641      	mov	r1, r8
 80123f4:	4620      	mov	r0, r4
 80123f6:	f000 fbcf 	bl	8012b98 <_Bfree>
 80123fa:	4639      	mov	r1, r7
 80123fc:	4620      	mov	r0, r4
 80123fe:	f000 fbcb 	bl	8012b98 <_Bfree>
 8012402:	e695      	b.n	8012130 <_dtoa_r+0x6a0>
 8012404:	2600      	movs	r6, #0
 8012406:	4637      	mov	r7, r6
 8012408:	e7e1      	b.n	80123ce <_dtoa_r+0x93e>
 801240a:	9700      	str	r7, [sp, #0]
 801240c:	4637      	mov	r7, r6
 801240e:	e599      	b.n	8011f44 <_dtoa_r+0x4b4>
 8012410:	40240000 	.word	0x40240000
 8012414:	9b08      	ldr	r3, [sp, #32]
 8012416:	2b00      	cmp	r3, #0
 8012418:	f000 80ca 	beq.w	80125b0 <_dtoa_r+0xb20>
 801241c:	9b03      	ldr	r3, [sp, #12]
 801241e:	9302      	str	r3, [sp, #8]
 8012420:	2d00      	cmp	r5, #0
 8012422:	dd05      	ble.n	8012430 <_dtoa_r+0x9a0>
 8012424:	4639      	mov	r1, r7
 8012426:	462a      	mov	r2, r5
 8012428:	4620      	mov	r0, r4
 801242a:	f000 fd87 	bl	8012f3c <__lshift>
 801242e:	4607      	mov	r7, r0
 8012430:	f1b8 0f00 	cmp.w	r8, #0
 8012434:	d05b      	beq.n	80124ee <_dtoa_r+0xa5e>
 8012436:	6879      	ldr	r1, [r7, #4]
 8012438:	4620      	mov	r0, r4
 801243a:	f000 fb6d 	bl	8012b18 <_Balloc>
 801243e:	4605      	mov	r5, r0
 8012440:	b928      	cbnz	r0, 801244e <_dtoa_r+0x9be>
 8012442:	4b87      	ldr	r3, [pc, #540]	; (8012660 <_dtoa_r+0xbd0>)
 8012444:	4602      	mov	r2, r0
 8012446:	f240 21ea 	movw	r1, #746	; 0x2ea
 801244a:	f7ff bb3b 	b.w	8011ac4 <_dtoa_r+0x34>
 801244e:	693a      	ldr	r2, [r7, #16]
 8012450:	3202      	adds	r2, #2
 8012452:	0092      	lsls	r2, r2, #2
 8012454:	f107 010c 	add.w	r1, r7, #12
 8012458:	300c      	adds	r0, #12
 801245a:	f7fe f9c7 	bl	80107ec <memcpy>
 801245e:	2201      	movs	r2, #1
 8012460:	4629      	mov	r1, r5
 8012462:	4620      	mov	r0, r4
 8012464:	f000 fd6a 	bl	8012f3c <__lshift>
 8012468:	9b01      	ldr	r3, [sp, #4]
 801246a:	f103 0901 	add.w	r9, r3, #1
 801246e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8012472:	4413      	add	r3, r2
 8012474:	9305      	str	r3, [sp, #20]
 8012476:	f00a 0301 	and.w	r3, sl, #1
 801247a:	46b8      	mov	r8, r7
 801247c:	9304      	str	r3, [sp, #16]
 801247e:	4607      	mov	r7, r0
 8012480:	4631      	mov	r1, r6
 8012482:	ee18 0a10 	vmov	r0, s16
 8012486:	f7ff fa77 	bl	8011978 <quorem>
 801248a:	4641      	mov	r1, r8
 801248c:	9002      	str	r0, [sp, #8]
 801248e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012492:	ee18 0a10 	vmov	r0, s16
 8012496:	f000 fdc1 	bl	801301c <__mcmp>
 801249a:	463a      	mov	r2, r7
 801249c:	9003      	str	r0, [sp, #12]
 801249e:	4631      	mov	r1, r6
 80124a0:	4620      	mov	r0, r4
 80124a2:	f000 fdd7 	bl	8013054 <__mdiff>
 80124a6:	68c2      	ldr	r2, [r0, #12]
 80124a8:	f109 3bff 	add.w	fp, r9, #4294967295
 80124ac:	4605      	mov	r5, r0
 80124ae:	bb02      	cbnz	r2, 80124f2 <_dtoa_r+0xa62>
 80124b0:	4601      	mov	r1, r0
 80124b2:	ee18 0a10 	vmov	r0, s16
 80124b6:	f000 fdb1 	bl	801301c <__mcmp>
 80124ba:	4602      	mov	r2, r0
 80124bc:	4629      	mov	r1, r5
 80124be:	4620      	mov	r0, r4
 80124c0:	9207      	str	r2, [sp, #28]
 80124c2:	f000 fb69 	bl	8012b98 <_Bfree>
 80124c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80124ca:	ea43 0102 	orr.w	r1, r3, r2
 80124ce:	9b04      	ldr	r3, [sp, #16]
 80124d0:	430b      	orrs	r3, r1
 80124d2:	464d      	mov	r5, r9
 80124d4:	d10f      	bne.n	80124f6 <_dtoa_r+0xa66>
 80124d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80124da:	d02a      	beq.n	8012532 <_dtoa_r+0xaa2>
 80124dc:	9b03      	ldr	r3, [sp, #12]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	dd02      	ble.n	80124e8 <_dtoa_r+0xa58>
 80124e2:	9b02      	ldr	r3, [sp, #8]
 80124e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80124e8:	f88b a000 	strb.w	sl, [fp]
 80124ec:	e775      	b.n	80123da <_dtoa_r+0x94a>
 80124ee:	4638      	mov	r0, r7
 80124f0:	e7ba      	b.n	8012468 <_dtoa_r+0x9d8>
 80124f2:	2201      	movs	r2, #1
 80124f4:	e7e2      	b.n	80124bc <_dtoa_r+0xa2c>
 80124f6:	9b03      	ldr	r3, [sp, #12]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	db04      	blt.n	8012506 <_dtoa_r+0xa76>
 80124fc:	9906      	ldr	r1, [sp, #24]
 80124fe:	430b      	orrs	r3, r1
 8012500:	9904      	ldr	r1, [sp, #16]
 8012502:	430b      	orrs	r3, r1
 8012504:	d122      	bne.n	801254c <_dtoa_r+0xabc>
 8012506:	2a00      	cmp	r2, #0
 8012508:	ddee      	ble.n	80124e8 <_dtoa_r+0xa58>
 801250a:	ee18 1a10 	vmov	r1, s16
 801250e:	2201      	movs	r2, #1
 8012510:	4620      	mov	r0, r4
 8012512:	f000 fd13 	bl	8012f3c <__lshift>
 8012516:	4631      	mov	r1, r6
 8012518:	ee08 0a10 	vmov	s16, r0
 801251c:	f000 fd7e 	bl	801301c <__mcmp>
 8012520:	2800      	cmp	r0, #0
 8012522:	dc03      	bgt.n	801252c <_dtoa_r+0xa9c>
 8012524:	d1e0      	bne.n	80124e8 <_dtoa_r+0xa58>
 8012526:	f01a 0f01 	tst.w	sl, #1
 801252a:	d0dd      	beq.n	80124e8 <_dtoa_r+0xa58>
 801252c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012530:	d1d7      	bne.n	80124e2 <_dtoa_r+0xa52>
 8012532:	2339      	movs	r3, #57	; 0x39
 8012534:	f88b 3000 	strb.w	r3, [fp]
 8012538:	462b      	mov	r3, r5
 801253a:	461d      	mov	r5, r3
 801253c:	3b01      	subs	r3, #1
 801253e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012542:	2a39      	cmp	r2, #57	; 0x39
 8012544:	d071      	beq.n	801262a <_dtoa_r+0xb9a>
 8012546:	3201      	adds	r2, #1
 8012548:	701a      	strb	r2, [r3, #0]
 801254a:	e746      	b.n	80123da <_dtoa_r+0x94a>
 801254c:	2a00      	cmp	r2, #0
 801254e:	dd07      	ble.n	8012560 <_dtoa_r+0xad0>
 8012550:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012554:	d0ed      	beq.n	8012532 <_dtoa_r+0xaa2>
 8012556:	f10a 0301 	add.w	r3, sl, #1
 801255a:	f88b 3000 	strb.w	r3, [fp]
 801255e:	e73c      	b.n	80123da <_dtoa_r+0x94a>
 8012560:	9b05      	ldr	r3, [sp, #20]
 8012562:	f809 ac01 	strb.w	sl, [r9, #-1]
 8012566:	4599      	cmp	r9, r3
 8012568:	d047      	beq.n	80125fa <_dtoa_r+0xb6a>
 801256a:	ee18 1a10 	vmov	r1, s16
 801256e:	2300      	movs	r3, #0
 8012570:	220a      	movs	r2, #10
 8012572:	4620      	mov	r0, r4
 8012574:	f000 fb32 	bl	8012bdc <__multadd>
 8012578:	45b8      	cmp	r8, r7
 801257a:	ee08 0a10 	vmov	s16, r0
 801257e:	f04f 0300 	mov.w	r3, #0
 8012582:	f04f 020a 	mov.w	r2, #10
 8012586:	4641      	mov	r1, r8
 8012588:	4620      	mov	r0, r4
 801258a:	d106      	bne.n	801259a <_dtoa_r+0xb0a>
 801258c:	f000 fb26 	bl	8012bdc <__multadd>
 8012590:	4680      	mov	r8, r0
 8012592:	4607      	mov	r7, r0
 8012594:	f109 0901 	add.w	r9, r9, #1
 8012598:	e772      	b.n	8012480 <_dtoa_r+0x9f0>
 801259a:	f000 fb1f 	bl	8012bdc <__multadd>
 801259e:	4639      	mov	r1, r7
 80125a0:	4680      	mov	r8, r0
 80125a2:	2300      	movs	r3, #0
 80125a4:	220a      	movs	r2, #10
 80125a6:	4620      	mov	r0, r4
 80125a8:	f000 fb18 	bl	8012bdc <__multadd>
 80125ac:	4607      	mov	r7, r0
 80125ae:	e7f1      	b.n	8012594 <_dtoa_r+0xb04>
 80125b0:	9b03      	ldr	r3, [sp, #12]
 80125b2:	9302      	str	r3, [sp, #8]
 80125b4:	9d01      	ldr	r5, [sp, #4]
 80125b6:	ee18 0a10 	vmov	r0, s16
 80125ba:	4631      	mov	r1, r6
 80125bc:	f7ff f9dc 	bl	8011978 <quorem>
 80125c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80125c4:	9b01      	ldr	r3, [sp, #4]
 80125c6:	f805 ab01 	strb.w	sl, [r5], #1
 80125ca:	1aea      	subs	r2, r5, r3
 80125cc:	9b02      	ldr	r3, [sp, #8]
 80125ce:	4293      	cmp	r3, r2
 80125d0:	dd09      	ble.n	80125e6 <_dtoa_r+0xb56>
 80125d2:	ee18 1a10 	vmov	r1, s16
 80125d6:	2300      	movs	r3, #0
 80125d8:	220a      	movs	r2, #10
 80125da:	4620      	mov	r0, r4
 80125dc:	f000 fafe 	bl	8012bdc <__multadd>
 80125e0:	ee08 0a10 	vmov	s16, r0
 80125e4:	e7e7      	b.n	80125b6 <_dtoa_r+0xb26>
 80125e6:	9b02      	ldr	r3, [sp, #8]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	bfc8      	it	gt
 80125ec:	461d      	movgt	r5, r3
 80125ee:	9b01      	ldr	r3, [sp, #4]
 80125f0:	bfd8      	it	le
 80125f2:	2501      	movle	r5, #1
 80125f4:	441d      	add	r5, r3
 80125f6:	f04f 0800 	mov.w	r8, #0
 80125fa:	ee18 1a10 	vmov	r1, s16
 80125fe:	2201      	movs	r2, #1
 8012600:	4620      	mov	r0, r4
 8012602:	f000 fc9b 	bl	8012f3c <__lshift>
 8012606:	4631      	mov	r1, r6
 8012608:	ee08 0a10 	vmov	s16, r0
 801260c:	f000 fd06 	bl	801301c <__mcmp>
 8012610:	2800      	cmp	r0, #0
 8012612:	dc91      	bgt.n	8012538 <_dtoa_r+0xaa8>
 8012614:	d102      	bne.n	801261c <_dtoa_r+0xb8c>
 8012616:	f01a 0f01 	tst.w	sl, #1
 801261a:	d18d      	bne.n	8012538 <_dtoa_r+0xaa8>
 801261c:	462b      	mov	r3, r5
 801261e:	461d      	mov	r5, r3
 8012620:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012624:	2a30      	cmp	r2, #48	; 0x30
 8012626:	d0fa      	beq.n	801261e <_dtoa_r+0xb8e>
 8012628:	e6d7      	b.n	80123da <_dtoa_r+0x94a>
 801262a:	9a01      	ldr	r2, [sp, #4]
 801262c:	429a      	cmp	r2, r3
 801262e:	d184      	bne.n	801253a <_dtoa_r+0xaaa>
 8012630:	9b00      	ldr	r3, [sp, #0]
 8012632:	3301      	adds	r3, #1
 8012634:	9300      	str	r3, [sp, #0]
 8012636:	2331      	movs	r3, #49	; 0x31
 8012638:	7013      	strb	r3, [r2, #0]
 801263a:	e6ce      	b.n	80123da <_dtoa_r+0x94a>
 801263c:	4b09      	ldr	r3, [pc, #36]	; (8012664 <_dtoa_r+0xbd4>)
 801263e:	f7ff ba95 	b.w	8011b6c <_dtoa_r+0xdc>
 8012642:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012644:	2b00      	cmp	r3, #0
 8012646:	f47f aa6e 	bne.w	8011b26 <_dtoa_r+0x96>
 801264a:	4b07      	ldr	r3, [pc, #28]	; (8012668 <_dtoa_r+0xbd8>)
 801264c:	f7ff ba8e 	b.w	8011b6c <_dtoa_r+0xdc>
 8012650:	9b02      	ldr	r3, [sp, #8]
 8012652:	2b00      	cmp	r3, #0
 8012654:	dcae      	bgt.n	80125b4 <_dtoa_r+0xb24>
 8012656:	9b06      	ldr	r3, [sp, #24]
 8012658:	2b02      	cmp	r3, #2
 801265a:	f73f aea8 	bgt.w	80123ae <_dtoa_r+0x91e>
 801265e:	e7a9      	b.n	80125b4 <_dtoa_r+0xb24>
 8012660:	08014a83 	.word	0x08014a83
 8012664:	08014c61 	.word	0x08014c61
 8012668:	08014a1b 	.word	0x08014a1b

0801266c <__sflush_r>:
 801266c:	898a      	ldrh	r2, [r1, #12]
 801266e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012672:	4605      	mov	r5, r0
 8012674:	0710      	lsls	r0, r2, #28
 8012676:	460c      	mov	r4, r1
 8012678:	d458      	bmi.n	801272c <__sflush_r+0xc0>
 801267a:	684b      	ldr	r3, [r1, #4]
 801267c:	2b00      	cmp	r3, #0
 801267e:	dc05      	bgt.n	801268c <__sflush_r+0x20>
 8012680:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012682:	2b00      	cmp	r3, #0
 8012684:	dc02      	bgt.n	801268c <__sflush_r+0x20>
 8012686:	2000      	movs	r0, #0
 8012688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801268c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801268e:	2e00      	cmp	r6, #0
 8012690:	d0f9      	beq.n	8012686 <__sflush_r+0x1a>
 8012692:	2300      	movs	r3, #0
 8012694:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012698:	682f      	ldr	r7, [r5, #0]
 801269a:	602b      	str	r3, [r5, #0]
 801269c:	d032      	beq.n	8012704 <__sflush_r+0x98>
 801269e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80126a0:	89a3      	ldrh	r3, [r4, #12]
 80126a2:	075a      	lsls	r2, r3, #29
 80126a4:	d505      	bpl.n	80126b2 <__sflush_r+0x46>
 80126a6:	6863      	ldr	r3, [r4, #4]
 80126a8:	1ac0      	subs	r0, r0, r3
 80126aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80126ac:	b10b      	cbz	r3, 80126b2 <__sflush_r+0x46>
 80126ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80126b0:	1ac0      	subs	r0, r0, r3
 80126b2:	2300      	movs	r3, #0
 80126b4:	4602      	mov	r2, r0
 80126b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80126b8:	6a21      	ldr	r1, [r4, #32]
 80126ba:	4628      	mov	r0, r5
 80126bc:	47b0      	blx	r6
 80126be:	1c43      	adds	r3, r0, #1
 80126c0:	89a3      	ldrh	r3, [r4, #12]
 80126c2:	d106      	bne.n	80126d2 <__sflush_r+0x66>
 80126c4:	6829      	ldr	r1, [r5, #0]
 80126c6:	291d      	cmp	r1, #29
 80126c8:	d82c      	bhi.n	8012724 <__sflush_r+0xb8>
 80126ca:	4a2a      	ldr	r2, [pc, #168]	; (8012774 <__sflush_r+0x108>)
 80126cc:	40ca      	lsrs	r2, r1
 80126ce:	07d6      	lsls	r6, r2, #31
 80126d0:	d528      	bpl.n	8012724 <__sflush_r+0xb8>
 80126d2:	2200      	movs	r2, #0
 80126d4:	6062      	str	r2, [r4, #4]
 80126d6:	04d9      	lsls	r1, r3, #19
 80126d8:	6922      	ldr	r2, [r4, #16]
 80126da:	6022      	str	r2, [r4, #0]
 80126dc:	d504      	bpl.n	80126e8 <__sflush_r+0x7c>
 80126de:	1c42      	adds	r2, r0, #1
 80126e0:	d101      	bne.n	80126e6 <__sflush_r+0x7a>
 80126e2:	682b      	ldr	r3, [r5, #0]
 80126e4:	b903      	cbnz	r3, 80126e8 <__sflush_r+0x7c>
 80126e6:	6560      	str	r0, [r4, #84]	; 0x54
 80126e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80126ea:	602f      	str	r7, [r5, #0]
 80126ec:	2900      	cmp	r1, #0
 80126ee:	d0ca      	beq.n	8012686 <__sflush_r+0x1a>
 80126f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80126f4:	4299      	cmp	r1, r3
 80126f6:	d002      	beq.n	80126fe <__sflush_r+0x92>
 80126f8:	4628      	mov	r0, r5
 80126fa:	f7fe f88d 	bl	8010818 <_free_r>
 80126fe:	2000      	movs	r0, #0
 8012700:	6360      	str	r0, [r4, #52]	; 0x34
 8012702:	e7c1      	b.n	8012688 <__sflush_r+0x1c>
 8012704:	6a21      	ldr	r1, [r4, #32]
 8012706:	2301      	movs	r3, #1
 8012708:	4628      	mov	r0, r5
 801270a:	47b0      	blx	r6
 801270c:	1c41      	adds	r1, r0, #1
 801270e:	d1c7      	bne.n	80126a0 <__sflush_r+0x34>
 8012710:	682b      	ldr	r3, [r5, #0]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d0c4      	beq.n	80126a0 <__sflush_r+0x34>
 8012716:	2b1d      	cmp	r3, #29
 8012718:	d001      	beq.n	801271e <__sflush_r+0xb2>
 801271a:	2b16      	cmp	r3, #22
 801271c:	d101      	bne.n	8012722 <__sflush_r+0xb6>
 801271e:	602f      	str	r7, [r5, #0]
 8012720:	e7b1      	b.n	8012686 <__sflush_r+0x1a>
 8012722:	89a3      	ldrh	r3, [r4, #12]
 8012724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012728:	81a3      	strh	r3, [r4, #12]
 801272a:	e7ad      	b.n	8012688 <__sflush_r+0x1c>
 801272c:	690f      	ldr	r7, [r1, #16]
 801272e:	2f00      	cmp	r7, #0
 8012730:	d0a9      	beq.n	8012686 <__sflush_r+0x1a>
 8012732:	0793      	lsls	r3, r2, #30
 8012734:	680e      	ldr	r6, [r1, #0]
 8012736:	bf08      	it	eq
 8012738:	694b      	ldreq	r3, [r1, #20]
 801273a:	600f      	str	r7, [r1, #0]
 801273c:	bf18      	it	ne
 801273e:	2300      	movne	r3, #0
 8012740:	eba6 0807 	sub.w	r8, r6, r7
 8012744:	608b      	str	r3, [r1, #8]
 8012746:	f1b8 0f00 	cmp.w	r8, #0
 801274a:	dd9c      	ble.n	8012686 <__sflush_r+0x1a>
 801274c:	6a21      	ldr	r1, [r4, #32]
 801274e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012750:	4643      	mov	r3, r8
 8012752:	463a      	mov	r2, r7
 8012754:	4628      	mov	r0, r5
 8012756:	47b0      	blx	r6
 8012758:	2800      	cmp	r0, #0
 801275a:	dc06      	bgt.n	801276a <__sflush_r+0xfe>
 801275c:	89a3      	ldrh	r3, [r4, #12]
 801275e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012762:	81a3      	strh	r3, [r4, #12]
 8012764:	f04f 30ff 	mov.w	r0, #4294967295
 8012768:	e78e      	b.n	8012688 <__sflush_r+0x1c>
 801276a:	4407      	add	r7, r0
 801276c:	eba8 0800 	sub.w	r8, r8, r0
 8012770:	e7e9      	b.n	8012746 <__sflush_r+0xda>
 8012772:	bf00      	nop
 8012774:	20400001 	.word	0x20400001

08012778 <_fflush_r>:
 8012778:	b538      	push	{r3, r4, r5, lr}
 801277a:	690b      	ldr	r3, [r1, #16]
 801277c:	4605      	mov	r5, r0
 801277e:	460c      	mov	r4, r1
 8012780:	b913      	cbnz	r3, 8012788 <_fflush_r+0x10>
 8012782:	2500      	movs	r5, #0
 8012784:	4628      	mov	r0, r5
 8012786:	bd38      	pop	{r3, r4, r5, pc}
 8012788:	b118      	cbz	r0, 8012792 <_fflush_r+0x1a>
 801278a:	6983      	ldr	r3, [r0, #24]
 801278c:	b90b      	cbnz	r3, 8012792 <_fflush_r+0x1a>
 801278e:	f000 f887 	bl	80128a0 <__sinit>
 8012792:	4b14      	ldr	r3, [pc, #80]	; (80127e4 <_fflush_r+0x6c>)
 8012794:	429c      	cmp	r4, r3
 8012796:	d11b      	bne.n	80127d0 <_fflush_r+0x58>
 8012798:	686c      	ldr	r4, [r5, #4]
 801279a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d0ef      	beq.n	8012782 <_fflush_r+0xa>
 80127a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80127a4:	07d0      	lsls	r0, r2, #31
 80127a6:	d404      	bmi.n	80127b2 <_fflush_r+0x3a>
 80127a8:	0599      	lsls	r1, r3, #22
 80127aa:	d402      	bmi.n	80127b2 <_fflush_r+0x3a>
 80127ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80127ae:	f000 f92c 	bl	8012a0a <__retarget_lock_acquire_recursive>
 80127b2:	4628      	mov	r0, r5
 80127b4:	4621      	mov	r1, r4
 80127b6:	f7ff ff59 	bl	801266c <__sflush_r>
 80127ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80127bc:	07da      	lsls	r2, r3, #31
 80127be:	4605      	mov	r5, r0
 80127c0:	d4e0      	bmi.n	8012784 <_fflush_r+0xc>
 80127c2:	89a3      	ldrh	r3, [r4, #12]
 80127c4:	059b      	lsls	r3, r3, #22
 80127c6:	d4dd      	bmi.n	8012784 <_fflush_r+0xc>
 80127c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80127ca:	f000 f91f 	bl	8012a0c <__retarget_lock_release_recursive>
 80127ce:	e7d9      	b.n	8012784 <_fflush_r+0xc>
 80127d0:	4b05      	ldr	r3, [pc, #20]	; (80127e8 <_fflush_r+0x70>)
 80127d2:	429c      	cmp	r4, r3
 80127d4:	d101      	bne.n	80127da <_fflush_r+0x62>
 80127d6:	68ac      	ldr	r4, [r5, #8]
 80127d8:	e7df      	b.n	801279a <_fflush_r+0x22>
 80127da:	4b04      	ldr	r3, [pc, #16]	; (80127ec <_fflush_r+0x74>)
 80127dc:	429c      	cmp	r4, r3
 80127de:	bf08      	it	eq
 80127e0:	68ec      	ldreq	r4, [r5, #12]
 80127e2:	e7da      	b.n	801279a <_fflush_r+0x22>
 80127e4:	08014ab4 	.word	0x08014ab4
 80127e8:	08014ad4 	.word	0x08014ad4
 80127ec:	08014a94 	.word	0x08014a94

080127f0 <std>:
 80127f0:	2300      	movs	r3, #0
 80127f2:	b510      	push	{r4, lr}
 80127f4:	4604      	mov	r4, r0
 80127f6:	e9c0 3300 	strd	r3, r3, [r0]
 80127fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80127fe:	6083      	str	r3, [r0, #8]
 8012800:	8181      	strh	r1, [r0, #12]
 8012802:	6643      	str	r3, [r0, #100]	; 0x64
 8012804:	81c2      	strh	r2, [r0, #14]
 8012806:	6183      	str	r3, [r0, #24]
 8012808:	4619      	mov	r1, r3
 801280a:	2208      	movs	r2, #8
 801280c:	305c      	adds	r0, #92	; 0x5c
 801280e:	f7fd fffb 	bl	8010808 <memset>
 8012812:	4b05      	ldr	r3, [pc, #20]	; (8012828 <std+0x38>)
 8012814:	6263      	str	r3, [r4, #36]	; 0x24
 8012816:	4b05      	ldr	r3, [pc, #20]	; (801282c <std+0x3c>)
 8012818:	62a3      	str	r3, [r4, #40]	; 0x28
 801281a:	4b05      	ldr	r3, [pc, #20]	; (8012830 <std+0x40>)
 801281c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801281e:	4b05      	ldr	r3, [pc, #20]	; (8012834 <std+0x44>)
 8012820:	6224      	str	r4, [r4, #32]
 8012822:	6323      	str	r3, [r4, #48]	; 0x30
 8012824:	bd10      	pop	{r4, pc}
 8012826:	bf00      	nop
 8012828:	08011509 	.word	0x08011509
 801282c:	0801152f 	.word	0x0801152f
 8012830:	08011567 	.word	0x08011567
 8012834:	0801158b 	.word	0x0801158b

08012838 <_cleanup_r>:
 8012838:	4901      	ldr	r1, [pc, #4]	; (8012840 <_cleanup_r+0x8>)
 801283a:	f000 b8c1 	b.w	80129c0 <_fwalk_reent>
 801283e:	bf00      	nop
 8012840:	08012779 	.word	0x08012779

08012844 <__sfmoreglue>:
 8012844:	b570      	push	{r4, r5, r6, lr}
 8012846:	2268      	movs	r2, #104	; 0x68
 8012848:	1e4d      	subs	r5, r1, #1
 801284a:	4355      	muls	r5, r2
 801284c:	460e      	mov	r6, r1
 801284e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012852:	f7fe f84d 	bl	80108f0 <_malloc_r>
 8012856:	4604      	mov	r4, r0
 8012858:	b140      	cbz	r0, 801286c <__sfmoreglue+0x28>
 801285a:	2100      	movs	r1, #0
 801285c:	e9c0 1600 	strd	r1, r6, [r0]
 8012860:	300c      	adds	r0, #12
 8012862:	60a0      	str	r0, [r4, #8]
 8012864:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012868:	f7fd ffce 	bl	8010808 <memset>
 801286c:	4620      	mov	r0, r4
 801286e:	bd70      	pop	{r4, r5, r6, pc}

08012870 <__sfp_lock_acquire>:
 8012870:	4801      	ldr	r0, [pc, #4]	; (8012878 <__sfp_lock_acquire+0x8>)
 8012872:	f000 b8ca 	b.w	8012a0a <__retarget_lock_acquire_recursive>
 8012876:	bf00      	nop
 8012878:	20003231 	.word	0x20003231

0801287c <__sfp_lock_release>:
 801287c:	4801      	ldr	r0, [pc, #4]	; (8012884 <__sfp_lock_release+0x8>)
 801287e:	f000 b8c5 	b.w	8012a0c <__retarget_lock_release_recursive>
 8012882:	bf00      	nop
 8012884:	20003231 	.word	0x20003231

08012888 <__sinit_lock_acquire>:
 8012888:	4801      	ldr	r0, [pc, #4]	; (8012890 <__sinit_lock_acquire+0x8>)
 801288a:	f000 b8be 	b.w	8012a0a <__retarget_lock_acquire_recursive>
 801288e:	bf00      	nop
 8012890:	20003232 	.word	0x20003232

08012894 <__sinit_lock_release>:
 8012894:	4801      	ldr	r0, [pc, #4]	; (801289c <__sinit_lock_release+0x8>)
 8012896:	f000 b8b9 	b.w	8012a0c <__retarget_lock_release_recursive>
 801289a:	bf00      	nop
 801289c:	20003232 	.word	0x20003232

080128a0 <__sinit>:
 80128a0:	b510      	push	{r4, lr}
 80128a2:	4604      	mov	r4, r0
 80128a4:	f7ff fff0 	bl	8012888 <__sinit_lock_acquire>
 80128a8:	69a3      	ldr	r3, [r4, #24]
 80128aa:	b11b      	cbz	r3, 80128b4 <__sinit+0x14>
 80128ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128b0:	f7ff bff0 	b.w	8012894 <__sinit_lock_release>
 80128b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80128b8:	6523      	str	r3, [r4, #80]	; 0x50
 80128ba:	4b13      	ldr	r3, [pc, #76]	; (8012908 <__sinit+0x68>)
 80128bc:	4a13      	ldr	r2, [pc, #76]	; (801290c <__sinit+0x6c>)
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80128c2:	42a3      	cmp	r3, r4
 80128c4:	bf04      	itt	eq
 80128c6:	2301      	moveq	r3, #1
 80128c8:	61a3      	streq	r3, [r4, #24]
 80128ca:	4620      	mov	r0, r4
 80128cc:	f000 f820 	bl	8012910 <__sfp>
 80128d0:	6060      	str	r0, [r4, #4]
 80128d2:	4620      	mov	r0, r4
 80128d4:	f000 f81c 	bl	8012910 <__sfp>
 80128d8:	60a0      	str	r0, [r4, #8]
 80128da:	4620      	mov	r0, r4
 80128dc:	f000 f818 	bl	8012910 <__sfp>
 80128e0:	2200      	movs	r2, #0
 80128e2:	60e0      	str	r0, [r4, #12]
 80128e4:	2104      	movs	r1, #4
 80128e6:	6860      	ldr	r0, [r4, #4]
 80128e8:	f7ff ff82 	bl	80127f0 <std>
 80128ec:	68a0      	ldr	r0, [r4, #8]
 80128ee:	2201      	movs	r2, #1
 80128f0:	2109      	movs	r1, #9
 80128f2:	f7ff ff7d 	bl	80127f0 <std>
 80128f6:	68e0      	ldr	r0, [r4, #12]
 80128f8:	2202      	movs	r2, #2
 80128fa:	2112      	movs	r1, #18
 80128fc:	f7ff ff78 	bl	80127f0 <std>
 8012900:	2301      	movs	r3, #1
 8012902:	61a3      	str	r3, [r4, #24]
 8012904:	e7d2      	b.n	80128ac <__sinit+0xc>
 8012906:	bf00      	nop
 8012908:	08014834 	.word	0x08014834
 801290c:	08012839 	.word	0x08012839

08012910 <__sfp>:
 8012910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012912:	4607      	mov	r7, r0
 8012914:	f7ff ffac 	bl	8012870 <__sfp_lock_acquire>
 8012918:	4b1e      	ldr	r3, [pc, #120]	; (8012994 <__sfp+0x84>)
 801291a:	681e      	ldr	r6, [r3, #0]
 801291c:	69b3      	ldr	r3, [r6, #24]
 801291e:	b913      	cbnz	r3, 8012926 <__sfp+0x16>
 8012920:	4630      	mov	r0, r6
 8012922:	f7ff ffbd 	bl	80128a0 <__sinit>
 8012926:	3648      	adds	r6, #72	; 0x48
 8012928:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801292c:	3b01      	subs	r3, #1
 801292e:	d503      	bpl.n	8012938 <__sfp+0x28>
 8012930:	6833      	ldr	r3, [r6, #0]
 8012932:	b30b      	cbz	r3, 8012978 <__sfp+0x68>
 8012934:	6836      	ldr	r6, [r6, #0]
 8012936:	e7f7      	b.n	8012928 <__sfp+0x18>
 8012938:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801293c:	b9d5      	cbnz	r5, 8012974 <__sfp+0x64>
 801293e:	4b16      	ldr	r3, [pc, #88]	; (8012998 <__sfp+0x88>)
 8012940:	60e3      	str	r3, [r4, #12]
 8012942:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012946:	6665      	str	r5, [r4, #100]	; 0x64
 8012948:	f000 f85e 	bl	8012a08 <__retarget_lock_init_recursive>
 801294c:	f7ff ff96 	bl	801287c <__sfp_lock_release>
 8012950:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012954:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012958:	6025      	str	r5, [r4, #0]
 801295a:	61a5      	str	r5, [r4, #24]
 801295c:	2208      	movs	r2, #8
 801295e:	4629      	mov	r1, r5
 8012960:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012964:	f7fd ff50 	bl	8010808 <memset>
 8012968:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801296c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012970:	4620      	mov	r0, r4
 8012972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012974:	3468      	adds	r4, #104	; 0x68
 8012976:	e7d9      	b.n	801292c <__sfp+0x1c>
 8012978:	2104      	movs	r1, #4
 801297a:	4638      	mov	r0, r7
 801297c:	f7ff ff62 	bl	8012844 <__sfmoreglue>
 8012980:	4604      	mov	r4, r0
 8012982:	6030      	str	r0, [r6, #0]
 8012984:	2800      	cmp	r0, #0
 8012986:	d1d5      	bne.n	8012934 <__sfp+0x24>
 8012988:	f7ff ff78 	bl	801287c <__sfp_lock_release>
 801298c:	230c      	movs	r3, #12
 801298e:	603b      	str	r3, [r7, #0]
 8012990:	e7ee      	b.n	8012970 <__sfp+0x60>
 8012992:	bf00      	nop
 8012994:	08014834 	.word	0x08014834
 8012998:	ffff0001 	.word	0xffff0001

0801299c <fiprintf>:
 801299c:	b40e      	push	{r1, r2, r3}
 801299e:	b503      	push	{r0, r1, lr}
 80129a0:	4601      	mov	r1, r0
 80129a2:	ab03      	add	r3, sp, #12
 80129a4:	4805      	ldr	r0, [pc, #20]	; (80129bc <fiprintf+0x20>)
 80129a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80129aa:	6800      	ldr	r0, [r0, #0]
 80129ac:	9301      	str	r3, [sp, #4]
 80129ae:	f000 ffa5 	bl	80138fc <_vfiprintf_r>
 80129b2:	b002      	add	sp, #8
 80129b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80129b8:	b003      	add	sp, #12
 80129ba:	4770      	bx	lr
 80129bc:	20000054 	.word	0x20000054

080129c0 <_fwalk_reent>:
 80129c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80129c4:	4606      	mov	r6, r0
 80129c6:	4688      	mov	r8, r1
 80129c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80129cc:	2700      	movs	r7, #0
 80129ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80129d2:	f1b9 0901 	subs.w	r9, r9, #1
 80129d6:	d505      	bpl.n	80129e4 <_fwalk_reent+0x24>
 80129d8:	6824      	ldr	r4, [r4, #0]
 80129da:	2c00      	cmp	r4, #0
 80129dc:	d1f7      	bne.n	80129ce <_fwalk_reent+0xe>
 80129de:	4638      	mov	r0, r7
 80129e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80129e4:	89ab      	ldrh	r3, [r5, #12]
 80129e6:	2b01      	cmp	r3, #1
 80129e8:	d907      	bls.n	80129fa <_fwalk_reent+0x3a>
 80129ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80129ee:	3301      	adds	r3, #1
 80129f0:	d003      	beq.n	80129fa <_fwalk_reent+0x3a>
 80129f2:	4629      	mov	r1, r5
 80129f4:	4630      	mov	r0, r6
 80129f6:	47c0      	blx	r8
 80129f8:	4307      	orrs	r7, r0
 80129fa:	3568      	adds	r5, #104	; 0x68
 80129fc:	e7e9      	b.n	80129d2 <_fwalk_reent+0x12>
	...

08012a00 <_localeconv_r>:
 8012a00:	4800      	ldr	r0, [pc, #0]	; (8012a04 <_localeconv_r+0x4>)
 8012a02:	4770      	bx	lr
 8012a04:	200001a8 	.word	0x200001a8

08012a08 <__retarget_lock_init_recursive>:
 8012a08:	4770      	bx	lr

08012a0a <__retarget_lock_acquire_recursive>:
 8012a0a:	4770      	bx	lr

08012a0c <__retarget_lock_release_recursive>:
 8012a0c:	4770      	bx	lr
	...

08012a10 <_lseek_r>:
 8012a10:	b538      	push	{r3, r4, r5, lr}
 8012a12:	4d07      	ldr	r5, [pc, #28]	; (8012a30 <_lseek_r+0x20>)
 8012a14:	4604      	mov	r4, r0
 8012a16:	4608      	mov	r0, r1
 8012a18:	4611      	mov	r1, r2
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	602a      	str	r2, [r5, #0]
 8012a1e:	461a      	mov	r2, r3
 8012a20:	f7f0 ff18 	bl	8003854 <_lseek>
 8012a24:	1c43      	adds	r3, r0, #1
 8012a26:	d102      	bne.n	8012a2e <_lseek_r+0x1e>
 8012a28:	682b      	ldr	r3, [r5, #0]
 8012a2a:	b103      	cbz	r3, 8012a2e <_lseek_r+0x1e>
 8012a2c:	6023      	str	r3, [r4, #0]
 8012a2e:	bd38      	pop	{r3, r4, r5, pc}
 8012a30:	20003234 	.word	0x20003234

08012a34 <__swhatbuf_r>:
 8012a34:	b570      	push	{r4, r5, r6, lr}
 8012a36:	460e      	mov	r6, r1
 8012a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a3c:	2900      	cmp	r1, #0
 8012a3e:	b096      	sub	sp, #88	; 0x58
 8012a40:	4614      	mov	r4, r2
 8012a42:	461d      	mov	r5, r3
 8012a44:	da08      	bge.n	8012a58 <__swhatbuf_r+0x24>
 8012a46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	602a      	str	r2, [r5, #0]
 8012a4e:	061a      	lsls	r2, r3, #24
 8012a50:	d410      	bmi.n	8012a74 <__swhatbuf_r+0x40>
 8012a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012a56:	e00e      	b.n	8012a76 <__swhatbuf_r+0x42>
 8012a58:	466a      	mov	r2, sp
 8012a5a:	f001 fac9 	bl	8013ff0 <_fstat_r>
 8012a5e:	2800      	cmp	r0, #0
 8012a60:	dbf1      	blt.n	8012a46 <__swhatbuf_r+0x12>
 8012a62:	9a01      	ldr	r2, [sp, #4]
 8012a64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012a68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012a6c:	425a      	negs	r2, r3
 8012a6e:	415a      	adcs	r2, r3
 8012a70:	602a      	str	r2, [r5, #0]
 8012a72:	e7ee      	b.n	8012a52 <__swhatbuf_r+0x1e>
 8012a74:	2340      	movs	r3, #64	; 0x40
 8012a76:	2000      	movs	r0, #0
 8012a78:	6023      	str	r3, [r4, #0]
 8012a7a:	b016      	add	sp, #88	; 0x58
 8012a7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012a80 <__smakebuf_r>:
 8012a80:	898b      	ldrh	r3, [r1, #12]
 8012a82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012a84:	079d      	lsls	r5, r3, #30
 8012a86:	4606      	mov	r6, r0
 8012a88:	460c      	mov	r4, r1
 8012a8a:	d507      	bpl.n	8012a9c <__smakebuf_r+0x1c>
 8012a8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012a90:	6023      	str	r3, [r4, #0]
 8012a92:	6123      	str	r3, [r4, #16]
 8012a94:	2301      	movs	r3, #1
 8012a96:	6163      	str	r3, [r4, #20]
 8012a98:	b002      	add	sp, #8
 8012a9a:	bd70      	pop	{r4, r5, r6, pc}
 8012a9c:	ab01      	add	r3, sp, #4
 8012a9e:	466a      	mov	r2, sp
 8012aa0:	f7ff ffc8 	bl	8012a34 <__swhatbuf_r>
 8012aa4:	9900      	ldr	r1, [sp, #0]
 8012aa6:	4605      	mov	r5, r0
 8012aa8:	4630      	mov	r0, r6
 8012aaa:	f7fd ff21 	bl	80108f0 <_malloc_r>
 8012aae:	b948      	cbnz	r0, 8012ac4 <__smakebuf_r+0x44>
 8012ab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ab4:	059a      	lsls	r2, r3, #22
 8012ab6:	d4ef      	bmi.n	8012a98 <__smakebuf_r+0x18>
 8012ab8:	f023 0303 	bic.w	r3, r3, #3
 8012abc:	f043 0302 	orr.w	r3, r3, #2
 8012ac0:	81a3      	strh	r3, [r4, #12]
 8012ac2:	e7e3      	b.n	8012a8c <__smakebuf_r+0xc>
 8012ac4:	4b0d      	ldr	r3, [pc, #52]	; (8012afc <__smakebuf_r+0x7c>)
 8012ac6:	62b3      	str	r3, [r6, #40]	; 0x28
 8012ac8:	89a3      	ldrh	r3, [r4, #12]
 8012aca:	6020      	str	r0, [r4, #0]
 8012acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ad0:	81a3      	strh	r3, [r4, #12]
 8012ad2:	9b00      	ldr	r3, [sp, #0]
 8012ad4:	6163      	str	r3, [r4, #20]
 8012ad6:	9b01      	ldr	r3, [sp, #4]
 8012ad8:	6120      	str	r0, [r4, #16]
 8012ada:	b15b      	cbz	r3, 8012af4 <__smakebuf_r+0x74>
 8012adc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ae0:	4630      	mov	r0, r6
 8012ae2:	f001 fa97 	bl	8014014 <_isatty_r>
 8012ae6:	b128      	cbz	r0, 8012af4 <__smakebuf_r+0x74>
 8012ae8:	89a3      	ldrh	r3, [r4, #12]
 8012aea:	f023 0303 	bic.w	r3, r3, #3
 8012aee:	f043 0301 	orr.w	r3, r3, #1
 8012af2:	81a3      	strh	r3, [r4, #12]
 8012af4:	89a0      	ldrh	r0, [r4, #12]
 8012af6:	4305      	orrs	r5, r0
 8012af8:	81a5      	strh	r5, [r4, #12]
 8012afa:	e7cd      	b.n	8012a98 <__smakebuf_r+0x18>
 8012afc:	08012839 	.word	0x08012839

08012b00 <__malloc_lock>:
 8012b00:	4801      	ldr	r0, [pc, #4]	; (8012b08 <__malloc_lock+0x8>)
 8012b02:	f7ff bf82 	b.w	8012a0a <__retarget_lock_acquire_recursive>
 8012b06:	bf00      	nop
 8012b08:	20003230 	.word	0x20003230

08012b0c <__malloc_unlock>:
 8012b0c:	4801      	ldr	r0, [pc, #4]	; (8012b14 <__malloc_unlock+0x8>)
 8012b0e:	f7ff bf7d 	b.w	8012a0c <__retarget_lock_release_recursive>
 8012b12:	bf00      	nop
 8012b14:	20003230 	.word	0x20003230

08012b18 <_Balloc>:
 8012b18:	b570      	push	{r4, r5, r6, lr}
 8012b1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012b1c:	4604      	mov	r4, r0
 8012b1e:	460d      	mov	r5, r1
 8012b20:	b976      	cbnz	r6, 8012b40 <_Balloc+0x28>
 8012b22:	2010      	movs	r0, #16
 8012b24:	f7fd fe52 	bl	80107cc <malloc>
 8012b28:	4602      	mov	r2, r0
 8012b2a:	6260      	str	r0, [r4, #36]	; 0x24
 8012b2c:	b920      	cbnz	r0, 8012b38 <_Balloc+0x20>
 8012b2e:	4b18      	ldr	r3, [pc, #96]	; (8012b90 <_Balloc+0x78>)
 8012b30:	4818      	ldr	r0, [pc, #96]	; (8012b94 <_Balloc+0x7c>)
 8012b32:	2166      	movs	r1, #102	; 0x66
 8012b34:	f7fe fef2 	bl	801191c <__assert_func>
 8012b38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012b3c:	6006      	str	r6, [r0, #0]
 8012b3e:	60c6      	str	r6, [r0, #12]
 8012b40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012b42:	68f3      	ldr	r3, [r6, #12]
 8012b44:	b183      	cbz	r3, 8012b68 <_Balloc+0x50>
 8012b46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012b48:	68db      	ldr	r3, [r3, #12]
 8012b4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012b4e:	b9b8      	cbnz	r0, 8012b80 <_Balloc+0x68>
 8012b50:	2101      	movs	r1, #1
 8012b52:	fa01 f605 	lsl.w	r6, r1, r5
 8012b56:	1d72      	adds	r2, r6, #5
 8012b58:	0092      	lsls	r2, r2, #2
 8012b5a:	4620      	mov	r0, r4
 8012b5c:	f000 fb60 	bl	8013220 <_calloc_r>
 8012b60:	b160      	cbz	r0, 8012b7c <_Balloc+0x64>
 8012b62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012b66:	e00e      	b.n	8012b86 <_Balloc+0x6e>
 8012b68:	2221      	movs	r2, #33	; 0x21
 8012b6a:	2104      	movs	r1, #4
 8012b6c:	4620      	mov	r0, r4
 8012b6e:	f000 fb57 	bl	8013220 <_calloc_r>
 8012b72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012b74:	60f0      	str	r0, [r6, #12]
 8012b76:	68db      	ldr	r3, [r3, #12]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d1e4      	bne.n	8012b46 <_Balloc+0x2e>
 8012b7c:	2000      	movs	r0, #0
 8012b7e:	bd70      	pop	{r4, r5, r6, pc}
 8012b80:	6802      	ldr	r2, [r0, #0]
 8012b82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012b86:	2300      	movs	r3, #0
 8012b88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012b8c:	e7f7      	b.n	8012b7e <_Balloc+0x66>
 8012b8e:	bf00      	nop
 8012b90:	0801486a 	.word	0x0801486a
 8012b94:	08014af4 	.word	0x08014af4

08012b98 <_Bfree>:
 8012b98:	b570      	push	{r4, r5, r6, lr}
 8012b9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012b9c:	4605      	mov	r5, r0
 8012b9e:	460c      	mov	r4, r1
 8012ba0:	b976      	cbnz	r6, 8012bc0 <_Bfree+0x28>
 8012ba2:	2010      	movs	r0, #16
 8012ba4:	f7fd fe12 	bl	80107cc <malloc>
 8012ba8:	4602      	mov	r2, r0
 8012baa:	6268      	str	r0, [r5, #36]	; 0x24
 8012bac:	b920      	cbnz	r0, 8012bb8 <_Bfree+0x20>
 8012bae:	4b09      	ldr	r3, [pc, #36]	; (8012bd4 <_Bfree+0x3c>)
 8012bb0:	4809      	ldr	r0, [pc, #36]	; (8012bd8 <_Bfree+0x40>)
 8012bb2:	218a      	movs	r1, #138	; 0x8a
 8012bb4:	f7fe feb2 	bl	801191c <__assert_func>
 8012bb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012bbc:	6006      	str	r6, [r0, #0]
 8012bbe:	60c6      	str	r6, [r0, #12]
 8012bc0:	b13c      	cbz	r4, 8012bd2 <_Bfree+0x3a>
 8012bc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012bc4:	6862      	ldr	r2, [r4, #4]
 8012bc6:	68db      	ldr	r3, [r3, #12]
 8012bc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012bcc:	6021      	str	r1, [r4, #0]
 8012bce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012bd2:	bd70      	pop	{r4, r5, r6, pc}
 8012bd4:	0801486a 	.word	0x0801486a
 8012bd8:	08014af4 	.word	0x08014af4

08012bdc <__multadd>:
 8012bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012be0:	690d      	ldr	r5, [r1, #16]
 8012be2:	4607      	mov	r7, r0
 8012be4:	460c      	mov	r4, r1
 8012be6:	461e      	mov	r6, r3
 8012be8:	f101 0c14 	add.w	ip, r1, #20
 8012bec:	2000      	movs	r0, #0
 8012bee:	f8dc 3000 	ldr.w	r3, [ip]
 8012bf2:	b299      	uxth	r1, r3
 8012bf4:	fb02 6101 	mla	r1, r2, r1, r6
 8012bf8:	0c1e      	lsrs	r6, r3, #16
 8012bfa:	0c0b      	lsrs	r3, r1, #16
 8012bfc:	fb02 3306 	mla	r3, r2, r6, r3
 8012c00:	b289      	uxth	r1, r1
 8012c02:	3001      	adds	r0, #1
 8012c04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012c08:	4285      	cmp	r5, r0
 8012c0a:	f84c 1b04 	str.w	r1, [ip], #4
 8012c0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012c12:	dcec      	bgt.n	8012bee <__multadd+0x12>
 8012c14:	b30e      	cbz	r6, 8012c5a <__multadd+0x7e>
 8012c16:	68a3      	ldr	r3, [r4, #8]
 8012c18:	42ab      	cmp	r3, r5
 8012c1a:	dc19      	bgt.n	8012c50 <__multadd+0x74>
 8012c1c:	6861      	ldr	r1, [r4, #4]
 8012c1e:	4638      	mov	r0, r7
 8012c20:	3101      	adds	r1, #1
 8012c22:	f7ff ff79 	bl	8012b18 <_Balloc>
 8012c26:	4680      	mov	r8, r0
 8012c28:	b928      	cbnz	r0, 8012c36 <__multadd+0x5a>
 8012c2a:	4602      	mov	r2, r0
 8012c2c:	4b0c      	ldr	r3, [pc, #48]	; (8012c60 <__multadd+0x84>)
 8012c2e:	480d      	ldr	r0, [pc, #52]	; (8012c64 <__multadd+0x88>)
 8012c30:	21b5      	movs	r1, #181	; 0xb5
 8012c32:	f7fe fe73 	bl	801191c <__assert_func>
 8012c36:	6922      	ldr	r2, [r4, #16]
 8012c38:	3202      	adds	r2, #2
 8012c3a:	f104 010c 	add.w	r1, r4, #12
 8012c3e:	0092      	lsls	r2, r2, #2
 8012c40:	300c      	adds	r0, #12
 8012c42:	f7fd fdd3 	bl	80107ec <memcpy>
 8012c46:	4621      	mov	r1, r4
 8012c48:	4638      	mov	r0, r7
 8012c4a:	f7ff ffa5 	bl	8012b98 <_Bfree>
 8012c4e:	4644      	mov	r4, r8
 8012c50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012c54:	3501      	adds	r5, #1
 8012c56:	615e      	str	r6, [r3, #20]
 8012c58:	6125      	str	r5, [r4, #16]
 8012c5a:	4620      	mov	r0, r4
 8012c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c60:	08014a83 	.word	0x08014a83
 8012c64:	08014af4 	.word	0x08014af4

08012c68 <__hi0bits>:
 8012c68:	0c03      	lsrs	r3, r0, #16
 8012c6a:	041b      	lsls	r3, r3, #16
 8012c6c:	b9d3      	cbnz	r3, 8012ca4 <__hi0bits+0x3c>
 8012c6e:	0400      	lsls	r0, r0, #16
 8012c70:	2310      	movs	r3, #16
 8012c72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012c76:	bf04      	itt	eq
 8012c78:	0200      	lsleq	r0, r0, #8
 8012c7a:	3308      	addeq	r3, #8
 8012c7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012c80:	bf04      	itt	eq
 8012c82:	0100      	lsleq	r0, r0, #4
 8012c84:	3304      	addeq	r3, #4
 8012c86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012c8a:	bf04      	itt	eq
 8012c8c:	0080      	lsleq	r0, r0, #2
 8012c8e:	3302      	addeq	r3, #2
 8012c90:	2800      	cmp	r0, #0
 8012c92:	db05      	blt.n	8012ca0 <__hi0bits+0x38>
 8012c94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012c98:	f103 0301 	add.w	r3, r3, #1
 8012c9c:	bf08      	it	eq
 8012c9e:	2320      	moveq	r3, #32
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	4770      	bx	lr
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	e7e4      	b.n	8012c72 <__hi0bits+0xa>

08012ca8 <__lo0bits>:
 8012ca8:	6803      	ldr	r3, [r0, #0]
 8012caa:	f013 0207 	ands.w	r2, r3, #7
 8012cae:	4601      	mov	r1, r0
 8012cb0:	d00b      	beq.n	8012cca <__lo0bits+0x22>
 8012cb2:	07da      	lsls	r2, r3, #31
 8012cb4:	d423      	bmi.n	8012cfe <__lo0bits+0x56>
 8012cb6:	0798      	lsls	r0, r3, #30
 8012cb8:	bf49      	itett	mi
 8012cba:	085b      	lsrmi	r3, r3, #1
 8012cbc:	089b      	lsrpl	r3, r3, #2
 8012cbe:	2001      	movmi	r0, #1
 8012cc0:	600b      	strmi	r3, [r1, #0]
 8012cc2:	bf5c      	itt	pl
 8012cc4:	600b      	strpl	r3, [r1, #0]
 8012cc6:	2002      	movpl	r0, #2
 8012cc8:	4770      	bx	lr
 8012cca:	b298      	uxth	r0, r3
 8012ccc:	b9a8      	cbnz	r0, 8012cfa <__lo0bits+0x52>
 8012cce:	0c1b      	lsrs	r3, r3, #16
 8012cd0:	2010      	movs	r0, #16
 8012cd2:	b2da      	uxtb	r2, r3
 8012cd4:	b90a      	cbnz	r2, 8012cda <__lo0bits+0x32>
 8012cd6:	3008      	adds	r0, #8
 8012cd8:	0a1b      	lsrs	r3, r3, #8
 8012cda:	071a      	lsls	r2, r3, #28
 8012cdc:	bf04      	itt	eq
 8012cde:	091b      	lsreq	r3, r3, #4
 8012ce0:	3004      	addeq	r0, #4
 8012ce2:	079a      	lsls	r2, r3, #30
 8012ce4:	bf04      	itt	eq
 8012ce6:	089b      	lsreq	r3, r3, #2
 8012ce8:	3002      	addeq	r0, #2
 8012cea:	07da      	lsls	r2, r3, #31
 8012cec:	d403      	bmi.n	8012cf6 <__lo0bits+0x4e>
 8012cee:	085b      	lsrs	r3, r3, #1
 8012cf0:	f100 0001 	add.w	r0, r0, #1
 8012cf4:	d005      	beq.n	8012d02 <__lo0bits+0x5a>
 8012cf6:	600b      	str	r3, [r1, #0]
 8012cf8:	4770      	bx	lr
 8012cfa:	4610      	mov	r0, r2
 8012cfc:	e7e9      	b.n	8012cd2 <__lo0bits+0x2a>
 8012cfe:	2000      	movs	r0, #0
 8012d00:	4770      	bx	lr
 8012d02:	2020      	movs	r0, #32
 8012d04:	4770      	bx	lr
	...

08012d08 <__i2b>:
 8012d08:	b510      	push	{r4, lr}
 8012d0a:	460c      	mov	r4, r1
 8012d0c:	2101      	movs	r1, #1
 8012d0e:	f7ff ff03 	bl	8012b18 <_Balloc>
 8012d12:	4602      	mov	r2, r0
 8012d14:	b928      	cbnz	r0, 8012d22 <__i2b+0x1a>
 8012d16:	4b05      	ldr	r3, [pc, #20]	; (8012d2c <__i2b+0x24>)
 8012d18:	4805      	ldr	r0, [pc, #20]	; (8012d30 <__i2b+0x28>)
 8012d1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012d1e:	f7fe fdfd 	bl	801191c <__assert_func>
 8012d22:	2301      	movs	r3, #1
 8012d24:	6144      	str	r4, [r0, #20]
 8012d26:	6103      	str	r3, [r0, #16]
 8012d28:	bd10      	pop	{r4, pc}
 8012d2a:	bf00      	nop
 8012d2c:	08014a83 	.word	0x08014a83
 8012d30:	08014af4 	.word	0x08014af4

08012d34 <__multiply>:
 8012d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d38:	4691      	mov	r9, r2
 8012d3a:	690a      	ldr	r2, [r1, #16]
 8012d3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012d40:	429a      	cmp	r2, r3
 8012d42:	bfb8      	it	lt
 8012d44:	460b      	movlt	r3, r1
 8012d46:	460c      	mov	r4, r1
 8012d48:	bfbc      	itt	lt
 8012d4a:	464c      	movlt	r4, r9
 8012d4c:	4699      	movlt	r9, r3
 8012d4e:	6927      	ldr	r7, [r4, #16]
 8012d50:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012d54:	68a3      	ldr	r3, [r4, #8]
 8012d56:	6861      	ldr	r1, [r4, #4]
 8012d58:	eb07 060a 	add.w	r6, r7, sl
 8012d5c:	42b3      	cmp	r3, r6
 8012d5e:	b085      	sub	sp, #20
 8012d60:	bfb8      	it	lt
 8012d62:	3101      	addlt	r1, #1
 8012d64:	f7ff fed8 	bl	8012b18 <_Balloc>
 8012d68:	b930      	cbnz	r0, 8012d78 <__multiply+0x44>
 8012d6a:	4602      	mov	r2, r0
 8012d6c:	4b44      	ldr	r3, [pc, #272]	; (8012e80 <__multiply+0x14c>)
 8012d6e:	4845      	ldr	r0, [pc, #276]	; (8012e84 <__multiply+0x150>)
 8012d70:	f240 115d 	movw	r1, #349	; 0x15d
 8012d74:	f7fe fdd2 	bl	801191c <__assert_func>
 8012d78:	f100 0514 	add.w	r5, r0, #20
 8012d7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012d80:	462b      	mov	r3, r5
 8012d82:	2200      	movs	r2, #0
 8012d84:	4543      	cmp	r3, r8
 8012d86:	d321      	bcc.n	8012dcc <__multiply+0x98>
 8012d88:	f104 0314 	add.w	r3, r4, #20
 8012d8c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012d90:	f109 0314 	add.w	r3, r9, #20
 8012d94:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012d98:	9202      	str	r2, [sp, #8]
 8012d9a:	1b3a      	subs	r2, r7, r4
 8012d9c:	3a15      	subs	r2, #21
 8012d9e:	f022 0203 	bic.w	r2, r2, #3
 8012da2:	3204      	adds	r2, #4
 8012da4:	f104 0115 	add.w	r1, r4, #21
 8012da8:	428f      	cmp	r7, r1
 8012daa:	bf38      	it	cc
 8012dac:	2204      	movcc	r2, #4
 8012dae:	9201      	str	r2, [sp, #4]
 8012db0:	9a02      	ldr	r2, [sp, #8]
 8012db2:	9303      	str	r3, [sp, #12]
 8012db4:	429a      	cmp	r2, r3
 8012db6:	d80c      	bhi.n	8012dd2 <__multiply+0x9e>
 8012db8:	2e00      	cmp	r6, #0
 8012dba:	dd03      	ble.n	8012dc4 <__multiply+0x90>
 8012dbc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d05a      	beq.n	8012e7a <__multiply+0x146>
 8012dc4:	6106      	str	r6, [r0, #16]
 8012dc6:	b005      	add	sp, #20
 8012dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dcc:	f843 2b04 	str.w	r2, [r3], #4
 8012dd0:	e7d8      	b.n	8012d84 <__multiply+0x50>
 8012dd2:	f8b3 a000 	ldrh.w	sl, [r3]
 8012dd6:	f1ba 0f00 	cmp.w	sl, #0
 8012dda:	d024      	beq.n	8012e26 <__multiply+0xf2>
 8012ddc:	f104 0e14 	add.w	lr, r4, #20
 8012de0:	46a9      	mov	r9, r5
 8012de2:	f04f 0c00 	mov.w	ip, #0
 8012de6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012dea:	f8d9 1000 	ldr.w	r1, [r9]
 8012dee:	fa1f fb82 	uxth.w	fp, r2
 8012df2:	b289      	uxth	r1, r1
 8012df4:	fb0a 110b 	mla	r1, sl, fp, r1
 8012df8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012dfc:	f8d9 2000 	ldr.w	r2, [r9]
 8012e00:	4461      	add	r1, ip
 8012e02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012e06:	fb0a c20b 	mla	r2, sl, fp, ip
 8012e0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012e0e:	b289      	uxth	r1, r1
 8012e10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012e14:	4577      	cmp	r7, lr
 8012e16:	f849 1b04 	str.w	r1, [r9], #4
 8012e1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012e1e:	d8e2      	bhi.n	8012de6 <__multiply+0xb2>
 8012e20:	9a01      	ldr	r2, [sp, #4]
 8012e22:	f845 c002 	str.w	ip, [r5, r2]
 8012e26:	9a03      	ldr	r2, [sp, #12]
 8012e28:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012e2c:	3304      	adds	r3, #4
 8012e2e:	f1b9 0f00 	cmp.w	r9, #0
 8012e32:	d020      	beq.n	8012e76 <__multiply+0x142>
 8012e34:	6829      	ldr	r1, [r5, #0]
 8012e36:	f104 0c14 	add.w	ip, r4, #20
 8012e3a:	46ae      	mov	lr, r5
 8012e3c:	f04f 0a00 	mov.w	sl, #0
 8012e40:	f8bc b000 	ldrh.w	fp, [ip]
 8012e44:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012e48:	fb09 220b 	mla	r2, r9, fp, r2
 8012e4c:	4492      	add	sl, r2
 8012e4e:	b289      	uxth	r1, r1
 8012e50:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012e54:	f84e 1b04 	str.w	r1, [lr], #4
 8012e58:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012e5c:	f8be 1000 	ldrh.w	r1, [lr]
 8012e60:	0c12      	lsrs	r2, r2, #16
 8012e62:	fb09 1102 	mla	r1, r9, r2, r1
 8012e66:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012e6a:	4567      	cmp	r7, ip
 8012e6c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012e70:	d8e6      	bhi.n	8012e40 <__multiply+0x10c>
 8012e72:	9a01      	ldr	r2, [sp, #4]
 8012e74:	50a9      	str	r1, [r5, r2]
 8012e76:	3504      	adds	r5, #4
 8012e78:	e79a      	b.n	8012db0 <__multiply+0x7c>
 8012e7a:	3e01      	subs	r6, #1
 8012e7c:	e79c      	b.n	8012db8 <__multiply+0x84>
 8012e7e:	bf00      	nop
 8012e80:	08014a83 	.word	0x08014a83
 8012e84:	08014af4 	.word	0x08014af4

08012e88 <__pow5mult>:
 8012e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e8c:	4615      	mov	r5, r2
 8012e8e:	f012 0203 	ands.w	r2, r2, #3
 8012e92:	4606      	mov	r6, r0
 8012e94:	460f      	mov	r7, r1
 8012e96:	d007      	beq.n	8012ea8 <__pow5mult+0x20>
 8012e98:	4c25      	ldr	r4, [pc, #148]	; (8012f30 <__pow5mult+0xa8>)
 8012e9a:	3a01      	subs	r2, #1
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012ea2:	f7ff fe9b 	bl	8012bdc <__multadd>
 8012ea6:	4607      	mov	r7, r0
 8012ea8:	10ad      	asrs	r5, r5, #2
 8012eaa:	d03d      	beq.n	8012f28 <__pow5mult+0xa0>
 8012eac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012eae:	b97c      	cbnz	r4, 8012ed0 <__pow5mult+0x48>
 8012eb0:	2010      	movs	r0, #16
 8012eb2:	f7fd fc8b 	bl	80107cc <malloc>
 8012eb6:	4602      	mov	r2, r0
 8012eb8:	6270      	str	r0, [r6, #36]	; 0x24
 8012eba:	b928      	cbnz	r0, 8012ec8 <__pow5mult+0x40>
 8012ebc:	4b1d      	ldr	r3, [pc, #116]	; (8012f34 <__pow5mult+0xac>)
 8012ebe:	481e      	ldr	r0, [pc, #120]	; (8012f38 <__pow5mult+0xb0>)
 8012ec0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012ec4:	f7fe fd2a 	bl	801191c <__assert_func>
 8012ec8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012ecc:	6004      	str	r4, [r0, #0]
 8012ece:	60c4      	str	r4, [r0, #12]
 8012ed0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012ed4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012ed8:	b94c      	cbnz	r4, 8012eee <__pow5mult+0x66>
 8012eda:	f240 2171 	movw	r1, #625	; 0x271
 8012ede:	4630      	mov	r0, r6
 8012ee0:	f7ff ff12 	bl	8012d08 <__i2b>
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	f8c8 0008 	str.w	r0, [r8, #8]
 8012eea:	4604      	mov	r4, r0
 8012eec:	6003      	str	r3, [r0, #0]
 8012eee:	f04f 0900 	mov.w	r9, #0
 8012ef2:	07eb      	lsls	r3, r5, #31
 8012ef4:	d50a      	bpl.n	8012f0c <__pow5mult+0x84>
 8012ef6:	4639      	mov	r1, r7
 8012ef8:	4622      	mov	r2, r4
 8012efa:	4630      	mov	r0, r6
 8012efc:	f7ff ff1a 	bl	8012d34 <__multiply>
 8012f00:	4639      	mov	r1, r7
 8012f02:	4680      	mov	r8, r0
 8012f04:	4630      	mov	r0, r6
 8012f06:	f7ff fe47 	bl	8012b98 <_Bfree>
 8012f0a:	4647      	mov	r7, r8
 8012f0c:	106d      	asrs	r5, r5, #1
 8012f0e:	d00b      	beq.n	8012f28 <__pow5mult+0xa0>
 8012f10:	6820      	ldr	r0, [r4, #0]
 8012f12:	b938      	cbnz	r0, 8012f24 <__pow5mult+0x9c>
 8012f14:	4622      	mov	r2, r4
 8012f16:	4621      	mov	r1, r4
 8012f18:	4630      	mov	r0, r6
 8012f1a:	f7ff ff0b 	bl	8012d34 <__multiply>
 8012f1e:	6020      	str	r0, [r4, #0]
 8012f20:	f8c0 9000 	str.w	r9, [r0]
 8012f24:	4604      	mov	r4, r0
 8012f26:	e7e4      	b.n	8012ef2 <__pow5mult+0x6a>
 8012f28:	4638      	mov	r0, r7
 8012f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f2e:	bf00      	nop
 8012f30:	08014c40 	.word	0x08014c40
 8012f34:	0801486a 	.word	0x0801486a
 8012f38:	08014af4 	.word	0x08014af4

08012f3c <__lshift>:
 8012f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f40:	460c      	mov	r4, r1
 8012f42:	6849      	ldr	r1, [r1, #4]
 8012f44:	6923      	ldr	r3, [r4, #16]
 8012f46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012f4a:	68a3      	ldr	r3, [r4, #8]
 8012f4c:	4607      	mov	r7, r0
 8012f4e:	4691      	mov	r9, r2
 8012f50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012f54:	f108 0601 	add.w	r6, r8, #1
 8012f58:	42b3      	cmp	r3, r6
 8012f5a:	db0b      	blt.n	8012f74 <__lshift+0x38>
 8012f5c:	4638      	mov	r0, r7
 8012f5e:	f7ff fddb 	bl	8012b18 <_Balloc>
 8012f62:	4605      	mov	r5, r0
 8012f64:	b948      	cbnz	r0, 8012f7a <__lshift+0x3e>
 8012f66:	4602      	mov	r2, r0
 8012f68:	4b2a      	ldr	r3, [pc, #168]	; (8013014 <__lshift+0xd8>)
 8012f6a:	482b      	ldr	r0, [pc, #172]	; (8013018 <__lshift+0xdc>)
 8012f6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012f70:	f7fe fcd4 	bl	801191c <__assert_func>
 8012f74:	3101      	adds	r1, #1
 8012f76:	005b      	lsls	r3, r3, #1
 8012f78:	e7ee      	b.n	8012f58 <__lshift+0x1c>
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	f100 0114 	add.w	r1, r0, #20
 8012f80:	f100 0210 	add.w	r2, r0, #16
 8012f84:	4618      	mov	r0, r3
 8012f86:	4553      	cmp	r3, sl
 8012f88:	db37      	blt.n	8012ffa <__lshift+0xbe>
 8012f8a:	6920      	ldr	r0, [r4, #16]
 8012f8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012f90:	f104 0314 	add.w	r3, r4, #20
 8012f94:	f019 091f 	ands.w	r9, r9, #31
 8012f98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012f9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012fa0:	d02f      	beq.n	8013002 <__lshift+0xc6>
 8012fa2:	f1c9 0e20 	rsb	lr, r9, #32
 8012fa6:	468a      	mov	sl, r1
 8012fa8:	f04f 0c00 	mov.w	ip, #0
 8012fac:	681a      	ldr	r2, [r3, #0]
 8012fae:	fa02 f209 	lsl.w	r2, r2, r9
 8012fb2:	ea42 020c 	orr.w	r2, r2, ip
 8012fb6:	f84a 2b04 	str.w	r2, [sl], #4
 8012fba:	f853 2b04 	ldr.w	r2, [r3], #4
 8012fbe:	4298      	cmp	r0, r3
 8012fc0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012fc4:	d8f2      	bhi.n	8012fac <__lshift+0x70>
 8012fc6:	1b03      	subs	r3, r0, r4
 8012fc8:	3b15      	subs	r3, #21
 8012fca:	f023 0303 	bic.w	r3, r3, #3
 8012fce:	3304      	adds	r3, #4
 8012fd0:	f104 0215 	add.w	r2, r4, #21
 8012fd4:	4290      	cmp	r0, r2
 8012fd6:	bf38      	it	cc
 8012fd8:	2304      	movcc	r3, #4
 8012fda:	f841 c003 	str.w	ip, [r1, r3]
 8012fde:	f1bc 0f00 	cmp.w	ip, #0
 8012fe2:	d001      	beq.n	8012fe8 <__lshift+0xac>
 8012fe4:	f108 0602 	add.w	r6, r8, #2
 8012fe8:	3e01      	subs	r6, #1
 8012fea:	4638      	mov	r0, r7
 8012fec:	612e      	str	r6, [r5, #16]
 8012fee:	4621      	mov	r1, r4
 8012ff0:	f7ff fdd2 	bl	8012b98 <_Bfree>
 8012ff4:	4628      	mov	r0, r5
 8012ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ffa:	f842 0f04 	str.w	r0, [r2, #4]!
 8012ffe:	3301      	adds	r3, #1
 8013000:	e7c1      	b.n	8012f86 <__lshift+0x4a>
 8013002:	3904      	subs	r1, #4
 8013004:	f853 2b04 	ldr.w	r2, [r3], #4
 8013008:	f841 2f04 	str.w	r2, [r1, #4]!
 801300c:	4298      	cmp	r0, r3
 801300e:	d8f9      	bhi.n	8013004 <__lshift+0xc8>
 8013010:	e7ea      	b.n	8012fe8 <__lshift+0xac>
 8013012:	bf00      	nop
 8013014:	08014a83 	.word	0x08014a83
 8013018:	08014af4 	.word	0x08014af4

0801301c <__mcmp>:
 801301c:	b530      	push	{r4, r5, lr}
 801301e:	6902      	ldr	r2, [r0, #16]
 8013020:	690c      	ldr	r4, [r1, #16]
 8013022:	1b12      	subs	r2, r2, r4
 8013024:	d10e      	bne.n	8013044 <__mcmp+0x28>
 8013026:	f100 0314 	add.w	r3, r0, #20
 801302a:	3114      	adds	r1, #20
 801302c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013030:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013034:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013038:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801303c:	42a5      	cmp	r5, r4
 801303e:	d003      	beq.n	8013048 <__mcmp+0x2c>
 8013040:	d305      	bcc.n	801304e <__mcmp+0x32>
 8013042:	2201      	movs	r2, #1
 8013044:	4610      	mov	r0, r2
 8013046:	bd30      	pop	{r4, r5, pc}
 8013048:	4283      	cmp	r3, r0
 801304a:	d3f3      	bcc.n	8013034 <__mcmp+0x18>
 801304c:	e7fa      	b.n	8013044 <__mcmp+0x28>
 801304e:	f04f 32ff 	mov.w	r2, #4294967295
 8013052:	e7f7      	b.n	8013044 <__mcmp+0x28>

08013054 <__mdiff>:
 8013054:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013058:	460c      	mov	r4, r1
 801305a:	4606      	mov	r6, r0
 801305c:	4611      	mov	r1, r2
 801305e:	4620      	mov	r0, r4
 8013060:	4690      	mov	r8, r2
 8013062:	f7ff ffdb 	bl	801301c <__mcmp>
 8013066:	1e05      	subs	r5, r0, #0
 8013068:	d110      	bne.n	801308c <__mdiff+0x38>
 801306a:	4629      	mov	r1, r5
 801306c:	4630      	mov	r0, r6
 801306e:	f7ff fd53 	bl	8012b18 <_Balloc>
 8013072:	b930      	cbnz	r0, 8013082 <__mdiff+0x2e>
 8013074:	4b3a      	ldr	r3, [pc, #232]	; (8013160 <__mdiff+0x10c>)
 8013076:	4602      	mov	r2, r0
 8013078:	f240 2132 	movw	r1, #562	; 0x232
 801307c:	4839      	ldr	r0, [pc, #228]	; (8013164 <__mdiff+0x110>)
 801307e:	f7fe fc4d 	bl	801191c <__assert_func>
 8013082:	2301      	movs	r3, #1
 8013084:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013088:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801308c:	bfa4      	itt	ge
 801308e:	4643      	movge	r3, r8
 8013090:	46a0      	movge	r8, r4
 8013092:	4630      	mov	r0, r6
 8013094:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013098:	bfa6      	itte	ge
 801309a:	461c      	movge	r4, r3
 801309c:	2500      	movge	r5, #0
 801309e:	2501      	movlt	r5, #1
 80130a0:	f7ff fd3a 	bl	8012b18 <_Balloc>
 80130a4:	b920      	cbnz	r0, 80130b0 <__mdiff+0x5c>
 80130a6:	4b2e      	ldr	r3, [pc, #184]	; (8013160 <__mdiff+0x10c>)
 80130a8:	4602      	mov	r2, r0
 80130aa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80130ae:	e7e5      	b.n	801307c <__mdiff+0x28>
 80130b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80130b4:	6926      	ldr	r6, [r4, #16]
 80130b6:	60c5      	str	r5, [r0, #12]
 80130b8:	f104 0914 	add.w	r9, r4, #20
 80130bc:	f108 0514 	add.w	r5, r8, #20
 80130c0:	f100 0e14 	add.w	lr, r0, #20
 80130c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80130c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80130cc:	f108 0210 	add.w	r2, r8, #16
 80130d0:	46f2      	mov	sl, lr
 80130d2:	2100      	movs	r1, #0
 80130d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80130d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80130dc:	fa1f f883 	uxth.w	r8, r3
 80130e0:	fa11 f18b 	uxtah	r1, r1, fp
 80130e4:	0c1b      	lsrs	r3, r3, #16
 80130e6:	eba1 0808 	sub.w	r8, r1, r8
 80130ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80130ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80130f2:	fa1f f888 	uxth.w	r8, r8
 80130f6:	1419      	asrs	r1, r3, #16
 80130f8:	454e      	cmp	r6, r9
 80130fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80130fe:	f84a 3b04 	str.w	r3, [sl], #4
 8013102:	d8e7      	bhi.n	80130d4 <__mdiff+0x80>
 8013104:	1b33      	subs	r3, r6, r4
 8013106:	3b15      	subs	r3, #21
 8013108:	f023 0303 	bic.w	r3, r3, #3
 801310c:	3304      	adds	r3, #4
 801310e:	3415      	adds	r4, #21
 8013110:	42a6      	cmp	r6, r4
 8013112:	bf38      	it	cc
 8013114:	2304      	movcc	r3, #4
 8013116:	441d      	add	r5, r3
 8013118:	4473      	add	r3, lr
 801311a:	469e      	mov	lr, r3
 801311c:	462e      	mov	r6, r5
 801311e:	4566      	cmp	r6, ip
 8013120:	d30e      	bcc.n	8013140 <__mdiff+0xec>
 8013122:	f10c 0203 	add.w	r2, ip, #3
 8013126:	1b52      	subs	r2, r2, r5
 8013128:	f022 0203 	bic.w	r2, r2, #3
 801312c:	3d03      	subs	r5, #3
 801312e:	45ac      	cmp	ip, r5
 8013130:	bf38      	it	cc
 8013132:	2200      	movcc	r2, #0
 8013134:	441a      	add	r2, r3
 8013136:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801313a:	b17b      	cbz	r3, 801315c <__mdiff+0x108>
 801313c:	6107      	str	r7, [r0, #16]
 801313e:	e7a3      	b.n	8013088 <__mdiff+0x34>
 8013140:	f856 8b04 	ldr.w	r8, [r6], #4
 8013144:	fa11 f288 	uxtah	r2, r1, r8
 8013148:	1414      	asrs	r4, r2, #16
 801314a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801314e:	b292      	uxth	r2, r2
 8013150:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013154:	f84e 2b04 	str.w	r2, [lr], #4
 8013158:	1421      	asrs	r1, r4, #16
 801315a:	e7e0      	b.n	801311e <__mdiff+0xca>
 801315c:	3f01      	subs	r7, #1
 801315e:	e7ea      	b.n	8013136 <__mdiff+0xe2>
 8013160:	08014a83 	.word	0x08014a83
 8013164:	08014af4 	.word	0x08014af4

08013168 <__d2b>:
 8013168:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801316c:	4689      	mov	r9, r1
 801316e:	2101      	movs	r1, #1
 8013170:	ec57 6b10 	vmov	r6, r7, d0
 8013174:	4690      	mov	r8, r2
 8013176:	f7ff fccf 	bl	8012b18 <_Balloc>
 801317a:	4604      	mov	r4, r0
 801317c:	b930      	cbnz	r0, 801318c <__d2b+0x24>
 801317e:	4602      	mov	r2, r0
 8013180:	4b25      	ldr	r3, [pc, #148]	; (8013218 <__d2b+0xb0>)
 8013182:	4826      	ldr	r0, [pc, #152]	; (801321c <__d2b+0xb4>)
 8013184:	f240 310a 	movw	r1, #778	; 0x30a
 8013188:	f7fe fbc8 	bl	801191c <__assert_func>
 801318c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013190:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013194:	bb35      	cbnz	r5, 80131e4 <__d2b+0x7c>
 8013196:	2e00      	cmp	r6, #0
 8013198:	9301      	str	r3, [sp, #4]
 801319a:	d028      	beq.n	80131ee <__d2b+0x86>
 801319c:	4668      	mov	r0, sp
 801319e:	9600      	str	r6, [sp, #0]
 80131a0:	f7ff fd82 	bl	8012ca8 <__lo0bits>
 80131a4:	9900      	ldr	r1, [sp, #0]
 80131a6:	b300      	cbz	r0, 80131ea <__d2b+0x82>
 80131a8:	9a01      	ldr	r2, [sp, #4]
 80131aa:	f1c0 0320 	rsb	r3, r0, #32
 80131ae:	fa02 f303 	lsl.w	r3, r2, r3
 80131b2:	430b      	orrs	r3, r1
 80131b4:	40c2      	lsrs	r2, r0
 80131b6:	6163      	str	r3, [r4, #20]
 80131b8:	9201      	str	r2, [sp, #4]
 80131ba:	9b01      	ldr	r3, [sp, #4]
 80131bc:	61a3      	str	r3, [r4, #24]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	bf14      	ite	ne
 80131c2:	2202      	movne	r2, #2
 80131c4:	2201      	moveq	r2, #1
 80131c6:	6122      	str	r2, [r4, #16]
 80131c8:	b1d5      	cbz	r5, 8013200 <__d2b+0x98>
 80131ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80131ce:	4405      	add	r5, r0
 80131d0:	f8c9 5000 	str.w	r5, [r9]
 80131d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80131d8:	f8c8 0000 	str.w	r0, [r8]
 80131dc:	4620      	mov	r0, r4
 80131de:	b003      	add	sp, #12
 80131e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80131e8:	e7d5      	b.n	8013196 <__d2b+0x2e>
 80131ea:	6161      	str	r1, [r4, #20]
 80131ec:	e7e5      	b.n	80131ba <__d2b+0x52>
 80131ee:	a801      	add	r0, sp, #4
 80131f0:	f7ff fd5a 	bl	8012ca8 <__lo0bits>
 80131f4:	9b01      	ldr	r3, [sp, #4]
 80131f6:	6163      	str	r3, [r4, #20]
 80131f8:	2201      	movs	r2, #1
 80131fa:	6122      	str	r2, [r4, #16]
 80131fc:	3020      	adds	r0, #32
 80131fe:	e7e3      	b.n	80131c8 <__d2b+0x60>
 8013200:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013204:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013208:	f8c9 0000 	str.w	r0, [r9]
 801320c:	6918      	ldr	r0, [r3, #16]
 801320e:	f7ff fd2b 	bl	8012c68 <__hi0bits>
 8013212:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013216:	e7df      	b.n	80131d8 <__d2b+0x70>
 8013218:	08014a83 	.word	0x08014a83
 801321c:	08014af4 	.word	0x08014af4

08013220 <_calloc_r>:
 8013220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013222:	fba1 2402 	umull	r2, r4, r1, r2
 8013226:	b94c      	cbnz	r4, 801323c <_calloc_r+0x1c>
 8013228:	4611      	mov	r1, r2
 801322a:	9201      	str	r2, [sp, #4]
 801322c:	f7fd fb60 	bl	80108f0 <_malloc_r>
 8013230:	9a01      	ldr	r2, [sp, #4]
 8013232:	4605      	mov	r5, r0
 8013234:	b930      	cbnz	r0, 8013244 <_calloc_r+0x24>
 8013236:	4628      	mov	r0, r5
 8013238:	b003      	add	sp, #12
 801323a:	bd30      	pop	{r4, r5, pc}
 801323c:	220c      	movs	r2, #12
 801323e:	6002      	str	r2, [r0, #0]
 8013240:	2500      	movs	r5, #0
 8013242:	e7f8      	b.n	8013236 <_calloc_r+0x16>
 8013244:	4621      	mov	r1, r4
 8013246:	f7fd fadf 	bl	8010808 <memset>
 801324a:	e7f4      	b.n	8013236 <_calloc_r+0x16>

0801324c <__ssputs_r>:
 801324c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013250:	688e      	ldr	r6, [r1, #8]
 8013252:	429e      	cmp	r6, r3
 8013254:	4682      	mov	sl, r0
 8013256:	460c      	mov	r4, r1
 8013258:	4690      	mov	r8, r2
 801325a:	461f      	mov	r7, r3
 801325c:	d838      	bhi.n	80132d0 <__ssputs_r+0x84>
 801325e:	898a      	ldrh	r2, [r1, #12]
 8013260:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013264:	d032      	beq.n	80132cc <__ssputs_r+0x80>
 8013266:	6825      	ldr	r5, [r4, #0]
 8013268:	6909      	ldr	r1, [r1, #16]
 801326a:	eba5 0901 	sub.w	r9, r5, r1
 801326e:	6965      	ldr	r5, [r4, #20]
 8013270:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013274:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013278:	3301      	adds	r3, #1
 801327a:	444b      	add	r3, r9
 801327c:	106d      	asrs	r5, r5, #1
 801327e:	429d      	cmp	r5, r3
 8013280:	bf38      	it	cc
 8013282:	461d      	movcc	r5, r3
 8013284:	0553      	lsls	r3, r2, #21
 8013286:	d531      	bpl.n	80132ec <__ssputs_r+0xa0>
 8013288:	4629      	mov	r1, r5
 801328a:	f7fd fb31 	bl	80108f0 <_malloc_r>
 801328e:	4606      	mov	r6, r0
 8013290:	b950      	cbnz	r0, 80132a8 <__ssputs_r+0x5c>
 8013292:	230c      	movs	r3, #12
 8013294:	f8ca 3000 	str.w	r3, [sl]
 8013298:	89a3      	ldrh	r3, [r4, #12]
 801329a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801329e:	81a3      	strh	r3, [r4, #12]
 80132a0:	f04f 30ff 	mov.w	r0, #4294967295
 80132a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132a8:	6921      	ldr	r1, [r4, #16]
 80132aa:	464a      	mov	r2, r9
 80132ac:	f7fd fa9e 	bl	80107ec <memcpy>
 80132b0:	89a3      	ldrh	r3, [r4, #12]
 80132b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80132b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80132ba:	81a3      	strh	r3, [r4, #12]
 80132bc:	6126      	str	r6, [r4, #16]
 80132be:	6165      	str	r5, [r4, #20]
 80132c0:	444e      	add	r6, r9
 80132c2:	eba5 0509 	sub.w	r5, r5, r9
 80132c6:	6026      	str	r6, [r4, #0]
 80132c8:	60a5      	str	r5, [r4, #8]
 80132ca:	463e      	mov	r6, r7
 80132cc:	42be      	cmp	r6, r7
 80132ce:	d900      	bls.n	80132d2 <__ssputs_r+0x86>
 80132d0:	463e      	mov	r6, r7
 80132d2:	6820      	ldr	r0, [r4, #0]
 80132d4:	4632      	mov	r2, r6
 80132d6:	4641      	mov	r1, r8
 80132d8:	f000 febe 	bl	8014058 <memmove>
 80132dc:	68a3      	ldr	r3, [r4, #8]
 80132de:	1b9b      	subs	r3, r3, r6
 80132e0:	60a3      	str	r3, [r4, #8]
 80132e2:	6823      	ldr	r3, [r4, #0]
 80132e4:	4433      	add	r3, r6
 80132e6:	6023      	str	r3, [r4, #0]
 80132e8:	2000      	movs	r0, #0
 80132ea:	e7db      	b.n	80132a4 <__ssputs_r+0x58>
 80132ec:	462a      	mov	r2, r5
 80132ee:	f000 fecd 	bl	801408c <_realloc_r>
 80132f2:	4606      	mov	r6, r0
 80132f4:	2800      	cmp	r0, #0
 80132f6:	d1e1      	bne.n	80132bc <__ssputs_r+0x70>
 80132f8:	6921      	ldr	r1, [r4, #16]
 80132fa:	4650      	mov	r0, sl
 80132fc:	f7fd fa8c 	bl	8010818 <_free_r>
 8013300:	e7c7      	b.n	8013292 <__ssputs_r+0x46>
	...

08013304 <_svfiprintf_r>:
 8013304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013308:	4698      	mov	r8, r3
 801330a:	898b      	ldrh	r3, [r1, #12]
 801330c:	061b      	lsls	r3, r3, #24
 801330e:	b09d      	sub	sp, #116	; 0x74
 8013310:	4607      	mov	r7, r0
 8013312:	460d      	mov	r5, r1
 8013314:	4614      	mov	r4, r2
 8013316:	d50e      	bpl.n	8013336 <_svfiprintf_r+0x32>
 8013318:	690b      	ldr	r3, [r1, #16]
 801331a:	b963      	cbnz	r3, 8013336 <_svfiprintf_r+0x32>
 801331c:	2140      	movs	r1, #64	; 0x40
 801331e:	f7fd fae7 	bl	80108f0 <_malloc_r>
 8013322:	6028      	str	r0, [r5, #0]
 8013324:	6128      	str	r0, [r5, #16]
 8013326:	b920      	cbnz	r0, 8013332 <_svfiprintf_r+0x2e>
 8013328:	230c      	movs	r3, #12
 801332a:	603b      	str	r3, [r7, #0]
 801332c:	f04f 30ff 	mov.w	r0, #4294967295
 8013330:	e0d1      	b.n	80134d6 <_svfiprintf_r+0x1d2>
 8013332:	2340      	movs	r3, #64	; 0x40
 8013334:	616b      	str	r3, [r5, #20]
 8013336:	2300      	movs	r3, #0
 8013338:	9309      	str	r3, [sp, #36]	; 0x24
 801333a:	2320      	movs	r3, #32
 801333c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013340:	f8cd 800c 	str.w	r8, [sp, #12]
 8013344:	2330      	movs	r3, #48	; 0x30
 8013346:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80134f0 <_svfiprintf_r+0x1ec>
 801334a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801334e:	f04f 0901 	mov.w	r9, #1
 8013352:	4623      	mov	r3, r4
 8013354:	469a      	mov	sl, r3
 8013356:	f813 2b01 	ldrb.w	r2, [r3], #1
 801335a:	b10a      	cbz	r2, 8013360 <_svfiprintf_r+0x5c>
 801335c:	2a25      	cmp	r2, #37	; 0x25
 801335e:	d1f9      	bne.n	8013354 <_svfiprintf_r+0x50>
 8013360:	ebba 0b04 	subs.w	fp, sl, r4
 8013364:	d00b      	beq.n	801337e <_svfiprintf_r+0x7a>
 8013366:	465b      	mov	r3, fp
 8013368:	4622      	mov	r2, r4
 801336a:	4629      	mov	r1, r5
 801336c:	4638      	mov	r0, r7
 801336e:	f7ff ff6d 	bl	801324c <__ssputs_r>
 8013372:	3001      	adds	r0, #1
 8013374:	f000 80aa 	beq.w	80134cc <_svfiprintf_r+0x1c8>
 8013378:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801337a:	445a      	add	r2, fp
 801337c:	9209      	str	r2, [sp, #36]	; 0x24
 801337e:	f89a 3000 	ldrb.w	r3, [sl]
 8013382:	2b00      	cmp	r3, #0
 8013384:	f000 80a2 	beq.w	80134cc <_svfiprintf_r+0x1c8>
 8013388:	2300      	movs	r3, #0
 801338a:	f04f 32ff 	mov.w	r2, #4294967295
 801338e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013392:	f10a 0a01 	add.w	sl, sl, #1
 8013396:	9304      	str	r3, [sp, #16]
 8013398:	9307      	str	r3, [sp, #28]
 801339a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801339e:	931a      	str	r3, [sp, #104]	; 0x68
 80133a0:	4654      	mov	r4, sl
 80133a2:	2205      	movs	r2, #5
 80133a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133a8:	4851      	ldr	r0, [pc, #324]	; (80134f0 <_svfiprintf_r+0x1ec>)
 80133aa:	f7ec ff29 	bl	8000200 <memchr>
 80133ae:	9a04      	ldr	r2, [sp, #16]
 80133b0:	b9d8      	cbnz	r0, 80133ea <_svfiprintf_r+0xe6>
 80133b2:	06d0      	lsls	r0, r2, #27
 80133b4:	bf44      	itt	mi
 80133b6:	2320      	movmi	r3, #32
 80133b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80133bc:	0711      	lsls	r1, r2, #28
 80133be:	bf44      	itt	mi
 80133c0:	232b      	movmi	r3, #43	; 0x2b
 80133c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80133c6:	f89a 3000 	ldrb.w	r3, [sl]
 80133ca:	2b2a      	cmp	r3, #42	; 0x2a
 80133cc:	d015      	beq.n	80133fa <_svfiprintf_r+0xf6>
 80133ce:	9a07      	ldr	r2, [sp, #28]
 80133d0:	4654      	mov	r4, sl
 80133d2:	2000      	movs	r0, #0
 80133d4:	f04f 0c0a 	mov.w	ip, #10
 80133d8:	4621      	mov	r1, r4
 80133da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80133de:	3b30      	subs	r3, #48	; 0x30
 80133e0:	2b09      	cmp	r3, #9
 80133e2:	d94e      	bls.n	8013482 <_svfiprintf_r+0x17e>
 80133e4:	b1b0      	cbz	r0, 8013414 <_svfiprintf_r+0x110>
 80133e6:	9207      	str	r2, [sp, #28]
 80133e8:	e014      	b.n	8013414 <_svfiprintf_r+0x110>
 80133ea:	eba0 0308 	sub.w	r3, r0, r8
 80133ee:	fa09 f303 	lsl.w	r3, r9, r3
 80133f2:	4313      	orrs	r3, r2
 80133f4:	9304      	str	r3, [sp, #16]
 80133f6:	46a2      	mov	sl, r4
 80133f8:	e7d2      	b.n	80133a0 <_svfiprintf_r+0x9c>
 80133fa:	9b03      	ldr	r3, [sp, #12]
 80133fc:	1d19      	adds	r1, r3, #4
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	9103      	str	r1, [sp, #12]
 8013402:	2b00      	cmp	r3, #0
 8013404:	bfbb      	ittet	lt
 8013406:	425b      	neglt	r3, r3
 8013408:	f042 0202 	orrlt.w	r2, r2, #2
 801340c:	9307      	strge	r3, [sp, #28]
 801340e:	9307      	strlt	r3, [sp, #28]
 8013410:	bfb8      	it	lt
 8013412:	9204      	strlt	r2, [sp, #16]
 8013414:	7823      	ldrb	r3, [r4, #0]
 8013416:	2b2e      	cmp	r3, #46	; 0x2e
 8013418:	d10c      	bne.n	8013434 <_svfiprintf_r+0x130>
 801341a:	7863      	ldrb	r3, [r4, #1]
 801341c:	2b2a      	cmp	r3, #42	; 0x2a
 801341e:	d135      	bne.n	801348c <_svfiprintf_r+0x188>
 8013420:	9b03      	ldr	r3, [sp, #12]
 8013422:	1d1a      	adds	r2, r3, #4
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	9203      	str	r2, [sp, #12]
 8013428:	2b00      	cmp	r3, #0
 801342a:	bfb8      	it	lt
 801342c:	f04f 33ff 	movlt.w	r3, #4294967295
 8013430:	3402      	adds	r4, #2
 8013432:	9305      	str	r3, [sp, #20]
 8013434:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013500 <_svfiprintf_r+0x1fc>
 8013438:	7821      	ldrb	r1, [r4, #0]
 801343a:	2203      	movs	r2, #3
 801343c:	4650      	mov	r0, sl
 801343e:	f7ec fedf 	bl	8000200 <memchr>
 8013442:	b140      	cbz	r0, 8013456 <_svfiprintf_r+0x152>
 8013444:	2340      	movs	r3, #64	; 0x40
 8013446:	eba0 000a 	sub.w	r0, r0, sl
 801344a:	fa03 f000 	lsl.w	r0, r3, r0
 801344e:	9b04      	ldr	r3, [sp, #16]
 8013450:	4303      	orrs	r3, r0
 8013452:	3401      	adds	r4, #1
 8013454:	9304      	str	r3, [sp, #16]
 8013456:	f814 1b01 	ldrb.w	r1, [r4], #1
 801345a:	4826      	ldr	r0, [pc, #152]	; (80134f4 <_svfiprintf_r+0x1f0>)
 801345c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013460:	2206      	movs	r2, #6
 8013462:	f7ec fecd 	bl	8000200 <memchr>
 8013466:	2800      	cmp	r0, #0
 8013468:	d038      	beq.n	80134dc <_svfiprintf_r+0x1d8>
 801346a:	4b23      	ldr	r3, [pc, #140]	; (80134f8 <_svfiprintf_r+0x1f4>)
 801346c:	bb1b      	cbnz	r3, 80134b6 <_svfiprintf_r+0x1b2>
 801346e:	9b03      	ldr	r3, [sp, #12]
 8013470:	3307      	adds	r3, #7
 8013472:	f023 0307 	bic.w	r3, r3, #7
 8013476:	3308      	adds	r3, #8
 8013478:	9303      	str	r3, [sp, #12]
 801347a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801347c:	4433      	add	r3, r6
 801347e:	9309      	str	r3, [sp, #36]	; 0x24
 8013480:	e767      	b.n	8013352 <_svfiprintf_r+0x4e>
 8013482:	fb0c 3202 	mla	r2, ip, r2, r3
 8013486:	460c      	mov	r4, r1
 8013488:	2001      	movs	r0, #1
 801348a:	e7a5      	b.n	80133d8 <_svfiprintf_r+0xd4>
 801348c:	2300      	movs	r3, #0
 801348e:	3401      	adds	r4, #1
 8013490:	9305      	str	r3, [sp, #20]
 8013492:	4619      	mov	r1, r3
 8013494:	f04f 0c0a 	mov.w	ip, #10
 8013498:	4620      	mov	r0, r4
 801349a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801349e:	3a30      	subs	r2, #48	; 0x30
 80134a0:	2a09      	cmp	r2, #9
 80134a2:	d903      	bls.n	80134ac <_svfiprintf_r+0x1a8>
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d0c5      	beq.n	8013434 <_svfiprintf_r+0x130>
 80134a8:	9105      	str	r1, [sp, #20]
 80134aa:	e7c3      	b.n	8013434 <_svfiprintf_r+0x130>
 80134ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80134b0:	4604      	mov	r4, r0
 80134b2:	2301      	movs	r3, #1
 80134b4:	e7f0      	b.n	8013498 <_svfiprintf_r+0x194>
 80134b6:	ab03      	add	r3, sp, #12
 80134b8:	9300      	str	r3, [sp, #0]
 80134ba:	462a      	mov	r2, r5
 80134bc:	4b0f      	ldr	r3, [pc, #60]	; (80134fc <_svfiprintf_r+0x1f8>)
 80134be:	a904      	add	r1, sp, #16
 80134c0:	4638      	mov	r0, r7
 80134c2:	f7fd fb29 	bl	8010b18 <_printf_float>
 80134c6:	1c42      	adds	r2, r0, #1
 80134c8:	4606      	mov	r6, r0
 80134ca:	d1d6      	bne.n	801347a <_svfiprintf_r+0x176>
 80134cc:	89ab      	ldrh	r3, [r5, #12]
 80134ce:	065b      	lsls	r3, r3, #25
 80134d0:	f53f af2c 	bmi.w	801332c <_svfiprintf_r+0x28>
 80134d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80134d6:	b01d      	add	sp, #116	; 0x74
 80134d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134dc:	ab03      	add	r3, sp, #12
 80134de:	9300      	str	r3, [sp, #0]
 80134e0:	462a      	mov	r2, r5
 80134e2:	4b06      	ldr	r3, [pc, #24]	; (80134fc <_svfiprintf_r+0x1f8>)
 80134e4:	a904      	add	r1, sp, #16
 80134e6:	4638      	mov	r0, r7
 80134e8:	f7fd fdba 	bl	8011060 <_printf_i>
 80134ec:	e7eb      	b.n	80134c6 <_svfiprintf_r+0x1c2>
 80134ee:	bf00      	nop
 80134f0:	08014c4c 	.word	0x08014c4c
 80134f4:	08014c56 	.word	0x08014c56
 80134f8:	08010b19 	.word	0x08010b19
 80134fc:	0801324d 	.word	0x0801324d
 8013500:	08014c52 	.word	0x08014c52

08013504 <_sungetc_r>:
 8013504:	b538      	push	{r3, r4, r5, lr}
 8013506:	1c4b      	adds	r3, r1, #1
 8013508:	4614      	mov	r4, r2
 801350a:	d103      	bne.n	8013514 <_sungetc_r+0x10>
 801350c:	f04f 35ff 	mov.w	r5, #4294967295
 8013510:	4628      	mov	r0, r5
 8013512:	bd38      	pop	{r3, r4, r5, pc}
 8013514:	8993      	ldrh	r3, [r2, #12]
 8013516:	f023 0320 	bic.w	r3, r3, #32
 801351a:	8193      	strh	r3, [r2, #12]
 801351c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801351e:	6852      	ldr	r2, [r2, #4]
 8013520:	b2cd      	uxtb	r5, r1
 8013522:	b18b      	cbz	r3, 8013548 <_sungetc_r+0x44>
 8013524:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013526:	4293      	cmp	r3, r2
 8013528:	dd08      	ble.n	801353c <_sungetc_r+0x38>
 801352a:	6823      	ldr	r3, [r4, #0]
 801352c:	1e5a      	subs	r2, r3, #1
 801352e:	6022      	str	r2, [r4, #0]
 8013530:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013534:	6863      	ldr	r3, [r4, #4]
 8013536:	3301      	adds	r3, #1
 8013538:	6063      	str	r3, [r4, #4]
 801353a:	e7e9      	b.n	8013510 <_sungetc_r+0xc>
 801353c:	4621      	mov	r1, r4
 801353e:	f000 fd1d 	bl	8013f7c <__submore>
 8013542:	2800      	cmp	r0, #0
 8013544:	d0f1      	beq.n	801352a <_sungetc_r+0x26>
 8013546:	e7e1      	b.n	801350c <_sungetc_r+0x8>
 8013548:	6921      	ldr	r1, [r4, #16]
 801354a:	6823      	ldr	r3, [r4, #0]
 801354c:	b151      	cbz	r1, 8013564 <_sungetc_r+0x60>
 801354e:	4299      	cmp	r1, r3
 8013550:	d208      	bcs.n	8013564 <_sungetc_r+0x60>
 8013552:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8013556:	42a9      	cmp	r1, r5
 8013558:	d104      	bne.n	8013564 <_sungetc_r+0x60>
 801355a:	3b01      	subs	r3, #1
 801355c:	3201      	adds	r2, #1
 801355e:	6023      	str	r3, [r4, #0]
 8013560:	6062      	str	r2, [r4, #4]
 8013562:	e7d5      	b.n	8013510 <_sungetc_r+0xc>
 8013564:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8013568:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801356c:	6363      	str	r3, [r4, #52]	; 0x34
 801356e:	2303      	movs	r3, #3
 8013570:	63a3      	str	r3, [r4, #56]	; 0x38
 8013572:	4623      	mov	r3, r4
 8013574:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013578:	6023      	str	r3, [r4, #0]
 801357a:	2301      	movs	r3, #1
 801357c:	e7dc      	b.n	8013538 <_sungetc_r+0x34>

0801357e <__ssrefill_r>:
 801357e:	b510      	push	{r4, lr}
 8013580:	460c      	mov	r4, r1
 8013582:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013584:	b169      	cbz	r1, 80135a2 <__ssrefill_r+0x24>
 8013586:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801358a:	4299      	cmp	r1, r3
 801358c:	d001      	beq.n	8013592 <__ssrefill_r+0x14>
 801358e:	f7fd f943 	bl	8010818 <_free_r>
 8013592:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013594:	6063      	str	r3, [r4, #4]
 8013596:	2000      	movs	r0, #0
 8013598:	6360      	str	r0, [r4, #52]	; 0x34
 801359a:	b113      	cbz	r3, 80135a2 <__ssrefill_r+0x24>
 801359c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801359e:	6023      	str	r3, [r4, #0]
 80135a0:	bd10      	pop	{r4, pc}
 80135a2:	6923      	ldr	r3, [r4, #16]
 80135a4:	6023      	str	r3, [r4, #0]
 80135a6:	2300      	movs	r3, #0
 80135a8:	6063      	str	r3, [r4, #4]
 80135aa:	89a3      	ldrh	r3, [r4, #12]
 80135ac:	f043 0320 	orr.w	r3, r3, #32
 80135b0:	81a3      	strh	r3, [r4, #12]
 80135b2:	f04f 30ff 	mov.w	r0, #4294967295
 80135b6:	e7f3      	b.n	80135a0 <__ssrefill_r+0x22>

080135b8 <__ssvfiscanf_r>:
 80135b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135bc:	460c      	mov	r4, r1
 80135be:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80135c2:	2100      	movs	r1, #0
 80135c4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80135c8:	49a6      	ldr	r1, [pc, #664]	; (8013864 <__ssvfiscanf_r+0x2ac>)
 80135ca:	91a0      	str	r1, [sp, #640]	; 0x280
 80135cc:	f10d 0804 	add.w	r8, sp, #4
 80135d0:	49a5      	ldr	r1, [pc, #660]	; (8013868 <__ssvfiscanf_r+0x2b0>)
 80135d2:	4fa6      	ldr	r7, [pc, #664]	; (801386c <__ssvfiscanf_r+0x2b4>)
 80135d4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8013870 <__ssvfiscanf_r+0x2b8>
 80135d8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80135dc:	4606      	mov	r6, r0
 80135de:	91a1      	str	r1, [sp, #644]	; 0x284
 80135e0:	9300      	str	r3, [sp, #0]
 80135e2:	7813      	ldrb	r3, [r2, #0]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	f000 815a 	beq.w	801389e <__ssvfiscanf_r+0x2e6>
 80135ea:	5dd9      	ldrb	r1, [r3, r7]
 80135ec:	f011 0108 	ands.w	r1, r1, #8
 80135f0:	f102 0501 	add.w	r5, r2, #1
 80135f4:	d019      	beq.n	801362a <__ssvfiscanf_r+0x72>
 80135f6:	6863      	ldr	r3, [r4, #4]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	dd0f      	ble.n	801361c <__ssvfiscanf_r+0x64>
 80135fc:	6823      	ldr	r3, [r4, #0]
 80135fe:	781a      	ldrb	r2, [r3, #0]
 8013600:	5cba      	ldrb	r2, [r7, r2]
 8013602:	0712      	lsls	r2, r2, #28
 8013604:	d401      	bmi.n	801360a <__ssvfiscanf_r+0x52>
 8013606:	462a      	mov	r2, r5
 8013608:	e7eb      	b.n	80135e2 <__ssvfiscanf_r+0x2a>
 801360a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801360c:	3201      	adds	r2, #1
 801360e:	9245      	str	r2, [sp, #276]	; 0x114
 8013610:	6862      	ldr	r2, [r4, #4]
 8013612:	3301      	adds	r3, #1
 8013614:	3a01      	subs	r2, #1
 8013616:	6062      	str	r2, [r4, #4]
 8013618:	6023      	str	r3, [r4, #0]
 801361a:	e7ec      	b.n	80135f6 <__ssvfiscanf_r+0x3e>
 801361c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801361e:	4621      	mov	r1, r4
 8013620:	4630      	mov	r0, r6
 8013622:	4798      	blx	r3
 8013624:	2800      	cmp	r0, #0
 8013626:	d0e9      	beq.n	80135fc <__ssvfiscanf_r+0x44>
 8013628:	e7ed      	b.n	8013606 <__ssvfiscanf_r+0x4e>
 801362a:	2b25      	cmp	r3, #37	; 0x25
 801362c:	d012      	beq.n	8013654 <__ssvfiscanf_r+0x9c>
 801362e:	469a      	mov	sl, r3
 8013630:	6863      	ldr	r3, [r4, #4]
 8013632:	2b00      	cmp	r3, #0
 8013634:	f340 8091 	ble.w	801375a <__ssvfiscanf_r+0x1a2>
 8013638:	6822      	ldr	r2, [r4, #0]
 801363a:	7813      	ldrb	r3, [r2, #0]
 801363c:	4553      	cmp	r3, sl
 801363e:	f040 812e 	bne.w	801389e <__ssvfiscanf_r+0x2e6>
 8013642:	6863      	ldr	r3, [r4, #4]
 8013644:	3b01      	subs	r3, #1
 8013646:	6063      	str	r3, [r4, #4]
 8013648:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801364a:	3201      	adds	r2, #1
 801364c:	3301      	adds	r3, #1
 801364e:	6022      	str	r2, [r4, #0]
 8013650:	9345      	str	r3, [sp, #276]	; 0x114
 8013652:	e7d8      	b.n	8013606 <__ssvfiscanf_r+0x4e>
 8013654:	9141      	str	r1, [sp, #260]	; 0x104
 8013656:	9143      	str	r1, [sp, #268]	; 0x10c
 8013658:	7853      	ldrb	r3, [r2, #1]
 801365a:	2b2a      	cmp	r3, #42	; 0x2a
 801365c:	bf02      	ittt	eq
 801365e:	2310      	moveq	r3, #16
 8013660:	1c95      	addeq	r5, r2, #2
 8013662:	9341      	streq	r3, [sp, #260]	; 0x104
 8013664:	220a      	movs	r2, #10
 8013666:	46aa      	mov	sl, r5
 8013668:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801366c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8013670:	2b09      	cmp	r3, #9
 8013672:	d91d      	bls.n	80136b0 <__ssvfiscanf_r+0xf8>
 8013674:	487e      	ldr	r0, [pc, #504]	; (8013870 <__ssvfiscanf_r+0x2b8>)
 8013676:	2203      	movs	r2, #3
 8013678:	f7ec fdc2 	bl	8000200 <memchr>
 801367c:	b140      	cbz	r0, 8013690 <__ssvfiscanf_r+0xd8>
 801367e:	2301      	movs	r3, #1
 8013680:	eba0 0009 	sub.w	r0, r0, r9
 8013684:	fa03 f000 	lsl.w	r0, r3, r0
 8013688:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801368a:	4318      	orrs	r0, r3
 801368c:	9041      	str	r0, [sp, #260]	; 0x104
 801368e:	4655      	mov	r5, sl
 8013690:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013694:	2b78      	cmp	r3, #120	; 0x78
 8013696:	d806      	bhi.n	80136a6 <__ssvfiscanf_r+0xee>
 8013698:	2b57      	cmp	r3, #87	; 0x57
 801369a:	d810      	bhi.n	80136be <__ssvfiscanf_r+0x106>
 801369c:	2b25      	cmp	r3, #37	; 0x25
 801369e:	d0c6      	beq.n	801362e <__ssvfiscanf_r+0x76>
 80136a0:	d856      	bhi.n	8013750 <__ssvfiscanf_r+0x198>
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d064      	beq.n	8013770 <__ssvfiscanf_r+0x1b8>
 80136a6:	2303      	movs	r3, #3
 80136a8:	9347      	str	r3, [sp, #284]	; 0x11c
 80136aa:	230a      	movs	r3, #10
 80136ac:	9342      	str	r3, [sp, #264]	; 0x108
 80136ae:	e071      	b.n	8013794 <__ssvfiscanf_r+0x1dc>
 80136b0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80136b2:	fb02 1103 	mla	r1, r2, r3, r1
 80136b6:	3930      	subs	r1, #48	; 0x30
 80136b8:	9143      	str	r1, [sp, #268]	; 0x10c
 80136ba:	4655      	mov	r5, sl
 80136bc:	e7d3      	b.n	8013666 <__ssvfiscanf_r+0xae>
 80136be:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80136c2:	2a20      	cmp	r2, #32
 80136c4:	d8ef      	bhi.n	80136a6 <__ssvfiscanf_r+0xee>
 80136c6:	a101      	add	r1, pc, #4	; (adr r1, 80136cc <__ssvfiscanf_r+0x114>)
 80136c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80136cc:	0801377f 	.word	0x0801377f
 80136d0:	080136a7 	.word	0x080136a7
 80136d4:	080136a7 	.word	0x080136a7
 80136d8:	080137dd 	.word	0x080137dd
 80136dc:	080136a7 	.word	0x080136a7
 80136e0:	080136a7 	.word	0x080136a7
 80136e4:	080136a7 	.word	0x080136a7
 80136e8:	080136a7 	.word	0x080136a7
 80136ec:	080136a7 	.word	0x080136a7
 80136f0:	080136a7 	.word	0x080136a7
 80136f4:	080136a7 	.word	0x080136a7
 80136f8:	080137f3 	.word	0x080137f3
 80136fc:	080137c9 	.word	0x080137c9
 8013700:	08013757 	.word	0x08013757
 8013704:	08013757 	.word	0x08013757
 8013708:	08013757 	.word	0x08013757
 801370c:	080136a7 	.word	0x080136a7
 8013710:	080137cd 	.word	0x080137cd
 8013714:	080136a7 	.word	0x080136a7
 8013718:	080136a7 	.word	0x080136a7
 801371c:	080136a7 	.word	0x080136a7
 8013720:	080136a7 	.word	0x080136a7
 8013724:	08013803 	.word	0x08013803
 8013728:	080137d5 	.word	0x080137d5
 801372c:	08013777 	.word	0x08013777
 8013730:	080136a7 	.word	0x080136a7
 8013734:	080136a7 	.word	0x080136a7
 8013738:	080137ff 	.word	0x080137ff
 801373c:	080136a7 	.word	0x080136a7
 8013740:	080137c9 	.word	0x080137c9
 8013744:	080136a7 	.word	0x080136a7
 8013748:	080136a7 	.word	0x080136a7
 801374c:	0801377f 	.word	0x0801377f
 8013750:	3b45      	subs	r3, #69	; 0x45
 8013752:	2b02      	cmp	r3, #2
 8013754:	d8a7      	bhi.n	80136a6 <__ssvfiscanf_r+0xee>
 8013756:	2305      	movs	r3, #5
 8013758:	e01b      	b.n	8013792 <__ssvfiscanf_r+0x1da>
 801375a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801375c:	4621      	mov	r1, r4
 801375e:	4630      	mov	r0, r6
 8013760:	4798      	blx	r3
 8013762:	2800      	cmp	r0, #0
 8013764:	f43f af68 	beq.w	8013638 <__ssvfiscanf_r+0x80>
 8013768:	9844      	ldr	r0, [sp, #272]	; 0x110
 801376a:	2800      	cmp	r0, #0
 801376c:	f040 808d 	bne.w	801388a <__ssvfiscanf_r+0x2d2>
 8013770:	f04f 30ff 	mov.w	r0, #4294967295
 8013774:	e08f      	b.n	8013896 <__ssvfiscanf_r+0x2de>
 8013776:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013778:	f042 0220 	orr.w	r2, r2, #32
 801377c:	9241      	str	r2, [sp, #260]	; 0x104
 801377e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013784:	9241      	str	r2, [sp, #260]	; 0x104
 8013786:	2210      	movs	r2, #16
 8013788:	2b6f      	cmp	r3, #111	; 0x6f
 801378a:	9242      	str	r2, [sp, #264]	; 0x108
 801378c:	bf34      	ite	cc
 801378e:	2303      	movcc	r3, #3
 8013790:	2304      	movcs	r3, #4
 8013792:	9347      	str	r3, [sp, #284]	; 0x11c
 8013794:	6863      	ldr	r3, [r4, #4]
 8013796:	2b00      	cmp	r3, #0
 8013798:	dd42      	ble.n	8013820 <__ssvfiscanf_r+0x268>
 801379a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801379c:	0659      	lsls	r1, r3, #25
 801379e:	d404      	bmi.n	80137aa <__ssvfiscanf_r+0x1f2>
 80137a0:	6823      	ldr	r3, [r4, #0]
 80137a2:	781a      	ldrb	r2, [r3, #0]
 80137a4:	5cba      	ldrb	r2, [r7, r2]
 80137a6:	0712      	lsls	r2, r2, #28
 80137a8:	d441      	bmi.n	801382e <__ssvfiscanf_r+0x276>
 80137aa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80137ac:	2b02      	cmp	r3, #2
 80137ae:	dc50      	bgt.n	8013852 <__ssvfiscanf_r+0x29a>
 80137b0:	466b      	mov	r3, sp
 80137b2:	4622      	mov	r2, r4
 80137b4:	a941      	add	r1, sp, #260	; 0x104
 80137b6:	4630      	mov	r0, r6
 80137b8:	f000 f9d0 	bl	8013b5c <_scanf_chars>
 80137bc:	2801      	cmp	r0, #1
 80137be:	d06e      	beq.n	801389e <__ssvfiscanf_r+0x2e6>
 80137c0:	2802      	cmp	r0, #2
 80137c2:	f47f af20 	bne.w	8013606 <__ssvfiscanf_r+0x4e>
 80137c6:	e7cf      	b.n	8013768 <__ssvfiscanf_r+0x1b0>
 80137c8:	220a      	movs	r2, #10
 80137ca:	e7dd      	b.n	8013788 <__ssvfiscanf_r+0x1d0>
 80137cc:	2300      	movs	r3, #0
 80137ce:	9342      	str	r3, [sp, #264]	; 0x108
 80137d0:	2303      	movs	r3, #3
 80137d2:	e7de      	b.n	8013792 <__ssvfiscanf_r+0x1da>
 80137d4:	2308      	movs	r3, #8
 80137d6:	9342      	str	r3, [sp, #264]	; 0x108
 80137d8:	2304      	movs	r3, #4
 80137da:	e7da      	b.n	8013792 <__ssvfiscanf_r+0x1da>
 80137dc:	4629      	mov	r1, r5
 80137de:	4640      	mov	r0, r8
 80137e0:	f000 fb20 	bl	8013e24 <__sccl>
 80137e4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80137e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80137ea:	9341      	str	r3, [sp, #260]	; 0x104
 80137ec:	4605      	mov	r5, r0
 80137ee:	2301      	movs	r3, #1
 80137f0:	e7cf      	b.n	8013792 <__ssvfiscanf_r+0x1da>
 80137f2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80137f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80137f8:	9341      	str	r3, [sp, #260]	; 0x104
 80137fa:	2300      	movs	r3, #0
 80137fc:	e7c9      	b.n	8013792 <__ssvfiscanf_r+0x1da>
 80137fe:	2302      	movs	r3, #2
 8013800:	e7c7      	b.n	8013792 <__ssvfiscanf_r+0x1da>
 8013802:	9841      	ldr	r0, [sp, #260]	; 0x104
 8013804:	06c3      	lsls	r3, r0, #27
 8013806:	f53f aefe 	bmi.w	8013606 <__ssvfiscanf_r+0x4e>
 801380a:	9b00      	ldr	r3, [sp, #0]
 801380c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801380e:	1d19      	adds	r1, r3, #4
 8013810:	9100      	str	r1, [sp, #0]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	f010 0f01 	tst.w	r0, #1
 8013818:	bf14      	ite	ne
 801381a:	801a      	strhne	r2, [r3, #0]
 801381c:	601a      	streq	r2, [r3, #0]
 801381e:	e6f2      	b.n	8013606 <__ssvfiscanf_r+0x4e>
 8013820:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013822:	4621      	mov	r1, r4
 8013824:	4630      	mov	r0, r6
 8013826:	4798      	blx	r3
 8013828:	2800      	cmp	r0, #0
 801382a:	d0b6      	beq.n	801379a <__ssvfiscanf_r+0x1e2>
 801382c:	e79c      	b.n	8013768 <__ssvfiscanf_r+0x1b0>
 801382e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013830:	3201      	adds	r2, #1
 8013832:	9245      	str	r2, [sp, #276]	; 0x114
 8013834:	6862      	ldr	r2, [r4, #4]
 8013836:	3a01      	subs	r2, #1
 8013838:	2a00      	cmp	r2, #0
 801383a:	6062      	str	r2, [r4, #4]
 801383c:	dd02      	ble.n	8013844 <__ssvfiscanf_r+0x28c>
 801383e:	3301      	adds	r3, #1
 8013840:	6023      	str	r3, [r4, #0]
 8013842:	e7ad      	b.n	80137a0 <__ssvfiscanf_r+0x1e8>
 8013844:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013846:	4621      	mov	r1, r4
 8013848:	4630      	mov	r0, r6
 801384a:	4798      	blx	r3
 801384c:	2800      	cmp	r0, #0
 801384e:	d0a7      	beq.n	80137a0 <__ssvfiscanf_r+0x1e8>
 8013850:	e78a      	b.n	8013768 <__ssvfiscanf_r+0x1b0>
 8013852:	2b04      	cmp	r3, #4
 8013854:	dc0e      	bgt.n	8013874 <__ssvfiscanf_r+0x2bc>
 8013856:	466b      	mov	r3, sp
 8013858:	4622      	mov	r2, r4
 801385a:	a941      	add	r1, sp, #260	; 0x104
 801385c:	4630      	mov	r0, r6
 801385e:	f000 f9d7 	bl	8013c10 <_scanf_i>
 8013862:	e7ab      	b.n	80137bc <__ssvfiscanf_r+0x204>
 8013864:	08013505 	.word	0x08013505
 8013868:	0801357f 	.word	0x0801357f
 801386c:	0801491b 	.word	0x0801491b
 8013870:	08014c52 	.word	0x08014c52
 8013874:	4b0b      	ldr	r3, [pc, #44]	; (80138a4 <__ssvfiscanf_r+0x2ec>)
 8013876:	2b00      	cmp	r3, #0
 8013878:	f43f aec5 	beq.w	8013606 <__ssvfiscanf_r+0x4e>
 801387c:	466b      	mov	r3, sp
 801387e:	4622      	mov	r2, r4
 8013880:	a941      	add	r1, sp, #260	; 0x104
 8013882:	4630      	mov	r0, r6
 8013884:	f3af 8000 	nop.w
 8013888:	e798      	b.n	80137bc <__ssvfiscanf_r+0x204>
 801388a:	89a3      	ldrh	r3, [r4, #12]
 801388c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013890:	bf18      	it	ne
 8013892:	f04f 30ff 	movne.w	r0, #4294967295
 8013896:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801389a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801389e:	9844      	ldr	r0, [sp, #272]	; 0x110
 80138a0:	e7f9      	b.n	8013896 <__ssvfiscanf_r+0x2de>
 80138a2:	bf00      	nop
 80138a4:	00000000 	.word	0x00000000

080138a8 <__sfputc_r>:
 80138a8:	6893      	ldr	r3, [r2, #8]
 80138aa:	3b01      	subs	r3, #1
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	b410      	push	{r4}
 80138b0:	6093      	str	r3, [r2, #8]
 80138b2:	da08      	bge.n	80138c6 <__sfputc_r+0x1e>
 80138b4:	6994      	ldr	r4, [r2, #24]
 80138b6:	42a3      	cmp	r3, r4
 80138b8:	db01      	blt.n	80138be <__sfputc_r+0x16>
 80138ba:	290a      	cmp	r1, #10
 80138bc:	d103      	bne.n	80138c6 <__sfputc_r+0x1e>
 80138be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80138c2:	f7fd bf59 	b.w	8011778 <__swbuf_r>
 80138c6:	6813      	ldr	r3, [r2, #0]
 80138c8:	1c58      	adds	r0, r3, #1
 80138ca:	6010      	str	r0, [r2, #0]
 80138cc:	7019      	strb	r1, [r3, #0]
 80138ce:	4608      	mov	r0, r1
 80138d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80138d4:	4770      	bx	lr

080138d6 <__sfputs_r>:
 80138d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138d8:	4606      	mov	r6, r0
 80138da:	460f      	mov	r7, r1
 80138dc:	4614      	mov	r4, r2
 80138de:	18d5      	adds	r5, r2, r3
 80138e0:	42ac      	cmp	r4, r5
 80138e2:	d101      	bne.n	80138e8 <__sfputs_r+0x12>
 80138e4:	2000      	movs	r0, #0
 80138e6:	e007      	b.n	80138f8 <__sfputs_r+0x22>
 80138e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138ec:	463a      	mov	r2, r7
 80138ee:	4630      	mov	r0, r6
 80138f0:	f7ff ffda 	bl	80138a8 <__sfputc_r>
 80138f4:	1c43      	adds	r3, r0, #1
 80138f6:	d1f3      	bne.n	80138e0 <__sfputs_r+0xa>
 80138f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080138fc <_vfiprintf_r>:
 80138fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013900:	460d      	mov	r5, r1
 8013902:	b09d      	sub	sp, #116	; 0x74
 8013904:	4614      	mov	r4, r2
 8013906:	4698      	mov	r8, r3
 8013908:	4606      	mov	r6, r0
 801390a:	b118      	cbz	r0, 8013914 <_vfiprintf_r+0x18>
 801390c:	6983      	ldr	r3, [r0, #24]
 801390e:	b90b      	cbnz	r3, 8013914 <_vfiprintf_r+0x18>
 8013910:	f7fe ffc6 	bl	80128a0 <__sinit>
 8013914:	4b89      	ldr	r3, [pc, #548]	; (8013b3c <_vfiprintf_r+0x240>)
 8013916:	429d      	cmp	r5, r3
 8013918:	d11b      	bne.n	8013952 <_vfiprintf_r+0x56>
 801391a:	6875      	ldr	r5, [r6, #4]
 801391c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801391e:	07d9      	lsls	r1, r3, #31
 8013920:	d405      	bmi.n	801392e <_vfiprintf_r+0x32>
 8013922:	89ab      	ldrh	r3, [r5, #12]
 8013924:	059a      	lsls	r2, r3, #22
 8013926:	d402      	bmi.n	801392e <_vfiprintf_r+0x32>
 8013928:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801392a:	f7ff f86e 	bl	8012a0a <__retarget_lock_acquire_recursive>
 801392e:	89ab      	ldrh	r3, [r5, #12]
 8013930:	071b      	lsls	r3, r3, #28
 8013932:	d501      	bpl.n	8013938 <_vfiprintf_r+0x3c>
 8013934:	692b      	ldr	r3, [r5, #16]
 8013936:	b9eb      	cbnz	r3, 8013974 <_vfiprintf_r+0x78>
 8013938:	4629      	mov	r1, r5
 801393a:	4630      	mov	r0, r6
 801393c:	f7fd ff80 	bl	8011840 <__swsetup_r>
 8013940:	b1c0      	cbz	r0, 8013974 <_vfiprintf_r+0x78>
 8013942:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013944:	07dc      	lsls	r4, r3, #31
 8013946:	d50e      	bpl.n	8013966 <_vfiprintf_r+0x6a>
 8013948:	f04f 30ff 	mov.w	r0, #4294967295
 801394c:	b01d      	add	sp, #116	; 0x74
 801394e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013952:	4b7b      	ldr	r3, [pc, #492]	; (8013b40 <_vfiprintf_r+0x244>)
 8013954:	429d      	cmp	r5, r3
 8013956:	d101      	bne.n	801395c <_vfiprintf_r+0x60>
 8013958:	68b5      	ldr	r5, [r6, #8]
 801395a:	e7df      	b.n	801391c <_vfiprintf_r+0x20>
 801395c:	4b79      	ldr	r3, [pc, #484]	; (8013b44 <_vfiprintf_r+0x248>)
 801395e:	429d      	cmp	r5, r3
 8013960:	bf08      	it	eq
 8013962:	68f5      	ldreq	r5, [r6, #12]
 8013964:	e7da      	b.n	801391c <_vfiprintf_r+0x20>
 8013966:	89ab      	ldrh	r3, [r5, #12]
 8013968:	0598      	lsls	r0, r3, #22
 801396a:	d4ed      	bmi.n	8013948 <_vfiprintf_r+0x4c>
 801396c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801396e:	f7ff f84d 	bl	8012a0c <__retarget_lock_release_recursive>
 8013972:	e7e9      	b.n	8013948 <_vfiprintf_r+0x4c>
 8013974:	2300      	movs	r3, #0
 8013976:	9309      	str	r3, [sp, #36]	; 0x24
 8013978:	2320      	movs	r3, #32
 801397a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801397e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013982:	2330      	movs	r3, #48	; 0x30
 8013984:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013b48 <_vfiprintf_r+0x24c>
 8013988:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801398c:	f04f 0901 	mov.w	r9, #1
 8013990:	4623      	mov	r3, r4
 8013992:	469a      	mov	sl, r3
 8013994:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013998:	b10a      	cbz	r2, 801399e <_vfiprintf_r+0xa2>
 801399a:	2a25      	cmp	r2, #37	; 0x25
 801399c:	d1f9      	bne.n	8013992 <_vfiprintf_r+0x96>
 801399e:	ebba 0b04 	subs.w	fp, sl, r4
 80139a2:	d00b      	beq.n	80139bc <_vfiprintf_r+0xc0>
 80139a4:	465b      	mov	r3, fp
 80139a6:	4622      	mov	r2, r4
 80139a8:	4629      	mov	r1, r5
 80139aa:	4630      	mov	r0, r6
 80139ac:	f7ff ff93 	bl	80138d6 <__sfputs_r>
 80139b0:	3001      	adds	r0, #1
 80139b2:	f000 80aa 	beq.w	8013b0a <_vfiprintf_r+0x20e>
 80139b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80139b8:	445a      	add	r2, fp
 80139ba:	9209      	str	r2, [sp, #36]	; 0x24
 80139bc:	f89a 3000 	ldrb.w	r3, [sl]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	f000 80a2 	beq.w	8013b0a <_vfiprintf_r+0x20e>
 80139c6:	2300      	movs	r3, #0
 80139c8:	f04f 32ff 	mov.w	r2, #4294967295
 80139cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80139d0:	f10a 0a01 	add.w	sl, sl, #1
 80139d4:	9304      	str	r3, [sp, #16]
 80139d6:	9307      	str	r3, [sp, #28]
 80139d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80139dc:	931a      	str	r3, [sp, #104]	; 0x68
 80139de:	4654      	mov	r4, sl
 80139e0:	2205      	movs	r2, #5
 80139e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139e6:	4858      	ldr	r0, [pc, #352]	; (8013b48 <_vfiprintf_r+0x24c>)
 80139e8:	f7ec fc0a 	bl	8000200 <memchr>
 80139ec:	9a04      	ldr	r2, [sp, #16]
 80139ee:	b9d8      	cbnz	r0, 8013a28 <_vfiprintf_r+0x12c>
 80139f0:	06d1      	lsls	r1, r2, #27
 80139f2:	bf44      	itt	mi
 80139f4:	2320      	movmi	r3, #32
 80139f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80139fa:	0713      	lsls	r3, r2, #28
 80139fc:	bf44      	itt	mi
 80139fe:	232b      	movmi	r3, #43	; 0x2b
 8013a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a04:	f89a 3000 	ldrb.w	r3, [sl]
 8013a08:	2b2a      	cmp	r3, #42	; 0x2a
 8013a0a:	d015      	beq.n	8013a38 <_vfiprintf_r+0x13c>
 8013a0c:	9a07      	ldr	r2, [sp, #28]
 8013a0e:	4654      	mov	r4, sl
 8013a10:	2000      	movs	r0, #0
 8013a12:	f04f 0c0a 	mov.w	ip, #10
 8013a16:	4621      	mov	r1, r4
 8013a18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013a1c:	3b30      	subs	r3, #48	; 0x30
 8013a1e:	2b09      	cmp	r3, #9
 8013a20:	d94e      	bls.n	8013ac0 <_vfiprintf_r+0x1c4>
 8013a22:	b1b0      	cbz	r0, 8013a52 <_vfiprintf_r+0x156>
 8013a24:	9207      	str	r2, [sp, #28]
 8013a26:	e014      	b.n	8013a52 <_vfiprintf_r+0x156>
 8013a28:	eba0 0308 	sub.w	r3, r0, r8
 8013a2c:	fa09 f303 	lsl.w	r3, r9, r3
 8013a30:	4313      	orrs	r3, r2
 8013a32:	9304      	str	r3, [sp, #16]
 8013a34:	46a2      	mov	sl, r4
 8013a36:	e7d2      	b.n	80139de <_vfiprintf_r+0xe2>
 8013a38:	9b03      	ldr	r3, [sp, #12]
 8013a3a:	1d19      	adds	r1, r3, #4
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	9103      	str	r1, [sp, #12]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	bfbb      	ittet	lt
 8013a44:	425b      	neglt	r3, r3
 8013a46:	f042 0202 	orrlt.w	r2, r2, #2
 8013a4a:	9307      	strge	r3, [sp, #28]
 8013a4c:	9307      	strlt	r3, [sp, #28]
 8013a4e:	bfb8      	it	lt
 8013a50:	9204      	strlt	r2, [sp, #16]
 8013a52:	7823      	ldrb	r3, [r4, #0]
 8013a54:	2b2e      	cmp	r3, #46	; 0x2e
 8013a56:	d10c      	bne.n	8013a72 <_vfiprintf_r+0x176>
 8013a58:	7863      	ldrb	r3, [r4, #1]
 8013a5a:	2b2a      	cmp	r3, #42	; 0x2a
 8013a5c:	d135      	bne.n	8013aca <_vfiprintf_r+0x1ce>
 8013a5e:	9b03      	ldr	r3, [sp, #12]
 8013a60:	1d1a      	adds	r2, r3, #4
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	9203      	str	r2, [sp, #12]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	bfb8      	it	lt
 8013a6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8013a6e:	3402      	adds	r4, #2
 8013a70:	9305      	str	r3, [sp, #20]
 8013a72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013b58 <_vfiprintf_r+0x25c>
 8013a76:	7821      	ldrb	r1, [r4, #0]
 8013a78:	2203      	movs	r2, #3
 8013a7a:	4650      	mov	r0, sl
 8013a7c:	f7ec fbc0 	bl	8000200 <memchr>
 8013a80:	b140      	cbz	r0, 8013a94 <_vfiprintf_r+0x198>
 8013a82:	2340      	movs	r3, #64	; 0x40
 8013a84:	eba0 000a 	sub.w	r0, r0, sl
 8013a88:	fa03 f000 	lsl.w	r0, r3, r0
 8013a8c:	9b04      	ldr	r3, [sp, #16]
 8013a8e:	4303      	orrs	r3, r0
 8013a90:	3401      	adds	r4, #1
 8013a92:	9304      	str	r3, [sp, #16]
 8013a94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a98:	482c      	ldr	r0, [pc, #176]	; (8013b4c <_vfiprintf_r+0x250>)
 8013a9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013a9e:	2206      	movs	r2, #6
 8013aa0:	f7ec fbae 	bl	8000200 <memchr>
 8013aa4:	2800      	cmp	r0, #0
 8013aa6:	d03f      	beq.n	8013b28 <_vfiprintf_r+0x22c>
 8013aa8:	4b29      	ldr	r3, [pc, #164]	; (8013b50 <_vfiprintf_r+0x254>)
 8013aaa:	bb1b      	cbnz	r3, 8013af4 <_vfiprintf_r+0x1f8>
 8013aac:	9b03      	ldr	r3, [sp, #12]
 8013aae:	3307      	adds	r3, #7
 8013ab0:	f023 0307 	bic.w	r3, r3, #7
 8013ab4:	3308      	adds	r3, #8
 8013ab6:	9303      	str	r3, [sp, #12]
 8013ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013aba:	443b      	add	r3, r7
 8013abc:	9309      	str	r3, [sp, #36]	; 0x24
 8013abe:	e767      	b.n	8013990 <_vfiprintf_r+0x94>
 8013ac0:	fb0c 3202 	mla	r2, ip, r2, r3
 8013ac4:	460c      	mov	r4, r1
 8013ac6:	2001      	movs	r0, #1
 8013ac8:	e7a5      	b.n	8013a16 <_vfiprintf_r+0x11a>
 8013aca:	2300      	movs	r3, #0
 8013acc:	3401      	adds	r4, #1
 8013ace:	9305      	str	r3, [sp, #20]
 8013ad0:	4619      	mov	r1, r3
 8013ad2:	f04f 0c0a 	mov.w	ip, #10
 8013ad6:	4620      	mov	r0, r4
 8013ad8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013adc:	3a30      	subs	r2, #48	; 0x30
 8013ade:	2a09      	cmp	r2, #9
 8013ae0:	d903      	bls.n	8013aea <_vfiprintf_r+0x1ee>
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d0c5      	beq.n	8013a72 <_vfiprintf_r+0x176>
 8013ae6:	9105      	str	r1, [sp, #20]
 8013ae8:	e7c3      	b.n	8013a72 <_vfiprintf_r+0x176>
 8013aea:	fb0c 2101 	mla	r1, ip, r1, r2
 8013aee:	4604      	mov	r4, r0
 8013af0:	2301      	movs	r3, #1
 8013af2:	e7f0      	b.n	8013ad6 <_vfiprintf_r+0x1da>
 8013af4:	ab03      	add	r3, sp, #12
 8013af6:	9300      	str	r3, [sp, #0]
 8013af8:	462a      	mov	r2, r5
 8013afa:	4b16      	ldr	r3, [pc, #88]	; (8013b54 <_vfiprintf_r+0x258>)
 8013afc:	a904      	add	r1, sp, #16
 8013afe:	4630      	mov	r0, r6
 8013b00:	f7fd f80a 	bl	8010b18 <_printf_float>
 8013b04:	4607      	mov	r7, r0
 8013b06:	1c78      	adds	r0, r7, #1
 8013b08:	d1d6      	bne.n	8013ab8 <_vfiprintf_r+0x1bc>
 8013b0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013b0c:	07d9      	lsls	r1, r3, #31
 8013b0e:	d405      	bmi.n	8013b1c <_vfiprintf_r+0x220>
 8013b10:	89ab      	ldrh	r3, [r5, #12]
 8013b12:	059a      	lsls	r2, r3, #22
 8013b14:	d402      	bmi.n	8013b1c <_vfiprintf_r+0x220>
 8013b16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013b18:	f7fe ff78 	bl	8012a0c <__retarget_lock_release_recursive>
 8013b1c:	89ab      	ldrh	r3, [r5, #12]
 8013b1e:	065b      	lsls	r3, r3, #25
 8013b20:	f53f af12 	bmi.w	8013948 <_vfiprintf_r+0x4c>
 8013b24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013b26:	e711      	b.n	801394c <_vfiprintf_r+0x50>
 8013b28:	ab03      	add	r3, sp, #12
 8013b2a:	9300      	str	r3, [sp, #0]
 8013b2c:	462a      	mov	r2, r5
 8013b2e:	4b09      	ldr	r3, [pc, #36]	; (8013b54 <_vfiprintf_r+0x258>)
 8013b30:	a904      	add	r1, sp, #16
 8013b32:	4630      	mov	r0, r6
 8013b34:	f7fd fa94 	bl	8011060 <_printf_i>
 8013b38:	e7e4      	b.n	8013b04 <_vfiprintf_r+0x208>
 8013b3a:	bf00      	nop
 8013b3c:	08014ab4 	.word	0x08014ab4
 8013b40:	08014ad4 	.word	0x08014ad4
 8013b44:	08014a94 	.word	0x08014a94
 8013b48:	08014c4c 	.word	0x08014c4c
 8013b4c:	08014c56 	.word	0x08014c56
 8013b50:	08010b19 	.word	0x08010b19
 8013b54:	080138d7 	.word	0x080138d7
 8013b58:	08014c52 	.word	0x08014c52

08013b5c <_scanf_chars>:
 8013b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b60:	4615      	mov	r5, r2
 8013b62:	688a      	ldr	r2, [r1, #8]
 8013b64:	4680      	mov	r8, r0
 8013b66:	460c      	mov	r4, r1
 8013b68:	b932      	cbnz	r2, 8013b78 <_scanf_chars+0x1c>
 8013b6a:	698a      	ldr	r2, [r1, #24]
 8013b6c:	2a00      	cmp	r2, #0
 8013b6e:	bf0c      	ite	eq
 8013b70:	2201      	moveq	r2, #1
 8013b72:	f04f 32ff 	movne.w	r2, #4294967295
 8013b76:	608a      	str	r2, [r1, #8]
 8013b78:	6822      	ldr	r2, [r4, #0]
 8013b7a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8013c0c <_scanf_chars+0xb0>
 8013b7e:	06d1      	lsls	r1, r2, #27
 8013b80:	bf5f      	itttt	pl
 8013b82:	681a      	ldrpl	r2, [r3, #0]
 8013b84:	1d11      	addpl	r1, r2, #4
 8013b86:	6019      	strpl	r1, [r3, #0]
 8013b88:	6816      	ldrpl	r6, [r2, #0]
 8013b8a:	2700      	movs	r7, #0
 8013b8c:	69a0      	ldr	r0, [r4, #24]
 8013b8e:	b188      	cbz	r0, 8013bb4 <_scanf_chars+0x58>
 8013b90:	2801      	cmp	r0, #1
 8013b92:	d107      	bne.n	8013ba4 <_scanf_chars+0x48>
 8013b94:	682a      	ldr	r2, [r5, #0]
 8013b96:	7811      	ldrb	r1, [r2, #0]
 8013b98:	6962      	ldr	r2, [r4, #20]
 8013b9a:	5c52      	ldrb	r2, [r2, r1]
 8013b9c:	b952      	cbnz	r2, 8013bb4 <_scanf_chars+0x58>
 8013b9e:	2f00      	cmp	r7, #0
 8013ba0:	d031      	beq.n	8013c06 <_scanf_chars+0xaa>
 8013ba2:	e022      	b.n	8013bea <_scanf_chars+0x8e>
 8013ba4:	2802      	cmp	r0, #2
 8013ba6:	d120      	bne.n	8013bea <_scanf_chars+0x8e>
 8013ba8:	682b      	ldr	r3, [r5, #0]
 8013baa:	781b      	ldrb	r3, [r3, #0]
 8013bac:	f813 3009 	ldrb.w	r3, [r3, r9]
 8013bb0:	071b      	lsls	r3, r3, #28
 8013bb2:	d41a      	bmi.n	8013bea <_scanf_chars+0x8e>
 8013bb4:	6823      	ldr	r3, [r4, #0]
 8013bb6:	06da      	lsls	r2, r3, #27
 8013bb8:	bf5e      	ittt	pl
 8013bba:	682b      	ldrpl	r3, [r5, #0]
 8013bbc:	781b      	ldrbpl	r3, [r3, #0]
 8013bbe:	f806 3b01 	strbpl.w	r3, [r6], #1
 8013bc2:	682a      	ldr	r2, [r5, #0]
 8013bc4:	686b      	ldr	r3, [r5, #4]
 8013bc6:	3201      	adds	r2, #1
 8013bc8:	602a      	str	r2, [r5, #0]
 8013bca:	68a2      	ldr	r2, [r4, #8]
 8013bcc:	3b01      	subs	r3, #1
 8013bce:	3a01      	subs	r2, #1
 8013bd0:	606b      	str	r3, [r5, #4]
 8013bd2:	3701      	adds	r7, #1
 8013bd4:	60a2      	str	r2, [r4, #8]
 8013bd6:	b142      	cbz	r2, 8013bea <_scanf_chars+0x8e>
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	dcd7      	bgt.n	8013b8c <_scanf_chars+0x30>
 8013bdc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013be0:	4629      	mov	r1, r5
 8013be2:	4640      	mov	r0, r8
 8013be4:	4798      	blx	r3
 8013be6:	2800      	cmp	r0, #0
 8013be8:	d0d0      	beq.n	8013b8c <_scanf_chars+0x30>
 8013bea:	6823      	ldr	r3, [r4, #0]
 8013bec:	f013 0310 	ands.w	r3, r3, #16
 8013bf0:	d105      	bne.n	8013bfe <_scanf_chars+0xa2>
 8013bf2:	68e2      	ldr	r2, [r4, #12]
 8013bf4:	3201      	adds	r2, #1
 8013bf6:	60e2      	str	r2, [r4, #12]
 8013bf8:	69a2      	ldr	r2, [r4, #24]
 8013bfa:	b102      	cbz	r2, 8013bfe <_scanf_chars+0xa2>
 8013bfc:	7033      	strb	r3, [r6, #0]
 8013bfe:	6923      	ldr	r3, [r4, #16]
 8013c00:	443b      	add	r3, r7
 8013c02:	6123      	str	r3, [r4, #16]
 8013c04:	2000      	movs	r0, #0
 8013c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c0a:	bf00      	nop
 8013c0c:	0801491b 	.word	0x0801491b

08013c10 <_scanf_i>:
 8013c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c14:	4698      	mov	r8, r3
 8013c16:	4b76      	ldr	r3, [pc, #472]	; (8013df0 <_scanf_i+0x1e0>)
 8013c18:	460c      	mov	r4, r1
 8013c1a:	4682      	mov	sl, r0
 8013c1c:	4616      	mov	r6, r2
 8013c1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013c22:	b087      	sub	sp, #28
 8013c24:	ab03      	add	r3, sp, #12
 8013c26:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013c2a:	4b72      	ldr	r3, [pc, #456]	; (8013df4 <_scanf_i+0x1e4>)
 8013c2c:	69a1      	ldr	r1, [r4, #24]
 8013c2e:	4a72      	ldr	r2, [pc, #456]	; (8013df8 <_scanf_i+0x1e8>)
 8013c30:	2903      	cmp	r1, #3
 8013c32:	bf18      	it	ne
 8013c34:	461a      	movne	r2, r3
 8013c36:	68a3      	ldr	r3, [r4, #8]
 8013c38:	9201      	str	r2, [sp, #4]
 8013c3a:	1e5a      	subs	r2, r3, #1
 8013c3c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013c40:	bf88      	it	hi
 8013c42:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013c46:	4627      	mov	r7, r4
 8013c48:	bf82      	ittt	hi
 8013c4a:	eb03 0905 	addhi.w	r9, r3, r5
 8013c4e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013c52:	60a3      	strhi	r3, [r4, #8]
 8013c54:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013c58:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8013c5c:	bf98      	it	ls
 8013c5e:	f04f 0900 	movls.w	r9, #0
 8013c62:	6023      	str	r3, [r4, #0]
 8013c64:	463d      	mov	r5, r7
 8013c66:	f04f 0b00 	mov.w	fp, #0
 8013c6a:	6831      	ldr	r1, [r6, #0]
 8013c6c:	ab03      	add	r3, sp, #12
 8013c6e:	7809      	ldrb	r1, [r1, #0]
 8013c70:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013c74:	2202      	movs	r2, #2
 8013c76:	f7ec fac3 	bl	8000200 <memchr>
 8013c7a:	b328      	cbz	r0, 8013cc8 <_scanf_i+0xb8>
 8013c7c:	f1bb 0f01 	cmp.w	fp, #1
 8013c80:	d159      	bne.n	8013d36 <_scanf_i+0x126>
 8013c82:	6862      	ldr	r2, [r4, #4]
 8013c84:	b92a      	cbnz	r2, 8013c92 <_scanf_i+0x82>
 8013c86:	6822      	ldr	r2, [r4, #0]
 8013c88:	2308      	movs	r3, #8
 8013c8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013c8e:	6063      	str	r3, [r4, #4]
 8013c90:	6022      	str	r2, [r4, #0]
 8013c92:	6822      	ldr	r2, [r4, #0]
 8013c94:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8013c98:	6022      	str	r2, [r4, #0]
 8013c9a:	68a2      	ldr	r2, [r4, #8]
 8013c9c:	1e51      	subs	r1, r2, #1
 8013c9e:	60a1      	str	r1, [r4, #8]
 8013ca0:	b192      	cbz	r2, 8013cc8 <_scanf_i+0xb8>
 8013ca2:	6832      	ldr	r2, [r6, #0]
 8013ca4:	1c51      	adds	r1, r2, #1
 8013ca6:	6031      	str	r1, [r6, #0]
 8013ca8:	7812      	ldrb	r2, [r2, #0]
 8013caa:	f805 2b01 	strb.w	r2, [r5], #1
 8013cae:	6872      	ldr	r2, [r6, #4]
 8013cb0:	3a01      	subs	r2, #1
 8013cb2:	2a00      	cmp	r2, #0
 8013cb4:	6072      	str	r2, [r6, #4]
 8013cb6:	dc07      	bgt.n	8013cc8 <_scanf_i+0xb8>
 8013cb8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8013cbc:	4631      	mov	r1, r6
 8013cbe:	4650      	mov	r0, sl
 8013cc0:	4790      	blx	r2
 8013cc2:	2800      	cmp	r0, #0
 8013cc4:	f040 8085 	bne.w	8013dd2 <_scanf_i+0x1c2>
 8013cc8:	f10b 0b01 	add.w	fp, fp, #1
 8013ccc:	f1bb 0f03 	cmp.w	fp, #3
 8013cd0:	d1cb      	bne.n	8013c6a <_scanf_i+0x5a>
 8013cd2:	6863      	ldr	r3, [r4, #4]
 8013cd4:	b90b      	cbnz	r3, 8013cda <_scanf_i+0xca>
 8013cd6:	230a      	movs	r3, #10
 8013cd8:	6063      	str	r3, [r4, #4]
 8013cda:	6863      	ldr	r3, [r4, #4]
 8013cdc:	4947      	ldr	r1, [pc, #284]	; (8013dfc <_scanf_i+0x1ec>)
 8013cde:	6960      	ldr	r0, [r4, #20]
 8013ce0:	1ac9      	subs	r1, r1, r3
 8013ce2:	f000 f89f 	bl	8013e24 <__sccl>
 8013ce6:	f04f 0b00 	mov.w	fp, #0
 8013cea:	68a3      	ldr	r3, [r4, #8]
 8013cec:	6822      	ldr	r2, [r4, #0]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d03d      	beq.n	8013d6e <_scanf_i+0x15e>
 8013cf2:	6831      	ldr	r1, [r6, #0]
 8013cf4:	6960      	ldr	r0, [r4, #20]
 8013cf6:	f891 c000 	ldrb.w	ip, [r1]
 8013cfa:	f810 000c 	ldrb.w	r0, [r0, ip]
 8013cfe:	2800      	cmp	r0, #0
 8013d00:	d035      	beq.n	8013d6e <_scanf_i+0x15e>
 8013d02:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8013d06:	d124      	bne.n	8013d52 <_scanf_i+0x142>
 8013d08:	0510      	lsls	r0, r2, #20
 8013d0a:	d522      	bpl.n	8013d52 <_scanf_i+0x142>
 8013d0c:	f10b 0b01 	add.w	fp, fp, #1
 8013d10:	f1b9 0f00 	cmp.w	r9, #0
 8013d14:	d003      	beq.n	8013d1e <_scanf_i+0x10e>
 8013d16:	3301      	adds	r3, #1
 8013d18:	f109 39ff 	add.w	r9, r9, #4294967295
 8013d1c:	60a3      	str	r3, [r4, #8]
 8013d1e:	6873      	ldr	r3, [r6, #4]
 8013d20:	3b01      	subs	r3, #1
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	6073      	str	r3, [r6, #4]
 8013d26:	dd1b      	ble.n	8013d60 <_scanf_i+0x150>
 8013d28:	6833      	ldr	r3, [r6, #0]
 8013d2a:	3301      	adds	r3, #1
 8013d2c:	6033      	str	r3, [r6, #0]
 8013d2e:	68a3      	ldr	r3, [r4, #8]
 8013d30:	3b01      	subs	r3, #1
 8013d32:	60a3      	str	r3, [r4, #8]
 8013d34:	e7d9      	b.n	8013cea <_scanf_i+0xda>
 8013d36:	f1bb 0f02 	cmp.w	fp, #2
 8013d3a:	d1ae      	bne.n	8013c9a <_scanf_i+0x8a>
 8013d3c:	6822      	ldr	r2, [r4, #0]
 8013d3e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8013d42:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8013d46:	d1bf      	bne.n	8013cc8 <_scanf_i+0xb8>
 8013d48:	2310      	movs	r3, #16
 8013d4a:	6063      	str	r3, [r4, #4]
 8013d4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013d50:	e7a2      	b.n	8013c98 <_scanf_i+0x88>
 8013d52:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8013d56:	6022      	str	r2, [r4, #0]
 8013d58:	780b      	ldrb	r3, [r1, #0]
 8013d5a:	f805 3b01 	strb.w	r3, [r5], #1
 8013d5e:	e7de      	b.n	8013d1e <_scanf_i+0x10e>
 8013d60:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013d64:	4631      	mov	r1, r6
 8013d66:	4650      	mov	r0, sl
 8013d68:	4798      	blx	r3
 8013d6a:	2800      	cmp	r0, #0
 8013d6c:	d0df      	beq.n	8013d2e <_scanf_i+0x11e>
 8013d6e:	6823      	ldr	r3, [r4, #0]
 8013d70:	05db      	lsls	r3, r3, #23
 8013d72:	d50d      	bpl.n	8013d90 <_scanf_i+0x180>
 8013d74:	42bd      	cmp	r5, r7
 8013d76:	d909      	bls.n	8013d8c <_scanf_i+0x17c>
 8013d78:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013d7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013d80:	4632      	mov	r2, r6
 8013d82:	4650      	mov	r0, sl
 8013d84:	4798      	blx	r3
 8013d86:	f105 39ff 	add.w	r9, r5, #4294967295
 8013d8a:	464d      	mov	r5, r9
 8013d8c:	42bd      	cmp	r5, r7
 8013d8e:	d02d      	beq.n	8013dec <_scanf_i+0x1dc>
 8013d90:	6822      	ldr	r2, [r4, #0]
 8013d92:	f012 0210 	ands.w	r2, r2, #16
 8013d96:	d113      	bne.n	8013dc0 <_scanf_i+0x1b0>
 8013d98:	702a      	strb	r2, [r5, #0]
 8013d9a:	6863      	ldr	r3, [r4, #4]
 8013d9c:	9e01      	ldr	r6, [sp, #4]
 8013d9e:	4639      	mov	r1, r7
 8013da0:	4650      	mov	r0, sl
 8013da2:	47b0      	blx	r6
 8013da4:	6821      	ldr	r1, [r4, #0]
 8013da6:	f8d8 3000 	ldr.w	r3, [r8]
 8013daa:	f011 0f20 	tst.w	r1, #32
 8013dae:	d013      	beq.n	8013dd8 <_scanf_i+0x1c8>
 8013db0:	1d1a      	adds	r2, r3, #4
 8013db2:	f8c8 2000 	str.w	r2, [r8]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	6018      	str	r0, [r3, #0]
 8013dba:	68e3      	ldr	r3, [r4, #12]
 8013dbc:	3301      	adds	r3, #1
 8013dbe:	60e3      	str	r3, [r4, #12]
 8013dc0:	1bed      	subs	r5, r5, r7
 8013dc2:	44ab      	add	fp, r5
 8013dc4:	6925      	ldr	r5, [r4, #16]
 8013dc6:	445d      	add	r5, fp
 8013dc8:	6125      	str	r5, [r4, #16]
 8013dca:	2000      	movs	r0, #0
 8013dcc:	b007      	add	sp, #28
 8013dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dd2:	f04f 0b00 	mov.w	fp, #0
 8013dd6:	e7ca      	b.n	8013d6e <_scanf_i+0x15e>
 8013dd8:	1d1a      	adds	r2, r3, #4
 8013dda:	f8c8 2000 	str.w	r2, [r8]
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	f011 0f01 	tst.w	r1, #1
 8013de4:	bf14      	ite	ne
 8013de6:	8018      	strhne	r0, [r3, #0]
 8013de8:	6018      	streq	r0, [r3, #0]
 8013dea:	e7e6      	b.n	8013dba <_scanf_i+0x1aa>
 8013dec:	2001      	movs	r0, #1
 8013dee:	e7ed      	b.n	8013dcc <_scanf_i+0x1bc>
 8013df0:	0801453c 	.word	0x0801453c
 8013df4:	08013f79 	.word	0x08013f79
 8013df8:	08011761 	.word	0x08011761
 8013dfc:	08014c76 	.word	0x08014c76

08013e00 <_read_r>:
 8013e00:	b538      	push	{r3, r4, r5, lr}
 8013e02:	4d07      	ldr	r5, [pc, #28]	; (8013e20 <_read_r+0x20>)
 8013e04:	4604      	mov	r4, r0
 8013e06:	4608      	mov	r0, r1
 8013e08:	4611      	mov	r1, r2
 8013e0a:	2200      	movs	r2, #0
 8013e0c:	602a      	str	r2, [r5, #0]
 8013e0e:	461a      	mov	r2, r3
 8013e10:	f7ef fcdc 	bl	80037cc <_read>
 8013e14:	1c43      	adds	r3, r0, #1
 8013e16:	d102      	bne.n	8013e1e <_read_r+0x1e>
 8013e18:	682b      	ldr	r3, [r5, #0]
 8013e1a:	b103      	cbz	r3, 8013e1e <_read_r+0x1e>
 8013e1c:	6023      	str	r3, [r4, #0]
 8013e1e:	bd38      	pop	{r3, r4, r5, pc}
 8013e20:	20003234 	.word	0x20003234

08013e24 <__sccl>:
 8013e24:	b570      	push	{r4, r5, r6, lr}
 8013e26:	780b      	ldrb	r3, [r1, #0]
 8013e28:	4604      	mov	r4, r0
 8013e2a:	2b5e      	cmp	r3, #94	; 0x5e
 8013e2c:	bf0b      	itete	eq
 8013e2e:	784b      	ldrbeq	r3, [r1, #1]
 8013e30:	1c48      	addne	r0, r1, #1
 8013e32:	1c88      	addeq	r0, r1, #2
 8013e34:	2200      	movne	r2, #0
 8013e36:	bf08      	it	eq
 8013e38:	2201      	moveq	r2, #1
 8013e3a:	1e61      	subs	r1, r4, #1
 8013e3c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8013e40:	f801 2f01 	strb.w	r2, [r1, #1]!
 8013e44:	42a9      	cmp	r1, r5
 8013e46:	d1fb      	bne.n	8013e40 <__sccl+0x1c>
 8013e48:	b90b      	cbnz	r3, 8013e4e <__sccl+0x2a>
 8013e4a:	3801      	subs	r0, #1
 8013e4c:	bd70      	pop	{r4, r5, r6, pc}
 8013e4e:	f082 0201 	eor.w	r2, r2, #1
 8013e52:	54e2      	strb	r2, [r4, r3]
 8013e54:	4605      	mov	r5, r0
 8013e56:	4628      	mov	r0, r5
 8013e58:	f810 1b01 	ldrb.w	r1, [r0], #1
 8013e5c:	292d      	cmp	r1, #45	; 0x2d
 8013e5e:	d006      	beq.n	8013e6e <__sccl+0x4a>
 8013e60:	295d      	cmp	r1, #93	; 0x5d
 8013e62:	d0f3      	beq.n	8013e4c <__sccl+0x28>
 8013e64:	b909      	cbnz	r1, 8013e6a <__sccl+0x46>
 8013e66:	4628      	mov	r0, r5
 8013e68:	e7f0      	b.n	8013e4c <__sccl+0x28>
 8013e6a:	460b      	mov	r3, r1
 8013e6c:	e7f1      	b.n	8013e52 <__sccl+0x2e>
 8013e6e:	786e      	ldrb	r6, [r5, #1]
 8013e70:	2e5d      	cmp	r6, #93	; 0x5d
 8013e72:	d0fa      	beq.n	8013e6a <__sccl+0x46>
 8013e74:	42b3      	cmp	r3, r6
 8013e76:	dcf8      	bgt.n	8013e6a <__sccl+0x46>
 8013e78:	3502      	adds	r5, #2
 8013e7a:	4619      	mov	r1, r3
 8013e7c:	3101      	adds	r1, #1
 8013e7e:	428e      	cmp	r6, r1
 8013e80:	5462      	strb	r2, [r4, r1]
 8013e82:	dcfb      	bgt.n	8013e7c <__sccl+0x58>
 8013e84:	1af1      	subs	r1, r6, r3
 8013e86:	3901      	subs	r1, #1
 8013e88:	1c58      	adds	r0, r3, #1
 8013e8a:	42b3      	cmp	r3, r6
 8013e8c:	bfa8      	it	ge
 8013e8e:	2100      	movge	r1, #0
 8013e90:	1843      	adds	r3, r0, r1
 8013e92:	e7e0      	b.n	8013e56 <__sccl+0x32>

08013e94 <_strtoul_l.constprop.0>:
 8013e94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013e98:	4f36      	ldr	r7, [pc, #216]	; (8013f74 <_strtoul_l.constprop.0+0xe0>)
 8013e9a:	4686      	mov	lr, r0
 8013e9c:	460d      	mov	r5, r1
 8013e9e:	4628      	mov	r0, r5
 8013ea0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013ea4:	5de6      	ldrb	r6, [r4, r7]
 8013ea6:	f016 0608 	ands.w	r6, r6, #8
 8013eaa:	d1f8      	bne.n	8013e9e <_strtoul_l.constprop.0+0xa>
 8013eac:	2c2d      	cmp	r4, #45	; 0x2d
 8013eae:	d12f      	bne.n	8013f10 <_strtoul_l.constprop.0+0x7c>
 8013eb0:	782c      	ldrb	r4, [r5, #0]
 8013eb2:	2601      	movs	r6, #1
 8013eb4:	1c85      	adds	r5, r0, #2
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d057      	beq.n	8013f6a <_strtoul_l.constprop.0+0xd6>
 8013eba:	2b10      	cmp	r3, #16
 8013ebc:	d109      	bne.n	8013ed2 <_strtoul_l.constprop.0+0x3e>
 8013ebe:	2c30      	cmp	r4, #48	; 0x30
 8013ec0:	d107      	bne.n	8013ed2 <_strtoul_l.constprop.0+0x3e>
 8013ec2:	7828      	ldrb	r0, [r5, #0]
 8013ec4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013ec8:	2858      	cmp	r0, #88	; 0x58
 8013eca:	d149      	bne.n	8013f60 <_strtoul_l.constprop.0+0xcc>
 8013ecc:	786c      	ldrb	r4, [r5, #1]
 8013ece:	2310      	movs	r3, #16
 8013ed0:	3502      	adds	r5, #2
 8013ed2:	f04f 38ff 	mov.w	r8, #4294967295
 8013ed6:	2700      	movs	r7, #0
 8013ed8:	fbb8 f8f3 	udiv	r8, r8, r3
 8013edc:	fb03 f908 	mul.w	r9, r3, r8
 8013ee0:	ea6f 0909 	mvn.w	r9, r9
 8013ee4:	4638      	mov	r0, r7
 8013ee6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013eea:	f1bc 0f09 	cmp.w	ip, #9
 8013eee:	d814      	bhi.n	8013f1a <_strtoul_l.constprop.0+0x86>
 8013ef0:	4664      	mov	r4, ip
 8013ef2:	42a3      	cmp	r3, r4
 8013ef4:	dd22      	ble.n	8013f3c <_strtoul_l.constprop.0+0xa8>
 8013ef6:	2f00      	cmp	r7, #0
 8013ef8:	db1d      	blt.n	8013f36 <_strtoul_l.constprop.0+0xa2>
 8013efa:	4580      	cmp	r8, r0
 8013efc:	d31b      	bcc.n	8013f36 <_strtoul_l.constprop.0+0xa2>
 8013efe:	d101      	bne.n	8013f04 <_strtoul_l.constprop.0+0x70>
 8013f00:	45a1      	cmp	r9, r4
 8013f02:	db18      	blt.n	8013f36 <_strtoul_l.constprop.0+0xa2>
 8013f04:	fb00 4003 	mla	r0, r0, r3, r4
 8013f08:	2701      	movs	r7, #1
 8013f0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013f0e:	e7ea      	b.n	8013ee6 <_strtoul_l.constprop.0+0x52>
 8013f10:	2c2b      	cmp	r4, #43	; 0x2b
 8013f12:	bf04      	itt	eq
 8013f14:	782c      	ldrbeq	r4, [r5, #0]
 8013f16:	1c85      	addeq	r5, r0, #2
 8013f18:	e7cd      	b.n	8013eb6 <_strtoul_l.constprop.0+0x22>
 8013f1a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8013f1e:	f1bc 0f19 	cmp.w	ip, #25
 8013f22:	d801      	bhi.n	8013f28 <_strtoul_l.constprop.0+0x94>
 8013f24:	3c37      	subs	r4, #55	; 0x37
 8013f26:	e7e4      	b.n	8013ef2 <_strtoul_l.constprop.0+0x5e>
 8013f28:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013f2c:	f1bc 0f19 	cmp.w	ip, #25
 8013f30:	d804      	bhi.n	8013f3c <_strtoul_l.constprop.0+0xa8>
 8013f32:	3c57      	subs	r4, #87	; 0x57
 8013f34:	e7dd      	b.n	8013ef2 <_strtoul_l.constprop.0+0x5e>
 8013f36:	f04f 37ff 	mov.w	r7, #4294967295
 8013f3a:	e7e6      	b.n	8013f0a <_strtoul_l.constprop.0+0x76>
 8013f3c:	2f00      	cmp	r7, #0
 8013f3e:	da07      	bge.n	8013f50 <_strtoul_l.constprop.0+0xbc>
 8013f40:	2322      	movs	r3, #34	; 0x22
 8013f42:	f8ce 3000 	str.w	r3, [lr]
 8013f46:	f04f 30ff 	mov.w	r0, #4294967295
 8013f4a:	b932      	cbnz	r2, 8013f5a <_strtoul_l.constprop.0+0xc6>
 8013f4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f50:	b106      	cbz	r6, 8013f54 <_strtoul_l.constprop.0+0xc0>
 8013f52:	4240      	negs	r0, r0
 8013f54:	2a00      	cmp	r2, #0
 8013f56:	d0f9      	beq.n	8013f4c <_strtoul_l.constprop.0+0xb8>
 8013f58:	b107      	cbz	r7, 8013f5c <_strtoul_l.constprop.0+0xc8>
 8013f5a:	1e69      	subs	r1, r5, #1
 8013f5c:	6011      	str	r1, [r2, #0]
 8013f5e:	e7f5      	b.n	8013f4c <_strtoul_l.constprop.0+0xb8>
 8013f60:	2430      	movs	r4, #48	; 0x30
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d1b5      	bne.n	8013ed2 <_strtoul_l.constprop.0+0x3e>
 8013f66:	2308      	movs	r3, #8
 8013f68:	e7b3      	b.n	8013ed2 <_strtoul_l.constprop.0+0x3e>
 8013f6a:	2c30      	cmp	r4, #48	; 0x30
 8013f6c:	d0a9      	beq.n	8013ec2 <_strtoul_l.constprop.0+0x2e>
 8013f6e:	230a      	movs	r3, #10
 8013f70:	e7af      	b.n	8013ed2 <_strtoul_l.constprop.0+0x3e>
 8013f72:	bf00      	nop
 8013f74:	0801491b 	.word	0x0801491b

08013f78 <_strtoul_r>:
 8013f78:	f7ff bf8c 	b.w	8013e94 <_strtoul_l.constprop.0>

08013f7c <__submore>:
 8013f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f80:	460c      	mov	r4, r1
 8013f82:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013f84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013f88:	4299      	cmp	r1, r3
 8013f8a:	d11d      	bne.n	8013fc8 <__submore+0x4c>
 8013f8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013f90:	f7fc fcae 	bl	80108f0 <_malloc_r>
 8013f94:	b918      	cbnz	r0, 8013f9e <__submore+0x22>
 8013f96:	f04f 30ff 	mov.w	r0, #4294967295
 8013f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013fa2:	63a3      	str	r3, [r4, #56]	; 0x38
 8013fa4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8013fa8:	6360      	str	r0, [r4, #52]	; 0x34
 8013faa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8013fae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013fb2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8013fb6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013fba:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8013fbe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8013fc2:	6020      	str	r0, [r4, #0]
 8013fc4:	2000      	movs	r0, #0
 8013fc6:	e7e8      	b.n	8013f9a <__submore+0x1e>
 8013fc8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8013fca:	0077      	lsls	r7, r6, #1
 8013fcc:	463a      	mov	r2, r7
 8013fce:	f000 f85d 	bl	801408c <_realloc_r>
 8013fd2:	4605      	mov	r5, r0
 8013fd4:	2800      	cmp	r0, #0
 8013fd6:	d0de      	beq.n	8013f96 <__submore+0x1a>
 8013fd8:	eb00 0806 	add.w	r8, r0, r6
 8013fdc:	4601      	mov	r1, r0
 8013fde:	4632      	mov	r2, r6
 8013fe0:	4640      	mov	r0, r8
 8013fe2:	f7fc fc03 	bl	80107ec <memcpy>
 8013fe6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8013fea:	f8c4 8000 	str.w	r8, [r4]
 8013fee:	e7e9      	b.n	8013fc4 <__submore+0x48>

08013ff0 <_fstat_r>:
 8013ff0:	b538      	push	{r3, r4, r5, lr}
 8013ff2:	4d07      	ldr	r5, [pc, #28]	; (8014010 <_fstat_r+0x20>)
 8013ff4:	2300      	movs	r3, #0
 8013ff6:	4604      	mov	r4, r0
 8013ff8:	4608      	mov	r0, r1
 8013ffa:	4611      	mov	r1, r2
 8013ffc:	602b      	str	r3, [r5, #0]
 8013ffe:	f7ef fc0e 	bl	800381e <_fstat>
 8014002:	1c43      	adds	r3, r0, #1
 8014004:	d102      	bne.n	801400c <_fstat_r+0x1c>
 8014006:	682b      	ldr	r3, [r5, #0]
 8014008:	b103      	cbz	r3, 801400c <_fstat_r+0x1c>
 801400a:	6023      	str	r3, [r4, #0]
 801400c:	bd38      	pop	{r3, r4, r5, pc}
 801400e:	bf00      	nop
 8014010:	20003234 	.word	0x20003234

08014014 <_isatty_r>:
 8014014:	b538      	push	{r3, r4, r5, lr}
 8014016:	4d06      	ldr	r5, [pc, #24]	; (8014030 <_isatty_r+0x1c>)
 8014018:	2300      	movs	r3, #0
 801401a:	4604      	mov	r4, r0
 801401c:	4608      	mov	r0, r1
 801401e:	602b      	str	r3, [r5, #0]
 8014020:	f7ef fc0d 	bl	800383e <_isatty>
 8014024:	1c43      	adds	r3, r0, #1
 8014026:	d102      	bne.n	801402e <_isatty_r+0x1a>
 8014028:	682b      	ldr	r3, [r5, #0]
 801402a:	b103      	cbz	r3, 801402e <_isatty_r+0x1a>
 801402c:	6023      	str	r3, [r4, #0]
 801402e:	bd38      	pop	{r3, r4, r5, pc}
 8014030:	20003234 	.word	0x20003234

08014034 <__ascii_mbtowc>:
 8014034:	b082      	sub	sp, #8
 8014036:	b901      	cbnz	r1, 801403a <__ascii_mbtowc+0x6>
 8014038:	a901      	add	r1, sp, #4
 801403a:	b142      	cbz	r2, 801404e <__ascii_mbtowc+0x1a>
 801403c:	b14b      	cbz	r3, 8014052 <__ascii_mbtowc+0x1e>
 801403e:	7813      	ldrb	r3, [r2, #0]
 8014040:	600b      	str	r3, [r1, #0]
 8014042:	7812      	ldrb	r2, [r2, #0]
 8014044:	1e10      	subs	r0, r2, #0
 8014046:	bf18      	it	ne
 8014048:	2001      	movne	r0, #1
 801404a:	b002      	add	sp, #8
 801404c:	4770      	bx	lr
 801404e:	4610      	mov	r0, r2
 8014050:	e7fb      	b.n	801404a <__ascii_mbtowc+0x16>
 8014052:	f06f 0001 	mvn.w	r0, #1
 8014056:	e7f8      	b.n	801404a <__ascii_mbtowc+0x16>

08014058 <memmove>:
 8014058:	4288      	cmp	r0, r1
 801405a:	b510      	push	{r4, lr}
 801405c:	eb01 0402 	add.w	r4, r1, r2
 8014060:	d902      	bls.n	8014068 <memmove+0x10>
 8014062:	4284      	cmp	r4, r0
 8014064:	4623      	mov	r3, r4
 8014066:	d807      	bhi.n	8014078 <memmove+0x20>
 8014068:	1e43      	subs	r3, r0, #1
 801406a:	42a1      	cmp	r1, r4
 801406c:	d008      	beq.n	8014080 <memmove+0x28>
 801406e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014072:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014076:	e7f8      	b.n	801406a <memmove+0x12>
 8014078:	4402      	add	r2, r0
 801407a:	4601      	mov	r1, r0
 801407c:	428a      	cmp	r2, r1
 801407e:	d100      	bne.n	8014082 <memmove+0x2a>
 8014080:	bd10      	pop	{r4, pc}
 8014082:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014086:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801408a:	e7f7      	b.n	801407c <memmove+0x24>

0801408c <_realloc_r>:
 801408c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014090:	4680      	mov	r8, r0
 8014092:	4614      	mov	r4, r2
 8014094:	460e      	mov	r6, r1
 8014096:	b921      	cbnz	r1, 80140a2 <_realloc_r+0x16>
 8014098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801409c:	4611      	mov	r1, r2
 801409e:	f7fc bc27 	b.w	80108f0 <_malloc_r>
 80140a2:	b92a      	cbnz	r2, 80140b0 <_realloc_r+0x24>
 80140a4:	f7fc fbb8 	bl	8010818 <_free_r>
 80140a8:	4625      	mov	r5, r4
 80140aa:	4628      	mov	r0, r5
 80140ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140b0:	f000 f828 	bl	8014104 <_malloc_usable_size_r>
 80140b4:	4284      	cmp	r4, r0
 80140b6:	4607      	mov	r7, r0
 80140b8:	d802      	bhi.n	80140c0 <_realloc_r+0x34>
 80140ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80140be:	d812      	bhi.n	80140e6 <_realloc_r+0x5a>
 80140c0:	4621      	mov	r1, r4
 80140c2:	4640      	mov	r0, r8
 80140c4:	f7fc fc14 	bl	80108f0 <_malloc_r>
 80140c8:	4605      	mov	r5, r0
 80140ca:	2800      	cmp	r0, #0
 80140cc:	d0ed      	beq.n	80140aa <_realloc_r+0x1e>
 80140ce:	42bc      	cmp	r4, r7
 80140d0:	4622      	mov	r2, r4
 80140d2:	4631      	mov	r1, r6
 80140d4:	bf28      	it	cs
 80140d6:	463a      	movcs	r2, r7
 80140d8:	f7fc fb88 	bl	80107ec <memcpy>
 80140dc:	4631      	mov	r1, r6
 80140de:	4640      	mov	r0, r8
 80140e0:	f7fc fb9a 	bl	8010818 <_free_r>
 80140e4:	e7e1      	b.n	80140aa <_realloc_r+0x1e>
 80140e6:	4635      	mov	r5, r6
 80140e8:	e7df      	b.n	80140aa <_realloc_r+0x1e>

080140ea <__ascii_wctomb>:
 80140ea:	b149      	cbz	r1, 8014100 <__ascii_wctomb+0x16>
 80140ec:	2aff      	cmp	r2, #255	; 0xff
 80140ee:	bf85      	ittet	hi
 80140f0:	238a      	movhi	r3, #138	; 0x8a
 80140f2:	6003      	strhi	r3, [r0, #0]
 80140f4:	700a      	strbls	r2, [r1, #0]
 80140f6:	f04f 30ff 	movhi.w	r0, #4294967295
 80140fa:	bf98      	it	ls
 80140fc:	2001      	movls	r0, #1
 80140fe:	4770      	bx	lr
 8014100:	4608      	mov	r0, r1
 8014102:	4770      	bx	lr

08014104 <_malloc_usable_size_r>:
 8014104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014108:	1f18      	subs	r0, r3, #4
 801410a:	2b00      	cmp	r3, #0
 801410c:	bfbc      	itt	lt
 801410e:	580b      	ldrlt	r3, [r1, r0]
 8014110:	18c0      	addlt	r0, r0, r3
 8014112:	4770      	bx	lr

08014114 <_init>:
 8014114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014116:	bf00      	nop
 8014118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801411a:	bc08      	pop	{r3}
 801411c:	469e      	mov	lr, r3
 801411e:	4770      	bx	lr

08014120 <_fini>:
 8014120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014122:	bf00      	nop
 8014124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014126:	bc08      	pop	{r3}
 8014128:	469e      	mov	lr, r3
 801412a:	4770      	bx	lr
